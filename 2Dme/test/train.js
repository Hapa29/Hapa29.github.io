
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = 'train.data';
    var REMOTE_PACKAGE_NAME = (Module['filePackagePrefixURL'] || '') + 'train.data';
    var REMOTE_PACKAGE_SIZE = 1142193;
    var PACKAGE_UUID = 'd360be09-70f5-408e-b45f-a568d6a3adef';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'data', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 894089, 0, 0).open('GET', '/data/cascade1');
    new DataRequest(894089, 1142193, 0, 0).open('GET', '/data/000.pgm');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/data/cascade1"].onload();
          DataRequest.prototype.requests["/data/000.pgm"].onload();
          Module['removeRunDependency']('datafile_train.data');

    };
    Module['addRunDependency']('datafile_train.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
  _emscripten_replace_memory(HEAP8, HEAP16, HEAP32, HEAPU8, HEAPU16, HEAPU32, HEAPF32, HEAPF64);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(15851);
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a161() } });
  

var memoryInitializer = "train.html.mem";




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch() {
      var thrown = ___cxa_last_thrown_exception;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var header = thrown - ___cxa_exception_header_size;
      var throwntype = HEAP32[((header)>>2)];
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return Math.floor(Math.random()*256); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _pthread_mutex_lock() {}


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getchar() {
      // int getchar(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getchar.html
      return _fgetc(HEAP32[((_stdin)>>2)]);
    }

  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)>>0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)>>0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var quarter = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
            if (format[formatIndex] == 'h') {
              quarter = true;
              formatIndex++;
            }
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          var base = 10;
          switch (type) {
            case 'X': case 'x':
              base = 16;
            case 'd': case 'u': case 'i':
              if (quarter) {
                HEAP8[((argPtr)>>0)]=parseInt(text, base);
              } else if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, base);
              } else if (longLong) {
                (tempI64 = [parseInt(text, base)>>>0,(tempDouble=parseInt(text, base),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, base);
              }
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))>>0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_guard_release() {}


  function _uselocale(locale) {
      return 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  var _BDtoILow=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          var ret = new Date().getTimezoneOffset();
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          var minutes = ret % 60;
          ret = (100*(ret - minutes)/60) + minutes;
          // add sign and adjust length to ?hhmm
          if (ret >= 0) {
            ret = '' + ret;
            while (ret.length < 4) ret = '0' + ret;
            return '+' + ret;
          } else {
            ret = '' + ret;
            ret = ret.substr(1);
            while (ret.length < 4) ret = '0' + ret;
            return '-' + ret;
          }
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          try {
            // Date strings typically end in (PDT) or such.
            return new Date().toString().split('(').slice(-1)[0].split(')')[0];
          } catch(e) {
            return ''; // may not work in all browsers
          }
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  function _getc() {
  return _fgetc.apply(null, arguments)
  }

  var _sqrt=Math_sqrt;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          ctx = GL.getContext(contextHandle).GLctx;
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  function _free() {
  }
  Module["_free"] = _free;function _freelocale(locale) {
      _free(locale);
    }

   
  Module["_memmove"] = _memmove;

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  var _atan2=Math_atan2;

  var _exp=Math_exp;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);




   
  Module["_emscripten_replace_memory"] = _emscripten_replace_memory;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_diiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_diiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_diiiiid=env.invoke_diiiiid;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _exp=env._exp;
  var _getchar=env._getchar;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _pthread_key_create=env._pthread_key_create;
  var _fread=env._fread;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _atan2=env._atan2;
  var _open=env._open;
  var _vfprintf=env._vfprintf;
  var _ungetc=env._ungetc;
  var _catopen=env._catopen;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _fflush=env._fflush;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _strftime_l=env._strftime_l;
  var _fscanf=env._fscanf;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _uselocale=env._uselocale;
  var _catgets=env._catgets;
  var _newlocale=env._newlocale;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _freelocale=env._freelocale;
  var __reallyNegative=env.__reallyNegative;
  var _close=env._close;
  var _strftime=env._strftime;
  var __arraySum=env.__arraySum;
  var __formatString=env.__formatString;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _fprintf=env._fprintf;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _sqrtf=env._sqrtf;
  var _getc=env._getc;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var _copysign=env._copysign;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var __scanString=env.__scanString;
  var _sysconf=env._sysconf;
  var __getFloat=env.__getFloat;
  var _copysignl=env._copysignl;
  var _abort=env._abort;
  var _catclose=env._catclose;
  var _fwrite=env._fwrite;
  var ___cxa_throw=env.___cxa_throw;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _strerror=env._strerror;
  var _fgets=env._fgets;
  var _atexit=env._atexit;
  var _sqrt=env._sqrt;
  var _fopen=env._fopen;
  var _time=env._time;
  var _read=env._read;
  var _fmodl=env._fmodl;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0, $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0, $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0, $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us323$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre319$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1003 = 0, $1004 = 0, $1008 = 0, $1010 = 0, $1013 = 0, $1017 = 0, $1018 = 0, $102 = 0, $1022 = 0, $1024 = 0, $1027 = 0, $103 = 0, $1031 = 0, $1032 = 0, $1036 = 0.0, $1037 = 0.0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $11 = 0, $12 = 0, $124 = 0, $125 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $147 = 0, $15 = 0, $150 = 0, $158 = 0, $159 = 0, $163 = 0, $165 = 0, $167 = 0, $170 = 0, $172 = 0, $179 = 0, $181 = 0, $188 = 0, $19 = 0, $190 = 0.0, $194 = 0.0, $198 = 0, $199 = 0, $2 = 0, $206 = 0, $207 = 0, $21 = 0, $210 = 0, $218 = 0, $22 = 0, $225 = 0, $226 = 0, $229 = 0, $232 = 0, $239 = 0, $24 = 0, $249 = 0, $25 = 0, $252 = 0, $254 = 0, $257 = 0, $258 = 0, $269 = 0, $27 = 0, $274 = 0, $276 = 0, $277 = 0, $279 = 0, $284 = 0, $285 = 0, $286 = 0, $3 = 0, $30 = 0, $302 = 0, $308 = 0, $31 = 0, $311 = 0, $312 = 0, $317 = 0, $321 = 0, $325 = 0, $335 = 0, $336 = 0, $338 = 0, $343 = 0, $345 = 0, $346 = 0, $350 = 0, $353 = 0, $355 = 0, $36 = 0, $361 = 0, $365 = 0, $369 = 0.0, $374 = 0, $378 = 0, $38 = 0, $385 = 0, $389 = 0, $39 = 0, $392 = 0, $393 = 0, $397 = 0, $4 = 0, $401 = 0, $405 = 0, $408 = 0.0, $409 = 0, $412 = 0, $414 = 0, $417 = 0, $432 = 0, $435 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $45 = 0, $457 = 0, $46 = 0, $469 = 0, $472 = 0, $473 = 0, $479 = 0, $488 = 0, $494 = 0, $5 = 0, $50 = 0, $503 = 0, $509 = 0, $516 = 0, $518 = 0, $524 = 0, $542 = 0, $543 = 0, $545 = 0, $546 = 0, $55 = 0, $550 = 0, $553 = 0, $557 = 0, $559 = 0, $561 = 0, $563 = 0, $568 = 0, $571 = 0, $575 = 0, $58 = 0, $580 = 0, $582 = 0, $583 = 0, $59 = 0, $591 = 0, $592 = 0, $595 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $605 = 0, $607 = 0, $611 = 0, $616 = 0, $618 = 0, $619 = 0, $620 = 0, $621 = 0, $640 = 0, $642 = 0, $645 = 0, $649 = 0, $65 = 0, $650 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $681 = 0, $685 = 0, $686 = 0, $689 = 0, $694 = 0, $696 = 0, $7 = 0, $703 = 0, $704 = 0, $705 = 0, $708 = 0, $709 = 0, $710 = 0, $717 = 0, $727 = 0, $730 = 0, $732 = 0, $734 = 0, $736 = 0, $741 = 0, $742 = 0, $745 = 0, $747 = 0, $749 = 0, $751 = 0, $765 = 0, $770 = 0, $779 = 0, $780 = 0, $784 = 0, $787 = 0, $790 = 0, $791 = 0, $793 = 0, $797 = 0, $8 = 0, $801 = 0, $802 = 0, $803 = 0, $819 = 0, $825 = 0, $835 = 0, $840 = 0, $841 = 0, $843 = 0, $844 = 0, $848 = 0, $85 = 0, $851 = 0, $855 = 0, $858 = 0, $863 = 0, $868 = 0, $879 = 0, $888 = 0, $89 = 0, $893 = 0, $9 = 0, $900 = 0, $905 = 0, $916 = 0, $918 = 0, $92 = 0, $921 = 0, $931 = 0, $936 = 0, $940 = 0, $944 = 0, $946 = 0, $948 = 0, $95 = 0, $950 = 0, $951 = 0, $955 = 0, $958 = 0, $962 = 0, $965 = 0, $969 = 0, $972 = 0, $976 = 0, $981 = 0, $983 = 0, $985 = 0, $986 = 0, $989 = 0, $993 = 0, $994 = 0, $998 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0, $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigittmp = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0, $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0, $439$looptemp = 0, $801$looptemp = 0, $284$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 $big$i = sp + 16 | 0;
 $e2$i = sp;
 $buf$i = sp + 832 | 0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816 | 0;
 $pad$i = sp + 520 | 0;
 $buf = sp + 776 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 828 | 0;
 $1 = ($f | 0) != 0;
 $2 = $buf + 40 | 0;
 $3 = $2;
 $4 = $buf + 39 | 0;
 $5 = $wc + 4 | 0;
 $6 = $ebuf0$i + 12 | 0;
 $7 = $ebuf0$i + 11 | 0;
 $8 = $6;
 $9 = $8 - $0 | 0;
 $10 = -2 - $0 | 0;
 $11 = $8 + 2 | 0;
 $12 = $big$i + 288 | 0;
 $13 = $buf$i + 9 | 0;
 $14 = $13;
 $15 = $buf$i + 8 | 0;
 $1045 = 0;
 $1046 = 0;
 $22 = $fmt;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  do {
   if (($cnt$0 | 0) > -1) {
    if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
     $19 = ___errno_location() | 0;
     HEAP32[$19 >> 2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $cnt$1 = $l$0 + $cnt$0 | 0;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while (0);
  $21 = HEAP8[$22 >> 0] | 0;
  if ($21 << 24 >> 24 == 0) {
   label = 344;
   break;
  } else {
   $1047 = $21;
   $25 = $22;
  }
  while (1) {
   if ($1047 << 24 >> 24 == 0) {
    $$lcssa92 = $25;
    $z$0$lcssa = $25;
    break;
   } else if ($1047 << 24 >> 24 == 37) {
    $27 = $25;
    $z$093 = $25;
    label = 9;
    break;
   }
   $24 = $25 + 1 | 0;
   $1047 = HEAP8[$24 >> 0] | 0;
   $25 = $24;
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0;
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$lcssa92 = $27;
      $z$0$lcssa = $z$093;
      break L12;
     }
     $30 = $z$093 + 1 | 0;
     $31 = $27 + 2 | 0;
     if ((HEAP8[$31 >> 0] | 0) == 37) {
      $27 = $31;
      $z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;
      $z$0$lcssa = $30;
      break;
     }
    }
   }
  } while (0);
  $36 = $z$0$lcssa - $22 | 0;
  if ($1) {
   ___fwritex($22, $36, $f) | 0;
  }
  if (($z$0$lcssa | 0) != ($22 | 0)) {
   $22 = $$lcssa92;
   $cnt$0 = $cnt$1;
   $l$0 = $36;
   continue;
  }
  $38 = $$lcssa92 + 1 | 0;
  $39 = HEAP8[$38 >> 0] | 0;
  $isdigittmp = ($39 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   if ((HEAP8[$$lcssa92 + 2 >> 0] | 0) == 36) {
    $44 = $$lcssa92 + 3 | 0;
    $46 = HEAP8[$44 >> 0] | 0;
    $argpos$0 = $isdigittmp;
    $l10n$1 = 1;
    $storemerge = $44;
   } else {
    $46 = $39;
    $argpos$0 = -1;
    $l10n$1 = $l10n$0;
    $storemerge = $38;
   }
  } else {
   $46 = $39;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  L25 : do {
   if (($45 + -32 | 0) >>> 0 < 32) {
    $50 = $45;
    $55 = $46;
    $fl$0104 = 0;
    $storemerge7103 = $storemerge;
    while (1) {
     if ((1 << $50 + -32 & 75913 | 0) == 0) {
      $65 = $55;
      $fl$0100 = $fl$0104;
      $storemerge798 = $storemerge7103;
      break L25;
     }
     $58 = 1 << ($55 << 24 >> 24) + -32 | $fl$0104;
     $59 = $storemerge7103 + 1 | 0;
     $60 = HEAP8[$59 >> 0] | 0;
     $50 = $60 << 24 >> 24;
     if (!(($50 + -32 | 0) >>> 0 < 32)) {
      $65 = $60;
      $fl$0100 = $58;
      $storemerge798 = $59;
      break;
     } else {
      $55 = $60;
      $fl$0104 = $58;
      $storemerge7103 = $59;
     }
    }
   } else {
    $65 = $46;
    $fl$0100 = 0;
    $storemerge798 = $storemerge;
   }
  } while (0);
  do {
   if ($65 << 24 >> 24 == 42) {
    $66 = $storemerge798 + 1 | 0;
    $isdigittmp10 = (HEAP8[$66 >> 0] | 0) + -48 | 0;
    if ($isdigittmp10 >>> 0 < 10) {
     if ((HEAP8[$storemerge798 + 2 >> 0] | 0) == 36) {
      HEAP32[$nl_type + ($isdigittmp10 << 2) >> 2] = 10;
      $l10n$2 = 1;
      $storemerge12 = $storemerge798 + 3 | 0;
      $w$0 = HEAP32[$nl_arg + ((HEAP8[$66 >> 0] | 0) + -48 << 3) >> 2] | 0;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label | 0) == 24) {
     label = 0;
     if (($l10n$1 | 0) != 0) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!$1) {
      $100 = $66;
      $fl$1 = $fl$0100;
      $l10n$3 = 0;
      $w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap >> 2] | 0;
     $85 = HEAP32[$arglist_current >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current + 4;
     $l10n$2 = 0;
     $storemerge12 = $66;
     $w$0 = $85;
    }
    if (($w$0 | 0) < 0) {
     $100 = $storemerge12;
     $fl$1 = $fl$0100 | 8192;
     $l10n$3 = $l10n$2;
     $w$1 = 0 - $w$0 | 0;
    } else {
     $100 = $storemerge12;
     $fl$1 = $fl$0100;
     $l10n$3 = $l10n$2;
     $w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    if (($89 + -48 | 0) >>> 0 < 10) {
     $92 = $89;
     $95 = $storemerge798;
     $i$03$i = 0;
     do {
      $i$03$i = $92 + -48 + ($i$03$i * 10 | 0) | 0;
      $95 = $95 + 1 | 0;
      $92 = HEAP8[$95 >> 0] | 0;
     } while (($92 + -48 | 0) >>> 0 < 10);
     if (($i$03$i | 0) < 0) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $95;
      $fl$1 = $fl$0100;
      $l10n$3 = $l10n$1;
      $w$1 = $i$03$i;
     }
    } else {
     $100 = $storemerge798;
     $fl$1 = $fl$0100;
     $l10n$3 = $l10n$1;
     $w$1 = 0;
    }
   }
  } while (0);
  L46 : do {
   if ((HEAP8[$100 >> 0] | 0) == 46) {
    $102 = $100 + 1 | 0;
    $103 = HEAP8[$102 >> 0] | 0;
    if (!($103 << 24 >> 24 == 42)) {
     $125 = $103 << 24 >> 24;
     if (($125 + -48 | 0) >>> 0 < 10) {
      $128 = $125;
      $131 = $102;
      $i$03$i22 = 0;
     } else {
      $1048 = $102;
      $p$0 = 0;
      break;
     }
     while (1) {
      $129 = $128 + -48 + ($i$03$i22 * 10 | 0) | 0;
      $130 = $131 + 1 | 0;
      $128 = HEAP8[$130 >> 0] | 0;
      if (!(($128 + -48 | 0) >>> 0 < 10)) {
       $1048 = $130;
       $p$0 = $129;
       break L46;
      } else {
       $131 = $130;
       $i$03$i22 = $129;
      }
     }
    }
    $105 = $100 + 2 | 0;
    $isdigittmp8 = (HEAP8[$105 >> 0] | 0) + -48 | 0;
    if ($isdigittmp8 >>> 0 < 10) {
     if ((HEAP8[$100 + 3 >> 0] | 0) == 36) {
      HEAP32[$nl_type + ($isdigittmp8 << 2) >> 2] = 10;
      $1048 = $100 + 4 | 0;
      $p$0 = HEAP32[$nl_arg + ((HEAP8[$105 >> 0] | 0) + -48 << 3) >> 2] | 0;
      break;
     }
    }
    if (($l10n$3 | 0) != 0) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap >> 2] | 0;
     $124 = HEAP32[$arglist_current2 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current2 + 4;
     $1048 = $105;
     $p$0 = $124;
    } else {
     $1048 = $105;
     $p$0 = 0;
    }
   } else {
    $1048 = $100;
    $p$0 = -1;
   }
  } while (0);
  $135 = $1048;
  $st$0 = 0;
  while (1) {
   $134 = HEAP8[$135 >> 0] | 0;
   $137 = ($134 << 24 >> 24) + -65 | 0;
   if ($137 >>> 0 > 57) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = $135 + 1 | 0;
   $141 = HEAP8[15176 + ($st$0 * 58 | 0) + $137 >> 0] | 0;
   $142 = $141 & 255;
   if (($142 + -1 | 0) >>> 0 < 8) {
    $135 = $139;
    $st$0 = $142;
   } else {
    break;
   }
  }
  if ($141 << 24 >> 24 == 0) {
   $$0 = -1;
   label = 362;
   break;
  }
  $147 = ($argpos$0 | 0) > -1;
  L65 : do {
   if ($141 << 24 >> 24 == 19) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;
     $1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $142;
     $150 = $nl_arg + ($argpos$0 << 3) | 0;
     $1049 = HEAP32[$150 + 4 >> 2] | 0;
     $1050 = HEAP32[$150 >> 2] | 0;
     label = 63;
     break;
    }
    if (!$1) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    if (($141 & 255) > 20) {
     $199 = $134;
     $207 = $1046;
     $229 = $1045;
    } else {
     do {
      switch ($142 | 0) {
      case 15:
       {
        $arglist_current23 = HEAP32[$ap >> 2] | 0;
        $181 = HEAP32[$arglist_current23 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current23 + 4;
        $1051 = $181 << 24 >> 24;
        $1052 = ((($181 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
        label = 64;
        break L65;
        break;
       }
      case 16:
       {
        $arglist_current26 = HEAP32[$ap >> 2] | 0;
        $188 = HEAP32[$arglist_current26 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current26 + 4;
        $1051 = $188 & 255;
        $1052 = 0;
        label = 64;
        break L65;
        break;
       }
      case 9:
       {
        $arglist_current5 = HEAP32[$ap >> 2] | 0;
        $158 = HEAP32[$arglist_current5 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current5 + 4;
        $1051 = $158;
        $1052 = $1045;
        label = 64;
        break L65;
        break;
       }
      case 10:
       {
        $arglist_current8 = HEAP32[$ap >> 2] | 0;
        $159 = HEAP32[$arglist_current8 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current8 + 4;
        $1051 = $159;
        $1052 = (($159 | 0) < 0) << 31 >> 31;
        label = 64;
        break L65;
        break;
       }
      case 11:
       {
        $arglist_current11 = HEAP32[$ap >> 2] | 0;
        $163 = HEAP32[$arglist_current11 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current11 + 4;
        $1051 = $163;
        $1052 = 0;
        label = 64;
        break L65;
        break;
       }
      case 12:
       {
        $arglist_current14 = HEAP32[$ap >> 2] | 0;
        $165 = $arglist_current14;
        $167 = HEAP32[$165 >> 2] | 0;
        $170 = HEAP32[$165 + 4 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current14 + 8;
        $1051 = $167;
        $1052 = $170;
        label = 64;
        break L65;
        break;
       }
      case 13:
       {
        $arglist_current17 = HEAP32[$ap >> 2] | 0;
        $172 = HEAP32[$arglist_current17 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current17 + 4;
        $1051 = $172 << 16 >> 16;
        $1052 = ((($172 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
        label = 64;
        break L65;
        break;
       }
      case 14:
       {
        $arglist_current20 = HEAP32[$ap >> 2] | 0;
        $179 = HEAP32[$arglist_current20 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current20 + 4;
        $1051 = $179 & 65535;
        $1052 = 0;
        label = 64;
        break L65;
        break;
       }
      case 17:
       {
        $arglist_current29 = HEAP32[$ap >> 2] | 0;
        HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current29 >> 2];
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current29 + 4 >> 2];
        $190 = +HEAPF64[tempDoublePtr >> 3];
        HEAP32[$ap >> 2] = $arglist_current29 + 8;
        HEAPF64[tempDoublePtr >> 3] = $190;
        $1051 = HEAP32[tempDoublePtr >> 2] | 0;
        $1052 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        label = 64;
        break L65;
        break;
       }
      case 18:
       {
        $arglist_current32 = HEAP32[$ap >> 2] | 0;
        HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current32 >> 2];
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current32 + 4 >> 2];
        $194 = +HEAPF64[tempDoublePtr >> 3];
        HEAP32[$ap >> 2] = $arglist_current32 + 8;
        HEAPF64[tempDoublePtr >> 3] = $194;
        $1049 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $1050 = HEAP32[tempDoublePtr >> 2] | 0;
        label = 63;
        break L65;
        break;
       }
      default:
       {
        $1051 = $1046;
        $1052 = $1045;
        label = 64;
        break L65;
       }
      }
     } while (0);
    }
   }
  } while (0);
  if ((label | 0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;
    $1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;
    $1046 = $1050;
    $22 = $139;
    $cnt$0 = $cnt$1;
    $l$0 = $36;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label | 0) == 64) {
   label = 0;
   $199 = HEAP8[$135 >> 0] | 0;
   $207 = $1051;
   $229 = $1052;
  }
  $198 = $199 << 24 >> 24;
  if (($st$0 | 0) == 0) {
   $t$0 = $198;
  } else {
   $t$0 = ($198 & 15 | 0) == 3 ? $198 & -33 : $198;
  }
  $206 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $206;
  L92 : do {
   switch ($t$0 | 0) {
   case 83:
    {
     if (($p$0 | 0) == 0) {
      $1057 = $207;
      $1058 = $207;
      $i$0166 = 0;
      label = 110;
     } else {
      $1055 = $207;
      $1056 = $207;
      $p$4296 = $p$0;
      label = 104;
     }
     break;
    }
   case 112:
    {
     $fl$3 = $fl$1$ | 8;
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
     $t$1 = 120;
     label = 77;
     break;
    }
   case 110:
    {
     switch ($st$0 | 0) {
     case 2:
      {
       $210 = $207;
       HEAP32[$210 >> 2] = $cnt$1;
       HEAP32[$210 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $1045 = $229;
       $1046 = $207;
       $22 = $139;
       $cnt$0 = $cnt$1;
       $l$0 = $36;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[$207 >> 2] = $cnt$1;
       $1045 = $229;
       $1046 = $207;
       $22 = $139;
       $cnt$0 = $cnt$1;
       $l$0 = $36;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 7:
      {
       $218 = $207;
       HEAP32[$218 >> 2] = $cnt$1;
       HEAP32[$218 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $1045 = $229;
       $1046 = $207;
       $22 = $139;
       $cnt$0 = $cnt$1;
       $l$0 = $36;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[$207 >> 2] = $cnt$1;
       $1045 = $229;
       $1046 = $207;
       $22 = $139;
       $cnt$0 = $cnt$1;
       $l$0 = $36;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 0:
      {
       HEAP32[$207 >> 2] = $cnt$1;
       $1045 = $229;
       $1046 = $207;
       $22 = $139;
       $cnt$0 = $cnt$1;
       $l$0 = $36;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[$207 >> 1] = $cnt$1;
       $1045 = $229;
       $1046 = $207;
       $22 = $139;
       $cnt$0 = $cnt$1;
       $l$0 = $36;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[$207 >> 0] = $cnt$1;
       $1045 = $229;
       $1046 = $207;
       $22 = $139;
       $cnt$0 = $cnt$1;
       $l$0 = $36;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     default:
      {
       $1045 = $229;
       $1046 = $207;
       $22 = $139;
       $cnt$0 = $cnt$1;
       $l$0 = $36;
       $l10n$0 = $l10n$3;
       continue L1;
      }
     }
     break;
    }
   case 99:
    {
     HEAP8[$4 >> 0] = $207;
     $1053 = $229;
     $1054 = $207;
     $a$2 = $4;
     $fl$6 = $206;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 15640;
     $z$2 = $2;
     break;
    }
   case 109:
    {
     $321 = ___errno_location() | 0;
     $a$1 = _strerror(HEAP32[$321 >> 2] | 0) | 0;
     label = 99;
     break;
    }
   case 111:
    {
     $249 = $207;
     $252 = ($249 | 0) == 0 & ($229 | 0) == 0;
     if ($252) {
      $$0$lcssa$i43 = $2;
     } else {
      $$03$i40 = $2;
      $254 = $249;
      $258 = $229;
      while (1) {
       $257 = $$03$i40 + -1 | 0;
       HEAP8[$257 >> 0] = $254 & 7 | 48;
       $254 = _bitshift64Lshr($254 | 0, $258 | 0, 3) | 0;
       $258 = tempRet0;
       if (($254 | 0) == 0 & ($258 | 0) == 0) {
        $$0$lcssa$i43 = $257;
        break;
       } else {
        $$03$i40 = $257;
       }
      }
     }
     if (($fl$1$ & 8 | 0) == 0) {
      $308 = $207;
      $311 = $229;
      $a$0 = $$0$lcssa$i43;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = 0;
      $prefix$1 = 15640;
      label = 94;
     } else {
      $308 = $207;
      $311 = $229;
      $a$0 = $$0$lcssa$i43;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = $252 & 1 ^ 1;
      $prefix$1 = $252 ? 15640 : 15645 | 0;
      label = 94;
     }
     break;
    }
   case 117:
    {
     $277 = $207;
     $279 = $229;
     $pl$0 = 0;
     $prefix$0 = 15640;
     label = 89;
     break;
    }
   case 115:
    {
     $a$1 = ($207 | 0) == 0 ? 15656 : $207;
     label = 99;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $fl$1$;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 77;
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = $207;
     HEAP32[$5 >> 2] = 0;
     $1055 = $wc;
     $1056 = $wc;
     $p$4296 = -1;
     label = 104;
     break;
    }
   case 105:
   case 100:
    {
     if (($229 | 0) < 0) {
      $269 = _i64Subtract(0, 0, $207 | 0, $229 | 0) | 0;
      $277 = $269;
      $279 = tempRet0;
      $pl$0 = 1;
      $prefix$0 = 15640;
      label = 89;
      break L92;
     }
     if (($fl$1$ & 2048 | 0) == 0) {
      $274 = $fl$1$ & 1;
      $277 = $207;
      $279 = $229;
      $pl$0 = $274;
      $prefix$0 = ($274 | 0) == 0 ? 15640 : 15642 | 0;
      label = 89;
     } else {
      $277 = $207;
      $279 = $229;
      $pl$0 = 1;
      $prefix$0 = 15641 | 0;
      label = 89;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     HEAP32[tempDoublePtr >> 2] = $207;
     HEAP32[tempDoublePtr + 4 >> 2] = $229;
     $369 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$e2$i >> 2] = 0;
     if (($229 | 0) < 0) {
      $$07$i = -$369;
      $pl$0$i = 1;
      $prefix$0$i = 15664;
     } else {
      if (($fl$1$ & 2048 | 0) == 0) {
       $374 = $fl$1$ & 1;
       $$07$i = $369;
       $pl$0$i = $374;
       $prefix$0$i = ($374 | 0) == 0 ? 15665 | 0 : 15670 | 0;
      } else {
       $$07$i = $369;
       $pl$0$i = 1;
       $prefix$0$i = 15667 | 0;
      }
     }
     HEAPF64[tempDoublePtr >> 3] = $$07$i;
     $378 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
     if (!($378 >>> 0 < 2146435072 | ($378 | 0) == 2146435072 & 0 < 0)) {
      $385 = ($t$0 & 32 | 0) != 0;
      if ($$07$i != $$07$i | 0.0 != 0.0) {
       $pl$1$i = 0;
       $s1$0$i = $385 ? 15704 : 15712;
      } else {
       $pl$1$i = $pl$0$i;
       $s1$0$i = $385 ? 15688 : 15696;
      }
      $389 = $pl$1$i + 3 | 0;
      $392 = ($389 | 0) < ($w$1 | 0);
      if (($fl$1$ & 8192 | 0) == 0 & $392) {
       $393 = $w$1 - $389 | 0;
       _memset($pad$i | 0, 32, ($393 >>> 0 > 256 ? 256 : $393) | 0) | 0;
       if ($393 >>> 0 > 255) {
        $$01$i36$i = $393;
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0;
         $397 = $$01$i36$i + -256 | 0;
         if ($397 >>> 0 > 255) {
          $$01$i36$i = $397;
         } else {
          $$0$lcssa$i38$i = $397;
          break;
         }
        }
       } else {
        $$0$lcssa$i38$i = $393;
       }
       ___fwritex($pad$i, $$0$lcssa$i38$i, $f) | 0;
      }
      ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
      ___fwritex($s1$0$i, 3, $f) | 0;
      if (($fl$1$ & 73728 | 0) == 8192 & $392) {
       $401 = $w$1 - $389 | 0;
       _memset($pad$i | 0, 32, ($401 >>> 0 > 256 ? 256 : $401) | 0) | 0;
       if ($401 >>> 0 > 255) {
        $$01$i43$i = $401;
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0;
         $405 = $$01$i43$i + -256 | 0;
         if ($405 >>> 0 > 255) {
          $$01$i43$i = $405;
         } else {
          $$0$lcssa$i45$i = $405;
          break;
         }
        }
       } else {
        $$0$lcssa$i45$i = $401;
       }
       ___fwritex($pad$i, $$0$lcssa$i45$i, $f) | 0;
      }
      $1045 = $229;
      $1046 = $207;
      $22 = $139;
      $cnt$0 = $cnt$1;
      $l$0 = $392 ? $w$1 : $389;
      $l10n$0 = $l10n$3;
      continue L1;
     }
     $408 = +_frexpl($$07$i, $e2$i) * 2.0;
     $409 = $408 != 0.0;
     if ($409) {
      HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     }
     $412 = $t$0 | 32;
     if (($412 | 0) == 97) {
      $414 = $t$0 & 32;
      $prefix$0$$i = ($414 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $417 = $pl$0$i | 2;
      $re$0$i = $p$0 >>> 0 > 11 ? 0 : 12 - $p$0 | 0;
      do {
       if (($re$0$i | 0) == 0) {
        $$1$i = $408;
       } else {
        $re$1165$i = $re$0$i;
        $round$0164$i = 8.0;
        do {
         $re$1165$i = $re$1165$i + -1 | 0;
         $round$0164$i = $round$0164$i * 16.0;
        } while (($re$1165$i | 0) != 0);
        if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
         $$1$i = -($round$0164$i + (-$408 - $round$0164$i));
         break;
        } else {
         $$1$i = $408 + $round$0164$i - $round$0164$i;
         break;
        }
       }
      } while (0);
      $432 = HEAP32[$e2$i >> 2] | 0;
      $435 = ($432 | 0) < 0 ? 0 - $432 | 0 : $432;
      if (($435 | 0) < 0) {
       $$05$i$i = $6;
       $439 = $435;
       $440 = (($435 | 0) < 0) << 31 >> 31;
       while (1) {
        $441 = ___uremdi3($439 | 0, $440 | 0, 10, 0) | 0;
        $$05$i$i = $$05$i$i + -1 | 0;
        HEAP8[$$05$i$i >> 0] = $441 | 48;
        $439$looptemp = $439;
        $439 = ___udivdi3($439 | 0, $440 | 0, 10, 0) | 0;
        if (!($440 >>> 0 > 9 | ($440 | 0) == 9 & $439$looptemp >>> 0 > 4294967295)) {
         break;
        } else {
         $440 = tempRet0;
        }
       }
       $$0$lcssa$i48$i = $$05$i$i;
       $$01$lcssa$off0$i$i = $439;
      } else {
       $$0$lcssa$i48$i = $6;
       $$01$lcssa$off0$i$i = $435;
      }
      if (($$01$lcssa$off0$i$i | 0) == 0) {
       $$1$lcssa$i$i = $$0$lcssa$i48$i;
      } else {
       $$12$i$i = $$0$lcssa$i48$i;
       $y$03$i$i = $$01$lcssa$off0$i$i;
       while (1) {
        $457 = $$12$i$i + -1 | 0;
        HEAP8[$457 >> 0] = ($y$03$i$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i$i >>> 0 < 10) {
         $$1$lcssa$i$i = $457;
         break;
        } else {
         $$12$i$i = $457;
         $y$03$i$i = ($y$03$i$i >>> 0) / 10 | 0;
        }
       }
      }
      if (($$1$lcssa$i$i | 0) == ($6 | 0)) {
       HEAP8[$7 >> 0] = 48;
       $estr$0$i = $7;
      } else {
       $estr$0$i = $$1$lcssa$i$i;
      }
      HEAP8[$estr$0$i + -1 >> 0] = (HEAP32[$e2$i >> 2] >> 31 & 2) + 43;
      $469 = $estr$0$i + -2 | 0;
      HEAP8[$469 >> 0] = $t$0 + 15;
      $472 = ($fl$1$ & 8 | 0) == 0;
      if (($p$0 | 0) > 0) {
       if ($472) {
        $$2$us$us$i = $$1$i;
        $s$0$us$us$i = $buf$i;
        while (1) {
         $473 = ~~$$2$us$us$i;
         $479 = $s$0$us$us$i + 1 | 0;
         HEAP8[$s$0$us$us$i >> 0] = HEAPU8[15720 + $473 >> 0] | $414;
         $$2$us$us$i = ($$2$us$us$i - +($473 | 0)) * 16.0;
         if (($479 - $0 | 0) == 1) {
          HEAP8[$479 >> 0] = 46;
          $s$1$us$us$i = $s$0$us$us$i + 2 | 0;
         } else {
          $s$1$us$us$i = $479;
         }
         if (!($$2$us$us$i != 0.0)) {
          $s$1$lcssa$i = $s$1$us$us$i;
          break;
         } else {
          $s$0$us$us$i = $s$1$us$us$i;
         }
        }
       } else {
        $$2$us$i = $$1$i;
        $s$0$us$i = $buf$i;
        while (1) {
         $488 = ~~$$2$us$i;
         $494 = $s$0$us$i + 1 | 0;
         HEAP8[$s$0$us$i >> 0] = HEAPU8[15720 + $488 >> 0] | $414;
         $$2$us$i = ($$2$us$i - +($488 | 0)) * 16.0;
         if (($494 - $0 | 0) == 1) {
          HEAP8[$494 >> 0] = 46;
          $s$1$us$i = $s$0$us$i + 2 | 0;
         } else {
          $s$1$us$i = $494;
         }
         if (!($$2$us$i != 0.0)) {
          $s$1$lcssa$i = $s$1$us$i;
          break;
         } else {
          $s$0$us$i = $s$1$us$i;
         }
        }
       }
      } else {
       if ($472) {
        $$2$us159$i = $$1$i;
        $s$0$us158$i = $buf$i;
        while (1) {
         $503 = ~~$$2$us159$i;
         $509 = $s$0$us158$i + 1 | 0;
         HEAP8[$s$0$us158$i >> 0] = HEAPU8[15720 + $503 >> 0] | $414;
         $$2$us159$i = ($$2$us159$i - +($503 | 0)) * 16.0;
         $516 = $$2$us159$i != 0.0;
         if (($509 - $0 | 0) == 1 & $516) {
          HEAP8[$509 >> 0] = 46;
          $s$1$us160$i = $s$0$us158$i + 2 | 0;
         } else {
          $s$1$us160$i = $509;
         }
         if (!$516) {
          $s$1$lcssa$i = $s$1$us160$i;
          break;
         } else {
          $s$0$us158$i = $s$1$us160$i;
         }
        }
       } else {
        $$2$i = $$1$i;
        $s$0$i = $buf$i;
        while (1) {
         $518 = ~~$$2$i;
         $524 = $s$0$i + 1 | 0;
         HEAP8[$s$0$i >> 0] = HEAPU8[15720 + $518 >> 0] | $414;
         $$2$i = ($$2$i - +($518 | 0)) * 16.0;
         if (($524 - $0 | 0) == 1) {
          HEAP8[$524 >> 0] = 46;
          $s$1$i = $s$0$i + 2 | 0;
         } else {
          $s$1$i = $524;
         }
         if (!($$2$i != 0.0)) {
          $s$1$lcssa$i = $s$1$i;
          break;
         } else {
          $s$0$i = $s$1$i;
         }
        }
       }
      }
      $$pre319$i = $s$1$lcssa$i;
      do {
       if (($p$0 | 0) == 0) {
        label = 173;
       } else {
        if (($10 + $$pre319$i | 0) >= ($p$0 | 0)) {
         label = 173;
         break;
        }
        $l$0$i = $11 + $p$0 - $469 | 0;
       }
      } while (0);
      if ((label | 0) == 173) {
       label = 0;
       $l$0$i = $9 - $469 + $$pre319$i | 0;
      }
      $542 = $l$0$i + $417 | 0;
      $543 = $fl$1$ & 73728;
      $545 = ($542 | 0) < ($w$1 | 0);
      if (($543 | 0) == 0 & $545) {
       $546 = $w$1 - $542 | 0;
       _memset($pad$i | 0, 32, ($546 >>> 0 > 256 ? 256 : $546) | 0) | 0;
       if ($546 >>> 0 > 255) {
        $$01$i53$i = $546;
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0;
         $550 = $$01$i53$i + -256 | 0;
         if ($550 >>> 0 > 255) {
          $$01$i53$i = $550;
         } else {
          $$0$lcssa$i55$i = $550;
          break;
         }
        }
       } else {
        $$0$lcssa$i55$i = $546;
       }
       ___fwritex($pad$i, $$0$lcssa$i55$i, $f) | 0;
      }
      ___fwritex($prefix$0$$i, $417, $f) | 0;
      if (($543 | 0) == 65536 & $545) {
       $553 = $w$1 - $542 | 0;
       _memset($pad$i | 0, 48, ($553 >>> 0 > 256 ? 256 : $553) | 0) | 0;
       if ($553 >>> 0 > 255) {
        $$01$i60$i = $553;
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0;
         $557 = $$01$i60$i + -256 | 0;
         if ($557 >>> 0 > 255) {
          $$01$i60$i = $557;
         } else {
          $$0$lcssa$i62$i = $557;
          break;
         }
        }
       } else {
        $$0$lcssa$i62$i = $553;
       }
       ___fwritex($pad$i, $$0$lcssa$i62$i, $f) | 0;
      }
      $559 = $$pre319$i - $0 | 0;
      ___fwritex($buf$i, $559, $f) | 0;
      $561 = $8 - $469 | 0;
      $563 = $l$0$i - $561 - $559 | 0;
      if (($563 | 0) > 0) {
       _memset($pad$i | 0, 48, ($563 >>> 0 > 256 ? 256 : $563) | 0) | 0;
       if ($563 >>> 0 > 255) {
        $$01$i66$i = $563;
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0;
         $568 = $$01$i66$i + -256 | 0;
         if ($568 >>> 0 > 255) {
          $$01$i66$i = $568;
         } else {
          $$0$lcssa$i68$i = $568;
          break;
         }
        }
       } else {
        $$0$lcssa$i68$i = $563;
       }
       ___fwritex($pad$i, $$0$lcssa$i68$i, $f) | 0;
      }
      ___fwritex($469, $561, $f) | 0;
      if (($543 | 0) == 8192 & $545) {
       $571 = $w$1 - $542 | 0;
       _memset($pad$i | 0, 32, ($571 >>> 0 > 256 ? 256 : $571) | 0) | 0;
       if ($571 >>> 0 > 255) {
        $$01$i73$i = $571;
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0;
         $575 = $$01$i73$i + -256 | 0;
         if ($575 >>> 0 > 255) {
          $$01$i73$i = $575;
         } else {
          $$0$lcssa$i75$i = $575;
          break;
         }
        }
       } else {
        $$0$lcssa$i75$i = $571;
       }
       ___fwritex($pad$i, $$0$lcssa$i75$i, $f) | 0;
      }
      $1045 = $229;
      $1046 = $207;
      $22 = $139;
      $cnt$0 = $cnt$1;
      $l$0 = $545 ? $w$1 : $542;
      $l10n$0 = $l10n$3;
      continue L1;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($409) {
      $580 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $580;
      $$3$i = $408 * 268435456.0;
      $582 = $580;
     } else {
      $$3$i = $408;
      $582 = HEAP32[$e2$i >> 2] | 0;
     }
     $$31$i = ($582 | 0) < 0 ? $big$i : $12;
     $$4$i = $$3$i;
     $z$0$i = $$31$i;
     do {
      $583 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $583;
      $z$0$i = $z$0$i + 4 | 0;
      $$4$i = ($$4$i - +($583 >>> 0)) * 1.0e9;
     } while ($$4$i != 0.0);
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $591 = $$pr$i;
      $a$1263$i = $$31$i;
      $z$1262$i = $z$0$i;
      while (1) {
       $592 = ($591 | 0) > 29 ? 29 : $591;
       $d$0254$i = $z$1262$i + -4 | 0;
       do {
        if ($d$0254$i >>> 0 < $a$1263$i >>> 0) {
         $a$2$ph$i = $a$1263$i;
        } else {
         $carry$0255$i = 0;
         $d$0256$i = $d$0254$i;
         do {
          $595 = _bitshift64Shl(HEAP32[$d$0256$i >> 2] | 0, 0, $592 | 0) | 0;
          $597 = _i64Add($595 | 0, tempRet0 | 0, $carry$0255$i | 0, 0) | 0;
          $598 = tempRet0;
          $599 = ___uremdi3($597 | 0, $598 | 0, 1e9, 0) | 0;
          HEAP32[$d$0256$i >> 2] = $599;
          $carry$0255$i = ___udivdi3($597 | 0, $598 | 0, 1e9, 0) | 0;
          $d$0256$i = $d$0256$i + -4 | 0;
         } while (!($d$0256$i >>> 0 < $a$1263$i >>> 0));
         if (($carry$0255$i | 0) == 0) {
          $a$2$ph$i = $a$1263$i;
          break;
         }
         $605 = $a$1263$i + -4 | 0;
         HEAP32[$605 >> 2] = $carry$0255$i;
         $a$2$ph$i = $605;
        }
       } while (0);
       $z$2$i = $z$1262$i;
       while (1) {
        if (!($z$2$i >>> 0 > $a$2$ph$i >>> 0)) {
         break;
        }
        $607 = $z$2$i + -4 | 0;
        if ((HEAP32[$607 >> 2] | 0) == 0) {
         $z$2$i = $607;
        } else {
         break;
        }
       }
       $611 = (HEAP32[$e2$i >> 2] | 0) - $592 | 0;
       HEAP32[$e2$i >> 2] = $611;
       if (($611 | 0) > 0) {
        $591 = $611;
        $a$1263$i = $a$2$ph$i;
        $z$1262$i = $z$2$i;
       } else {
        $$pr146$i = $611;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i;
        break;
       }
      }
     } else {
      $$pr146$i = $$pr$i;
      $a$1$lcssa$i = $$31$i;
      $z$1$lcssa$i = $z$0$i;
     }
     L254 : do {
      if (($$pr146$i | 0) < 0) {
       $616 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
       if (($412 | 0) == 102) {
        $618 = $$31$i;
        $619 = $$31$i + ($616 << 2) | 0;
        $621 = $$pr146$i;
        $a$3249$us$i = $a$1$lcssa$i;
        $z$3248$us$i = $z$1$lcssa$i;
        while (1) {
         $620 = 0 - $621 | 0;
         $$20$us$i = ($620 | 0) > 9 ? 9 : $620;
         do {
          if ($a$3249$us$i >>> 0 < $z$3248$us$i >>> 0) {
           $642 = (1 << $$20$us$i) + -1 | 0;
           $645 = 1e9 >>> $$20$us$i;
           $carry3$0243$us$i = 0;
           $d$1242$us$i = $a$3249$us$i;
           do {
            $640 = HEAP32[$d$1242$us$i >> 2] | 0;
            HEAP32[$d$1242$us$i >> 2] = ($640 >>> $$20$us$i) + $carry3$0243$us$i;
            $carry3$0243$us$i = Math_imul($640 & $642, $645) | 0;
            $d$1242$us$i = $d$1242$us$i + 4 | 0;
           } while ($d$1242$us$i >>> 0 < $z$3248$us$i >>> 0);
           $$a$3$us$i = (HEAP32[$a$3249$us$i >> 2] | 0) == 0 ? $a$3249$us$i + 4 | 0 : $a$3249$us$i;
           if (($carry3$0243$us$i | 0) == 0) {
            $$a$3$us323$i = $$a$3$us$i;
            $z$4$us$i = $z$3248$us$i;
            break;
           }
           HEAP32[$z$3248$us$i >> 2] = $carry3$0243$us$i;
           $$a$3$us323$i = $$a$3$us$i;
           $z$4$us$i = $z$3248$us$i + 4 | 0;
          } else {
           $$a$3$us323$i = (HEAP32[$a$3249$us$i >> 2] | 0) == 0 ? $a$3249$us$i + 4 | 0 : $a$3249$us$i;
           $z$4$us$i = $z$3248$us$i;
          }
         } while (0);
         $$z$4$us$i = ($z$4$us$i - $618 >> 2 | 0) > ($616 | 0) ? $619 : $z$4$us$i;
         $621 = (HEAP32[$e2$i >> 2] | 0) + $$20$us$i | 0;
         HEAP32[$e2$i >> 2] = $621;
         if (($621 | 0) >= 0) {
          $a$3$lcssa$i = $$a$3$us323$i;
          $z$3$lcssa$i = $$z$4$us$i;
          break L254;
         } else {
          $a$3249$us$i = $$a$3$us323$i;
          $z$3248$us$i = $$z$4$us$i;
         }
        }
       } else {
        $650 = $$pr146$i;
        $a$3249$i = $a$1$lcssa$i;
        $z$3248$i = $z$1$lcssa$i;
       }
       while (1) {
        $649 = 0 - $650 | 0;
        $$20$i = ($649 | 0) > 9 ? 9 : $649;
        do {
         if ($a$3249$i >>> 0 < $z$3248$i >>> 0) {
          $657 = (1 << $$20$i) + -1 | 0;
          $658 = 1e9 >>> $$20$i;
          $carry3$0243$i = 0;
          $d$1242$i = $a$3249$i;
          do {
           $659 = HEAP32[$d$1242$i >> 2] | 0;
           HEAP32[$d$1242$i >> 2] = ($659 >>> $$20$i) + $carry3$0243$i;
           $carry3$0243$i = Math_imul($659 & $657, $658) | 0;
           $d$1242$i = $d$1242$i + 4 | 0;
          } while ($d$1242$i >>> 0 < $z$3248$i >>> 0);
          $$a$3$i = (HEAP32[$a$3249$i >> 2] | 0) == 0 ? $a$3249$i + 4 | 0 : $a$3249$i;
          if (($carry3$0243$i | 0) == 0) {
           $$a$3325$i = $$a$3$i;
           $z$4$i = $z$3248$i;
           break;
          }
          HEAP32[$z$3248$i >> 2] = $carry3$0243$i;
          $$a$3325$i = $$a$3$i;
          $z$4$i = $z$3248$i + 4 | 0;
         } else {
          $$a$3325$i = (HEAP32[$a$3249$i >> 2] | 0) == 0 ? $a$3249$i + 4 | 0 : $a$3249$i;
          $z$4$i = $z$3248$i;
         }
        } while (0);
        if (($z$4$i - $$a$3325$i >> 2 | 0) > ($616 | 0)) {
         $z$5$i = $$a$3325$i + ($616 << 2) | 0;
        } else {
         $z$5$i = $z$4$i;
        }
        $650 = (HEAP32[$e2$i >> 2] | 0) + $$20$i | 0;
        HEAP32[$e2$i >> 2] = $650;
        if (($650 | 0) >= 0) {
         $a$3$lcssa$i = $$a$3325$i;
         $z$3$lcssa$i = $z$5$i;
         break;
        } else {
         $a$3249$i = $$a$3325$i;
         $z$3248$i = $z$5$i;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;
       $z$3$lcssa$i = $z$1$lcssa$i;
      }
     } while (0);
     $681 = $$31$i;
     do {
      if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
       $685 = ($681 - $a$3$lcssa$i >> 2) * 9 | 0;
       $686 = HEAP32[$a$3$lcssa$i >> 2] | 0;
       if ($686 >>> 0 < 10) {
        $e$1$i = $685;
        break;
       } else {
        $e$0238$i = $685;
        $i$0237$i = 10;
       }
       while (1) {
        $i$0237$i = $i$0237$i * 10 | 0;
        $689 = $e$0238$i + 1 | 0;
        if ($686 >>> 0 < $i$0237$i >>> 0) {
         $e$1$i = $689;
         break;
        } else {
         $e$0238$i = $689;
        }
       }
      } else {
       $e$1$i = 0;
      }
     } while (0);
     $694 = ($412 | 0) == 103;
     $696 = $$p$i - (($412 | 0) != 102 ? $e$1$i : 0) + (($694 & ($$p$i | 0) != 0) << 31 >> 31) | 0;
     if (($696 | 0) < ((($z$3$lcssa$i - $681 >> 2) * 9 | 0) + -9 | 0)) {
      $703 = $696 + 9216 | 0;
      $704 = ($703 | 0) / 9 | 0;
      $705 = $$31$i + ($704 + -1023 << 2) | 0;
      $j$0229$i = (($703 | 0) % 9 | 0) + 1 | 0;
      if (($j$0229$i | 0) < 9) {
       $i$1230$i = 10;
       $j$0231$i = $j$0229$i;
       while (1) {
        $708 = $i$1230$i * 10 | 0;
        $j$0231$i = $j$0231$i + 1 | 0;
        if (($j$0231$i | 0) == 9) {
         $i$1$lcssa$i = $708;
         break;
        } else {
         $i$1230$i = $708;
        }
       }
      } else {
       $i$1$lcssa$i = 10;
      }
      $709 = HEAP32[$705 >> 2] | 0;
      $710 = ($709 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      if (($710 | 0) == 0) {
       if (($$31$i + ($704 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
        $a$7$i = $a$3$lcssa$i;
        $d$3$i = $705;
        $e$3$i = $e$1$i;
       } else {
        label = 233;
       }
      } else {
       label = 233;
      }
      do {
       if ((label | 0) == 233) {
        label = 0;
        $$22$i = ((($709 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
        $717 = ($i$1$lcssa$i | 0) / 2 | 0;
        do {
         if ($710 >>> 0 < $717 >>> 0) {
          $small$0$i = .5;
         } else {
          if (($710 | 0) == ($717 | 0)) {
           if (($$31$i + ($704 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
            $small$0$i = 1.0;
            break;
           }
          }
          $small$0$i = 1.5;
         }
        } while (0);
        do {
         if (($pl$0$i | 0) == 0) {
          $round6$1$i = $$22$i;
          $small$1$i = $small$0$i;
         } else {
          if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
           $round6$1$i = $$22$i;
           $small$1$i = $small$0$i;
           break;
          }
          $round6$1$i = $$22$i * -1.0;
          $small$1$i = $small$0$i * -1.0;
         }
        } while (0);
        $727 = $709 - $710 | 0;
        HEAP32[$705 >> 2] = $727;
        if (!($round6$1$i + $small$1$i != $round6$1$i)) {
         $a$7$i = $a$3$lcssa$i;
         $d$3$i = $705;
         $e$3$i = $e$1$i;
         break;
        }
        $730 = $727 + $i$1$lcssa$i | 0;
        HEAP32[$705 >> 2] = $730;
        if ($730 >>> 0 > 999999999) {
         $a$5223$i = $a$3$lcssa$i;
         $d$2222$i = $705;
         while (1) {
          $732 = $d$2222$i + -4 | 0;
          HEAP32[$d$2222$i >> 2] = 0;
          if ($732 >>> 0 < $a$5223$i >>> 0) {
           $734 = $a$5223$i + -4 | 0;
           HEAP32[$734 >> 2] = 0;
           $a$6$i = $734;
          } else {
           $a$6$i = $a$5223$i;
          }
          $736 = (HEAP32[$732 >> 2] | 0) + 1 | 0;
          HEAP32[$732 >> 2] = $736;
          if ($736 >>> 0 > 999999999) {
           $a$5223$i = $a$6$i;
           $d$2222$i = $732;
          } else {
           $a$5$lcssa$i = $a$6$i;
           $d$2$lcssa$i = $732;
           break;
          }
         }
        } else {
         $a$5$lcssa$i = $a$3$lcssa$i;
         $d$2$lcssa$i = $705;
        }
        $741 = ($681 - $a$5$lcssa$i >> 2) * 9 | 0;
        $742 = HEAP32[$a$5$lcssa$i >> 2] | 0;
        if ($742 >>> 0 < 10) {
         $a$7$i = $a$5$lcssa$i;
         $d$3$i = $d$2$lcssa$i;
         $e$3$i = $741;
         break;
        } else {
         $e$2218$i = $741;
         $i$2217$i = 10;
        }
        while (1) {
         $i$2217$i = $i$2217$i * 10 | 0;
         $745 = $e$2218$i + 1 | 0;
         if ($742 >>> 0 < $i$2217$i >>> 0) {
          $a$7$i = $a$5$lcssa$i;
          $d$3$i = $d$2$lcssa$i;
          $e$3$i = $745;
          break;
         } else {
          $e$2218$i = $745;
         }
        }
       }
      } while (0);
      $747 = $d$3$i + 4 | 0;
      $a$8$ph$i = $a$7$i;
      $e$4$ph$i = $e$3$i;
      $z$6$ph$i = $z$3$lcssa$i >>> 0 > $747 >>> 0 ? $747 : $z$3$lcssa$i;
     } else {
      $a$8$ph$i = $a$3$lcssa$i;
      $e$4$ph$i = $e$1$i;
      $z$6$ph$i = $z$3$lcssa$i;
     }
     $749 = 0 - $e$4$ph$i | 0;
     $z$6$i = $z$6$ph$i;
     while (1) {
      if (!($z$6$i >>> 0 > $a$8$ph$i >>> 0)) {
       $$lcssa300$i = 0;
       break;
      }
      $751 = $z$6$i + -4 | 0;
      if ((HEAP32[$751 >> 2] | 0) == 0) {
       $z$6$i = $751;
      } else {
       $$lcssa300$i = 1;
       break;
      }
     }
     do {
      if ($694) {
       $$$p$i = (($$p$i | 0) == 0 & 1) + $$p$i | 0;
       if (($$$p$i | 0) > ($e$4$ph$i | 0) & ($e$4$ph$i | 0) > -5) {
        $$013$i = $t$0 + -1 | 0;
        $$210$i = $$$p$i + -1 - $e$4$ph$i | 0;
       } else {
        $$013$i = $t$0 + -2 | 0;
        $$210$i = $$$p$i + -1 | 0;
       }
       if (($fl$1$ & 8 | 0) != 0) {
        $$114$i = $$013$i;
        $$311$i = $$210$i;
        break;
       }
       do {
        if ($$lcssa300$i) {
         $765 = HEAP32[$z$6$i + -4 >> 2] | 0;
         if (($765 | 0) == 0) {
          $j$2$i = 9;
          break;
         }
         if ((($765 >>> 0) % 10 | 0 | 0) == 0) {
          $i$3209$i = 10;
          $j$1210$i = 0;
         } else {
          $j$2$i = 0;
          break;
         }
         while (1) {
          $i$3209$i = $i$3209$i * 10 | 0;
          $770 = $j$1210$i + 1 | 0;
          if ((($765 >>> 0) % ($i$3209$i >>> 0) | 0 | 0) != 0) {
           $j$2$i = $770;
           break;
          } else {
           $j$1210$i = $770;
          }
         }
        } else {
         $j$2$i = 9;
        }
       } while (0);
       $779 = (($z$6$i - $681 >> 2) * 9 | 0) + -9 | 0;
       if (($$013$i | 32 | 0) == 102) {
        $780 = $779 - $j$2$i | 0;
        $$23$i = ($780 | 0) < 0 ? 0 : $780;
        $$114$i = $$013$i;
        $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i;
        break;
       } else {
        $784 = $779 + $e$4$ph$i - $j$2$i | 0;
        $$25$i = ($784 | 0) < 0 ? 0 : $784;
        $$114$i = $$013$i;
        $$311$i = ($$210$i | 0) < ($$25$i | 0) ? $$210$i : $$25$i;
        break;
       }
      } else {
       $$114$i = $t$0;
       $$311$i = $$p$i;
      }
     } while (0);
     $787 = ($$311$i | 0) != 0;
     if ($787) {
      $791 = 1;
     } else {
      $791 = ($fl$1$ & 8 | 0) != 0;
     }
     $790 = $791 & 1;
     $793 = ($$114$i | 32 | 0) == 102;
     if ($793) {
      $$pn$i = ($e$4$ph$i | 0) > 0 ? $e$4$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $797 = ($e$4$ph$i | 0) < 0 ? $749 : $e$4$ph$i;
      if (($797 | 0) < 0) {
       $$05$i79$i = $6;
       $801 = $797;
       $802 = (($797 | 0) < 0) << 31 >> 31;
       while (1) {
        $803 = ___uremdi3($801 | 0, $802 | 0, 10, 0) | 0;
        $$05$i79$i = $$05$i79$i + -1 | 0;
        HEAP8[$$05$i79$i >> 0] = $803 | 48;
        $801$looptemp = $801;
        $801 = ___udivdi3($801 | 0, $802 | 0, 10, 0) | 0;
        if (!($802 >>> 0 > 9 | ($802 | 0) == 9 & $801$looptemp >>> 0 > 4294967295)) {
         break;
        } else {
         $802 = tempRet0;
        }
       }
       $$0$lcssa$i84$i = $$05$i79$i;
       $$01$lcssa$off0$i85$i = $801;
      } else {
       $$0$lcssa$i84$i = $6;
       $$01$lcssa$off0$i85$i = $797;
      }
      if (($$01$lcssa$off0$i85$i | 0) == 0) {
       $estr$1$ph$i = $$0$lcssa$i84$i;
      } else {
       $$12$i87$i = $$0$lcssa$i84$i;
       $y$03$i86$i = $$01$lcssa$off0$i85$i;
       while (1) {
        $819 = $$12$i87$i + -1 | 0;
        HEAP8[$819 >> 0] = ($y$03$i86$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i86$i >>> 0 < 10) {
         $estr$1$ph$i = $819;
         break;
        } else {
         $$12$i87$i = $819;
         $y$03$i86$i = ($y$03$i86$i >>> 0) / 10 | 0;
        }
       }
      }
      if (($8 - $estr$1$ph$i | 0) < 2) {
       $estr$1200$i = $estr$1$ph$i;
       while (1) {
        $825 = $estr$1200$i + -1 | 0;
        HEAP8[$825 >> 0] = 48;
        if (($8 - $825 | 0) < 2) {
         $estr$1200$i = $825;
        } else {
         $estr$1$lcssa$i = $825;
         break;
        }
       }
      } else {
       $estr$1$lcssa$i = $estr$1$ph$i;
      }
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$4$ph$i >> 31 & 2) + 43;
      $835 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$835 >> 0] = $$114$i;
      $$pn$i = $8 - $835 | 0;
      $estr$2$i = $835;
     }
     $840 = $pl$0$i + 1 + $$311$i + $790 + $$pn$i | 0;
     $841 = $fl$1$ & 73728;
     $843 = ($840 | 0) < ($w$1 | 0);
     if (($841 | 0) == 0 & $843) {
      $844 = $w$1 - $840 | 0;
      _memset($pad$i | 0, 32, ($844 >>> 0 > 256 ? 256 : $844) | 0) | 0;
      if ($844 >>> 0 > 255) {
       $$01$i94$i = $844;
       while (1) {
        ___fwritex($pad$i, 256, $f) | 0;
        $848 = $$01$i94$i + -256 | 0;
        if ($848 >>> 0 > 255) {
         $$01$i94$i = $848;
        } else {
         $$0$lcssa$i96$i = $848;
         break;
        }
       }
      } else {
       $$0$lcssa$i96$i = $844;
      }
      ___fwritex($pad$i, $$0$lcssa$i96$i, $f) | 0;
     }
     ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     if (($841 | 0) == 65536 & $843) {
      $851 = $w$1 - $840 | 0;
      _memset($pad$i | 0, 48, ($851 >>> 0 > 256 ? 256 : $851) | 0) | 0;
      if ($851 >>> 0 > 255) {
       $$01$i101$i = $851;
       while (1) {
        ___fwritex($pad$i, 256, $f) | 0;
        $855 = $$01$i101$i + -256 | 0;
        if ($855 >>> 0 > 255) {
         $$01$i101$i = $855;
        } else {
         $$0$lcssa$i103$i = $855;
         break;
        }
       }
      } else {
       $$0$lcssa$i103$i = $851;
      }
      ___fwritex($pad$i, $$0$lcssa$i103$i, $f) | 0;
     }
     do {
      if ($793) {
       $r$0$a$8$i = $a$8$ph$i >>> 0 > $$31$i >>> 0 ? $$31$i : $a$8$ph$i;
       $d$4183$i = $r$0$a$8$i;
       do {
        $858 = HEAP32[$d$4183$i >> 2] | 0;
        if (($858 | 0) == 0) {
         $$1$lcssa$i112$i = $13;
        } else {
         $$12$i110$i = $13;
         $y$03$i109$i = $858;
         while (1) {
          $863 = $$12$i110$i + -1 | 0;
          HEAP8[$863 >> 0] = ($y$03$i109$i >>> 0) % 10 | 0 | 48;
          if ($y$03$i109$i >>> 0 < 10) {
           $$1$lcssa$i112$i = $863;
           break;
          } else {
           $$12$i110$i = $863;
           $y$03$i109$i = ($y$03$i109$i >>> 0) / 10 | 0;
          }
         }
        }
        do {
         if (($d$4183$i | 0) == ($r$0$a$8$i | 0)) {
          if (($$1$lcssa$i112$i | 0) != ($13 | 0)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$15 >> 0] = 48;
          $s7$1$i = $15;
         } else {
          if ($$1$lcssa$i112$i >>> 0 > $buf$i >>> 0) {
           $s7$0180$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while (1) {
           $868 = $s7$0180$i + -1 | 0;
           HEAP8[$868 >> 0] = 48;
           if ($868 >>> 0 > $buf$i >>> 0) {
            $s7$0180$i = $868;
           } else {
            $s7$1$i = $868;
            break;
           }
          }
         }
        } while (0);
        ___fwritex($s7$1$i, $14 - $s7$1$i | 0, $f) | 0;
        $d$4183$i = $d$4183$i + 4 | 0;
       } while (!($d$4183$i >>> 0 > $$31$i >>> 0));
       if (!$787) {
        if (($fl$1$ & 8 | 0) == 0) {
         break;
        }
       }
       ___fwritex(15736, 1, $f) | 0;
       if ($d$4183$i >>> 0 < $z$6$i >>> 0 & ($$311$i | 0) > 0) {
        $$412175$i = $$311$i;
        $d$5174$i = $d$4183$i;
        while (1) {
         $879 = HEAP32[$d$5174$i >> 2] | 0;
         if (($879 | 0) == 0) {
          $s8$0169$i = $13;
          label = 300;
         } else {
          $$12$i119$i = $13;
          $y$03$i118$i = $879;
          while (1) {
           $$12$i119$i = $$12$i119$i + -1 | 0;
           HEAP8[$$12$i119$i >> 0] = ($y$03$i118$i >>> 0) % 10 | 0 | 48;
           if ($y$03$i118$i >>> 0 < 10) {
            break;
           } else {
            $y$03$i118$i = ($y$03$i118$i >>> 0) / 10 | 0;
           }
          }
          if ($$12$i119$i >>> 0 > $buf$i >>> 0) {
           $s8$0169$i = $$12$i119$i;
           label = 300;
          } else {
           $s8$0$lcssa$i = $$12$i119$i;
          }
         }
         if ((label | 0) == 300) {
          while (1) {
           label = 0;
           $888 = $s8$0169$i + -1 | 0;
           HEAP8[$888 >> 0] = 48;
           if ($888 >>> 0 > $buf$i >>> 0) {
            $s8$0169$i = $888;
            label = 300;
           } else {
            $s8$0$lcssa$i = $888;
            break;
           }
          }
         }
         ___fwritex($s8$0$lcssa$i, ($$412175$i | 0) > 9 ? 9 : $$412175$i, $f) | 0;
         $d$5174$i = $d$5174$i + 4 | 0;
         $893 = $$412175$i + -9 | 0;
         if (!($d$5174$i >>> 0 < $z$6$i >>> 0 & ($893 | 0) > 0)) {
          $$412$lcssa$i = $893;
          break;
         } else {
          $$412175$i = $893;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       if (($$412$lcssa$i | 0) <= 0) {
        break;
       }
       _memset($pad$i | 0, 48, ($$412$lcssa$i >>> 0 > 256 ? 256 : $$412$lcssa$i) | 0) | 0;
       if ($$412$lcssa$i >>> 0 > 255) {
        $$01$i125$i = $$412$lcssa$i;
        while (1) {
         ___fwritex($pad$i, 256, $f) | 0;
         $900 = $$01$i125$i + -256 | 0;
         if ($900 >>> 0 > 255) {
          $$01$i125$i = $900;
         } else {
          $$0$lcssa$i127$i = $900;
          break;
         }
        }
       } else {
        $$0$lcssa$i127$i = $$412$lcssa$i;
       }
       ___fwritex($pad$i, $$0$lcssa$i127$i, $f) | 0;
      } else {
       $z$6$$i = $$lcssa300$i ? $z$6$i : $a$8$ph$i + 4 | 0;
       do {
        if (($$311$i | 0) > -1) {
         $$not$i = ($fl$1$ & 8 | 0) != 0;
         $$5193$i = $$311$i;
         $d$6192$i = $a$8$ph$i;
         do {
          $905 = HEAP32[$d$6192$i >> 2] | 0;
          if (($905 | 0) == 0) {
           label = 311;
          } else {
           $$12$i134$i = $13;
           $y$03$i133$i = $905;
           while (1) {
            $$12$i134$i = $$12$i134$i + -1 | 0;
            HEAP8[$$12$i134$i >> 0] = ($y$03$i133$i >>> 0) % 10 | 0 | 48;
            if ($y$03$i133$i >>> 0 < 10) {
             break;
            } else {
             $y$03$i133$i = ($y$03$i133$i >>> 0) / 10 | 0;
            }
           }
           if (($$12$i134$i | 0) == ($13 | 0)) {
            label = 311;
           } else {
            $s9$0$i = $$12$i134$i;
           }
          }
          if ((label | 0) == 311) {
           label = 0;
           HEAP8[$15 >> 0] = 48;
           $s9$0$i = $15;
          }
          do {
           if (($d$6192$i | 0) == ($a$8$ph$i | 0)) {
            $918 = $s9$0$i + 1 | 0;
            ___fwritex($s9$0$i, 1, $f) | 0;
            if (!(($$5193$i | 0) > 0 | $$not$i)) {
             $s9$2$i = $918;
             break;
            }
            ___fwritex(15736, 1, $f) | 0;
            $s9$2$i = $918;
           } else {
            if ($s9$0$i >>> 0 > $buf$i >>> 0) {
             $s9$1188$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while (1) {
             $916 = $s9$1188$i + -1 | 0;
             HEAP8[$916 >> 0] = 48;
             if ($916 >>> 0 > $buf$i >>> 0) {
              $s9$1188$i = $916;
             } else {
              $s9$2$i = $916;
              break;
             }
            }
           }
          } while (0);
          $921 = $14 - $s9$2$i | 0;
          ___fwritex($s9$2$i, ($921 | 0) < ($$5193$i | 0) ? $921 : $$5193$i, $f) | 0;
          $$5193$i = $$5193$i - $921 | 0;
          $d$6192$i = $d$6192$i + 4 | 0;
         } while ($d$6192$i >>> 0 < $z$6$$i >>> 0 & ($$5193$i | 0) > -1);
         if (($$5193$i | 0) <= 0) {
          break;
         }
         _memset($pad$i | 0, 48, ($$5193$i >>> 0 > 256 ? 256 : $$5193$i) | 0) | 0;
         if ($$5193$i >>> 0 > 255) {
          $$01$i140$i = $$5193$i;
          while (1) {
           ___fwritex($pad$i, 256, $f) | 0;
           $931 = $$01$i140$i + -256 | 0;
           if ($931 >>> 0 > 255) {
            $$01$i140$i = $931;
           } else {
            $$0$lcssa$i142$i = $931;
            break;
           }
          }
         } else {
          $$0$lcssa$i142$i = $$5193$i;
         }
         ___fwritex($pad$i, $$0$lcssa$i142$i, $f) | 0;
        }
       } while (0);
       ___fwritex($estr$2$i, $8 - $estr$2$i | 0, $f) | 0;
      }
     } while (0);
     if (($841 | 0) == 8192 & $843) {
      $936 = $w$1 - $840 | 0;
      _memset($pad$i | 0, 32, ($936 >>> 0 > 256 ? 256 : $936) | 0) | 0;
      if ($936 >>> 0 > 255) {
       $$01$i$i = $936;
       while (1) {
        ___fwritex($pad$i, 256, $f) | 0;
        $940 = $$01$i$i + -256 | 0;
        if ($940 >>> 0 > 255) {
         $$01$i$i = $940;
        } else {
         $$0$lcssa$i$i = $940;
         break;
        }
       }
      } else {
       $$0$lcssa$i$i = $936;
      }
      ___fwritex($pad$i, $$0$lcssa$i$i, $f) | 0;
     }
     $1045 = $229;
     $1046 = $207;
     $22 = $139;
     $cnt$0 = $cnt$1;
     $l$0 = $843 ? $w$1 : $840;
     $l10n$0 = $l10n$3;
     continue L1;
     break;
    }
   default:
    {
     $1053 = $229;
     $1054 = $207;
     $a$2 = $22;
     $fl$6 = $fl$1$;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 15640;
     $z$2 = $2;
    }
   }
  } while (0);
  L445 : do {
   if ((label | 0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    if (($225 | 0) == 0 & ($229 | 0) == 0) {
     $308 = $207;
     $311 = $229;
     $a$0 = $2;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 15640;
     label = 94;
    } else {
     $$012$i = $2;
     $232 = $225;
     $239 = $229;
     do {
      $$012$i = $$012$i + -1 | 0;
      HEAP8[$$012$i >> 0] = HEAPU8[15720 + ($232 & 15) >> 0] | $226;
      $232 = _bitshift64Lshr($232 | 0, $239 | 0, 4) | 0;
      $239 = tempRet0;
     } while (!(($232 | 0) == 0 & ($239 | 0) == 0));
     if (($fl$3 & 8 | 0) == 0) {
      $308 = $207;
      $311 = $229;
      $a$0 = $$012$i;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = 0;
      $prefix$1 = 15640;
      label = 94;
     } else {
      $308 = $207;
      $311 = $229;
      $a$0 = $$012$i;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = 2;
      $prefix$1 = 15640 + ($t$1 >> 4) | 0;
      label = 94;
     }
    }
   } else if ((label | 0) == 89) {
    label = 0;
    $276 = $277;
    if ($279 >>> 0 > 0 | ($279 | 0) == 0 & $276 >>> 0 > 4294967295) {
     $$05$i = $2;
     $284 = $276;
     $285 = $279;
     while (1) {
      $286 = ___uremdi3($284 | 0, $285 | 0, 10, 0) | 0;
      $$05$i = $$05$i + -1 | 0;
      HEAP8[$$05$i >> 0] = $286 | 48;
      $284$looptemp = $284;
      $284 = ___udivdi3($284 | 0, $285 | 0, 10, 0) | 0;
      if (!($285 >>> 0 > 9 | ($285 | 0) == 9 & $284$looptemp >>> 0 > 4294967295)) {
       break;
      } else {
       $285 = tempRet0;
      }
     }
     $$0$lcssa$i45 = $$05$i;
     $$01$lcssa$off0$i = $284;
    } else {
     $$0$lcssa$i45 = $2;
     $$01$lcssa$off0$i = $276;
    }
    if (($$01$lcssa$off0$i | 0) == 0) {
     $308 = $277;
     $311 = $279;
     $a$0 = $$0$lcssa$i45;
     $fl$4 = $fl$1$;
     $p$2 = $p$0;
     $pl$1 = $pl$0;
     $prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;
     $y$03$i = $$01$lcssa$off0$i;
     while (1) {
      $302 = $$12$i + -1 | 0;
      HEAP8[$302 >> 0] = ($y$03$i >>> 0) % 10 | 0 | 48;
      if ($y$03$i >>> 0 < 10) {
       $308 = $277;
       $311 = $279;
       $a$0 = $302;
       $fl$4 = $fl$1$;
       $p$2 = $p$0;
       $pl$1 = $pl$0;
       $prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;
       $y$03$i = ($y$03$i >>> 0) / 10 | 0;
      }
     }
    }
   } else if ((label | 0) == 99) {
    label = 0;
    $325 = _memchr($a$1, 0, $p$0) | 0;
    if (($325 | 0) == 0) {
     $1053 = $229;
     $1054 = $207;
     $a$2 = $a$1;
     $fl$6 = $206;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 15640;
     $z$2 = $a$1 + $p$0 | 0;
     break;
    } else {
     $1053 = $229;
     $1054 = $207;
     $a$2 = $a$1;
     $fl$6 = $206;
     $p$5 = $325 - $a$1 | 0;
     $pl$2 = 0;
     $prefix$2 = 15640;
     $z$2 = $325;
     break;
    }
   } else if ((label | 0) == 104) {
    label = 0;
    $i$0168 = 0;
    $l$1167 = 0;
    $ws$0169 = $1055;
    while (1) {
     $336 = HEAP32[$ws$0169 >> 2] | 0;
     if (($336 | 0) == 0) {
      $i$0$lcssa = $i$0168;
      $l$1$lcssa = $l$1167;
      break;
     }
     $338 = _wctomb($mb, $336) | 0;
     if (!(($338 | 0) > -1)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $335 = $338 + $i$0168 | 0;
     if ($338 >>> 0 > ($p$4296 - $i$0168 | 0) >>> 0) {
      $1057 = $1055;
      $1058 = $1056;
      $i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     if ($335 >>> 0 < $p$4296 >>> 0) {
      $i$0168 = $335;
      $l$1167 = $338;
      $ws$0169 = $ws$0169 + 4 | 0;
     } else {
      $i$0$lcssa = $335;
      $l$1$lcssa = $338;
      break;
     }
    }
    if (($l$1$lcssa | 0) < 0) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;
     $1058 = $1056;
     $i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while (0);
  if ((label | 0) == 94) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $312 = ($308 | 0) == 0 & ($311 | 0) == 0;
   if ($312 & ($p$2 | 0) == 0) {
    $1053 = $311;
    $1054 = $308;
    $a$2 = $2;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   } else {
    $317 = ($312 & 1) + ($3 - $a$0) | 0;
    $1053 = $311;
    $1054 = $308;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($317 | 0) ? $p$2 : $317;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   }
  } else if ((label | 0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $345 = ($i$0166 | 0) < ($w$1 | 0);
   if (($343 | 0) == 0 & $345) {
    $346 = $w$1 - $i$0166 | 0;
    _memset($pad$i | 0, 32, ($346 >>> 0 > 256 ? 256 : $346) | 0) | 0;
    if ($346 >>> 0 > 255) {
     $$01$i57 = $346;
     while (1) {
      ___fwritex($pad$i, 256, $f) | 0;
      $350 = $$01$i57 + -256 | 0;
      if ($350 >>> 0 > 255) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    ___fwritex($pad$i, $$0$lcssa$i59, $f) | 0;
   }
   L481 : do {
    if (($i$0166 | 0) != 0) {
     $i$1174 = 0;
     $ws$1175 = $1057;
     while (1) {
      $353 = HEAP32[$ws$1175 >> 2] | 0;
      if (($353 | 0) == 0) {
       break L481;
      }
      $355 = _wctomb($mb, $353) | 0;
      $i$1174 = $355 + $i$1174 | 0;
      if (($i$1174 | 0) > ($i$0166 | 0)) {
       break L481;
      }
      ___fwritex($mb, $355, $f) | 0;
      if (!($i$1174 >>> 0 < $i$0166 >>> 0)) {
       break;
      } else {
       $ws$1175 = $ws$1175 + 4 | 0;
      }
     }
    }
   } while (0);
   if (($343 | 0) == 8192 & $345) {
    $361 = $w$1 - $i$0166 | 0;
    _memset($pad$i | 0, 32, ($361 >>> 0 > 256 ? 256 : $361) | 0) | 0;
    if ($361 >>> 0 > 255) {
     $$01$i64 = $361;
     while (1) {
      ___fwritex($pad$i, 256, $f) | 0;
      $365 = $$01$i64 + -256 | 0;
      if ($365 >>> 0 > 255) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    ___fwritex($pad$i, $$0$lcssa$i66, $f) | 0;
   }
   $1045 = $229;
   $1046 = $1058;
   $22 = $139;
   $cnt$0 = $cnt$1;
   $l$0 = $345 ? $w$1 : $i$0166;
   $l10n$0 = $l10n$3;
   continue;
  }
  $944 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($944 | 0) ? $944 : $p$5;
  $946 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($946 | 0) ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $950 = ($946 | 0) < ($w$2 | 0);
  if (($948 | 0) == 0 & $950) {
   $951 = $w$2 - $946 | 0;
   _memset($pad$i | 0, 32, ($951 >>> 0 > 256 ? 256 : $951) | 0) | 0;
   if ($951 >>> 0 > 255) {
    $$01$i74 = $951;
    while (1) {
     ___fwritex($pad$i, 256, $f) | 0;
     $955 = $$01$i74 + -256 | 0;
     if ($955 >>> 0 > 255) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   ___fwritex($pad$i, $$0$lcssa$i76, $f) | 0;
  }
  ___fwritex($prefix$2, $pl$2, $f) | 0;
  if (($948 | 0) == 65536 & $950) {
   $958 = $w$2 - $946 | 0;
   _memset($pad$i | 0, 48, ($958 >>> 0 > 256 ? 256 : $958) | 0) | 0;
   if ($958 >>> 0 > 255) {
    $$01$i50 = $958;
    while (1) {
     ___fwritex($pad$i, 256, $f) | 0;
     $962 = $$01$i50 + -256 | 0;
     if ($962 >>> 0 > 255) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   ___fwritex($pad$i, $$0$lcssa$i52, $f) | 0;
  }
  if (($944 | 0) < ($$p$5 | 0)) {
   $965 = $$p$5 - $944 | 0;
   _memset($pad$i | 0, 48, ($965 >>> 0 > 256 ? 256 : $965) | 0) | 0;
   if ($965 >>> 0 > 255) {
    $$01$i35 = $965;
    while (1) {
     ___fwritex($pad$i, 256, $f) | 0;
     $969 = $$01$i35 + -256 | 0;
     if ($969 >>> 0 > 255) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   ___fwritex($pad$i, $$0$lcssa$i37, $f) | 0;
  }
  ___fwritex($a$2, $944, $f) | 0;
  if (!(($948 | 0) == 8192 & $950)) {
   $1045 = $1053;
   $1046 = $1054;
   $22 = $139;
   $cnt$0 = $cnt$1;
   $l$0 = $w$2;
   $l10n$0 = $l10n$3;
   continue;
  }
  $972 = $w$2 - $946 | 0;
  _memset($pad$i | 0, 32, ($972 >>> 0 > 256 ? 256 : $972) | 0) | 0;
  if ($972 >>> 0 > 255) {
   $$01$i = $972;
   while (1) {
    ___fwritex($pad$i, 256, $f) | 0;
    $976 = $$01$i + -256 | 0;
    if ($976 >>> 0 > 255) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  ___fwritex($pad$i, $$0$lcssa$i, $f) | 0;
  $1045 = $1053;
  $1046 = $1054;
  $22 = $139;
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 if ((label | 0) == 344) {
  if (($f | 0) != 0) {
   $$0 = $cnt$1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($l10n$0 | 0) == 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $i$289 = 1;
  }
  while (1) {
   $981 = HEAP32[$nl_type + ($i$289 << 2) >> 2] | 0;
   if (($981 | 0) == 0) {
    $i$388 = $i$289;
    break;
   }
   $983 = $nl_arg + ($i$289 << 3) | 0;
   L540 : do {
    if (!($981 >>> 0 > 20)) {
     do {
      switch ($981 | 0) {
      case 17:
       {
        $arglist_current59 = HEAP32[$ap >> 2] | 0;
        HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current59 >> 2];
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current59 + 4 >> 2];
        $1036 = +HEAPF64[tempDoublePtr >> 3];
        HEAP32[$ap >> 2] = $arglist_current59 + 8;
        HEAPF64[$983 >> 3] = $1036;
        break L540;
        break;
       }
      case 11:
       {
        $arglist_current41 = HEAP32[$ap >> 2] | 0;
        $993 = HEAP32[$arglist_current41 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current41 + 4;
        $994 = $983;
        HEAP32[$994 >> 2] = $993;
        HEAP32[$994 + 4 >> 2] = 0;
        break L540;
        break;
       }
      case 15:
       {
        $arglist_current53 = HEAP32[$ap >> 2] | 0;
        $1022 = HEAP32[$arglist_current53 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current53 + 4;
        $1024 = ($1022 & 255) << 24 >> 24;
        $1027 = $983;
        HEAP32[$1027 >> 2] = $1024;
        HEAP32[$1027 + 4 >> 2] = (($1024 | 0) < 0) << 31 >> 31;
        break L540;
        break;
       }
      case 12:
       {
        $arglist_current44 = HEAP32[$ap >> 2] | 0;
        $998 = $arglist_current44;
        $1000 = HEAP32[$998 >> 2] | 0;
        $1003 = HEAP32[$998 + 4 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current44 + 8;
        $1004 = $983;
        HEAP32[$1004 >> 2] = $1000;
        HEAP32[$1004 + 4 >> 2] = $1003;
        break L540;
        break;
       }
      case 18:
       {
        $arglist_current62 = HEAP32[$ap >> 2] | 0;
        HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current62 >> 2];
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current62 + 4 >> 2];
        $1037 = +HEAPF64[tempDoublePtr >> 3];
        HEAP32[$ap >> 2] = $arglist_current62 + 8;
        HEAPF64[$983 >> 3] = $1037;
        break L540;
        break;
       }
      case 13:
       {
        $arglist_current47 = HEAP32[$ap >> 2] | 0;
        $1008 = HEAP32[$arglist_current47 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current47 + 4;
        $1010 = ($1008 & 65535) << 16 >> 16;
        $1013 = $983;
        HEAP32[$1013 >> 2] = $1010;
        HEAP32[$1013 + 4 >> 2] = (($1010 | 0) < 0) << 31 >> 31;
        break L540;
        break;
       }
      case 14:
       {
        $arglist_current50 = HEAP32[$ap >> 2] | 0;
        $1017 = HEAP32[$arglist_current50 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current50 + 4;
        $1018 = $983;
        HEAP32[$1018 >> 2] = $1017 & 65535;
        HEAP32[$1018 + 4 >> 2] = 0;
        break L540;
        break;
       }
      case 16:
       {
        $arglist_current56 = HEAP32[$ap >> 2] | 0;
        $1031 = HEAP32[$arglist_current56 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current56 + 4;
        $1032 = $983;
        HEAP32[$1032 >> 2] = $1031 & 255;
        HEAP32[$1032 + 4 >> 2] = 0;
        break L540;
        break;
       }
      case 9:
       {
        $arglist_current35 = HEAP32[$ap >> 2] | 0;
        $985 = HEAP32[$arglist_current35 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current35 + 4;
        HEAP32[$983 >> 2] = $985;
        break L540;
        break;
       }
      case 10:
       {
        $arglist_current38 = HEAP32[$ap >> 2] | 0;
        $986 = HEAP32[$arglist_current38 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current38 + 4;
        $989 = $983;
        HEAP32[$989 >> 2] = $986;
        HEAP32[$989 + 4 >> 2] = (($986 | 0) < 0) << 31 >> 31;
        break L540;
        break;
       }
      default:
       {
        break L540;
       }
      }
     } while (0);
    }
   } while (0);
   $i$289 = $i$289 + 1 | 0;
   if (($i$289 | 0) >= 10) {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label | 0) == 362) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  while (1) {
   if ((HEAP32[$nl_type + ($i$388 << 2) >> 2] | 0) != 0) {
    $$0 = -1;
    label = 362;
    break;
   }
   $i$388 = $i$388 + 1 | 0;
   if (($i$388 | 0) >= 10) {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label | 0) == 362) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if ((label | 0) == 362) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i21$i = 0, $$sum2$i23$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1004 = 0, $1005 = 0, $1008 = 0, $1010 = 0, $1013 = 0, $1018 = 0, $1024 = 0, $1028 = 0, $1029 = 0, $1036 = 0, $1045 = 0, $1048 = 0, $1053 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1069 = 0, $1071 = 0, $1072 = 0, $1079 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $201 = 0, $208 = 0, $215 = 0, $218 = 0, $226 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $237 = 0, $238 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $277 = 0, $28 = 0, $283 = 0, $286 = 0, $287 = 0, $291 = 0, $301 = 0, $304 = 0, $308 = 0, $31 = 0, $310 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $325 = 0, $335 = 0, $336 = 0, $338 = 0, $347 = 0, $349 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $365 = 0, $366 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $38 = 0, $380 = 0, $381 = 0, $390 = 0, $399 = 0, $4 = 0, $406 = 0, $41 = 0, $413 = 0, $416 = 0, $424 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $433 = 0, $434 = 0, $44 = 0, $440 = 0, $445 = 0, $446 = 0, $449 = 0, $451 = 0, $454 = 0, $459 = 0, $46 = 0, $465 = 0, $469 = 0, $47 = 0, $470 = 0, $477 = 0, $486 = 0, $489 = 0, $49 = 0, $494 = 0, $5 = 0, $501 = 0, $502 = 0, $503 = 0, $51 = 0, $511 = 0, $513 = 0, $514 = 0, $524 = 0, $528 = 0, $53 = 0, $530 = 0, $531 = 0, $540 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $554 = 0, $556 = 0, $557 = 0, $563 = 0, $565 = 0, $567 = 0, $57 = 0, $572 = 0, $575 = 0, $577 = 0, $578 = 0, $579 = 0, $587 = 0, $588 = 0, $59 = 0, $591 = 0, $595 = 0, $596 = 0, $599 = 0, $6 = 0, $601 = 0, $605 = 0, $606 = 0, $61 = 0, $611 = 0, $615 = 0, $624 = 0, $625 = 0, $629 = 0, $631 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $643 = 0, $649 = 0, $65 = 0, $655 = 0, $656 = 0, $66 = 0, $661 = 0, $662 = 0, $663 = 0, $667 = 0, $67 = 0, $677 = 0, $679 = 0, $68 = 0, $685 = 0, $686 = 0, $69 = 0, $693 = 0, $697 = 0, $7 = 0, $70 = 0, $703 = 0, $707 = 0, $713 = 0, $715 = 0, $720 = 0, $721 = 0, $725 = 0, $726 = 0, $732 = 0, $738 = 0, $743 = 0, $746 = 0, $747 = 0, $750 = 0, $752 = 0, $754 = 0, $769 = 0, $77 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $785 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $794 = 0, $795 = 0, $797 = 0, $798 = 0, $80 = 0, $804 = 0, $805 = 0, $81 = 0, $814 = 0, $823 = 0, $830 = 0, $838 = 0, $84 = 0, $844 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $853 = 0, $854 = 0, $860 = 0, $865 = 0, $866 = 0, $869 = 0, $871 = 0, $874 = 0, $879 = 0, $88 = 0, $885 = 0, $889 = 0, $890 = 0, $897 = 0, $90 = 0, $906 = 0, $909 = 0, $91 = 0, $914 = 0, $92 = 0, $921 = 0, $922 = 0, $923 = 0, $93 = 0, $931 = 0, $934 = 0, $935 = 0, $94 = 0, $940 = 0, $945 = 0, $946 = 0, $949 = 0, $95 = 0, $950 = 0, $953 = 0, $959 = 0, $960 = 0, $966 = 0, $970 = 0, $976 = 0, $978 = 0, $983 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $99 = 0, $992 = 0, $993 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0, $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$330$i = 0, label = 0, sp = 0, $970$looptemp = 0;
 sp = STACKTOP;
 do {
  if ($bytes >>> 0 < 245) {
   if ($bytes >>> 0 < 11) {
    $5 = 16;
   } else {
    $5 = $bytes + 11 & -8;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[3584] | 0;
   $7 = $6 >>> $4;
   if (($7 & 3 | 0) != 0) {
    $12 = ($7 & 1 ^ 1) + $4 | 0;
    $13 = $12 << 1;
    $14 = 14376 + ($13 << 2) | 0;
    $15 = 14376 + ($13 + 2 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 + 8 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    do {
     if (($14 | 0) == ($18 | 0)) {
      HEAP32[3584] = $6 & ~(1 << $12);
     } else {
      if ($18 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      }
      $25 = $18 + 12 | 0;
      if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
       HEAP32[$25 >> 2] = $14;
       HEAP32[$15 >> 2] = $18;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $28 = $12 << 3;
    HEAP32[$16 + 4 >> 2] = $28 | 3;
    $31 = $16 + ($28 | 4) | 0;
    HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1;
    $mem$0 = $17;
    STACKTOP = sp;
    return $mem$0 | 0;
   }
   if ($5 >>> 0 > (HEAP32[14344 >> 2] | 0) >>> 0) {
    if (($7 | 0) != 0) {
     $38 = 2 << $4;
     $41 = $7 << $4 & ($38 | 0 - $38);
     $44 = ($41 & 0 - $41) + -1 | 0;
     $46 = $44 >>> 12 & 16;
     $47 = $44 >>> $46;
     $49 = $47 >>> 5 & 8;
     $51 = $47 >>> $49;
     $53 = $51 >>> 2 & 4;
     $55 = $51 >>> $53;
     $57 = $55 >>> 1 & 2;
     $59 = $55 >>> $57;
     $61 = $59 >>> 1 & 1;
     $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0;
     $65 = $64 << 1;
     $66 = 14376 + ($65 << 2) | 0;
     $67 = 14376 + ($65 + 2 << 2) | 0;
     $68 = HEAP32[$67 >> 2] | 0;
     $69 = $68 + 8 | 0;
     $70 = HEAP32[$69 >> 2] | 0;
     do {
      if (($66 | 0) == ($70 | 0)) {
       HEAP32[3584] = $6 & ~(1 << $64);
      } else {
       if ($70 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
        _abort();
       }
       $77 = $70 + 12 | 0;
       if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
        HEAP32[$77 >> 2] = $66;
        HEAP32[$67 >> 2] = $70;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $80 = $64 << 3;
     $81 = $80 - $5 | 0;
     HEAP32[$68 + 4 >> 2] = $5 | 3;
     $84 = $68 + $5 | 0;
     HEAP32[$68 + ($5 | 4) >> 2] = $81 | 1;
     HEAP32[$68 + $80 >> 2] = $81;
     $88 = HEAP32[14344 >> 2] | 0;
     if (($88 | 0) != 0) {
      $90 = HEAP32[14356 >> 2] | 0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = 14376 + ($92 << 2) | 0;
      $94 = HEAP32[3584] | 0;
      $95 = 1 << $91;
      if (($94 & $95 | 0) == 0) {
       HEAP32[3584] = $94 | $95;
       $$pre$phiZ2D = 14376 + ($92 + 2 << 2) | 0;
       $F4$0 = $93;
      } else {
       $99 = 14376 + ($92 + 2 << 2) | 0;
       $100 = HEAP32[$99 >> 2] | 0;
       if ($100 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        $$pre$phiZ2D = $99;
        $F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $90;
      HEAP32[$F4$0 + 12 >> 2] = $90;
      HEAP32[$90 + 8 >> 2] = $F4$0;
      HEAP32[$90 + 12 >> 2] = $93;
     }
     HEAP32[14344 >> 2] = $81;
     HEAP32[14356 >> 2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;
     return $mem$0 | 0;
    }
    $106 = HEAP32[14340 >> 2] | 0;
    if (($106 | 0) == 0) {
     $nb$0 = $5;
    } else {
     $110 = ($106 & 0 - $106) + -1 | 0;
     $112 = $110 >>> 12 & 16;
     $113 = $110 >>> $112;
     $115 = $113 >>> 5 & 8;
     $117 = $113 >>> $115;
     $119 = $117 >>> 2 & 4;
     $121 = $117 >>> $119;
     $123 = $121 >>> 1 & 2;
     $125 = $121 >>> $123;
     $127 = $125 >>> 1 & 1;
     $132 = HEAP32[14640 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0;
     $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $5 | 0;
     $t$0$i = $132;
     $v$0$i = $132;
     while (1) {
      $138 = HEAP32[$t$0$i + 16 >> 2] | 0;
      if (($138 | 0) == 0) {
       $141 = HEAP32[$t$0$i + 20 >> 2] | 0;
       if (($141 | 0) == 0) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $147 = (HEAP32[$144 + 4 >> 2] & -8) - $5 | 0;
      $148 = $147 >>> 0 < $rsize$0$i >>> 0;
      $rsize$0$i = $148 ? $147 : $rsize$0$i;
      $t$0$i = $144;
      $v$0$i = $148 ? $144 : $v$0$i;
     }
     $149 = HEAP32[14352 >> 2] | 0;
     if ($v$0$i >>> 0 < $149 >>> 0) {
      _abort();
     }
     $151 = $v$0$i + $5 | 0;
     if (!($v$0$i >>> 0 < $151 >>> 0)) {
      _abort();
     }
     $154 = HEAP32[$v$0$i + 24 >> 2] | 0;
     $156 = HEAP32[$v$0$i + 12 >> 2] | 0;
     do {
      if (($156 | 0) == ($v$0$i | 0)) {
       $167 = $v$0$i + 20 | 0;
       $168 = HEAP32[$167 >> 2] | 0;
       if (($168 | 0) == 0) {
        $170 = $v$0$i + 16 | 0;
        $171 = HEAP32[$170 >> 2] | 0;
        if (($171 | 0) == 0) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;
         $RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;
        $RP$0$i = $167;
       }
       while (1) {
        $173 = $R$0$i + 20 | 0;
        $174 = HEAP32[$173 >> 2] | 0;
        if (($174 | 0) != 0) {
         $R$0$i = $174;
         $RP$0$i = $173;
         continue;
        }
        $176 = $R$0$i + 16 | 0;
        $177 = HEAP32[$176 >> 2] | 0;
        if (($177 | 0) == 0) {
         break;
        } else {
         $R$0$i = $177;
         $RP$0$i = $176;
        }
       }
       if ($RP$0$i >>> 0 < $149 >>> 0) {
        _abort();
       } else {
        HEAP32[$RP$0$i >> 2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $159 = HEAP32[$v$0$i + 8 >> 2] | 0;
       if ($159 >>> 0 < $149 >>> 0) {
        _abort();
       }
       $161 = $159 + 12 | 0;
       if ((HEAP32[$161 >> 2] | 0) != ($v$0$i | 0)) {
        _abort();
       }
       $164 = $156 + 8 | 0;
       if ((HEAP32[$164 >> 2] | 0) == ($v$0$i | 0)) {
        HEAP32[$161 >> 2] = $156;
        HEAP32[$164 >> 2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     do {
      if (($154 | 0) != 0) {
       $182 = HEAP32[$v$0$i + 28 >> 2] | 0;
       $183 = 14640 + ($182 << 2) | 0;
       if (($v$0$i | 0) == (HEAP32[$183 >> 2] | 0)) {
        HEAP32[$183 >> 2] = $R$1$i;
        if (($R$1$i | 0) == 0) {
         HEAP32[14340 >> 2] = HEAP32[14340 >> 2] & ~(1 << $182);
         break;
        }
       } else {
        if ($154 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
         _abort();
        }
        $192 = $154 + 16 | 0;
        if ((HEAP32[$192 >> 2] | 0) == ($v$0$i | 0)) {
         HEAP32[$192 >> 2] = $R$1$i;
        } else {
         HEAP32[$154 + 20 >> 2] = $R$1$i;
        }
        if (($R$1$i | 0) == 0) {
         break;
        }
       }
       if ($R$1$i >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
        _abort();
       }
       HEAP32[$R$1$i + 24 >> 2] = $154;
       $201 = HEAP32[$v$0$i + 16 >> 2] | 0;
       do {
        if (($201 | 0) != 0) {
         if ($201 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          HEAP32[$R$1$i + 16 >> 2] = $201;
          HEAP32[$201 + 24 >> 2] = $R$1$i;
          break;
         }
        }
       } while (0);
       $208 = HEAP32[$v$0$i + 20 >> 2] | 0;
       if (($208 | 0) != 0) {
        if ($208 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
         _abort();
        } else {
         HEAP32[$R$1$i + 20 >> 2] = $208;
         HEAP32[$208 + 24 >> 2] = $R$1$i;
         break;
        }
       }
      }
     } while (0);
     if ($rsize$0$i >>> 0 < 16) {
      $215 = $rsize$0$i + $5 | 0;
      HEAP32[$v$0$i + 4 >> 2] = $215 | 3;
      $218 = $v$0$i + ($215 + 4) | 0;
      HEAP32[$218 >> 2] = HEAP32[$218 >> 2] | 1;
     } else {
      HEAP32[$v$0$i + 4 >> 2] = $5 | 3;
      HEAP32[$v$0$i + ($5 | 4) >> 2] = $rsize$0$i | 1;
      HEAP32[$v$0$i + ($rsize$0$i + $5) >> 2] = $rsize$0$i;
      $226 = HEAP32[14344 >> 2] | 0;
      if (($226 | 0) != 0) {
       $228 = HEAP32[14356 >> 2] | 0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = 14376 + ($230 << 2) | 0;
       $232 = HEAP32[3584] | 0;
       $233 = 1 << $229;
       if (($232 & $233 | 0) == 0) {
        HEAP32[3584] = $232 | $233;
        $$pre$phi$iZ2D = 14376 + ($230 + 2 << 2) | 0;
        $F1$0$i = $231;
       } else {
        $237 = 14376 + ($230 + 2 << 2) | 0;
        $238 = HEAP32[$237 >> 2] | 0;
        if ($238 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
         _abort();
        } else {
         $$pre$phi$iZ2D = $237;
         $F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $228;
       HEAP32[$F1$0$i + 12 >> 2] = $228;
       HEAP32[$228 + 8 >> 2] = $F1$0$i;
       HEAP32[$228 + 12 >> 2] = $231;
      }
      HEAP32[14344 >> 2] = $rsize$0$i;
      HEAP32[14356 >> 2] = $151;
     }
     $mem$0 = $v$0$i + 8 | 0;
     STACKTOP = sp;
     return $mem$0 | 0;
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   if ($bytes >>> 0 > 4294967231) {
    $nb$0 = -1;
   } else {
    $246 = $bytes + 11 | 0;
    $247 = $246 & -8;
    $248 = HEAP32[14340 >> 2] | 0;
    if (($248 | 0) == 0) {
     $nb$0 = $247;
    } else {
     $250 = 0 - $247 | 0;
     $251 = $246 >>> 8;
     if (($251 | 0) == 0) {
      $idx$0$i = 0;
     } else {
      if ($247 >>> 0 > 16777215) {
       $idx$0$i = 31;
      } else {
       $256 = ($251 + 1048320 | 0) >>> 16 & 8;
       $257 = $251 << $256;
       $260 = ($257 + 520192 | 0) >>> 16 & 4;
       $262 = $257 << $260;
       $265 = ($262 + 245760 | 0) >>> 16 & 2;
       $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
       $idx$0$i = $247 >>> ($270 + 7 | 0) & 1 | $270 << 1;
      }
     }
     $277 = HEAP32[14640 + ($idx$0$i << 2) >> 2] | 0;
     L126 : do {
      if (($277 | 0) == 0) {
       $rsize$2$i = $250;
       $t$1$i = 0;
       $v$2$i = 0;
      } else {
       if (($idx$0$i | 0) == 31) {
        $283 = 0;
       } else {
        $283 = 25 - ($idx$0$i >>> 1) | 0;
       }
       $rsize$0$i15 = $250;
       $rst$0$i = 0;
       $sizebits$0$i = $247 << $283;
       $t$0$i14 = $277;
       $v$0$i16 = 0;
       while (1) {
        $286 = HEAP32[$t$0$i14 + 4 >> 2] & -8;
        $287 = $286 - $247 | 0;
        if ($287 >>> 0 < $rsize$0$i15 >>> 0) {
         if (($286 | 0) == ($247 | 0)) {
          $rsize$2$i = $287;
          $t$1$i = $t$0$i14;
          $v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;
          $v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;
         $v$1$i = $v$0$i16;
        }
        $291 = HEAP32[$t$0$i14 + 20 >> 2] | 0;
        $t$0$i14 = HEAP32[$t$0$i14 + ($sizebits$0$i >>> 31 << 2) + 16 >> 2] | 0;
        $rst$1$i = ($291 | 0) == 0 | ($291 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $291;
        if (($t$0$i14 | 0) == 0) {
         $rsize$2$i = $rsize$1$i;
         $t$1$i = $rst$1$i;
         $v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;
         $rst$0$i = $rst$1$i;
         $sizebits$0$i = $sizebits$0$i << 1;
         $v$0$i16 = $v$1$i;
        }
       }
      }
     } while (0);
     if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
      $301 = 2 << $idx$0$i;
      $304 = $248 & ($301 | 0 - $301);
      if (($304 | 0) == 0) {
       $nb$0 = $247;
       break;
      }
      $308 = ($304 & 0 - $304) + -1 | 0;
      $310 = $308 >>> 12 & 16;
      $311 = $308 >>> $310;
      $313 = $311 >>> 5 & 8;
      $315 = $311 >>> $313;
      $317 = $315 >>> 2 & 4;
      $319 = $315 >>> $317;
      $321 = $319 >>> 1 & 2;
      $323 = $319 >>> $321;
      $325 = $323 >>> 1 & 1;
      $t$2$ph$i = HEAP32[14640 + (($313 | $310 | $317 | $321 | $325) + ($323 >>> $325) << 2) >> 2] | 0;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     if (($t$2$ph$i | 0) == 0) {
      $rsize$3$lcssa$i = $rsize$2$i;
      $v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;
      $t$228$i = $t$2$ph$i;
      $v$330$i = $v$2$i;
      while (1) {
       $335 = (HEAP32[$t$228$i + 4 >> 2] & -8) - $247 | 0;
       $336 = $335 >>> 0 < $rsize$329$i >>> 0;
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $338 = HEAP32[$t$228$i + 16 >> 2] | 0;
       if (($338 | 0) != 0) {
        $rsize$329$i = $$rsize$3$i;
        $t$228$i = $338;
        $v$330$i = $t$2$v$3$i;
        continue;
       }
       $t$228$i = HEAP32[$t$228$i + 20 >> 2] | 0;
       if (($t$228$i | 0) == 0) {
        $rsize$3$lcssa$i = $$rsize$3$i;
        $v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;
        $v$330$i = $t$2$v$3$i;
       }
      }
     }
     if (($v$3$lcssa$i | 0) == 0) {
      $nb$0 = $247;
     } else {
      if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[14344 >> 2] | 0) - $247 | 0) >>> 0) {
       $347 = HEAP32[14352 >> 2] | 0;
       if ($v$3$lcssa$i >>> 0 < $347 >>> 0) {
        _abort();
       }
       $349 = $v$3$lcssa$i + $247 | 0;
       if (!($v$3$lcssa$i >>> 0 < $349 >>> 0)) {
        _abort();
       }
       $352 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0;
       $354 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0;
       do {
        if (($354 | 0) == ($v$3$lcssa$i | 0)) {
         $365 = $v$3$lcssa$i + 20 | 0;
         $366 = HEAP32[$365 >> 2] | 0;
         if (($366 | 0) == 0) {
          $368 = $v$3$lcssa$i + 16 | 0;
          $369 = HEAP32[$368 >> 2] | 0;
          if (($369 | 0) == 0) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;
           $RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;
          $RP$0$i17 = $365;
         }
         while (1) {
          $371 = $R$0$i18 + 20 | 0;
          $372 = HEAP32[$371 >> 2] | 0;
          if (($372 | 0) != 0) {
           $R$0$i18 = $372;
           $RP$0$i17 = $371;
           continue;
          }
          $374 = $R$0$i18 + 16 | 0;
          $375 = HEAP32[$374 >> 2] | 0;
          if (($375 | 0) == 0) {
           break;
          } else {
           $R$0$i18 = $375;
           $RP$0$i17 = $374;
          }
         }
         if ($RP$0$i17 >>> 0 < $347 >>> 0) {
          _abort();
         } else {
          HEAP32[$RP$0$i17 >> 2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $357 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0;
         if ($357 >>> 0 < $347 >>> 0) {
          _abort();
         }
         $359 = $357 + 12 | 0;
         if ((HEAP32[$359 >> 2] | 0) != ($v$3$lcssa$i | 0)) {
          _abort();
         }
         $362 = $354 + 8 | 0;
         if ((HEAP32[$362 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
          HEAP32[$359 >> 2] = $354;
          HEAP32[$362 >> 2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       do {
        if (($352 | 0) != 0) {
         $380 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0;
         $381 = 14640 + ($380 << 2) | 0;
         if (($v$3$lcssa$i | 0) == (HEAP32[$381 >> 2] | 0)) {
          HEAP32[$381 >> 2] = $R$1$i20;
          if (($R$1$i20 | 0) == 0) {
           HEAP32[14340 >> 2] = HEAP32[14340 >> 2] & ~(1 << $380);
           break;
          }
         } else {
          if ($352 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
           _abort();
          }
          $390 = $352 + 16 | 0;
          if ((HEAP32[$390 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
           HEAP32[$390 >> 2] = $R$1$i20;
          } else {
           HEAP32[$352 + 20 >> 2] = $R$1$i20;
          }
          if (($R$1$i20 | 0) == 0) {
           break;
          }
         }
         if ($R$1$i20 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
          _abort();
         }
         HEAP32[$R$1$i20 + 24 >> 2] = $352;
         $399 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0;
         do {
          if (($399 | 0) != 0) {
           if ($399 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
            _abort();
           } else {
            HEAP32[$R$1$i20 + 16 >> 2] = $399;
            HEAP32[$399 + 24 >> 2] = $R$1$i20;
            break;
           }
          }
         } while (0);
         $406 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0;
         if (($406 | 0) != 0) {
          if ($406 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[$R$1$i20 + 20 >> 2] = $406;
           HEAP32[$406 + 24 >> 2] = $R$1$i20;
           break;
          }
         }
        }
       } while (0);
       L204 : do {
        if ($rsize$3$lcssa$i >>> 0 < 16) {
         $413 = $rsize$3$lcssa$i + $247 | 0;
         HEAP32[$v$3$lcssa$i + 4 >> 2] = $413 | 3;
         $416 = $v$3$lcssa$i + ($413 + 4) | 0;
         HEAP32[$416 >> 2] = HEAP32[$416 >> 2] | 1;
        } else {
         HEAP32[$v$3$lcssa$i + 4 >> 2] = $247 | 3;
         HEAP32[$v$3$lcssa$i + ($247 | 4) >> 2] = $rsize$3$lcssa$i | 1;
         HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $247) >> 2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         if ($rsize$3$lcssa$i >>> 0 < 256) {
          $426 = $424 << 1;
          $427 = 14376 + ($426 << 2) | 0;
          $428 = HEAP32[3584] | 0;
          $429 = 1 << $424;
          do {
           if (($428 & $429 | 0) == 0) {
            HEAP32[3584] = $428 | $429;
            $$pre$phi$i26Z2D = 14376 + ($426 + 2 << 2) | 0;
            $F5$0$i = $427;
           } else {
            $433 = 14376 + ($426 + 2 << 2) | 0;
            $434 = HEAP32[$433 >> 2] | 0;
            if (!($434 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0)) {
             $$pre$phi$i26Z2D = $433;
             $F5$0$i = $434;
             break;
            }
            _abort();
           }
          } while (0);
          HEAP32[$$pre$phi$i26Z2D >> 2] = $349;
          HEAP32[$F5$0$i + 12 >> 2] = $349;
          HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $F5$0$i;
          HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         if (($440 | 0) == 0) {
          $I7$0$i = 0;
         } else {
          if ($rsize$3$lcssa$i >>> 0 > 16777215) {
           $I7$0$i = 31;
          } else {
           $445 = ($440 + 1048320 | 0) >>> 16 & 8;
           $446 = $440 << $445;
           $449 = ($446 + 520192 | 0) >>> 16 & 4;
           $451 = $446 << $449;
           $454 = ($451 + 245760 | 0) >>> 16 & 2;
           $459 = 14 - ($449 | $445 | $454) + ($451 << $454 >>> 15) | 0;
           $I7$0$i = $rsize$3$lcssa$i >>> ($459 + 7 | 0) & 1 | $459 << 1;
          }
         }
         $465 = 14640 + ($I7$0$i << 2) | 0;
         HEAP32[$v$3$lcssa$i + ($247 + 28) >> 2] = $I7$0$i;
         HEAP32[$v$3$lcssa$i + ($247 + 20) >> 2] = 0;
         HEAP32[$v$3$lcssa$i + ($247 + 16) >> 2] = 0;
         $469 = HEAP32[14340 >> 2] | 0;
         $470 = 1 << $I7$0$i;
         if (($469 & $470 | 0) == 0) {
          HEAP32[14340 >> 2] = $469 | $470;
          HEAP32[$465 >> 2] = $349;
          HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = $465;
          HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $349;
          HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $349;
          break;
         }
         $477 = HEAP32[$465 >> 2] | 0;
         if (($I7$0$i | 0) == 31) {
          $486 = 0;
         } else {
          $486 = 25 - ($I7$0$i >>> 1) | 0;
         }
         L224 : do {
          if ((HEAP32[$477 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
           $T$0$lcssa$i = $477;
          } else {
           $K12$025$i = $rsize$3$lcssa$i << $486;
           $T$024$i = $477;
           while (1) {
            $494 = $T$024$i + ($K12$025$i >>> 31 << 2) + 16 | 0;
            $489 = HEAP32[$494 >> 2] | 0;
            if (($489 | 0) == 0) {
             break;
            }
            if ((HEAP32[$489 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
             $T$0$lcssa$i = $489;
             break L224;
            } else {
             $K12$025$i = $K12$025$i << 1;
             $T$024$i = $489;
            }
           }
           if ($494 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
            _abort();
           } else {
            HEAP32[$494 >> 2] = $349;
            HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = $T$024$i;
            HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $349;
            HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $349;
            break L204;
           }
          }
         } while (0);
         $501 = $T$0$lcssa$i + 8 | 0;
         $502 = HEAP32[$501 >> 2] | 0;
         $503 = HEAP32[14352 >> 2] | 0;
         if ($T$0$lcssa$i >>> 0 < $503 >>> 0) {
          _abort();
         }
         if ($502 >>> 0 < $503 >>> 0) {
          _abort();
         } else {
          HEAP32[$502 + 12 >> 2] = $349;
          HEAP32[$501 >> 2] = $349;
          HEAP32[$v$3$lcssa$i + ($247 + 8) >> 2] = $502;
          HEAP32[$v$3$lcssa$i + ($247 + 12) >> 2] = $T$0$lcssa$i;
          HEAP32[$v$3$lcssa$i + ($247 + 24) >> 2] = 0;
          break;
         }
        }
       } while (0);
       $mem$0 = $v$3$lcssa$i + 8 | 0;
       STACKTOP = sp;
       return $mem$0 | 0;
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while (0);
 $511 = HEAP32[14344 >> 2] | 0;
 if (!($nb$0 >>> 0 > $511 >>> 0)) {
  $513 = $511 - $nb$0 | 0;
  $514 = HEAP32[14356 >> 2] | 0;
  if ($513 >>> 0 > 15) {
   HEAP32[14356 >> 2] = $514 + $nb$0;
   HEAP32[14344 >> 2] = $513;
   HEAP32[$514 + ($nb$0 + 4) >> 2] = $513 | 1;
   HEAP32[$514 + $511 >> 2] = $513;
   HEAP32[$514 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[14344 >> 2] = 0;
   HEAP32[14356 >> 2] = 0;
   HEAP32[$514 + 4 >> 2] = $511 | 3;
   $524 = $514 + ($511 + 4) | 0;
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1;
  }
  $mem$0 = $514 + 8 | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $528 = HEAP32[14348 >> 2] | 0;
 if ($nb$0 >>> 0 < $528 >>> 0) {
  $530 = $528 - $nb$0 | 0;
  HEAP32[14348 >> 2] = $530;
  $531 = HEAP32[14360 >> 2] | 0;
  HEAP32[14360 >> 2] = $531 + $nb$0;
  HEAP32[$531 + ($nb$0 + 4) >> 2] = $530 | 1;
  HEAP32[$531 + 4 >> 2] = $nb$0 | 3;
  $mem$0 = $531 + 8 | 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 do {
  if ((HEAP32[3702] | 0) == 0) {
   $540 = _sysconf(30) | 0;
   if (($540 + -1 & $540 | 0) == 0) {
    HEAP32[14816 >> 2] = $540;
    HEAP32[14812 >> 2] = $540;
    HEAP32[14820 >> 2] = -1;
    HEAP32[14824 >> 2] = -1;
    HEAP32[14828 >> 2] = 0;
    HEAP32[14780 >> 2] = 0;
    $546 = (_time(0) | 0) & -16 ^ 1431655768;
    HEAP32[3702] = $546;
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 $547 = $nb$0 + 48 | 0;
 $548 = HEAP32[14816 >> 2] | 0;
 $549 = $nb$0 + 47 | 0;
 $550 = $548 + $549 | 0;
 $551 = 0 - $548 | 0;
 $552 = $550 & $551;
 if (!($552 >>> 0 > $nb$0 >>> 0)) {
  $mem$0 = 0;
  STACKTOP = sp;
  return $mem$0 | 0;
 }
 $554 = HEAP32[14776 >> 2] | 0;
 if (($554 | 0) != 0) {
  $556 = HEAP32[14768 >> 2] | 0;
  $557 = $556 + $552 | 0;
  if ($557 >>> 0 <= $556 >>> 0 | $557 >>> 0 > $554 >>> 0) {
   $mem$0 = 0;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 }
 L269 : do {
  if ((HEAP32[14780 >> 2] & 4 | 0) == 0) {
   $563 = HEAP32[14360 >> 2] | 0;
   L271 : do {
    if (($563 | 0) == 0) {
     label = 182;
    } else {
     $sp$0$i$i = 14784 | 0;
     while (1) {
      $565 = HEAP32[$sp$0$i$i >> 2] | 0;
      if (!($565 >>> 0 > $563 >>> 0)) {
       $567 = $sp$0$i$i + 4 | 0;
       if (($565 + (HEAP32[$567 >> 2] | 0) | 0) >>> 0 > $563 >>> 0) {
        break;
       }
      }
      $572 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
      if (($572 | 0) == 0) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     if (($sp$0$i$i | 0) == 0) {
      label = 182;
     } else {
      $599 = $550 - (HEAP32[14348 >> 2] | 0) & $551;
      if ($599 >>> 0 < 2147483647) {
       $601 = _sbrk($599 | 0) | 0;
       $605 = ($601 | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$567 >> 2] | 0) | 0);
       $br$0$i = $601;
       $ssize$1$i = $599;
       $tbase$0$i = $605 ? $601 : -1;
       $tsize$0$i = $605 ? $599 : 0;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 182) {
     $575 = _sbrk(0) | 0;
     if (($575 | 0) == (-1 | 0)) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[14812 >> 2] | 0;
      $579 = $578 + -1 | 0;
      if (($579 & $577 | 0) == 0) {
       $ssize$0$i = $552;
      } else {
       $ssize$0$i = $552 - $577 + ($579 + $577 & 0 - $578) | 0;
      }
      $587 = HEAP32[14768 >> 2] | 0;
      $588 = $587 + $ssize$0$i | 0;
      if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
       $591 = HEAP32[14776 >> 2] | 0;
       if (($591 | 0) != 0) {
        if ($588 >>> 0 <= $587 >>> 0 | $588 >>> 0 > $591 >>> 0) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = _sbrk($ssize$0$i | 0) | 0;
       $596 = ($595 | 0) == ($575 | 0);
       $br$0$i = $595;
       $ssize$1$i = $ssize$0$i;
       $tbase$0$i = $596 ? $575 : -1;
       $tsize$0$i = $596 ? $ssize$0$i : 0;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while (0);
   L291 : do {
    if ((label | 0) == 191) {
     $606 = 0 - $ssize$1$i | 0;
     if (($tbase$0$i | 0) != (-1 | 0)) {
      $tbase$247$i = $tbase$0$i;
      $tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     do {
      if (($br$0$i | 0) != (-1 | 0) & $ssize$1$i >>> 0 < 2147483647 & $ssize$1$i >>> 0 < $547 >>> 0) {
       $611 = HEAP32[14816 >> 2] | 0;
       $615 = $549 - $ssize$1$i + $611 & 0 - $611;
       if ($615 >>> 0 < 2147483647) {
        if ((_sbrk($615 | 0) | 0) == (-1 | 0)) {
         _sbrk($606 | 0) | 0;
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $ssize$2$i = $615 + $ssize$1$i | 0;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while (0);
     if (($br$0$i | 0) == (-1 | 0)) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;
      $tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while (0);
   HEAP32[14780 >> 2] = HEAP32[14780 >> 2] | 4;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while (0);
 if ((label | 0) == 199) {
  if ($552 >>> 0 < 2147483647) {
   $624 = _sbrk($552 | 0) | 0;
   $625 = _sbrk(0) | 0;
   if (($625 | 0) != (-1 | 0) & ($624 | 0) != (-1 | 0) & $624 >>> 0 < $625 >>> 0) {
    $629 = $625 - $624 | 0;
    $631 = $629 >>> 0 > ($nb$0 + 40 | 0) >>> 0;
    if ($631) {
     $tbase$247$i = $624;
     $tsize$246$i = $631 ? $629 : $tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label | 0) == 202) {
  $633 = (HEAP32[14768 >> 2] | 0) + $tsize$246$i | 0;
  HEAP32[14768 >> 2] = $633;
  if ($633 >>> 0 > (HEAP32[14772 >> 2] | 0) >>> 0) {
   HEAP32[14772 >> 2] = $633;
  }
  $636 = HEAP32[14360 >> 2] | 0;
  L311 : do {
   if (($636 | 0) == 0) {
    $638 = HEAP32[14352 >> 2] | 0;
    if (($638 | 0) == 0 | $tbase$247$i >>> 0 < $638 >>> 0) {
     HEAP32[14352 >> 2] = $tbase$247$i;
    }
    HEAP32[14784 >> 2] = $tbase$247$i;
    HEAP32[14788 >> 2] = $tsize$246$i;
    HEAP32[14796 >> 2] = 0;
    HEAP32[14372 >> 2] = HEAP32[3702];
    HEAP32[14368 >> 2] = -1;
    $i$02$i$i = 0;
    do {
     $642 = $i$02$i$i << 1;
     $643 = 14376 + ($642 << 2) | 0;
     HEAP32[14376 + ($642 + 3 << 2) >> 2] = $643;
     HEAP32[14376 + ($642 + 2 << 2) >> 2] = $643;
     $i$02$i$i = $i$02$i$i + 1 | 0;
    } while (($i$02$i$i | 0) != 32);
    $649 = $tbase$247$i + 8 | 0;
    if (($649 & 7 | 0) == 0) {
     $655 = 0;
    } else {
     $655 = 0 - $649 & 7;
    }
    $656 = $tsize$246$i + -40 - $655 | 0;
    HEAP32[14360 >> 2] = $tbase$247$i + $655;
    HEAP32[14348 >> 2] = $656;
    HEAP32[$tbase$247$i + ($655 + 4) >> 2] = $656 | 1;
    HEAP32[$tbase$247$i + ($tsize$246$i + -36) >> 2] = 40;
    HEAP32[14364 >> 2] = HEAP32[14824 >> 2];
   } else {
    $sp$075$i = 14784 | 0;
    while (1) {
     $661 = HEAP32[$sp$075$i >> 2] | 0;
     $662 = $sp$075$i + 4 | 0;
     $663 = HEAP32[$662 >> 2] | 0;
     if (($tbase$247$i | 0) == ($661 + $663 | 0)) {
      label = 214;
      break;
     }
     $667 = HEAP32[$sp$075$i + 8 >> 2] | 0;
     if (($667 | 0) == 0) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label | 0) == 214) {
     if ((HEAP32[$sp$075$i + 12 >> 2] & 8 | 0) == 0) {
      if ($636 >>> 0 >= $661 >>> 0 & $636 >>> 0 < $tbase$247$i >>> 0) {
       HEAP32[$662 >> 2] = $663 + $tsize$246$i;
       $677 = (HEAP32[14348 >> 2] | 0) + $tsize$246$i | 0;
       $679 = $636 + 8 | 0;
       if (($679 & 7 | 0) == 0) {
        $685 = 0;
       } else {
        $685 = 0 - $679 & 7;
       }
       $686 = $677 - $685 | 0;
       HEAP32[14360 >> 2] = $636 + $685;
       HEAP32[14348 >> 2] = $686;
       HEAP32[$636 + ($685 + 4) >> 2] = $686 | 1;
       HEAP32[$636 + ($677 + 4) >> 2] = 40;
       HEAP32[14364 >> 2] = HEAP32[14824 >> 2];
       break;
      }
     }
    }
    if ($tbase$247$i >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
     HEAP32[14352 >> 2] = $tbase$247$i;
    }
    $693 = $tbase$247$i + $tsize$246$i | 0;
    $sp$168$i = 14784 | 0;
    while (1) {
     if ((HEAP32[$sp$168$i >> 2] | 0) == ($693 | 0)) {
      label = 224;
      break;
     }
     $697 = HEAP32[$sp$168$i + 8 >> 2] | 0;
     if (($697 | 0) == 0) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label | 0) == 224) {
     if ((HEAP32[$sp$168$i + 12 >> 2] & 8 | 0) == 0) {
      HEAP32[$sp$168$i >> 2] = $tbase$247$i;
      $703 = $sp$168$i + 4 | 0;
      HEAP32[$703 >> 2] = (HEAP32[$703 >> 2] | 0) + $tsize$246$i;
      $707 = $tbase$247$i + 8 | 0;
      if (($707 & 7 | 0) == 0) {
       $713 = 0;
      } else {
       $713 = 0 - $707 & 7;
      }
      $715 = $tbase$247$i + ($tsize$246$i + 8) | 0;
      if (($715 & 7 | 0) == 0) {
       $720 = 0;
      } else {
       $720 = 0 - $715 & 7;
      }
      $721 = $tbase$247$i + ($720 + $tsize$246$i) | 0;
      $$sum$i21$i = $713 + $nb$0 | 0;
      $725 = $tbase$247$i + $$sum$i21$i | 0;
      $726 = $721 - ($tbase$247$i + $713) - $nb$0 | 0;
      HEAP32[$tbase$247$i + ($713 + 4) >> 2] = $nb$0 | 3;
      L338 : do {
       if (($721 | 0) == (HEAP32[14360 >> 2] | 0)) {
        $732 = (HEAP32[14348 >> 2] | 0) + $726 | 0;
        HEAP32[14348 >> 2] = $732;
        HEAP32[14360 >> 2] = $725;
        HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $732 | 1;
       } else {
        if (($721 | 0) == (HEAP32[14356 >> 2] | 0)) {
         $738 = (HEAP32[14344 >> 2] | 0) + $726 | 0;
         HEAP32[14344 >> 2] = $738;
         HEAP32[14356 >> 2] = $725;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $738 | 1;
         HEAP32[$tbase$247$i + ($738 + $$sum$i21$i) >> 2] = $738;
         break;
        }
        $$sum2$i23$i = $tsize$246$i + 4 | 0;
        $743 = HEAP32[$tbase$247$i + ($$sum2$i23$i + $720) >> 2] | 0;
        if (($743 & 3 | 0) == 1) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         L346 : do {
          if ($743 >>> 0 < 256) {
           $750 = HEAP32[$tbase$247$i + (($720 | 8) + $tsize$246$i) >> 2] | 0;
           $752 = HEAP32[$tbase$247$i + ($tsize$246$i + 12 + $720) >> 2] | 0;
           $754 = 14376 + ($747 << 1 << 2) | 0;
           do {
            if (($750 | 0) != ($754 | 0)) {
             if ($750 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
              _abort();
             }
             if ((HEAP32[$750 + 12 >> 2] | 0) == ($721 | 0)) {
              break;
             }
             _abort();
            }
           } while (0);
           if (($752 | 0) == ($750 | 0)) {
            HEAP32[3584] = HEAP32[3584] & ~(1 << $747);
            break;
           }
           do {
            if (($752 | 0) == ($754 | 0)) {
             $$pre$phi58$i$iZ2D = $752 + 8 | 0;
            } else {
             if ($752 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
              _abort();
             }
             $769 = $752 + 8 | 0;
             if ((HEAP32[$769 >> 2] | 0) == ($721 | 0)) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
            }
           } while (0);
           HEAP32[$750 + 12 >> 2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D >> 2] = $750;
          } else {
           $774 = HEAP32[$tbase$247$i + (($720 | 24) + $tsize$246$i) >> 2] | 0;
           $776 = HEAP32[$tbase$247$i + ($tsize$246$i + 12 + $720) >> 2] | 0;
           do {
            if (($776 | 0) == ($721 | 0)) {
             $$sum67$i$i = $720 | 16;
             $788 = $tbase$247$i + ($$sum2$i23$i + $$sum67$i$i) | 0;
             $789 = HEAP32[$788 >> 2] | 0;
             if (($789 | 0) == 0) {
              $791 = $tbase$247$i + ($$sum67$i$i + $tsize$246$i) | 0;
              $792 = HEAP32[$791 >> 2] | 0;
              if (($792 | 0) == 0) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;
               $RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;
              $RP$0$i$i = $788;
             }
             while (1) {
              $794 = $R$0$i$i + 20 | 0;
              $795 = HEAP32[$794 >> 2] | 0;
              if (($795 | 0) != 0) {
               $R$0$i$i = $795;
               $RP$0$i$i = $794;
               continue;
              }
              $797 = $R$0$i$i + 16 | 0;
              $798 = HEAP32[$797 >> 2] | 0;
              if (($798 | 0) == 0) {
               break;
              } else {
               $R$0$i$i = $798;
               $RP$0$i$i = $797;
              }
             }
             if ($RP$0$i$i >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
              _abort();
             } else {
              HEAP32[$RP$0$i$i >> 2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $779 = HEAP32[$tbase$247$i + (($720 | 8) + $tsize$246$i) >> 2] | 0;
             if ($779 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
              _abort();
             }
             $782 = $779 + 12 | 0;
             if ((HEAP32[$782 >> 2] | 0) != ($721 | 0)) {
              _abort();
             }
             $785 = $776 + 8 | 0;
             if ((HEAP32[$785 >> 2] | 0) == ($721 | 0)) {
              HEAP32[$782 >> 2] = $776;
              HEAP32[$785 >> 2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
             }
            }
           } while (0);
           if (($774 | 0) == 0) {
            break;
           }
           $804 = HEAP32[$tbase$247$i + ($tsize$246$i + 28 + $720) >> 2] | 0;
           $805 = 14640 + ($804 << 2) | 0;
           do {
            if (($721 | 0) == (HEAP32[$805 >> 2] | 0)) {
             HEAP32[$805 >> 2] = $R$1$i$i;
             if (($R$1$i$i | 0) != 0) {
              break;
             }
             HEAP32[14340 >> 2] = HEAP32[14340 >> 2] & ~(1 << $804);
             break L346;
            } else {
             if ($774 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
              _abort();
             }
             $814 = $774 + 16 | 0;
             if ((HEAP32[$814 >> 2] | 0) == ($721 | 0)) {
              HEAP32[$814 >> 2] = $R$1$i$i;
             } else {
              HEAP32[$774 + 20 >> 2] = $R$1$i$i;
             }
             if (($R$1$i$i | 0) == 0) {
              break L346;
             }
            }
           } while (0);
           if ($R$1$i$i >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
            _abort();
           }
           HEAP32[$R$1$i$i + 24 >> 2] = $774;
           $$sum3132$i$i = $720 | 16;
           $823 = HEAP32[$tbase$247$i + ($$sum3132$i$i + $tsize$246$i) >> 2] | 0;
           do {
            if (($823 | 0) != 0) {
             if ($823 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
              _abort();
             } else {
              HEAP32[$R$1$i$i + 16 >> 2] = $823;
              HEAP32[$823 + 24 >> 2] = $R$1$i$i;
              break;
             }
            }
           } while (0);
           $830 = HEAP32[$tbase$247$i + ($$sum2$i23$i + $$sum3132$i$i) >> 2] | 0;
           if (($830 | 0) == 0) {
            break;
           }
           if ($830 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
            _abort();
           } else {
            HEAP32[$R$1$i$i + 20 >> 2] = $830;
            HEAP32[$830 + 24 >> 2] = $R$1$i$i;
            break;
           }
          }
         } while (0);
         $oldfirst$0$i$i = $tbase$247$i + (($746 | $720) + $tsize$246$i) | 0;
         $qsize$0$i$i = $746 + $726 | 0;
        } else {
         $oldfirst$0$i$i = $721;
         $qsize$0$i$i = $726;
        }
        $838 = $oldfirst$0$i$i + 4 | 0;
        HEAP32[$838 >> 2] = HEAP32[$838 >> 2] & -2;
        HEAP32[$tbase$247$i + ($$sum$i21$i + 4) >> 2] = $qsize$0$i$i | 1;
        HEAP32[$tbase$247$i + ($qsize$0$i$i + $$sum$i21$i) >> 2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        if ($qsize$0$i$i >>> 0 < 256) {
         $846 = $844 << 1;
         $847 = 14376 + ($846 << 2) | 0;
         $848 = HEAP32[3584] | 0;
         $849 = 1 << $844;
         do {
          if (($848 & $849 | 0) == 0) {
           HEAP32[3584] = $848 | $849;
           $$pre$phi$i26$iZ2D = 14376 + ($846 + 2 << 2) | 0;
           $F4$0$i$i = $847;
          } else {
           $853 = 14376 + ($846 + 2 << 2) | 0;
           $854 = HEAP32[$853 >> 2] | 0;
           if (!($854 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0)) {
            $$pre$phi$i26$iZ2D = $853;
            $F4$0$i$i = $854;
            break;
           }
           _abort();
          }
         } while (0);
         HEAP32[$$pre$phi$i26$iZ2D >> 2] = $725;
         HEAP32[$F4$0$i$i + 12 >> 2] = $725;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $F4$0$i$i;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        do {
         if (($860 | 0) == 0) {
          $I7$0$i$i = 0;
         } else {
          if ($qsize$0$i$i >>> 0 > 16777215) {
           $I7$0$i$i = 31;
           break;
          }
          $865 = ($860 + 1048320 | 0) >>> 16 & 8;
          $866 = $860 << $865;
          $869 = ($866 + 520192 | 0) >>> 16 & 4;
          $871 = $866 << $869;
          $874 = ($871 + 245760 | 0) >>> 16 & 2;
          $879 = 14 - ($869 | $865 | $874) + ($871 << $874 >>> 15) | 0;
          $I7$0$i$i = $qsize$0$i$i >>> ($879 + 7 | 0) & 1 | $879 << 1;
         }
        } while (0);
        $885 = 14640 + ($I7$0$i$i << 2) | 0;
        HEAP32[$tbase$247$i + ($$sum$i21$i + 28) >> 2] = $I7$0$i$i;
        HEAP32[$tbase$247$i + ($$sum$i21$i + 20) >> 2] = 0;
        HEAP32[$tbase$247$i + ($$sum$i21$i + 16) >> 2] = 0;
        $889 = HEAP32[14340 >> 2] | 0;
        $890 = 1 << $I7$0$i$i;
        if (($889 & $890 | 0) == 0) {
         HEAP32[14340 >> 2] = $889 | $890;
         HEAP32[$885 >> 2] = $725;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = $885;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $725;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $725;
         break;
        }
        $897 = HEAP32[$885 >> 2] | 0;
        if (($I7$0$i$i | 0) == 31) {
         $906 = 0;
        } else {
         $906 = 25 - ($I7$0$i$i >>> 1) | 0;
        }
        L435 : do {
         if ((HEAP32[$897 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $K8$052$i$i = $qsize$0$i$i << $906;
          $T$051$i$i = $897;
          while (1) {
           $914 = $T$051$i$i + ($K8$052$i$i >>> 31 << 2) + 16 | 0;
           $909 = HEAP32[$914 >> 2] | 0;
           if (($909 | 0) == 0) {
            break;
           }
           if ((HEAP32[$909 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
            $T$0$lcssa$i28$i = $909;
            break L435;
           } else {
            $K8$052$i$i = $K8$052$i$i << 1;
            $T$051$i$i = $909;
           }
          }
          if ($914 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[$914 >> 2] = $725;
           HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = $T$051$i$i;
           HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $725;
           HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $725;
           break L338;
          }
         }
        } while (0);
        $921 = $T$0$lcssa$i28$i + 8 | 0;
        $922 = HEAP32[$921 >> 2] | 0;
        $923 = HEAP32[14352 >> 2] | 0;
        if ($T$0$lcssa$i28$i >>> 0 < $923 >>> 0) {
         _abort();
        }
        if ($922 >>> 0 < $923 >>> 0) {
         _abort();
        } else {
         HEAP32[$922 + 12 >> 2] = $725;
         HEAP32[$921 >> 2] = $725;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 8) >> 2] = $922;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 12) >> 2] = $T$0$lcssa$i28$i;
         HEAP32[$tbase$247$i + ($$sum$i21$i + 24) >> 2] = 0;
         break;
        }
       }
      } while (0);
      $mem$0 = $tbase$247$i + ($713 | 8) | 0;
      STACKTOP = sp;
      return $mem$0 | 0;
     }
    }
    $sp$0$i$i$i = 14784 | 0;
    while (1) {
     $931 = HEAP32[$sp$0$i$i$i >> 2] | 0;
     if (!($931 >>> 0 > $636 >>> 0)) {
      $934 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0;
      $935 = $931 + $934 | 0;
      if ($935 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
    }
    $940 = $931 + ($934 + -39) | 0;
    if (($940 & 7 | 0) == 0) {
     $945 = 0;
    } else {
     $945 = 0 - $940 & 7;
    }
    $946 = $931 + ($934 + -47 + $945) | 0;
    $949 = $946 >>> 0 < ($636 + 16 | 0) >>> 0 ? $636 : $946;
    $950 = $949 + 8 | 0;
    $953 = $tbase$247$i + 8 | 0;
    if (($953 & 7 | 0) == 0) {
     $959 = 0;
    } else {
     $959 = 0 - $953 & 7;
    }
    $960 = $tsize$246$i + -40 - $959 | 0;
    HEAP32[14360 >> 2] = $tbase$247$i + $959;
    HEAP32[14348 >> 2] = $960;
    HEAP32[$tbase$247$i + ($959 + 4) >> 2] = $960 | 1;
    HEAP32[$tbase$247$i + ($tsize$246$i + -36) >> 2] = 40;
    HEAP32[14364 >> 2] = HEAP32[14824 >> 2];
    HEAP32[$949 + 4 >> 2] = 27;
    HEAP32[$950 + 0 >> 2] = HEAP32[14784 >> 2];
    HEAP32[$950 + 4 >> 2] = HEAP32[14788 >> 2];
    HEAP32[$950 + 8 >> 2] = HEAP32[14792 >> 2];
    HEAP32[$950 + 12 >> 2] = HEAP32[14796 >> 2];
    HEAP32[14784 >> 2] = $tbase$247$i;
    HEAP32[14788 >> 2] = $tsize$246$i;
    HEAP32[14796 >> 2] = 0;
    HEAP32[14792 >> 2] = $950;
    $966 = $949 + 28 | 0;
    HEAP32[$966 >> 2] = 7;
    if (($949 + 32 | 0) >>> 0 < $935 >>> 0) {
     $970 = $966;
     do {
      $970$looptemp = $970;
      $970 = $970 + 4 | 0;
      HEAP32[$970 >> 2] = 7;
     } while (($970$looptemp + 8 | 0) >>> 0 < $935 >>> 0);
    }
    if (($949 | 0) != ($636 | 0)) {
     $976 = $949 - $636 | 0;
     $978 = $636 + ($976 + 4) | 0;
     HEAP32[$978 >> 2] = HEAP32[$978 >> 2] & -2;
     HEAP32[$636 + 4 >> 2] = $976 | 1;
     HEAP32[$636 + $976 >> 2] = $976;
     $983 = $976 >>> 3;
     if ($976 >>> 0 < 256) {
      $985 = $983 << 1;
      $986 = 14376 + ($985 << 2) | 0;
      $987 = HEAP32[3584] | 0;
      $988 = 1 << $983;
      do {
       if (($987 & $988 | 0) == 0) {
        HEAP32[3584] = $987 | $988;
        $$pre$phi$i$iZ2D = 14376 + ($985 + 2 << 2) | 0;
        $F$0$i$i = $986;
       } else {
        $992 = 14376 + ($985 + 2 << 2) | 0;
        $993 = HEAP32[$992 >> 2] | 0;
        if (!($993 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0)) {
         $$pre$phi$i$iZ2D = $992;
         $F$0$i$i = $993;
         break;
        }
        _abort();
       }
      } while (0);
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636;
      HEAP32[$F$0$i$i + 12 >> 2] = $636;
      HEAP32[$636 + 8 >> 2] = $F$0$i$i;
      HEAP32[$636 + 12 >> 2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     if (($999 | 0) == 0) {
      $I1$0$i$i = 0;
     } else {
      if ($976 >>> 0 > 16777215) {
       $I1$0$i$i = 31;
      } else {
       $1004 = ($999 + 1048320 | 0) >>> 16 & 8;
       $1005 = $999 << $1004;
       $1008 = ($1005 + 520192 | 0) >>> 16 & 4;
       $1010 = $1005 << $1008;
       $1013 = ($1010 + 245760 | 0) >>> 16 & 2;
       $1018 = 14 - ($1008 | $1004 | $1013) + ($1010 << $1013 >>> 15) | 0;
       $I1$0$i$i = $976 >>> ($1018 + 7 | 0) & 1 | $1018 << 1;
      }
     }
     $1024 = 14640 + ($I1$0$i$i << 2) | 0;
     HEAP32[$636 + 28 >> 2] = $I1$0$i$i;
     HEAP32[$636 + 20 >> 2] = 0;
     HEAP32[$636 + 16 >> 2] = 0;
     $1028 = HEAP32[14340 >> 2] | 0;
     $1029 = 1 << $I1$0$i$i;
     if (($1028 & $1029 | 0) == 0) {
      HEAP32[14340 >> 2] = $1028 | $1029;
      HEAP32[$1024 >> 2] = $636;
      HEAP32[$636 + 24 >> 2] = $1024;
      HEAP32[$636 + 12 >> 2] = $636;
      HEAP32[$636 + 8 >> 2] = $636;
      break;
     }
     $1036 = HEAP32[$1024 >> 2] | 0;
     if (($I1$0$i$i | 0) == 31) {
      $1045 = 0;
     } else {
      $1045 = 25 - ($I1$0$i$i >>> 1) | 0;
     }
     L489 : do {
      if ((HEAP32[$1036 + 4 >> 2] & -8 | 0) == ($976 | 0)) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $K2$014$i$i = $976 << $1045;
       $T$013$i$i = $1036;
       while (1) {
        $1053 = $T$013$i$i + ($K2$014$i$i >>> 31 << 2) + 16 | 0;
        $1048 = HEAP32[$1053 >> 2] | 0;
        if (($1048 | 0) == 0) {
         break;
        }
        if ((HEAP32[$1048 + 4 >> 2] & -8 | 0) == ($976 | 0)) {
         $T$0$lcssa$i$i = $1048;
         break L489;
        } else {
         $K2$014$i$i = $K2$014$i$i << 1;
         $T$013$i$i = $1048;
        }
       }
       if ($1053 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$1053 >> 2] = $636;
        HEAP32[$636 + 24 >> 2] = $T$013$i$i;
        HEAP32[$636 + 12 >> 2] = $636;
        HEAP32[$636 + 8 >> 2] = $636;
        break L311;
       }
      }
     } while (0);
     $1060 = $T$0$lcssa$i$i + 8 | 0;
     $1061 = HEAP32[$1060 >> 2] | 0;
     $1062 = HEAP32[14352 >> 2] | 0;
     if ($T$0$lcssa$i$i >>> 0 < $1062 >>> 0) {
      _abort();
     }
     if ($1061 >>> 0 < $1062 >>> 0) {
      _abort();
     } else {
      HEAP32[$1061 + 12 >> 2] = $636;
      HEAP32[$1060 >> 2] = $636;
      HEAP32[$636 + 8 >> 2] = $1061;
      HEAP32[$636 + 12 >> 2] = $T$0$lcssa$i$i;
      HEAP32[$636 + 24 >> 2] = 0;
      break;
     }
    }
   }
  } while (0);
  $1069 = HEAP32[14348 >> 2] | 0;
  if ($1069 >>> 0 > $nb$0 >>> 0) {
   $1071 = $1069 - $nb$0 | 0;
   HEAP32[14348 >> 2] = $1071;
   $1072 = HEAP32[14360 >> 2] | 0;
   HEAP32[14360 >> 2] = $1072 + $nb$0;
   HEAP32[$1072 + ($nb$0 + 4) >> 2] = $1071 | 1;
   HEAP32[$1072 + 4 >> 2] = $nb$0 | 3;
   $mem$0 = $1072 + 8 | 0;
   STACKTOP = sp;
   return $mem$0 | 0;
  }
 }
 $1079 = ___errno_location() | 0;
 HEAP32[$1079 >> 2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;
 return $mem$0 | 0;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$$i = 0, $$$i118 = 0, $$$i128 = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i151 = 0, $$0$i$i172 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i64 = 0, $$0$i$i67 = 0, $$0$i$i84 = 0, $$0$i$i93 = 0, $$0$i$i96 = 0, $$465 = 0, $$lcssa293 = 0, $$lcssa309 = 0, $$lcssa535 = 0, $$pr$i = 0, $$pr$i142 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180427 = 0, $$pre$i2$i$i180428 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39424 = 0, $$pre$i2$i$i39426 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i75431$ph = 0, $$pre$i2$i$i75431458 = 0, $$pre574 = 0, $10 = 0, $100 = 0, $11 = 0, $112 = 0, $114 = 0, $12 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $145 = 0, $147 = 0, $15 = 0, $151 = 0, $153 = 0, $158 = 0, $16 = 0, $160 = 0, $165 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $178 = 0, $18 = 0, $181 = 0, $185 = 0, $19 = 0, $190 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $205 = 0, $212 = 0, $216 = 0, $221 = 0, $226 = 0, $227 = 0, $228 = 0, $236 = 0, $243 = 0, $244 = 0, $246 = 0, $248 = 0, $253 = 0, $258 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $272 = 0, $279 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $303 = 0, $310 = 0, $318 = 0, $319 = 0, $32 = 0, $321 = 0, $33 = 0, $330 = 0, $332 = 0, $333 = 0, $34 = 0, $343 = 0, $344 = 0, $346 = 0, $351 = 0, $352 = 0, $353 = 0, $356 = 0, $358 = 0, $359 = 0, $360 = 0, $362 = 0, $364 = 0, $366 = 0, $372 = 0, $379 = 0, $380 = 0, $382 = 0, $383 = 0, $395 = 0, $396 = 0, $398 = 0, $4 = 0, $410 = 0, $412 = 0, $425 = 0, $426 = 0, $427 = 0, $436 = 0, $444 = 0, $445 = 0, $449 = 0, $461 = 0, $462 = 0, $463 = 0, $475 = 0, $477 = 0, $487 = 0, $49 = 0, $494 = 0, $496 = 0, $498 = 0, $499 = 0, $5 = 0, $502 = 0, $506 = 0, $51 = 0, $510 = 0, $511 = 0, $515 = 0, $517 = 0, $524 = 0, $529 = 0, $530 = 0, $534 = 0, $535 = 0, $539 = 0, $540 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $563 = 0, $567 = 0, $568 = 0, $574 = 0, $575 = 0, $577 = 0, $589 = 0, $590 = 0, $591 = 0, $6 = 0, $603 = 0, $605 = 0, $620 = 0, $621 = 0, $622 = 0, $630 = 0, $642 = 0, $643 = 0, $645 = 0, $657 = 0, $659 = 0, $678 = 0, $68 = 0, $680 = 0, $682 = 0, $683 = 0, $686 = 0, $69 = 0, $690 = 0, $694 = 0, $695 = 0, $698 = 0, $7 = 0, $70 = 0, $700 = 0, $707 = 0, $712 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $744 = 0, $745 = 0, $757 = 0, $758 = 0, $759 = 0, $771 = 0, $773 = 0, $789 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $8 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $85 = 0, $97 = 0, $98 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $free = 0, $free200 = 0, $free201 = 0, $free202$lcssa = 0, $free202349 = 0, $free203 = 0, $free204 = 0, $free205 = 0, $free208 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $__gbuf = sp + 72 | 0;
 $__pat = sp + 68 | 0;
 $__dp = sp + 472 | 0;
 $__ts = sp + 473 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 28 | 0;
 $__nsn = sp + 16 | 0;
 $__spaces = sp + 4 | 0;
 $__fd = sp;
 $__et = sp + 40 | 0;
 HEAP32[$__pat >> 2] = 0;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__psn + 0 >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 HEAP32[$__nsn + 0 >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 HEAP32[$__spaces + 0 >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $2 = $__ct + 8 | 0;
 $3 = $__nsn + 1 | 0;
 $4 = $__nsn + 4 | 0;
 $5 = $__nsn + 8 | 0;
 $6 = $__psn + 1 | 0;
 $7 = $__psn + 4 | 0;
 $8 = $__psn + 8 | 0;
 $10 = ($__flags & 512 | 0) != 0;
 $11 = $__sym + 1 | 0;
 $12 = $__sym + 8 | 0;
 $13 = $__sym + 4 | 0;
 $14 = $__spaces + 1 | 0;
 $15 = $__spaces + 8 | 0;
 $16 = $__spaces + 4 | 0;
 $17 = $__pat + 3 | 0;
 $18 = $__wb + 4 | 0;
 $19 = $__grp + 4 | 0;
 $812 = $__gbuf + 400 | 0;
 $813 = $__gbuf;
 $814 = $__gbuf;
 $815 = $__we;
 $__p$0353 = 0;
 $__trailing_sign$0355 = 0;
 $free202349 = 125;
 L1 : while (1) {
  $20 = HEAP32[$__b >> 2] | 0;
  do {
   if (($20 | 0) == 0) {
    $33 = 0;
   } else {
    if ((HEAP32[$20 + 12 >> 2] | 0) == (HEAP32[$20 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 63]($20) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $33 = 0;
      break;
     } else {
      $33 = HEAP32[$__b >> 2] | 0;
      break;
     }
    } else {
     $33 = $20;
    }
   }
  } while (0);
  $32 = ($33 | 0) == 0;
  $34 = HEAP32[$__e >> 2] | 0;
  do {
   if (($34 | 0) == 0) {
    label = 12;
   } else {
    if ((HEAP32[$34 + 12 >> 2] | 0) != (HEAP32[$34 + 16 >> 2] | 0)) {
     if ($32) {
      $816 = $34;
      break;
     } else {
      $$lcssa293 = $814;
      $$lcssa309 = $813;
      $__trailing_sign$0$lcssa = $__trailing_sign$0355;
      $free202$lcssa = $free202349;
      label = 269;
      break L1;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 63]($34) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 12;
     break;
    } else {
     if ($32) {
      $816 = $34;
      break;
     } else {
      $$lcssa293 = $814;
      $$lcssa309 = $813;
      $__trailing_sign$0$lcssa = $__trailing_sign$0355;
      $free202$lcssa = $free202349;
      label = 269;
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($32) {
    $$lcssa293 = $814;
    $$lcssa309 = $813;
    $__trailing_sign$0$lcssa = $__trailing_sign$0355;
    $free202$lcssa = $free202349;
    label = 269;
    break;
   } else {
    $816 = 0;
   }
  }
  L21 : do {
   switch (HEAP8[$__pat + $__p$0353 >> 0] | 0) {
   case 1:
    {
     if (($__p$0353 | 0) == 3) {
      $$lcssa293 = $814;
      $$lcssa309 = $813;
      $__trailing_sign$0$lcssa = $__trailing_sign$0355;
      $free202$lcssa = $free202349;
      label = 269;
      break L1;
     }
     $49 = HEAP32[$__b >> 2] | 0;
     $51 = HEAP32[$49 + 12 >> 2] | 0;
     if (($51 | 0) == (HEAP32[$49 + 16 >> 2] | 0)) {
      $$0$i$i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 36 >> 2] & 63]($49) | 0;
     } else {
      $$0$i$i29 = HEAPU8[$51 >> 0] | 0;
     }
     if (!(($$0$i$i29 & 255) << 24 >> 24 > -1)) {
      label = 25;
      break L1;
     }
     if ((HEAP16[(HEAP32[$2 >> 2] | 0) + ($$0$i$i29 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
      label = 25;
      break L1;
     }
     $68 = HEAP32[$__b >> 2] | 0;
     $69 = $68 + 12 | 0;
     $70 = HEAP32[$69 >> 2] | 0;
     if (($70 | 0) == (HEAP32[$68 + 16 >> 2] | 0)) {
      $$0$i$i32 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 40 >> 2] & 63]($68) | 0;
     } else {
      HEAP32[$69 >> 2] = $70 + 1;
      $$0$i$i32 = HEAPU8[$70 >> 0] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i32 & 255);
     label = 26;
     break;
    }
   case 0:
    {
     label = 26;
     break;
    }
   case 3:
    {
     $145 = HEAP8[$__psn >> 0] | 0;
     $147 = ($145 & 1) == 0;
     if ($147) {
      $160 = ($145 & 255) >>> 1;
     } else {
      $160 = HEAP32[$7 >> 2] | 0;
     }
     $151 = HEAP8[$__nsn >> 0] | 0;
     $153 = ($151 & 1) == 0;
     if ($153) {
      $158 = ($151 & 255) >>> 1;
     } else {
      $158 = HEAP32[$4 >> 2] | 0;
     }
     if (($160 | 0) == (0 - $158 | 0)) {
      $817 = $815;
      $818 = $814;
      $819 = $813;
      $820 = $812;
      $__trailing_sign$1 = $__trailing_sign$0355;
      $free203 = $free202349;
     } else {
      if ($147) {
       $165 = ($145 & 255) >>> 1;
      } else {
       $165 = HEAP32[$7 >> 2] | 0;
      }
      if (($165 | 0) != 0) {
       if ($153) {
        $170 = ($151 & 255) >>> 1;
       } else {
        $170 = HEAP32[$4 >> 2] | 0;
       }
       if (($170 | 0) != 0) {
        $244 = HEAP32[$__b >> 2] | 0;
        $246 = HEAP32[$244 + 12 >> 2] | 0;
        $248 = HEAP32[$244 + 16 >> 2] | 0;
        if (($246 | 0) == ($248 | 0)) {
         $253 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$244 >> 2] | 0) + 36 >> 2] & 63]($244) | 0;
         $$pre574 = HEAP32[$__b >> 2] | 0;
         $$0$i$i96 = $253;
         $258 = HEAP8[$__psn >> 0] | 0;
         $264 = $$pre574;
         $266 = HEAP32[$$pre574 + 12 >> 2] | 0;
         $267 = HEAP32[$$pre574 + 16 >> 2] | 0;
        } else {
         $$0$i$i96 = HEAPU8[$246 >> 0] | 0;
         $258 = $145;
         $264 = $244;
         $266 = $246;
         $267 = $248;
        }
        $263 = $264 + 12 | 0;
        $265 = ($266 | 0) == ($267 | 0);
        if (($$0$i$i96 & 255) << 24 >> 24 == (HEAP8[(($258 & 1) == 0 ? $6 : HEAP32[$8 >> 2] | 0) >> 0] | 0)) {
         if ($265) {
          FUNCTION_TABLE_ii[HEAP32[(HEAP32[$264 >> 2] | 0) + 40 >> 2] & 63]($264) | 0;
         } else {
          HEAP32[$263 >> 2] = $266 + 1;
         }
         $272 = HEAP8[$__psn >> 0] | 0;
         if (($272 & 1) == 0) {
          $279 = ($272 & 255) >>> 1;
         } else {
          $279 = HEAP32[$7 >> 2] | 0;
         }
         $817 = $815;
         $818 = $814;
         $819 = $813;
         $820 = $812;
         $__trailing_sign$1 = $279 >>> 0 > 1 ? $__psn : $__trailing_sign$0355;
         $free203 = $free202349;
         break L21;
        }
        if ($265) {
         $$0$i$i114 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$264 >> 2] | 0) + 36 >> 2] & 63]($264) | 0;
        } else {
         $$0$i$i114 = HEAPU8[$266 >> 0] | 0;
        }
        if (!(($$0$i$i114 & 255) << 24 >> 24 == (HEAP8[((HEAP8[$__nsn >> 0] & 1) == 0 ? $3 : HEAP32[$5 >> 2] | 0) >> 0] | 0))) {
         label = 112;
         break L1;
        }
        $293 = HEAP32[$__b >> 2] | 0;
        $294 = $293 + 12 | 0;
        $295 = HEAP32[$294 >> 2] | 0;
        if (($295 | 0) == (HEAP32[$293 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$293 >> 2] | 0) + 40 >> 2] & 63]($293) | 0;
        } else {
         HEAP32[$294 >> 2] = $295 + 1;
        }
        HEAP8[$__neg >> 0] = 1;
        $303 = HEAP8[$__nsn >> 0] | 0;
        if (($303 & 1) == 0) {
         $310 = ($303 & 255) >>> 1;
        } else {
         $310 = HEAP32[$4 >> 2] | 0;
        }
        $817 = $815;
        $818 = $814;
        $819 = $813;
        $820 = $812;
        $__trailing_sign$1 = $310 >>> 0 > 1 ? $__nsn : $__trailing_sign$0355;
        $free203 = $free202349;
        break L21;
       }
      }
      if ($147) {
       $175 = ($145 & 255) >>> 1;
      } else {
       $175 = HEAP32[$7 >> 2] | 0;
      }
      $176 = HEAP32[$__b >> 2] | 0;
      $178 = HEAP32[$176 + 12 >> 2] | 0;
      $181 = ($178 | 0) == (HEAP32[$176 + 16 >> 2] | 0);
      if (($175 | 0) == 0) {
       if ($181) {
        $216 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$176 >> 2] | 0) + 36 >> 2] & 63]($176) | 0;
        $$0$i$i84 = $216;
        $221 = HEAP8[$__nsn >> 0] | 0;
       } else {
        $$0$i$i84 = HEAPU8[$178 >> 0] | 0;
        $221 = $151;
       }
       if (!(($$0$i$i84 & 255) << 24 >> 24 == (HEAP8[(($221 & 1) == 0 ? $3 : HEAP32[$5 >> 2] | 0) >> 0] | 0))) {
        $817 = $815;
        $818 = $814;
        $819 = $813;
        $820 = $812;
        $__trailing_sign$1 = $__trailing_sign$0355;
        $free203 = $free202349;
        break L21;
       }
       $226 = HEAP32[$__b >> 2] | 0;
       $227 = $226 + 12 | 0;
       $228 = HEAP32[$227 >> 2] | 0;
       if (($228 | 0) == (HEAP32[$226 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$226 >> 2] | 0) + 40 >> 2] & 63]($226) | 0;
       } else {
        HEAP32[$227 >> 2] = $228 + 1;
       }
       HEAP8[$__neg >> 0] = 1;
       $236 = HEAP8[$__nsn >> 0] | 0;
       if (($236 & 1) == 0) {
        $243 = ($236 & 255) >>> 1;
       } else {
        $243 = HEAP32[$4 >> 2] | 0;
       }
       $817 = $815;
       $818 = $814;
       $819 = $813;
       $820 = $812;
       $__trailing_sign$1 = $243 >>> 0 > 1 ? $__nsn : $__trailing_sign$0355;
       $free203 = $free202349;
       break L21;
      }
      if ($181) {
       $185 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$176 >> 2] | 0) + 36 >> 2] & 63]($176) | 0;
       $$0$i$i67 = $185;
       $190 = HEAP8[$__psn >> 0] | 0;
      } else {
       $$0$i$i67 = HEAPU8[$178 >> 0] | 0;
       $190 = $145;
      }
      if (!(($$0$i$i67 & 255) << 24 >> 24 == (HEAP8[(($190 & 1) == 0 ? $6 : HEAP32[$8 >> 2] | 0) >> 0] | 0))) {
       HEAP8[$__neg >> 0] = 1;
       $817 = $815;
       $818 = $814;
       $819 = $813;
       $820 = $812;
       $__trailing_sign$1 = $__trailing_sign$0355;
       $free203 = $free202349;
       break L21;
      }
      $195 = HEAP32[$__b >> 2] | 0;
      $196 = $195 + 12 | 0;
      $197 = HEAP32[$196 >> 2] | 0;
      if (($197 | 0) == (HEAP32[$195 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$195 >> 2] | 0) + 40 >> 2] & 63]($195) | 0;
      } else {
       HEAP32[$196 >> 2] = $197 + 1;
      }
      $205 = HEAP8[$__psn >> 0] | 0;
      if (($205 & 1) == 0) {
       $212 = ($205 & 255) >>> 1;
      } else {
       $212 = HEAP32[$7 >> 2] | 0;
      }
      $817 = $815;
      $818 = $814;
      $819 = $813;
      $820 = $812;
      $__trailing_sign$1 = $212 >>> 0 > 1 ? $__psn : $__trailing_sign$0355;
      $free203 = $free202349;
     }
     break;
    }
   case 2:
    {
     if (!(($__trailing_sign$0355 | 0) != 0 | $__p$0353 >>> 0 < 2)) {
      if (($__p$0353 | 0) == 2) {
       $318 = (HEAP8[$17 >> 0] | 0) != 0;
      } else {
       $318 = 0;
      }
      if (!($10 | $318)) {
       $817 = $815;
       $818 = $814;
       $819 = $813;
       $820 = $812;
       $__trailing_sign$1 = 0;
       $free203 = $free202349;
       break L21;
      }
     }
     $319 = HEAP8[$__sym >> 0] | 0;
     $321 = ($319 & 1) == 0;
     $$465 = $321 ? $11 : HEAP32[$12 >> 2] | 0;
     L126 : do {
      if (($__p$0353 | 0) == 0) {
       $$pre$i2$i$i180 = $816;
       $372 = $319;
       $382 = $$465;
       $398 = $816;
      } else {
       if ((HEAPU8[$__pat + ($__p$0353 + -1) >> 0] | 0) < 2) {
        $330 = $$465 + ($321 ? ($319 & 255) >>> 1 : HEAP32[$13 >> 2] | 0) | 0;
        $332 = $$465;
        while (1) {
         if (($332 | 0) == ($330 | 0)) {
          $$lcssa535 = $330;
          break;
         }
         $333 = HEAP8[$332 >> 0] | 0;
         if (!($333 << 24 >> 24 > -1)) {
          $$lcssa535 = $332;
          break;
         }
         if ((HEAP16[(HEAP32[$2 >> 2] | 0) + ($333 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
          $$lcssa535 = $332;
          break;
         } else {
          $332 = $332 + 1 | 0;
         }
        }
        $343 = $$lcssa535 - $$465 | 0;
        $344 = HEAP8[$__spaces >> 0] | 0;
        $346 = ($344 & 1) == 0;
        if ($346) {
         $351 = ($344 & 255) >>> 1;
        } else {
         $351 = HEAP32[$16 >> 2] | 0;
        }
        if ($343 >>> 0 > $351 >>> 0) {
         $$pre$i2$i$i180 = $816;
         $372 = $319;
         $382 = $$465;
         $398 = $816;
        } else {
         if ($346) {
          $356 = ($344 & 255) >>> 1;
          $359 = $14;
          $360 = $356;
          $362 = $__spaces + ($356 - $343) + 1 | 0;
         } else {
          $352 = HEAP32[$15 >> 2] | 0;
          $353 = HEAP32[$16 >> 2] | 0;
          $359 = $352;
          $360 = $353;
          $362 = $352 + ($353 - $343) | 0;
         }
         $358 = $359 + $360 | 0;
         if (($362 | 0) == ($358 | 0)) {
          $$pre$i2$i$i180 = $816;
          $372 = $319;
          $382 = $$lcssa535;
          $398 = $816;
         } else {
          $364 = $362;
          $366 = $$465;
          while (1) {
           if ((HEAP8[$364 >> 0] | 0) != (HEAP8[$366 >> 0] | 0)) {
            $$pre$i2$i$i180 = $816;
            $372 = $319;
            $382 = $$465;
            $398 = $816;
            break L126;
           }
           $364 = $364 + 1 | 0;
           if (($364 | 0) == ($358 | 0)) {
            $$pre$i2$i$i180 = $816;
            $372 = $319;
            $382 = $$lcssa535;
            $398 = $816;
            break;
           } else {
            $366 = $366 + 1 | 0;
           }
          }
         }
        }
       } else {
        $$pre$i2$i$i180 = $816;
        $372 = $319;
        $382 = $$465;
        $398 = $816;
       }
      }
     } while (0);
     L146 : while (1) {
      if (($372 & 1) == 0) {
       $379 = $11;
       $380 = ($372 & 255) >>> 1;
      } else {
       $379 = HEAP32[$12 >> 2] | 0;
       $380 = HEAP32[$13 >> 2] | 0;
      }
      if (($382 | 0) == ($379 + $380 | 0)) {
       break;
      }
      $383 = HEAP32[$__b >> 2] | 0;
      do {
       if (($383 | 0) == 0) {
        $396 = 0;
       } else {
        if ((HEAP32[$383 + 12 >> 2] | 0) == (HEAP32[$383 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$383 >> 2] | 0) + 36 >> 2] & 63]($383) | 0) == -1) {
          HEAP32[$__b >> 2] = 0;
          $396 = 0;
          break;
         } else {
          $396 = HEAP32[$__b >> 2] | 0;
          break;
         }
        } else {
         $396 = $383;
        }
       }
      } while (0);
      $395 = ($396 | 0) == 0;
      do {
       if (($398 | 0) == 0) {
        $$pre$i2$i$i180428 = $$pre$i2$i$i180;
        label = 147;
       } else {
        if ((HEAP32[$398 + 12 >> 2] | 0) != (HEAP32[$398 + 16 >> 2] | 0)) {
         if ($395) {
          $$pre$i2$i$i180427 = $$pre$i2$i$i180;
          $822 = $398;
          break;
         } else {
          break L146;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$398 >> 2] | 0) + 36 >> 2] & 63]($398) | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         $$pre$i2$i$i180428 = 0;
         label = 147;
         break;
        } else {
         if ($395 ^ ($$pre$i2$i$i180 | 0) == 0) {
          $$pre$i2$i$i180427 = $$pre$i2$i$i180;
          $822 = $$pre$i2$i$i180;
          break;
         } else {
          break L146;
         }
        }
       }
      } while (0);
      if ((label | 0) == 147) {
       label = 0;
       if ($395) {
        break;
       } else {
        $$pre$i2$i$i180427 = $$pre$i2$i$i180428;
        $822 = 0;
       }
      }
      $410 = HEAP32[$__b >> 2] | 0;
      $412 = HEAP32[$410 + 12 >> 2] | 0;
      if (($412 | 0) == (HEAP32[$410 + 16 >> 2] | 0)) {
       $$0$i$i172 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$410 >> 2] | 0) + 36 >> 2] & 63]($410) | 0;
      } else {
       $$0$i$i172 = HEAPU8[$412 >> 0] | 0;
      }
      if (!(($$0$i$i172 & 255) << 24 >> 24 == (HEAP8[$382 >> 0] | 0))) {
       break;
      }
      $425 = HEAP32[$__b >> 2] | 0;
      $426 = $425 + 12 | 0;
      $427 = HEAP32[$426 >> 2] | 0;
      if (($427 | 0) == (HEAP32[$425 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$425 >> 2] | 0) + 40 >> 2] & 63]($425) | 0;
      } else {
       HEAP32[$426 >> 2] = $427 + 1;
      }
      $$pre$i2$i$i180 = $$pre$i2$i$i180427;
      $372 = HEAP8[$__sym >> 0] | 0;
      $382 = $382 + 1 | 0;
      $398 = $822;
     }
     if ($10) {
      $436 = HEAP8[$__sym >> 0] | 0;
      if (($436 & 1) == 0) {
       $444 = $11;
       $445 = ($436 & 255) >>> 1;
      } else {
       $444 = HEAP32[$12 >> 2] | 0;
       $445 = HEAP32[$13 >> 2] | 0;
      }
      if (($382 | 0) == ($444 + $445 | 0)) {
       $817 = $815;
       $818 = $814;
       $819 = $813;
       $820 = $812;
       $__trailing_sign$1 = $__trailing_sign$0355;
       $free203 = $free202349;
      } else {
       label = 162;
       break L1;
      }
     } else {
      $817 = $815;
      $818 = $814;
      $819 = $813;
      $820 = $812;
      $__trailing_sign$1 = $__trailing_sign$0355;
      $free203 = $free202349;
     }
     break;
    }
   case 4:
    {
     $496 = $815;
     $529 = $813;
     $530 = $812;
     $534 = $814;
     $__ng$0 = 0;
     $free201 = $free202349;
     L186 : while (1) {
      $449 = HEAP32[$__b >> 2] | 0;
      do {
       if (($449 | 0) == 0) {
        $462 = 0;
       } else {
        if ((HEAP32[$449 + 12 >> 2] | 0) == (HEAP32[$449 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$449 >> 2] | 0) + 36 >> 2] & 63]($449) | 0) == -1) {
          HEAP32[$__b >> 2] = 0;
          $462 = 0;
          break;
         } else {
          $462 = HEAP32[$__b >> 2] | 0;
          break;
         }
        } else {
         $462 = $449;
        }
       }
      } while (0);
      $461 = ($462 | 0) == 0;
      $463 = HEAP32[$__e >> 2] | 0;
      do {
       if (($463 | 0) == 0) {
        label = 173;
       } else {
        if ((HEAP32[$463 + 12 >> 2] | 0) != (HEAP32[$463 + 16 >> 2] | 0)) {
         if ($461) {
          break;
         } else {
          break L186;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$463 >> 2] | 0) + 36 >> 2] & 63]($463) | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         label = 173;
         break;
        } else {
         if ($461) {
          break;
         } else {
          break L186;
         }
        }
       }
      } while (0);
      if ((label | 0) == 173) {
       label = 0;
       if ($461) {
        break;
       }
      }
      $475 = HEAP32[$__b >> 2] | 0;
      $477 = HEAP32[$475 + 12 >> 2] | 0;
      if (($477 | 0) == (HEAP32[$475 + 16 >> 2] | 0)) {
       $$0$i$i151 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$475 >> 2] | 0) + 36 >> 2] & 63]($475) | 0;
      } else {
       $$0$i$i151 = HEAPU8[$477 >> 0] | 0;
      }
      $487 = $$0$i$i151 & 255;
      if ($487 << 24 >> 24 > -1) {
       if ((HEAP16[(HEAP32[$2 >> 2] | 0) + ($$0$i$i151 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
        label = 189;
       } else {
        $494 = HEAP32[$__wn >> 2] | 0;
        if (($494 | 0) == ($496 | 0)) {
         $498 = (HEAP32[$18 >> 2] | 0) != 125;
         $499 = HEAP32[$__wb >> 2] | 0;
         $502 = $496 - $499 | 0;
         $$$i140 = $502 >>> 0 < 2147483647 ? $502 << 1 : -1;
         $506 = _realloc($498 ? $499 : 0, $$$i140) | 0;
         if (($506 | 0) == 0) {
          label = 182;
          break L1;
         }
         if ($498) {
          HEAP32[$__wb >> 2] = $506;
          $511 = $506;
         } else {
          $$pr$i142 = HEAP32[$__wb >> 2] | 0;
          HEAP32[$__wb >> 2] = $506;
          if (($$pr$i142 | 0) == 0) {
           $511 = $506;
          } else {
           FUNCTION_TABLE_vi[HEAP32[$18 >> 2] & 255]($$pr$i142);
           $511 = HEAP32[$__wb >> 2] | 0;
          }
         }
         HEAP32[$18 >> 2] = 126;
         $510 = $511 + $502 | 0;
         HEAP32[$__wn >> 2] = $510;
         $515 = $510;
         $823 = (HEAP32[$__wb >> 2] | 0) + $$$i140 | 0;
        } else {
         $515 = $494;
         $823 = $496;
        }
        HEAP32[$__wn >> 2] = $515 + 1;
        HEAP8[$515 >> 0] = $487;
        $824 = $823;
        $825 = $534;
        $826 = $529;
        $827 = $530;
        $__ng$1 = $__ng$0 + 1 | 0;
        $free = $free201;
       }
      } else {
       label = 189;
      }
      if ((label | 0) == 189) {
       label = 0;
       $517 = HEAP8[$__grp >> 0] | 0;
       if (($517 & 1) == 0) {
        $524 = ($517 & 255) >>> 1;
       } else {
        $524 = HEAP32[$19 >> 2] | 0;
       }
       if (($524 | 0) == 0 | ($__ng$0 | 0) == 0) {
        break;
       }
       if (!($487 << 24 >> 24 == (HEAP8[$__ts >> 0] | 0))) {
        break;
       }
       if (($529 | 0) == ($530 | 0)) {
        $535 = $529 - $534 | 0;
        $$$i128 = $535 >>> 0 < 2147483647 ? $535 << 1 : -1;
        if (($free201 | 0) == 125) {
         $539 = 0;
        } else {
         $539 = $534;
        }
        $540 = _realloc($539, $$$i128) | 0;
        if (($540 | 0) == 0) {
         label = 198;
         break L1;
        }
        $546 = $540 + ($535 >> 2 << 2) | 0;
        $828 = $540;
        $829 = $540 + ($$$i128 >>> 2 << 2) | 0;
        $free200 = 126;
       } else {
        $546 = $529;
        $828 = $534;
        $829 = $530;
        $free200 = $free201;
       }
       HEAP32[$546 >> 2] = $__ng$0;
       $824 = $496;
       $825 = $828;
       $826 = $546 + 4 | 0;
       $827 = $829;
       $__ng$1 = 0;
       $free = $free200;
      }
      $547 = HEAP32[$__b >> 2] | 0;
      $548 = $547 + 12 | 0;
      $549 = HEAP32[$548 >> 2] | 0;
      if (($549 | 0) == (HEAP32[$547 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$547 >> 2] | 0) + 40 >> 2] & 63]($547) | 0;
       $496 = $824;
       $529 = $826;
       $530 = $827;
       $534 = $825;
       $__ng$0 = $__ng$1;
       $free201 = $free;
       continue;
      } else {
       HEAP32[$548 >> 2] = $549 + 1;
       $496 = $824;
       $529 = $826;
       $530 = $827;
       $534 = $825;
       $__ng$0 = $__ng$1;
       $free201 = $free;
       continue;
      }
     }
     if (($534 | 0) == ($529 | 0) | ($__ng$0 | 0) == 0) {
      $830 = $534;
      $831 = $529;
      $832 = $530;
      $free204 = $free201;
     } else {
      if (($529 | 0) == ($530 | 0)) {
       $563 = $529 - $534 | 0;
       $$$i118 = $563 >>> 0 < 2147483647 ? $563 << 1 : -1;
       if (($free201 | 0) == 125) {
        $567 = 0;
       } else {
        $567 = $534;
       }
       $568 = _realloc($567, $$$i118) | 0;
       if (($568 | 0) == 0) {
        label = 209;
        break L1;
       }
       $574 = $568 + ($563 >> 2 << 2) | 0;
       $833 = $568;
       $834 = $568 + ($$$i118 >>> 2 << 2) | 0;
       $free205 = 126;
      } else {
       $574 = $529;
       $833 = $534;
       $834 = $530;
       $free205 = $free201;
      }
      HEAP32[$574 >> 2] = $__ng$0;
      $830 = $833;
      $831 = $574 + 4 | 0;
      $832 = $834;
      $free204 = $free205;
     }
     $575 = HEAP32[$__fd >> 2] | 0;
     if (($575 | 0) > 0) {
      $577 = HEAP32[$__b >> 2] | 0;
      do {
       if (($577 | 0) == 0) {
        $590 = 0;
       } else {
        if ((HEAP32[$577 + 12 >> 2] | 0) == (HEAP32[$577 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$577 >> 2] | 0) + 36 >> 2] & 63]($577) | 0) == -1) {
          HEAP32[$__b >> 2] = 0;
          $590 = 0;
          break;
         } else {
          $590 = HEAP32[$__b >> 2] | 0;
          break;
         }
        } else {
         $590 = $577;
        }
       }
      } while (0);
      $589 = ($590 | 0) == 0;
      $591 = HEAP32[$__e >> 2] | 0;
      do {
       if (($591 | 0) == 0) {
        label = 223;
       } else {
        if ((HEAP32[$591 + 12 >> 2] | 0) != (HEAP32[$591 + 16 >> 2] | 0)) {
         if ($589) {
          $836 = $591;
          break;
         } else {
          label = 229;
          break L1;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$591 >> 2] | 0) + 36 >> 2] & 63]($591) | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         label = 223;
         break;
        } else {
         if ($589) {
          $836 = $591;
          break;
         } else {
          label = 229;
          break L1;
         }
        }
       }
      } while (0);
      if ((label | 0) == 223) {
       label = 0;
       if ($589) {
        label = 229;
        break L1;
       } else {
        $836 = 0;
       }
      }
      $603 = HEAP32[$__b >> 2] | 0;
      $605 = HEAP32[$603 + 12 >> 2] | 0;
      if (($605 | 0) == (HEAP32[$603 + 16 >> 2] | 0)) {
       $$0$i$i93 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$603 >> 2] | 0) + 36 >> 2] & 63]($603) | 0;
      } else {
       $$0$i$i93 = HEAPU8[$605 >> 0] | 0;
      }
      if (!(($$0$i$i93 & 255) << 24 >> 24 == (HEAP8[$__dp >> 0] | 0))) {
       label = 229;
       break L1;
      }
      $620 = HEAP32[$__b >> 2] | 0;
      $621 = $620 + 12 | 0;
      $622 = HEAP32[$621 >> 2] | 0;
      if (($622 | 0) == (HEAP32[$620 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$620 >> 2] | 0) + 40 >> 2] & 63]($620) | 0;
       $$pre$i2$i$i75 = $836;
       $645 = $836;
       $680 = $496;
       $714 = $575;
      } else {
       HEAP32[$621 >> 2] = $622 + 1;
       $$pre$i2$i$i75 = $836;
       $645 = $836;
       $680 = $496;
       $714 = $575;
      }
      while (1) {
       $630 = HEAP32[$__b >> 2] | 0;
       do {
        if (($630 | 0) == 0) {
         $643 = 0;
        } else {
         if ((HEAP32[$630 + 12 >> 2] | 0) == (HEAP32[$630 + 16 >> 2] | 0)) {
          if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$630 >> 2] | 0) + 36 >> 2] & 63]($630) | 0) == -1) {
           HEAP32[$__b >> 2] = 0;
           $643 = 0;
           break;
          } else {
           $643 = HEAP32[$__b >> 2] | 0;
           break;
          }
         } else {
          $643 = $630;
         }
        }
       } while (0);
       $642 = ($643 | 0) == 0;
       do {
        if (($645 | 0) == 0) {
         $$pre$i2$i$i75431$ph = $$pre$i2$i$i75;
         label = 243;
        } else {
         if ((HEAP32[$645 + 12 >> 2] | 0) != (HEAP32[$645 + 16 >> 2] | 0)) {
          if ($642) {
           $$pre$i2$i$i75431458 = $$pre$i2$i$i75;
           $837 = $645;
           break;
          } else {
           label = 250;
           break L1;
          }
         }
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$645 >> 2] | 0) + 36 >> 2] & 63]($645) | 0) == -1) {
          HEAP32[$__e >> 2] = 0;
          $$pre$i2$i$i75431$ph = 0;
          label = 243;
          break;
         } else {
          if ($642 ^ ($$pre$i2$i$i75 | 0) == 0) {
           $$pre$i2$i$i75431458 = $$pre$i2$i$i75;
           $837 = $$pre$i2$i$i75;
           break;
          } else {
           label = 250;
           break L1;
          }
         }
        }
       } while (0);
       if ((label | 0) == 243) {
        label = 0;
        if ($642) {
         label = 250;
         break L1;
        } else {
         $$pre$i2$i$i75431458 = $$pre$i2$i$i75431$ph;
         $837 = 0;
        }
       }
       $657 = HEAP32[$__b >> 2] | 0;
       $659 = HEAP32[$657 + 12 >> 2] | 0;
       if (($659 | 0) == (HEAP32[$657 + 16 >> 2] | 0)) {
        $$0$i$i64 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$657 >> 2] | 0) + 36 >> 2] & 63]($657) | 0;
       } else {
        $$0$i$i64 = HEAPU8[$659 >> 0] | 0;
       }
       if (!(($$0$i$i64 & 255) << 24 >> 24 > -1)) {
        label = 250;
        break L1;
       }
       if ((HEAP16[(HEAP32[$2 >> 2] | 0) + ($$0$i$i64 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
        label = 250;
        break L1;
       }
       $678 = HEAP32[$__wn >> 2] | 0;
       if (($678 | 0) == ($680 | 0)) {
        $682 = (HEAP32[$18 >> 2] | 0) != 125;
        $683 = HEAP32[$__wb >> 2] | 0;
        $686 = $680 - $683 | 0;
        $$$i = $686 >>> 0 < 2147483647 ? $686 << 1 : -1;
        $690 = _realloc($682 ? $683 : 0, $$$i) | 0;
        if (($690 | 0) == 0) {
         label = 253;
         break L1;
        }
        do {
         if ($682) {
          HEAP32[$__wb >> 2] = $690;
          $695 = $690;
         } else {
          $$pr$i = HEAP32[$__wb >> 2] | 0;
          HEAP32[$__wb >> 2] = $690;
          if (($$pr$i | 0) == 0) {
           $695 = $690;
           break;
          }
          FUNCTION_TABLE_vi[HEAP32[$18 >> 2] & 255]($$pr$i);
          $695 = HEAP32[$__wb >> 2] | 0;
         }
        } while (0);
        HEAP32[$18 >> 2] = 126;
        $694 = $695 + $686 | 0;
        HEAP32[$__wn >> 2] = $694;
        $838 = $694;
        $839 = (HEAP32[$__wb >> 2] | 0) + $$$i | 0;
       } else {
        $838 = $678;
        $839 = $680;
       }
       $698 = HEAP32[$__b >> 2] | 0;
       $700 = HEAP32[$698 + 12 >> 2] | 0;
       if (($700 | 0) == (HEAP32[$698 + 16 >> 2] | 0)) {
        $707 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$698 >> 2] | 0) + 36 >> 2] & 63]($698) | 0;
        $$0$i$i53 = $707;
        $712 = HEAP32[$__wn >> 2] | 0;
       } else {
        $$0$i$i53 = HEAPU8[$700 >> 0] | 0;
        $712 = $838;
       }
       HEAP32[$__wn >> 2] = $712 + 1;
       HEAP8[$712 >> 0] = $$0$i$i53;
       $714 = $714 + -1 | 0;
       HEAP32[$__fd >> 2] = $714;
       $715 = HEAP32[$__b >> 2] | 0;
       $716 = $715 + 12 | 0;
       $717 = HEAP32[$716 >> 2] | 0;
       if (($717 | 0) == (HEAP32[$715 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$715 >> 2] | 0) + 40 >> 2] & 63]($715) | 0;
       } else {
        HEAP32[$716 >> 2] = $717 + 1;
       }
       if (($714 | 0) <= 0) {
        $835 = $839;
        break;
       } else {
        $$pre$i2$i$i75 = $$pre$i2$i$i75431458;
        $645 = $837;
        $680 = $839;
       }
      }
     } else {
      $835 = $496;
     }
     if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
      label = 267;
      break L1;
     } else {
      $817 = $835;
      $818 = $830;
      $819 = $831;
      $820 = $832;
      $__trailing_sign$1 = $__trailing_sign$0355;
      $free203 = $free204;
     }
     break;
    }
   default:
    {
     $817 = $815;
     $818 = $814;
     $819 = $813;
     $820 = $812;
     $__trailing_sign$1 = $__trailing_sign$0355;
     $free203 = $free202349;
    }
   }
  } while (0);
  L324 : do {
   if ((label | 0) == 26) {
    label = 0;
    if (($__p$0353 | 0) == 3) {
     $$lcssa293 = $814;
     $$lcssa309 = $813;
     $__trailing_sign$0$lcssa = $__trailing_sign$0355;
     $free202$lcssa = $free202349;
     label = 269;
     break L1;
    } else {
     $$pre$i2$i$i39 = $816;
     $100 = $816;
    }
    while (1) {
     $85 = HEAP32[$__b >> 2] | 0;
     do {
      if (($85 | 0) == 0) {
       $98 = 0;
      } else {
       if ((HEAP32[$85 + 12 >> 2] | 0) == (HEAP32[$85 + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 63]($85) | 0) == -1) {
         HEAP32[$__b >> 2] = 0;
         $98 = 0;
         break;
        } else {
         $98 = HEAP32[$__b >> 2] | 0;
         break;
        }
       } else {
        $98 = $85;
       }
      }
     } while (0);
     $97 = ($98 | 0) == 0;
     do {
      if (($100 | 0) == 0) {
       $$pre$i2$i$i39424 = $$pre$i2$i$i39;
       label = 37;
      } else {
       if ((HEAP32[$100 + 12 >> 2] | 0) != (HEAP32[$100 + 16 >> 2] | 0)) {
        if ($97) {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39;
         $821 = $100;
         break;
        } else {
         $817 = $815;
         $818 = $814;
         $819 = $813;
         $820 = $812;
         $__trailing_sign$1 = $__trailing_sign$0355;
         $free203 = $free202349;
         break L324;
        }
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] & 63]($100) | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        $$pre$i2$i$i39424 = 0;
        label = 37;
        break;
       } else {
        if ($97 ^ ($$pre$i2$i$i39 | 0) == 0) {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39;
         $821 = $$pre$i2$i$i39;
         break;
        } else {
         $817 = $815;
         $818 = $814;
         $819 = $813;
         $820 = $812;
         $__trailing_sign$1 = $__trailing_sign$0355;
         $free203 = $free202349;
         break L324;
        }
       }
      }
     } while (0);
     if ((label | 0) == 37) {
      label = 0;
      if ($97) {
       $817 = $815;
       $818 = $814;
       $819 = $813;
       $820 = $812;
       $__trailing_sign$1 = $__trailing_sign$0355;
       $free203 = $free202349;
       break L324;
      } else {
       $$pre$i2$i$i39426 = $$pre$i2$i$i39424;
       $821 = 0;
      }
     }
     $112 = HEAP32[$__b >> 2] | 0;
     $114 = HEAP32[$112 + 12 >> 2] | 0;
     if (($114 | 0) == (HEAP32[$112 + 16 >> 2] | 0)) {
      $$0$i$i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$112 >> 2] | 0) + 36 >> 2] & 63]($112) | 0;
     } else {
      $$0$i$i45 = HEAPU8[$114 >> 0] | 0;
     }
     if (!(($$0$i$i45 & 255) << 24 >> 24 > -1)) {
      $817 = $815;
      $818 = $814;
      $819 = $813;
      $820 = $812;
      $__trailing_sign$1 = $__trailing_sign$0355;
      $free203 = $free202349;
      break L324;
     }
     if ((HEAP16[(HEAP32[$2 >> 2] | 0) + ($$0$i$i45 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
      $817 = $815;
      $818 = $814;
      $819 = $813;
      $820 = $812;
      $__trailing_sign$1 = $__trailing_sign$0355;
      $free203 = $free202349;
      break L324;
     }
     $131 = HEAP32[$__b >> 2] | 0;
     $132 = $131 + 12 | 0;
     $133 = HEAP32[$132 >> 2] | 0;
     if (($133 | 0) == (HEAP32[$131 + 16 >> 2] | 0)) {
      $$0$i$i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$131 >> 2] | 0) + 40 >> 2] & 63]($131) | 0;
     } else {
      HEAP32[$132 >> 2] = $133 + 1;
      $$0$i$i50 = HEAPU8[$133 >> 0] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i50 & 255);
     $$pre$i2$i$i39 = $$pre$i2$i$i39426;
     $100 = $821;
    }
   }
  } while (0);
  $__p$0353 = $__p$0353 + 1 | 0;
  if (!($__p$0353 >>> 0 < 4)) {
   $$lcssa293 = $818;
   $$lcssa309 = $819;
   $__trailing_sign$0$lcssa = $__trailing_sign$1;
   $free202$lcssa = $free203;
   label = 269;
   break;
  } else {
   $812 = $820;
   $813 = $819;
   $814 = $818;
   $815 = $817;
   $__trailing_sign$0355 = $__trailing_sign$1;
   $free202349 = $free203;
  }
 }
 L357 : switch (label | 0) {
 case 25:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $811 = $814;
   $free208 = $free202349;
   break;
  }
 case 112:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $811 = $814;
   $free208 = $free202349;
   break;
  }
 case 162:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $811 = $814;
   $free208 = $free202349;
   break;
  }
 case 182:
  {
   __ZSt17__throw_bad_allocv();
   break;
  }
 case 198:
  {
   __ZSt17__throw_bad_allocv();
   break;
  }
 case 209:
  {
   __ZSt17__throw_bad_allocv();
   break;
  }
 case 229:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $811 = $830;
   $free208 = $free204;
   break;
  }
 case 250:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $811 = $830;
   $free208 = $free204;
   break;
  }
 case 253:
  {
   __ZSt17__throw_bad_allocv();
   break;
  }
 case 267:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $811 = $830;
   $free208 = $free204;
   break;
  }
 case 269:
  {
   L367 : do {
    if (($__trailing_sign$0$lcssa | 0) != 0) {
     $734 = $__trailing_sign$0$lcssa + 1 | 0;
     $735 = $__trailing_sign$0$lcssa + 8 | 0;
     $736 = $__trailing_sign$0$lcssa + 4 | 0;
     $__i$0 = 1;
     L369 : while (1) {
      $737 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
      if (($737 & 1) == 0) {
       $744 = ($737 & 255) >>> 1;
      } else {
       $744 = HEAP32[$736 >> 2] | 0;
      }
      if (!($__i$0 >>> 0 < $744 >>> 0)) {
       break L367;
      }
      $745 = HEAP32[$__b >> 2] | 0;
      do {
       if (($745 | 0) == 0) {
        $758 = 0;
       } else {
        if ((HEAP32[$745 + 12 >> 2] | 0) == (HEAP32[$745 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$745 >> 2] | 0) + 36 >> 2] & 63]($745) | 0) == -1) {
          HEAP32[$__b >> 2] = 0;
          $758 = 0;
          break;
         } else {
          $758 = HEAP32[$__b >> 2] | 0;
          break;
         }
        } else {
         $758 = $745;
        }
       }
      } while (0);
      $757 = ($758 | 0) == 0;
      $759 = HEAP32[$__e >> 2] | 0;
      do {
       if (($759 | 0) == 0) {
        label = 285;
       } else {
        if ((HEAP32[$759 + 12 >> 2] | 0) != (HEAP32[$759 + 16 >> 2] | 0)) {
         if ($757) {
          break;
         } else {
          break L369;
         }
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$759 >> 2] | 0) + 36 >> 2] & 63]($759) | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         label = 285;
         break;
        } else {
         if ($757) {
          break;
         } else {
          break L369;
         }
        }
       }
      } while (0);
      if ((label | 0) == 285) {
       label = 0;
       if ($757) {
        break;
       }
      }
      $771 = HEAP32[$__b >> 2] | 0;
      $773 = HEAP32[$771 + 12 >> 2] | 0;
      if (($773 | 0) == (HEAP32[$771 + 16 >> 2] | 0)) {
       $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$771 >> 2] | 0) + 36 >> 2] & 63]($771) | 0;
      } else {
       $$0$i$i = HEAPU8[$773 >> 0] | 0;
      }
      if ((HEAP8[$__trailing_sign$0$lcssa >> 0] & 1) == 0) {
       $789 = $734;
      } else {
       $789 = HEAP32[$735 >> 2] | 0;
      }
      if (!(($$0$i$i & 255) << 24 >> 24 == (HEAP8[$789 + $__i$0 >> 0] | 0))) {
       break;
      }
      $794 = $__i$0 + 1 | 0;
      $795 = HEAP32[$__b >> 2] | 0;
      $796 = $795 + 12 | 0;
      $797 = HEAP32[$796 >> 2] | 0;
      if (($797 | 0) == (HEAP32[$795 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$795 >> 2] | 0) + 40 >> 2] & 63]($795) | 0;
       $__i$0 = $794;
       continue;
      } else {
       HEAP32[$796 >> 2] = $797 + 1;
       $__i$0 = $794;
       continue;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
     $$0 = 0;
     $811 = $$lcssa293;
     $free208 = $free202$lcssa;
     break L357;
    }
   } while (0);
   if (($$lcssa293 | 0) == ($$lcssa309 | 0)) {
    $$0 = 1;
    $811 = $$lcssa309;
    $free208 = $free202$lcssa;
   } else {
    HEAP32[$__et >> 2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $$lcssa293, $$lcssa309, $__et);
    if ((HEAP32[$__et >> 2] | 0) == 0) {
     $$0 = 1;
     $811 = $$lcssa293;
     $free208 = $free202$lcssa;
    } else {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
     $$0 = 0;
     $811 = $$lcssa293;
     $free208 = $free202$lcssa;
    }
   }
   break;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 if (($811 | 0) == 0) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 FUNCTION_TABLE_vi[$free208 & 255]($811);
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$$i = 0, $$$i138 = 0, $$$i149 = 0, $$$i159 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i123 = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i192 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i129 = 0, $$0$i$i1$i$i183 = 0, $$0$i$i1$i$i198 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0, $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i113 = 0, $$0$i$i117 = 0, $$0$i$i173 = 0, $$0$i$i207 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i71 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$480 = 0, $$lcssa313 = 0, $$lcssa330 = 0, $$pr$i = 0, $$pr$i162 = 0, $$pre$i3$i$i200 = 0, $$pre$i3$i$i200455 = 0, $$pre$i3$i$i200456 = 0, $$pre$i3$i$i47 = 0, $$pre$i3$i$i47452 = 0, $$pre$i3$i$i47454 = 0, $$pre$i3$i$i97 = 0, $$pre$i3$i$i97459$ph = 0, $$pre$i3$i$i97459475 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $11 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $136 = 0, $14 = 0, $141 = 0, $143 = 0, $148 = 0, $15 = 0, $153 = 0, $158 = 0, $159 = 0, $161 = 0, $164 = 0, $168 = 0, $171 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $186 = 0, $193 = 0, $197 = 0, $2 = 0, $200 = 0, $205 = 0, $206 = 0, $207 = 0, $215 = 0, $222 = 0, $223 = 0, $225 = 0, $232 = 0, $235 = 0, $240 = 0, $241 = 0, $242 = 0, $245 = 0, $250 = 0, $257 = 0, $269 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $286 = 0, $294 = 0, $295 = 0, $3 = 0, $304 = 0, $31 = 0, $311 = 0, $312 = 0, $314 = 0, $322 = 0, $323 = 0, $328 = 0, $329 = 0, $331 = 0, $336 = 0, $337 = 0, $338 = 0, $345 = 0, $346 = 0, $347 = 0, $350 = 0, $352 = 0, $354 = 0, $356 = 0, $361 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $375 = 0, $386 = 0, $388 = 0, $398 = 0, $399 = 0, $4 = 0, $401 = 0, $412 = 0, $413 = 0, $414 = 0, $423 = 0, $431 = 0, $432 = 0, $436 = 0, $439 = 0, $44 = 0, $449 = 0, $452 = 0, $46 = 0, $462 = 0, $464 = 0, $477 = 0, $479 = 0, $481 = 0, $482 = 0, $485 = 0, $488 = 0, $489 = 0, $490 = 0, $495 = 0, $496 = 0, $5 = 0, $500 = 0, $502 = 0, $509 = 0, $514 = 0, $515 = 0, $519 = 0, $520 = 0, $524 = 0, $525 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $548 = 0, $552 = 0, $553 = 0, $559 = 0, $560 = 0, $562 = 0, $565 = 0, $575 = 0, $578 = 0, $588 = 0, $59 = 0, $590 = 0, $60 = 0, $603 = 0, $604 = 0, $605 = 0, $61 = 0, $613 = 0, $616 = 0, $627 = 0, $629 = 0, $639 = 0, $640 = 0, $642 = 0, $657 = 0, $659 = 0, $661 = 0, $662 = 0, $665 = 0, $668 = 0, $669 = 0, $670 = 0, $675 = 0, $676 = 0, $679 = 0, $681 = 0, $688 = 0, $691 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $7 = 0, $713 = 0, $714 = 0, $715 = 0, $722 = 0, $723 = 0, $726 = 0, $736 = 0, $739 = 0, $74 = 0, $749 = 0, $751 = 0, $765 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $88 = 0, $9 = 0, $90 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__p$0377 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0379 = 0, $__trailing_sign$1 = 0, $__ts = 0, $free = 0, $free226 = 0, $free227 = 0, $free228$lcssa = 0, $free228372 = 0, $free229 = 0, $free230 = 0, $free231 = 0, $free234 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $__gbuf = sp + 80 | 0;
 $__pat = sp + 76 | 0;
 $__dp = sp + 72 | 0;
 $__ts = sp + 68 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 28 | 0;
 $__nsn = sp + 16 | 0;
 $__spaces = sp + 4 | 0;
 $__fd = sp;
 $__et = sp + 40 | 0;
 HEAP32[$__pat >> 2] = 0;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__psn + 0 >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 HEAP32[$__nsn + 0 >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 HEAP32[$__spaces + 0 >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $2 = $__nsn + 4 | 0;
 $3 = $__nsn + 8 | 0;
 $4 = $__psn + 4 | 0;
 $5 = $__psn + 8 | 0;
 $7 = ($__flags & 512 | 0) != 0;
 $8 = $__sym + 4 | 0;
 $9 = $__sym + 8 | 0;
 $10 = $__spaces + 4 | 0;
 $11 = $__spaces + 8 | 0;
 $12 = $__pat + 3 | 0;
 $13 = $__wb + 4 | 0;
 $14 = $__grp + 4 | 0;
 $788 = $__gbuf + 400 | 0;
 $789 = $__gbuf;
 $790 = $__gbuf;
 $791 = $__we;
 $__p$0377 = 0;
 $__trailing_sign$0379 = 0;
 $free228372 = 125;
 L1 : while (1) {
  $15 = HEAP32[$__b >> 2] | 0;
  do {
   if (($15 | 0) == 0) {
    $792 = 1;
   } else {
    $18 = HEAP32[$15 + 12 >> 2] | 0;
    if (($18 | 0) == (HEAP32[$15 + 16 >> 2] | 0)) {
     $$0$i$i$i$i18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 63]($15) | 0;
    } else {
     $$0$i$i$i$i18 = HEAP32[$18 >> 2] | 0;
    }
    if (($$0$i$i$i$i18 | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $792 = 1;
     break;
    } else {
     $792 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  $28 = HEAP32[$__e >> 2] | 0;
  do {
   if (($28 | 0) == 0) {
    label = 15;
   } else {
    $31 = HEAP32[$28 + 12 >> 2] | 0;
    if (($31 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i24 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0;
    } else {
     $$0$i$i1$i$i24 = HEAP32[$31 >> 2] | 0;
    }
    if (($$0$i$i1$i$i24 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 15;
     break;
    } else {
     if ($792) {
      $793 = $28;
      break;
     } else {
      $$lcssa313 = $790;
      $$lcssa330 = $789;
      $__trailing_sign$0$lcssa = $__trailing_sign$0379;
      $free228$lcssa = $free228372;
      label = 292;
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($792) {
    $$lcssa313 = $790;
    $$lcssa330 = $789;
    $__trailing_sign$0$lcssa = $__trailing_sign$0379;
    $free228$lcssa = $free228372;
    label = 292;
    break;
   } else {
    $793 = 0;
   }
  }
  L25 : do {
   switch (HEAP8[$__pat + $__p$0377 >> 0] | 0) {
   case 3:
    {
     $128 = HEAP8[$__psn >> 0] | 0;
     $130 = ($128 & 1) == 0;
     if ($130) {
      $143 = ($128 & 255) >>> 1;
     } else {
      $143 = HEAP32[$4 >> 2] | 0;
     }
     $134 = HEAP8[$__nsn >> 0] | 0;
     $136 = ($134 & 1) == 0;
     if ($136) {
      $141 = ($134 & 255) >>> 1;
     } else {
      $141 = HEAP32[$2 >> 2] | 0;
     }
     if (($143 | 0) == (0 - $141 | 0)) {
      $794 = $791;
      $795 = $790;
      $796 = $789;
      $797 = $788;
      $__trailing_sign$1 = $__trailing_sign$0379;
      $free229 = $free228372;
     } else {
      if ($130) {
       $148 = ($128 & 255) >>> 1;
      } else {
       $148 = HEAP32[$4 >> 2] | 0;
      }
      if (($148 | 0) != 0) {
       if ($136) {
        $153 = ($134 & 255) >>> 1;
       } else {
        $153 = HEAP32[$2 >> 2] | 0;
       }
       if (($153 | 0) != 0) {
        $223 = HEAP32[$__b >> 2] | 0;
        $225 = HEAP32[$223 + 12 >> 2] | 0;
        if (($225 | 0) == (HEAP32[$223 + 16 >> 2] | 0)) {
         $232 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$223 >> 2] | 0) + 36 >> 2] & 63]($223) | 0;
         $$0$i$i104 = $232;
         $235 = HEAP8[$__psn >> 0] | 0;
        } else {
         $$0$i$i104 = HEAP32[$225 >> 2] | 0;
         $235 = $128;
        }
        $240 = HEAP32[$__b >> 2] | 0;
        $241 = $240 + 12 | 0;
        $242 = HEAP32[$241 >> 2] | 0;
        $245 = ($242 | 0) == (HEAP32[$240 + 16 >> 2] | 0);
        if (($$0$i$i104 | 0) == (HEAP32[(($235 & 1) == 0 ? $4 : HEAP32[$5 >> 2] | 0) >> 2] | 0)) {
         if ($245) {
          FUNCTION_TABLE_ii[HEAP32[(HEAP32[$240 >> 2] | 0) + 40 >> 2] & 63]($240) | 0;
         } else {
          HEAP32[$241 >> 2] = $242 + 4;
         }
         $250 = HEAP8[$__psn >> 0] | 0;
         if (($250 & 1) == 0) {
          $257 = ($250 & 255) >>> 1;
         } else {
          $257 = HEAP32[$4 >> 2] | 0;
         }
         $794 = $791;
         $795 = $790;
         $796 = $789;
         $797 = $788;
         $__trailing_sign$1 = $257 >>> 0 > 1 ? $__psn : $__trailing_sign$0379;
         $free229 = $free228372;
         break L25;
        }
        if ($245) {
         $$0$i$i113 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$240 >> 2] | 0) + 36 >> 2] & 63]($240) | 0;
        } else {
         $$0$i$i113 = HEAP32[$242 >> 2] | 0;
        }
        if (($$0$i$i113 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $2 : HEAP32[$3 >> 2] | 0) >> 2] | 0)) {
         label = 116;
         break L1;
        }
        $269 = HEAP32[$__b >> 2] | 0;
        $270 = $269 + 12 | 0;
        $271 = HEAP32[$270 >> 2] | 0;
        if (($271 | 0) == (HEAP32[$269 + 16 >> 2] | 0)) {
         FUNCTION_TABLE_ii[HEAP32[(HEAP32[$269 >> 2] | 0) + 40 >> 2] & 63]($269) | 0;
        } else {
         HEAP32[$270 >> 2] = $271 + 4;
        }
        HEAP8[$__neg >> 0] = 1;
        $279 = HEAP8[$__nsn >> 0] | 0;
        if (($279 & 1) == 0) {
         $286 = ($279 & 255) >>> 1;
        } else {
         $286 = HEAP32[$2 >> 2] | 0;
        }
        $794 = $791;
        $795 = $790;
        $796 = $789;
        $797 = $788;
        $__trailing_sign$1 = $286 >>> 0 > 1 ? $__nsn : $__trailing_sign$0379;
        $free229 = $free228372;
        break L25;
       }
      }
      if ($130) {
       $158 = ($128 & 255) >>> 1;
      } else {
       $158 = HEAP32[$4 >> 2] | 0;
      }
      $159 = HEAP32[$__b >> 2] | 0;
      $161 = HEAP32[$159 + 12 >> 2] | 0;
      $164 = ($161 | 0) == (HEAP32[$159 + 16 >> 2] | 0);
      if (($158 | 0) == 0) {
       if ($164) {
        $197 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$159 >> 2] | 0) + 36 >> 2] & 63]($159) | 0;
        $$0$i$i79 = $197;
        $200 = HEAP8[$__nsn >> 0] | 0;
       } else {
        $$0$i$i79 = HEAP32[$161 >> 2] | 0;
        $200 = $134;
       }
       if (($$0$i$i79 | 0) != (HEAP32[(($200 & 1) == 0 ? $2 : HEAP32[$3 >> 2] | 0) >> 2] | 0)) {
        $794 = $791;
        $795 = $790;
        $796 = $789;
        $797 = $788;
        $__trailing_sign$1 = $__trailing_sign$0379;
        $free229 = $free228372;
        break L25;
       }
       $205 = HEAP32[$__b >> 2] | 0;
       $206 = $205 + 12 | 0;
       $207 = HEAP32[$206 >> 2] | 0;
       if (($207 | 0) == (HEAP32[$205 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$205 >> 2] | 0) + 40 >> 2] & 63]($205) | 0;
       } else {
        HEAP32[$206 >> 2] = $207 + 4;
       }
       HEAP8[$__neg >> 0] = 1;
       $215 = HEAP8[$__nsn >> 0] | 0;
       if (($215 & 1) == 0) {
        $222 = ($215 & 255) >>> 1;
       } else {
        $222 = HEAP32[$2 >> 2] | 0;
       }
       $794 = $791;
       $795 = $790;
       $796 = $789;
       $797 = $788;
       $__trailing_sign$1 = $222 >>> 0 > 1 ? $__nsn : $__trailing_sign$0379;
       $free229 = $free228372;
       break L25;
      }
      if ($164) {
       $168 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$159 >> 2] | 0) + 36 >> 2] & 63]($159) | 0;
       $$0$i$i71 = $168;
       $171 = HEAP8[$__psn >> 0] | 0;
      } else {
       $$0$i$i71 = HEAP32[$161 >> 2] | 0;
       $171 = $128;
      }
      if (($$0$i$i71 | 0) != (HEAP32[(($171 & 1) == 0 ? $4 : HEAP32[$5 >> 2] | 0) >> 2] | 0)) {
       HEAP8[$__neg >> 0] = 1;
       $794 = $791;
       $795 = $790;
       $796 = $789;
       $797 = $788;
       $__trailing_sign$1 = $__trailing_sign$0379;
       $free229 = $free228372;
       break L25;
      }
      $176 = HEAP32[$__b >> 2] | 0;
      $177 = $176 + 12 | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      if (($178 | 0) == (HEAP32[$176 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$176 >> 2] | 0) + 40 >> 2] & 63]($176) | 0;
      } else {
       HEAP32[$177 >> 2] = $178 + 4;
      }
      $186 = HEAP8[$__psn >> 0] | 0;
      if (($186 & 1) == 0) {
       $193 = ($186 & 255) >>> 1;
      } else {
       $193 = HEAP32[$4 >> 2] | 0;
      }
      $794 = $791;
      $795 = $790;
      $796 = $789;
      $797 = $788;
      $__trailing_sign$1 = $193 >>> 0 > 1 ? $__psn : $__trailing_sign$0379;
      $free229 = $free228372;
     }
     break;
    }
   case 0:
    {
     label = 28;
     break;
    }
   case 1:
    {
     if (($__p$0377 | 0) == 3) {
      $$lcssa313 = $790;
      $$lcssa330 = $789;
      $__trailing_sign$0$lcssa = $__trailing_sign$0379;
      $free228$lcssa = $free228372;
      label = 292;
      break L1;
     }
     $44 = HEAP32[$__b >> 2] | 0;
     $46 = HEAP32[$44 + 12 >> 2] | 0;
     if (($46 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) {
      $$0$i$i33 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 63]($44) | 0;
     } else {
      $$0$i$i33 = HEAP32[$46 >> 2] | 0;
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i33) | 0)) {
      label = 27;
      break L1;
     }
     $59 = HEAP32[$__b >> 2] | 0;
     $60 = $59 + 12 | 0;
     $61 = HEAP32[$60 >> 2] | 0;
     if (($61 | 0) == (HEAP32[$59 + 16 >> 2] | 0)) {
      $$0$i$i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 40 >> 2] & 63]($59) | 0;
     } else {
      HEAP32[$60 >> 2] = $61 + 4;
      $$0$i$i37 = HEAP32[$61 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i37);
     label = 28;
     break;
    }
   case 4:
    {
     $479 = $791;
     $514 = $789;
     $515 = $788;
     $519 = $790;
     $__ng$0 = 0;
     $free227 = $free228372;
     L122 : while (1) {
      $436 = HEAP32[$__b >> 2] | 0;
      do {
       if (($436 | 0) == 0) {
        $800 = 1;
       } else {
        $439 = HEAP32[$436 + 12 >> 2] | 0;
        if (($439 | 0) == (HEAP32[$436 + 16 >> 2] | 0)) {
         $$0$i$i$i$i177 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$436 >> 2] | 0) + 36 >> 2] & 63]($436) | 0;
        } else {
         $$0$i$i$i$i177 = HEAP32[$439 >> 2] | 0;
        }
        if (($$0$i$i$i$i177 | 0) == -1) {
         HEAP32[$__b >> 2] = 0;
         $800 = 1;
         break;
        } else {
         $800 = (HEAP32[$__b >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      $449 = HEAP32[$__e >> 2] | 0;
      do {
       if (($449 | 0) == 0) {
        label = 188;
       } else {
        $452 = HEAP32[$449 + 12 >> 2] | 0;
        if (($452 | 0) == (HEAP32[$449 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i183 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$449 >> 2] | 0) + 36 >> 2] & 63]($449) | 0;
        } else {
         $$0$i$i1$i$i183 = HEAP32[$452 >> 2] | 0;
        }
        if (($$0$i$i1$i$i183 | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         label = 188;
         break;
        } else {
         if ($800) {
          break;
         } else {
          break L122;
         }
        }
       }
      } while (0);
      if ((label | 0) == 188) {
       label = 0;
       if ($800) {
        break;
       }
      }
      $462 = HEAP32[$__b >> 2] | 0;
      $464 = HEAP32[$462 + 12 >> 2] | 0;
      if (($464 | 0) == (HEAP32[$462 + 16 >> 2] | 0)) {
       $$0$i$i173 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$462 >> 2] | 0) + 36 >> 2] & 63]($462) | 0;
      } else {
       $$0$i$i173 = HEAP32[$464 >> 2] | 0;
      }
      if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i173) | 0) {
       $477 = HEAP32[$__wn >> 2] | 0;
       if (($477 | 0) == ($479 | 0)) {
        $481 = (HEAP32[$13 >> 2] | 0) != 125;
        $482 = HEAP32[$__wb >> 2] | 0;
        $485 = $479 - $482 | 0;
        $$$i159 = $485 >>> 0 < 2147483647 ? $485 << 1 : -1;
        $488 = $485 >> 2;
        if ($481) {
         $489 = $482;
        } else {
         $489 = 0;
        }
        $490 = _realloc($489, $$$i159) | 0;
        if (($490 | 0) == 0) {
         label = 198;
         break L1;
        }
        if ($481) {
         HEAP32[$__wb >> 2] = $490;
         $496 = $490;
        } else {
         $$pr$i162 = HEAP32[$__wb >> 2] | 0;
         HEAP32[$__wb >> 2] = $490;
         if (($$pr$i162 | 0) == 0) {
          $496 = $490;
         } else {
          FUNCTION_TABLE_vi[HEAP32[$13 >> 2] & 255]($$pr$i162);
          $496 = HEAP32[$__wb >> 2] | 0;
         }
        }
        HEAP32[$13 >> 2] = 126;
        $495 = $496 + ($488 << 2) | 0;
        HEAP32[$__wn >> 2] = $495;
        $500 = $495;
        $801 = (HEAP32[$__wb >> 2] | 0) + ($$$i159 >>> 2 << 2) | 0;
       } else {
        $500 = $477;
        $801 = $479;
       }
       HEAP32[$__wn >> 2] = $500 + 4;
       HEAP32[$500 >> 2] = $$0$i$i173;
       $802 = $801;
       $803 = $519;
       $804 = $514;
       $805 = $515;
       $__ng$1 = $__ng$0 + 1 | 0;
       $free = $free227;
      } else {
       $502 = HEAP8[$__grp >> 0] | 0;
       if (($502 & 1) == 0) {
        $509 = ($502 & 255) >>> 1;
       } else {
        $509 = HEAP32[$14 >> 2] | 0;
       }
       if (($509 | 0) == 0 | ($__ng$0 | 0) == 0) {
        break;
       }
       if (($$0$i$i173 | 0) != (HEAP32[$__ts >> 2] | 0)) {
        break;
       }
       if (($514 | 0) == ($515 | 0)) {
        $520 = $514 - $519 | 0;
        $$$i149 = $520 >>> 0 < 2147483647 ? $520 << 1 : -1;
        if (($free227 | 0) != 125) {
         $524 = $519;
        } else {
         $524 = 0;
        }
        $525 = _realloc($524, $$$i149) | 0;
        if (($525 | 0) == 0) {
         label = 214;
         break L1;
        }
        $531 = $525 + ($520 >> 2 << 2) | 0;
        $806 = $525;
        $807 = $525 + ($$$i149 >>> 2 << 2) | 0;
        $free226 = 126;
       } else {
        $531 = $514;
        $806 = $519;
        $807 = $515;
        $free226 = $free227;
       }
       HEAP32[$531 >> 2] = $__ng$0;
       $802 = $479;
       $803 = $806;
       $804 = $531 + 4 | 0;
       $805 = $807;
       $__ng$1 = 0;
       $free = $free226;
      }
      $532 = HEAP32[$__b >> 2] | 0;
      $533 = $532 + 12 | 0;
      $534 = HEAP32[$533 >> 2] | 0;
      if (($534 | 0) == (HEAP32[$532 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$532 >> 2] | 0) + 40 >> 2] & 63]($532) | 0;
       $479 = $802;
       $514 = $804;
       $515 = $805;
       $519 = $803;
       $__ng$0 = $__ng$1;
       $free227 = $free;
       continue;
      } else {
       HEAP32[$533 >> 2] = $534 + 4;
       $479 = $802;
       $514 = $804;
       $515 = $805;
       $519 = $803;
       $__ng$0 = $__ng$1;
       $free227 = $free;
       continue;
      }
     }
     if (($519 | 0) == ($514 | 0) | ($__ng$0 | 0) == 0) {
      $808 = $519;
      $809 = $514;
      $810 = $515;
      $free230 = $free227;
     } else {
      if (($514 | 0) == ($515 | 0)) {
       $548 = $514 - $519 | 0;
       $$$i138 = $548 >>> 0 < 2147483647 ? $548 << 1 : -1;
       if (($free227 | 0) != 125) {
        $552 = $519;
       } else {
        $552 = 0;
       }
       $553 = _realloc($552, $$$i138) | 0;
       if (($553 | 0) == 0) {
        label = 225;
        break L1;
       }
       $559 = $553 + ($548 >> 2 << 2) | 0;
       $811 = $553;
       $812 = $553 + ($$$i138 >>> 2 << 2) | 0;
       $free231 = 126;
      } else {
       $559 = $514;
       $811 = $519;
       $812 = $515;
       $free231 = $free227;
      }
      HEAP32[$559 >> 2] = $__ng$0;
      $808 = $811;
      $809 = $559 + 4 | 0;
      $810 = $812;
      $free230 = $free231;
     }
     $560 = HEAP32[$__fd >> 2] | 0;
     if (($560 | 0) > 0) {
      $562 = HEAP32[$__b >> 2] | 0;
      do {
       if (($562 | 0) == 0) {
        $814 = 1;
       } else {
        $565 = HEAP32[$562 + 12 >> 2] | 0;
        if (($565 | 0) == (HEAP32[$562 + 16 >> 2] | 0)) {
         $$0$i$i$i$i123 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$562 >> 2] | 0) + 36 >> 2] & 63]($562) | 0;
        } else {
         $$0$i$i$i$i123 = HEAP32[$565 >> 2] | 0;
        }
        if (($$0$i$i$i$i123 | 0) == -1) {
         HEAP32[$__b >> 2] = 0;
         $814 = 1;
         break;
        } else {
         $814 = (HEAP32[$__b >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      $575 = HEAP32[$__e >> 2] | 0;
      do {
       if (($575 | 0) == 0) {
        label = 242;
       } else {
        $578 = HEAP32[$575 + 12 >> 2] | 0;
        if (($578 | 0) == (HEAP32[$575 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i129 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$575 >> 2] | 0) + 36 >> 2] & 63]($575) | 0;
        } else {
         $$0$i$i1$i$i129 = HEAP32[$578 >> 2] | 0;
        }
        if (($$0$i$i1$i$i129 | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         label = 242;
         break;
        } else {
         if ($814) {
          $815 = $575;
          break;
         } else {
          label = 248;
          break L1;
         }
        }
       }
      } while (0);
      if ((label | 0) == 242) {
       label = 0;
       if ($814) {
        label = 248;
        break L1;
       } else {
        $815 = 0;
       }
      }
      $588 = HEAP32[$__b >> 2] | 0;
      $590 = HEAP32[$588 + 12 >> 2] | 0;
      if (($590 | 0) == (HEAP32[$588 + 16 >> 2] | 0)) {
       $$0$i$i117 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$588 >> 2] | 0) + 36 >> 2] & 63]($588) | 0;
      } else {
       $$0$i$i117 = HEAP32[$590 >> 2] | 0;
      }
      if (($$0$i$i117 | 0) != (HEAP32[$__dp >> 2] | 0)) {
       label = 248;
       break L1;
      }
      $603 = HEAP32[$__b >> 2] | 0;
      $604 = $603 + 12 | 0;
      $605 = HEAP32[$604 >> 2] | 0;
      if (($605 | 0) == (HEAP32[$603 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$603 >> 2] | 0) + 40 >> 2] & 63]($603) | 0;
       $$pre$i3$i$i97 = $815;
       $627 = $815;
       $659 = $479;
       $693 = $560;
      } else {
       HEAP32[$604 >> 2] = $605 + 4;
       $$pre$i3$i$i97 = $815;
       $627 = $815;
       $659 = $479;
       $693 = $560;
      }
      while (1) {
       $613 = HEAP32[$__b >> 2] | 0;
       do {
        if (($613 | 0) == 0) {
         $639 = 1;
        } else {
         $616 = HEAP32[$613 + 12 >> 2] | 0;
         if (($616 | 0) == (HEAP32[$613 + 16 >> 2] | 0)) {
          $$0$i$i$i$i89 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$613 >> 2] | 0) + 36 >> 2] & 63]($613) | 0;
         } else {
          $$0$i$i$i$i89 = HEAP32[$616 >> 2] | 0;
         }
         if (($$0$i$i$i$i89 | 0) == -1) {
          HEAP32[$__b >> 2] = 0;
          $639 = 1;
          break;
         } else {
          $639 = (HEAP32[$__b >> 2] | 0) == 0;
          break;
         }
        }
       } while (0);
       do {
        if (($627 | 0) == 0) {
         $$pre$i3$i$i97459$ph = $$pre$i3$i$i97;
         label = 265;
        } else {
         $629 = HEAP32[$627 + 12 >> 2] | 0;
         if (($629 | 0) == (HEAP32[$627 + 16 >> 2] | 0)) {
          $$0$i$i1$i$i95 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$627 >> 2] | 0) + 36 >> 2] & 63]($627) | 0;
         } else {
          $$0$i$i1$i$i95 = HEAP32[$629 >> 2] | 0;
         }
         if (($$0$i$i1$i$i95 | 0) == -1) {
          HEAP32[$__e >> 2] = 0;
          $$pre$i3$i$i97459$ph = 0;
          label = 265;
          break;
         } else {
          if ($639 ^ ($$pre$i3$i$i97 | 0) == 0) {
           $$pre$i3$i$i97459475 = $$pre$i3$i$i97;
           $816 = $$pre$i3$i$i97;
           break;
          } else {
           label = 271;
           break L1;
          }
         }
        }
       } while (0);
       if ((label | 0) == 265) {
        label = 0;
        if ($639) {
         label = 271;
         break L1;
        } else {
         $$pre$i3$i$i97459475 = $$pre$i3$i$i97459$ph;
         $816 = 0;
        }
       }
       $640 = HEAP32[$__b >> 2] | 0;
       $642 = HEAP32[$640 + 12 >> 2] | 0;
       if (($642 | 0) == (HEAP32[$640 + 16 >> 2] | 0)) {
        $$0$i$i83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$640 >> 2] | 0) + 36 >> 2] & 63]($640) | 0;
       } else {
        $$0$i$i83 = HEAP32[$642 >> 2] | 0;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i83) | 0)) {
        label = 271;
        break L1;
       }
       $657 = HEAP32[$__wn >> 2] | 0;
       if (($657 | 0) == ($659 | 0)) {
        $661 = (HEAP32[$13 >> 2] | 0) != 125;
        $662 = HEAP32[$__wb >> 2] | 0;
        $665 = $659 - $662 | 0;
        $$$i = $665 >>> 0 < 2147483647 ? $665 << 1 : -1;
        $668 = $665 >> 2;
        if ($661) {
         $669 = $662;
        } else {
         $669 = 0;
        }
        $670 = _realloc($669, $$$i) | 0;
        if (($670 | 0) == 0) {
         label = 276;
         break L1;
        }
        do {
         if ($661) {
          HEAP32[$__wb >> 2] = $670;
          $676 = $670;
         } else {
          $$pr$i = HEAP32[$__wb >> 2] | 0;
          HEAP32[$__wb >> 2] = $670;
          if (($$pr$i | 0) == 0) {
           $676 = $670;
           break;
          }
          FUNCTION_TABLE_vi[HEAP32[$13 >> 2] & 255]($$pr$i);
          $676 = HEAP32[$__wb >> 2] | 0;
         }
        } while (0);
        HEAP32[$13 >> 2] = 126;
        $675 = $676 + ($668 << 2) | 0;
        HEAP32[$__wn >> 2] = $675;
        $817 = $675;
        $818 = (HEAP32[$__wb >> 2] | 0) + ($$$i >>> 2 << 2) | 0;
       } else {
        $817 = $657;
        $818 = $659;
       }
       $679 = HEAP32[$__b >> 2] | 0;
       $681 = HEAP32[$679 + 12 >> 2] | 0;
       if (($681 | 0) == (HEAP32[$679 + 16 >> 2] | 0)) {
        $688 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$679 >> 2] | 0) + 36 >> 2] & 63]($679) | 0;
        $$0$i$i64 = $688;
        $691 = HEAP32[$__wn >> 2] | 0;
       } else {
        $$0$i$i64 = HEAP32[$681 >> 2] | 0;
        $691 = $817;
       }
       HEAP32[$__wn >> 2] = $691 + 4;
       HEAP32[$691 >> 2] = $$0$i$i64;
       $693 = $693 + -1 | 0;
       HEAP32[$__fd >> 2] = $693;
       $694 = HEAP32[$__b >> 2] | 0;
       $695 = $694 + 12 | 0;
       $696 = HEAP32[$695 >> 2] | 0;
       if (($696 | 0) == (HEAP32[$694 + 16 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$694 >> 2] | 0) + 40 >> 2] & 63]($694) | 0;
       } else {
        HEAP32[$695 >> 2] = $696 + 4;
       }
       if (($693 | 0) <= 0) {
        $813 = $818;
        break;
       } else {
        $$pre$i3$i$i97 = $$pre$i3$i$i97459475;
        $627 = $816;
        $659 = $818;
       }
      }
     } else {
      $813 = $479;
     }
     if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
      label = 290;
      break L1;
     } else {
      $794 = $813;
      $795 = $808;
      $796 = $809;
      $797 = $810;
      $__trailing_sign$1 = $__trailing_sign$0379;
      $free229 = $free230;
     }
     break;
    }
   case 2:
    {
     if (!(($__trailing_sign$0379 | 0) != 0 | $__p$0377 >>> 0 < 2)) {
      if (($__p$0377 | 0) == 2) {
       $294 = (HEAP8[$12 >> 0] | 0) != 0;
      } else {
       $294 = 0;
      }
      if (!($7 | $294)) {
       $794 = $791;
       $795 = $790;
       $796 = $789;
       $797 = $788;
       $__trailing_sign$1 = 0;
       $free229 = $free228372;
       break L25;
      }
     }
     $295 = HEAP8[$__sym >> 0] | 0;
     $$480 = ($295 & 1) == 0 ? $8 : HEAP32[$9 >> 2] | 0;
     L282 : do {
      if (($__p$0377 | 0) == 0) {
       $$pre$i3$i$i200 = $793;
       $361 = $295;
       $371 = $$480;
       $386 = $793;
      } else {
       if ((HEAPU8[$__pat + ($__p$0377 + -1) >> 0] | 0) < 2) {
        $304 = $295;
        $314 = $$480;
        while (1) {
         if (($304 & 1) == 0) {
          $311 = $8;
          $312 = ($304 & 255) >>> 1;
         } else {
          $311 = HEAP32[$9 >> 2] | 0;
          $312 = HEAP32[$8 >> 2] | 0;
         }
         if (($314 | 0) == ($311 + ($312 << 2) | 0)) {
          $322 = $304;
          break;
         }
         if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, HEAP32[$314 >> 2] | 0) | 0)) {
          label = 129;
          break;
         }
         $304 = HEAP8[$__sym >> 0] | 0;
         $314 = $314 + 4 | 0;
        }
        if ((label | 0) == 129) {
         label = 0;
         $322 = HEAP8[$__sym >> 0] | 0;
        }
        $323 = ($322 & 1) == 0;
        $328 = $314 - ($323 ? $8 : HEAP32[$9 >> 2] | 0) >> 2;
        $329 = HEAP8[$__spaces >> 0] | 0;
        $331 = ($329 & 1) == 0;
        if ($331) {
         $336 = ($329 & 255) >>> 1;
        } else {
         $336 = HEAP32[$10 >> 2] | 0;
        }
        L299 : do {
         if (!($328 >>> 0 > $336 >>> 0)) {
          if ($331) {
           $346 = $10;
           $347 = ($329 & 255) >>> 1;
           $350 = $10 + ((($329 & 255) >>> 1) - $328 << 2) | 0;
          } else {
           $337 = HEAP32[$11 >> 2] | 0;
           $338 = HEAP32[$10 >> 2] | 0;
           $346 = $337;
           $347 = $338;
           $350 = $337 + ($338 - $328 << 2) | 0;
          }
          $345 = $346 + ($347 << 2) | 0;
          if (($350 | 0) == ($345 | 0)) {
           $$pre$i3$i$i200 = $793;
           $361 = $322;
           $371 = $314;
           $386 = $793;
           break L282;
          } else {
           $352 = $350;
           $354 = $323 ? $8 : HEAP32[$9 >> 2] | 0;
          }
          while (1) {
           if ((HEAP32[$352 >> 2] | 0) != (HEAP32[$354 >> 2] | 0)) {
            break L299;
           }
           $356 = $352 + 4 | 0;
           if (($356 | 0) == ($345 | 0)) {
            $$pre$i3$i$i200 = $793;
            $361 = $322;
            $371 = $314;
            $386 = $793;
            break L282;
           }
           $352 = $356;
           $354 = $354 + 4 | 0;
          }
         }
        } while (0);
        $$pre$i3$i$i200 = $793;
        $361 = $322;
        $371 = $323 ? $8 : HEAP32[$9 >> 2] | 0;
        $386 = $793;
       } else {
        $$pre$i3$i$i200 = $793;
        $361 = $295;
        $371 = $$480;
        $386 = $793;
       }
      }
     } while (0);
     L310 : while (1) {
      if (($361 & 1) == 0) {
       $368 = $8;
       $369 = ($361 & 255) >>> 1;
      } else {
       $368 = HEAP32[$9 >> 2] | 0;
       $369 = HEAP32[$8 >> 2] | 0;
      }
      if (($371 | 0) == ($368 + ($369 << 2) | 0)) {
       break;
      }
      $372 = HEAP32[$__b >> 2] | 0;
      do {
       if (($372 | 0) == 0) {
        $398 = 1;
       } else {
        $375 = HEAP32[$372 + 12 >> 2] | 0;
        if (($375 | 0) == (HEAP32[$372 + 16 >> 2] | 0)) {
         $$0$i$i$i$i192 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$372 >> 2] | 0) + 36 >> 2] & 63]($372) | 0;
        } else {
         $$0$i$i$i$i192 = HEAP32[$375 >> 2] | 0;
        }
        if (($$0$i$i$i$i192 | 0) == -1) {
         HEAP32[$__b >> 2] = 0;
         $398 = 1;
         break;
        } else {
         $398 = (HEAP32[$__b >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      do {
       if (($386 | 0) == 0) {
        $$pre$i3$i$i200456 = $$pre$i3$i$i200;
        label = 159;
       } else {
        $388 = HEAP32[$386 + 12 >> 2] | 0;
        if (($388 | 0) == (HEAP32[$386 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i198 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$386 >> 2] | 0) + 36 >> 2] & 63]($386) | 0;
        } else {
         $$0$i$i1$i$i198 = HEAP32[$388 >> 2] | 0;
        }
        if (($$0$i$i1$i$i198 | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         $$pre$i3$i$i200456 = 0;
         label = 159;
         break;
        } else {
         if ($398 ^ ($$pre$i3$i$i200 | 0) == 0) {
          $$pre$i3$i$i200455 = $$pre$i3$i$i200;
          $799 = $$pre$i3$i$i200;
          break;
         } else {
          break L310;
         }
        }
       }
      } while (0);
      if ((label | 0) == 159) {
       label = 0;
       if ($398) {
        break;
       } else {
        $$pre$i3$i$i200455 = $$pre$i3$i$i200456;
        $799 = 0;
       }
      }
      $399 = HEAP32[$__b >> 2] | 0;
      $401 = HEAP32[$399 + 12 >> 2] | 0;
      if (($401 | 0) == (HEAP32[$399 + 16 >> 2] | 0)) {
       $$0$i$i207 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$399 >> 2] | 0) + 36 >> 2] & 63]($399) | 0;
      } else {
       $$0$i$i207 = HEAP32[$401 >> 2] | 0;
      }
      if (($$0$i$i207 | 0) != (HEAP32[$371 >> 2] | 0)) {
       break;
      }
      $412 = HEAP32[$__b >> 2] | 0;
      $413 = $412 + 12 | 0;
      $414 = HEAP32[$413 >> 2] | 0;
      if (($414 | 0) == (HEAP32[$412 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$412 >> 2] | 0) + 40 >> 2] & 63]($412) | 0;
      } else {
       HEAP32[$413 >> 2] = $414 + 4;
      }
      $$pre$i3$i$i200 = $$pre$i3$i$i200455;
      $361 = HEAP8[$__sym >> 0] | 0;
      $371 = $371 + 4 | 0;
      $386 = $799;
     }
     if ($7) {
      $423 = HEAP8[$__sym >> 0] | 0;
      if (($423 & 1) == 0) {
       $431 = $8;
       $432 = ($423 & 255) >>> 1;
      } else {
       $431 = HEAP32[$9 >> 2] | 0;
       $432 = HEAP32[$8 >> 2] | 0;
      }
      if (($371 | 0) == ($431 + ($432 << 2) | 0)) {
       $794 = $791;
       $795 = $790;
       $796 = $789;
       $797 = $788;
       $__trailing_sign$1 = $__trailing_sign$0379;
       $free229 = $free228372;
      } else {
       label = 174;
       break L1;
      }
     } else {
      $794 = $791;
      $795 = $790;
      $796 = $789;
      $797 = $788;
      $__trailing_sign$1 = $__trailing_sign$0379;
      $free229 = $free228372;
     }
     break;
    }
   default:
    {
     $794 = $791;
     $795 = $790;
     $796 = $789;
     $797 = $788;
     $__trailing_sign$1 = $__trailing_sign$0379;
     $free229 = $free228372;
    }
   }
  } while (0);
  L354 : do {
   if ((label | 0) == 28) {
    label = 0;
    if (($__p$0377 | 0) == 3) {
     $$lcssa313 = $790;
     $$lcssa330 = $789;
     $__trailing_sign$0$lcssa = $__trailing_sign$0379;
     $free228$lcssa = $free228372;
     label = 292;
     break L1;
    } else {
     $$pre$i3$i$i47 = $793;
     $88 = $793;
    }
    while (1) {
     $74 = HEAP32[$__b >> 2] | 0;
     do {
      if (($74 | 0) == 0) {
       $100 = 1;
      } else {
       $77 = HEAP32[$74 + 12 >> 2] | 0;
       if (($77 | 0) == (HEAP32[$74 + 16 >> 2] | 0)) {
        $$0$i$i$i$i39 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$74 >> 2] | 0) + 36 >> 2] & 63]($74) | 0;
       } else {
        $$0$i$i$i$i39 = HEAP32[$77 >> 2] | 0;
       }
       if (($$0$i$i$i$i39 | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $100 = 1;
        break;
       } else {
        $100 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      }
     } while (0);
     do {
      if (($88 | 0) == 0) {
       $$pre$i3$i$i47452 = $$pre$i3$i$i47;
       label = 42;
      } else {
       $90 = HEAP32[$88 + 12 >> 2] | 0;
       if (($90 | 0) == (HEAP32[$88 + 16 >> 2] | 0)) {
        $$0$i$i1$i$i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 63]($88) | 0;
       } else {
        $$0$i$i1$i$i45 = HEAP32[$90 >> 2] | 0;
       }
       if (($$0$i$i1$i$i45 | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        $$pre$i3$i$i47452 = 0;
        label = 42;
        break;
       } else {
        if ($100 ^ ($$pre$i3$i$i47 | 0) == 0) {
         $$pre$i3$i$i47454 = $$pre$i3$i$i47;
         $798 = $$pre$i3$i$i47;
         break;
        } else {
         $794 = $791;
         $795 = $790;
         $796 = $789;
         $797 = $788;
         $__trailing_sign$1 = $__trailing_sign$0379;
         $free229 = $free228372;
         break L354;
        }
       }
      }
     } while (0);
     if ((label | 0) == 42) {
      label = 0;
      if ($100) {
       $794 = $791;
       $795 = $790;
       $796 = $789;
       $797 = $788;
       $__trailing_sign$1 = $__trailing_sign$0379;
       $free229 = $free228372;
       break L354;
      } else {
       $$pre$i3$i$i47454 = $$pre$i3$i$i47452;
       $798 = 0;
      }
     }
     $101 = HEAP32[$__b >> 2] | 0;
     $103 = HEAP32[$101 + 12 >> 2] | 0;
     if (($103 | 0) == (HEAP32[$101 + 16 >> 2] | 0)) {
      $$0$i$i54 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$101 >> 2] | 0) + 36 >> 2] & 63]($101) | 0;
     } else {
      $$0$i$i54 = HEAP32[$103 >> 2] | 0;
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i54) | 0)) {
      $794 = $791;
      $795 = $790;
      $796 = $789;
      $797 = $788;
      $__trailing_sign$1 = $__trailing_sign$0379;
      $free229 = $free228372;
      break L354;
     }
     $116 = HEAP32[$__b >> 2] | 0;
     $117 = $116 + 12 | 0;
     $118 = HEAP32[$117 >> 2] | 0;
     if (($118 | 0) == (HEAP32[$116 + 16 >> 2] | 0)) {
      $$0$i$i59 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$116 >> 2] | 0) + 40 >> 2] & 63]($116) | 0;
     } else {
      HEAP32[$117 >> 2] = $118 + 4;
      $$0$i$i59 = HEAP32[$118 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i59);
     $$pre$i3$i$i47 = $$pre$i3$i$i47454;
     $88 = $798;
    }
   }
  } while (0);
  $__p$0377 = $__p$0377 + 1 | 0;
  if (!($__p$0377 >>> 0 < 4)) {
   $$lcssa313 = $795;
   $$lcssa330 = $796;
   $__trailing_sign$0$lcssa = $__trailing_sign$1;
   $free228$lcssa = $free229;
   label = 292;
   break;
  } else {
   $788 = $797;
   $789 = $796;
   $790 = $795;
   $791 = $794;
   $__trailing_sign$0379 = $__trailing_sign$1;
   $free228372 = $free229;
  }
 }
 L390 : switch (label | 0) {
 case 27:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $787 = $790;
   $free234 = $free228372;
   break;
  }
 case 116:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $787 = $790;
   $free234 = $free228372;
   break;
  }
 case 174:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $787 = $790;
   $free234 = $free228372;
   break;
  }
 case 198:
  {
   __ZSt17__throw_bad_allocv();
   break;
  }
 case 214:
  {
   __ZSt17__throw_bad_allocv();
   break;
  }
 case 225:
  {
   __ZSt17__throw_bad_allocv();
   break;
  }
 case 248:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $787 = $808;
   $free234 = $free230;
   break;
  }
 case 271:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $787 = $808;
   $free234 = $free230;
   break;
  }
 case 276:
  {
   __ZSt17__throw_bad_allocv();
   break;
  }
 case 290:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   $787 = $808;
   $free234 = $free230;
   break;
  }
 case 292:
  {
   L392 : do {
    if (($__trailing_sign$0$lcssa | 0) != 0) {
     $713 = $__trailing_sign$0$lcssa + 4 | 0;
     $714 = $__trailing_sign$0$lcssa + 8 | 0;
     $__i$0 = 1;
     L394 : while (1) {
      $715 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
      if (($715 & 1) == 0) {
       $722 = ($715 & 255) >>> 1;
      } else {
       $722 = HEAP32[$713 >> 2] | 0;
      }
      if (!($__i$0 >>> 0 < $722 >>> 0)) {
       break L392;
      }
      $723 = HEAP32[$__b >> 2] | 0;
      do {
       if (($723 | 0) == 0) {
        $819 = 1;
       } else {
        $726 = HEAP32[$723 + 12 >> 2] | 0;
        if (($726 | 0) == (HEAP32[$723 + 16 >> 2] | 0)) {
         $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$723 >> 2] | 0) + 36 >> 2] & 63]($723) | 0;
        } else {
         $$0$i$i$i$i = HEAP32[$726 >> 2] | 0;
        }
        if (($$0$i$i$i$i | 0) == -1) {
         HEAP32[$__b >> 2] = 0;
         $819 = 1;
         break;
        } else {
         $819 = (HEAP32[$__b >> 2] | 0) == 0;
         break;
        }
       }
      } while (0);
      $736 = HEAP32[$__e >> 2] | 0;
      do {
       if (($736 | 0) == 0) {
        label = 311;
       } else {
        $739 = HEAP32[$736 + 12 >> 2] | 0;
        if (($739 | 0) == (HEAP32[$736 + 16 >> 2] | 0)) {
         $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$736 >> 2] | 0) + 36 >> 2] & 63]($736) | 0;
        } else {
         $$0$i$i1$i$i = HEAP32[$739 >> 2] | 0;
        }
        if (($$0$i$i1$i$i | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         label = 311;
         break;
        } else {
         if ($819) {
          break;
         } else {
          break L394;
         }
        }
       }
      } while (0);
      if ((label | 0) == 311) {
       label = 0;
       if ($819) {
        break;
       }
      }
      $749 = HEAP32[$__b >> 2] | 0;
      $751 = HEAP32[$749 + 12 >> 2] | 0;
      if (($751 | 0) == (HEAP32[$749 + 16 >> 2] | 0)) {
       $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$749 >> 2] | 0) + 36 >> 2] & 63]($749) | 0;
      } else {
       $$0$i$i = HEAP32[$751 >> 2] | 0;
      }
      if ((HEAP8[$__trailing_sign$0$lcssa >> 0] & 1) == 0) {
       $765 = $713;
      } else {
       $765 = HEAP32[$714 >> 2] | 0;
      }
      if (($$0$i$i | 0) != (HEAP32[$765 + ($__i$0 << 2) >> 2] | 0)) {
       break;
      }
      $770 = $__i$0 + 1 | 0;
      $771 = HEAP32[$__b >> 2] | 0;
      $772 = $771 + 12 | 0;
      $773 = HEAP32[$772 >> 2] | 0;
      if (($773 | 0) == (HEAP32[$771 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$771 >> 2] | 0) + 40 >> 2] & 63]($771) | 0;
       $__i$0 = $770;
       continue;
      } else {
       HEAP32[$772 >> 2] = $773 + 4;
       $__i$0 = $770;
       continue;
      }
     }
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
     $$0 = 0;
     $787 = $$lcssa313;
     $free234 = $free228$lcssa;
     break L390;
    }
   } while (0);
   if (($$lcssa313 | 0) == ($$lcssa330 | 0)) {
    $$0 = 1;
    $787 = $$lcssa330;
    $free234 = $free228$lcssa;
   } else {
    HEAP32[$__et >> 2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $$lcssa313, $$lcssa330, $__et);
    if ((HEAP32[$__et >> 2] | 0) == 0) {
     $$0 = 1;
     $787 = $$lcssa313;
     $free234 = $free228$lcssa;
    } else {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
     $$0 = 0;
     $787 = $$lcssa313;
     $free234 = $free228$lcssa;
    }
   }
   break;
  }
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 if (($787 | 0) == 0) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 FUNCTION_TABLE_vi[$free234 & 255]($787);
 STACKTOP = sp;
 return $$0 | 0;
}
function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$lcssa43$i = 0, $$pn$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $0 = 0, $1 = 0, $102 = 0, $112 = 0, $114 = 0, $122 = 0, $124 = 0, $131 = 0, $138 = 0, $146 = 0, $15 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $169 = 0, $172 = 0, $183 = 0.0, $190 = 0, $192 = 0, $2 = 0, $201 = 0, $204 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $220 = 0, $221 = 0, $222 = 0, $232 = 0, $233 = 0, $245 = 0, $247 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $262 = 0, $266 = 0, $268 = 0, $275 = 0, $280 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $305 = 0.0, $306 = 0.0, $309 = 0, $317 = 0.0, $319 = 0, $325 = 0, $326 = 0, $333 = 0, $341 = 0, $349 = 0, $350 = 0, $351 = 0, $353 = 0, $355 = 0, $356 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $364 = 0, $369 = 0, $370 = 0, $374 = 0, $384 = 0, $386 = 0, $387 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $394 = 0, $395 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $414 = 0, $415 = 0, $42 = 0, $420 = 0, $421 = 0, $423 = 0, $424 = 0, $437 = 0, $439 = 0, $445 = 0, $449 = 0, $451 = 0, $457 = 0, $463 = 0, $465 = 0, $487 = 0, $499 = 0, $503 = 0, $506 = 0, $508 = 0, $509 = 0, $510 = 0, $513 = 0, $527 = 0, $530 = 0, $532 = 0, $534 = 0, $535 = 0, $541 = 0, $543 = 0, $548 = 0, $551 = 0, $556 = 0, $558 = 0, $560 = 0, $561 = 0, $567 = 0, $569 = 0, $574 = 0, $577 = 0, $581 = 0, $584 = 0, $589 = 0, $59 = 0, $594 = 0, $596 = 0, $599 = 0, $601 = 0, $605 = 0, $606 = 0, $608 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $617 = 0, $627 = 0, $632 = 0, $640 = 0.0, $642 = 0, $645 = 0, $649 = 0.0, $650 = 0.0, $653 = 0.0, $657 = 0, $66 = 0, $660 = 0, $667 = 0.0, $68 = 0, $685 = 0.0, $687 = 0, $700 = 0, $703 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $76 = 0, $81 = 0, $89 = 0, $9 = 0, $98 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0, $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $or$cond15$i = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0, $rp$3$ph33$i = 0, $rp$426$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0, $k$462$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x$i = sp;
 if (($prec | 0) == 2) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else if (($prec | 0) == 0) {
  $bits$0$ph = 24;
  $emin$0$ph = -149;
 } else if (($prec | 0) == 1) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $0 = $f + 4 | 0;
 $1 = $f + 100 | 0;
 do {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $2 + 1;
   $9 = HEAPU8[$2 >> 0] | 0;
  } else {
   $9 = ___shgetc($f) | 0;
  }
 } while ((_isspace($9) | 0) != 0);
 do {
  if (($9 | 0) == 43 | ($9 | 0) == 45) {
   $15 = 1 - ((($9 | 0) == 45 & 1) << 1) | 0;
   $16 = HEAP32[$0 >> 2] | 0;
   if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $16 + 1;
    $c$0 = HEAPU8[$16 >> 0] | 0;
    $sign$0 = $15;
    break;
   } else {
    $c$0 = ___shgetc($f) | 0;
    $sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;
   $sign$0 = 1;
  }
 } while (0);
 $c$169 = $c$0;
 $i$068 = 0;
 while (1) {
  if (($c$169 | 32 | 0) != (HEAP8[15112 + $i$068 >> 0] | 0)) {
   $c$1$lcssa = $c$169;
   $i$0$lcssa = $i$068;
   break;
  }
  do {
   if ($i$068 >>> 0 < 7) {
    $29 = HEAP32[$0 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $29 + 1;
     $c$2 = HEAPU8[$29 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while (0);
  $36 = $i$068 + 1 | 0;
  if ($36 >>> 0 < 8) {
   $c$169 = $c$2;
   $i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;
   $i$0$lcssa = $36;
   break;
  }
 }
 do {
  if (($i$0$lcssa | 0) == 3) {
   label = 23;
  } else if (($i$0$lcssa | 0) != 8) {
   $39 = ($pok | 0) == 0;
   if (!($i$0$lcssa >>> 0 < 4 | $39)) {
    if (($i$0$lcssa | 0) == 8) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   L34 : do {
    if (($i$0$lcssa | 0) == 0) {
     $c$364 = $c$1$lcssa;
     $i$263 = 0;
     while (1) {
      if (($c$364 | 32 | 0) != (HEAP8[15128 + $i$263 >> 0] | 0)) {
       $c$5 = $c$364;
       $i$3 = $i$263;
       break L34;
      }
      do {
       if ($i$263 >>> 0 < 2) {
        $59 = HEAP32[$0 >> 2] | 0;
        if ($59 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $59 + 1;
         $c$4 = HEAPU8[$59 >> 0] | 0;
         break;
        } else {
         $c$4 = ___shgetc($f) | 0;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while (0);
      $66 = $i$263 + 1 | 0;
      if ($66 >>> 0 < 3) {
       $c$364 = $c$4;
       $i$263 = $66;
      } else {
       $c$5 = $c$4;
       $i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $i$0$lcssa;
    }
   } while (0);
   if (($i$3 | 0) == 0) {
    do {
     if (($c$5 | 0) == 48) {
      $114 = HEAP32[$0 >> 2] | 0;
      if ($114 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $114 + 1;
       $122 = HEAPU8[$114 >> 0] | 0;
      } else {
       $122 = ___shgetc($f) | 0;
      }
      if (($122 | 32 | 0) != 120) {
       if ((HEAP32[$1 >> 2] | 0) == 0) {
        $c$6 = 48;
        break;
       }
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0 >> 2] | 0;
      if ($124 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $124 + 1;
       $c$0$i = HEAPU8[$124 >> 0] | 0;
       $gotdig$0$i = 0;
      } else {
       $c$0$i = ___shgetc($f) | 0;
       $gotdig$0$i = 0;
      }
      while (1) {
       if (($c$0$i | 0) == 46) {
        label = 70;
        break;
       } else if (($c$0$i | 0) != 48) {
        $169 = 0;
        $172 = 0;
        $212 = 0;
        $214 = 0;
        $c$2$i = $c$0$i;
        $gotdig$2$i = $gotdig$0$i;
        $gotrad$0$i = 0;
        $gottail$0$i = 0;
        $scale$0$i = 1.0;
        $x$0$i = 0;
        $y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0 >> 2] | 0;
       if ($131 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $131 + 1;
        $c$0$i = HEAPU8[$131 >> 0] | 0;
        $gotdig$0$i = 1;
        continue;
       } else {
        $c$0$i = ___shgetc($f) | 0;
        $gotdig$0$i = 1;
        continue;
       }
      }
      L71 : do {
       if ((label | 0) == 70) {
        $138 = HEAP32[$0 >> 2] | 0;
        if ($138 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $138 + 1;
         $c$1$ph$i = HEAPU8[$138 >> 0] | 0;
        } else {
         $c$1$ph$i = ___shgetc($f) | 0;
        }
        if (($c$1$ph$i | 0) == 48) {
         $155 = -1;
         $156 = -1;
         while (1) {
          $146 = HEAP32[$0 >> 2] | 0;
          if ($146 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
           HEAP32[$0 >> 2] = $146 + 1;
           $154 = HEAPU8[$146 >> 0] | 0;
          } else {
           $154 = ___shgetc($f) | 0;
          }
          if (($154 | 0) != 48) {
           $169 = 0;
           $172 = 0;
           $212 = $155;
           $214 = $156;
           $c$2$i = $154;
           $gotdig$2$i = 1;
           $gotrad$0$i = 1;
           $gottail$0$i = 0;
           $scale$0$i = 1.0;
           $x$0$i = 0;
           $y$0$i = 0.0;
           break L71;
          }
          $157 = _i64Add($155 | 0, $156 | 0, -1, -1) | 0;
          $155 = $157;
          $156 = tempRet0;
         }
        } else {
         $169 = 0;
         $172 = 0;
         $212 = 0;
         $214 = 0;
         $c$2$i = $c$1$ph$i;
         $gotdig$2$i = $gotdig$0$i;
         $gotrad$0$i = 1;
         $gottail$0$i = 0;
         $scale$0$i = 1.0;
         $x$0$i = 0;
         $y$0$i = 0.0;
        }
       }
      } while (0);
      L84 : while (1) {
       $159 = $c$2$i + -48 | 0;
       do {
        if ($159 >>> 0 < 10) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $164 = ($c$2$i | 0) == 46;
         if (!(($161 + -97 | 0) >>> 0 < 6 | $164)) {
          $c$2$lcssa$i = $c$2$i;
          break L84;
         }
         if ($164) {
          if (($gotrad$0$i | 0) == 0) {
           $712 = $172;
           $713 = $169;
           $714 = $172;
           $715 = $169;
           $gotdig$3$i = $gotdig$2$i;
           $gotrad$1$i = 1;
           $gottail$2$i = $gottail$0$i;
           $scale$2$i = $scale$0$i;
           $x$2$i = $x$0$i;
           $y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L84;
          }
         } else {
          $d$0$i = ($c$2$i | 0) > 57 ? $161 + -87 | 0 : $159;
          label = 84;
          break;
         }
        }
       } while (0);
       if ((label | 0) == 84) {
        label = 0;
        do {
         if (($169 | 0) < 0 | ($169 | 0) == 0 & $172 >>> 0 < 8) {
          $gottail$1$i = $gottail$0$i;
          $scale$1$i = $scale$0$i;
          $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
          $y$1$i = $y$0$i;
         } else {
          if (($169 | 0) < 0 | ($169 | 0) == 0 & $172 >>> 0 < 14) {
           $183 = $scale$0$i * .0625;
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $183;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $183 * +($d$0$i | 0);
           break;
          }
          if (($d$0$i | 0) != 0 & ($gottail$0$i | 0) == 0) {
           $gottail$1$i = 1;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $scale$0$i * .5;
          } else {
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i;
          }
         }
        } while (0);
        $190 = _i64Add($172 | 0, $169 | 0, 1, 0) | 0;
        $712 = $212;
        $713 = $214;
        $714 = $190;
        $715 = tempRet0;
        $gotdig$3$i = 1;
        $gotrad$1$i = $gotrad$0$i;
        $gottail$2$i = $gottail$1$i;
        $scale$2$i = $scale$1$i;
        $x$2$i = $x$1$i;
        $y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0 >> 2] | 0;
       if ($192 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $192 + 1;
        $169 = $715;
        $172 = $714;
        $212 = $712;
        $214 = $713;
        $c$2$i = HEAPU8[$192 >> 0] | 0;
        $gotdig$2$i = $gotdig$3$i;
        $gotrad$0$i = $gotrad$1$i;
        $gottail$0$i = $gottail$2$i;
        $scale$0$i = $scale$2$i;
        $x$0$i = $x$2$i;
        $y$0$i = $y$2$i;
        continue;
       } else {
        $169 = $715;
        $172 = $714;
        $212 = $712;
        $214 = $713;
        $c$2$i = ___shgetc($f) | 0;
        $gotdig$2$i = $gotdig$3$i;
        $gotrad$0$i = $gotrad$1$i;
        $gottail$0$i = $gottail$2$i;
        $scale$0$i = $scale$2$i;
        $x$0$i = $x$2$i;
        $y$0$i = $y$2$i;
        continue;
       }
      }
      if (($gotdig$2$i | 0) == 0) {
       $201 = (HEAP32[$1 >> 2] | 0) == 0;
       if (!$201) {
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       }
       if ($39) {
        ___shlim($f, 0);
       } else {
        if (!$201) {
         $204 = HEAP32[$0 >> 2] | 0;
         HEAP32[$0 >> 2] = $204 + -1;
         if (($gotrad$0$i | 0) != 0) {
          HEAP32[$0 >> 2] = $204 + -2;
         }
        }
       }
       $$0 = +($sign$0 | 0) * 0.0;
       STACKTOP = sp;
       return +$$0;
      }
      $210 = ($gotrad$0$i | 0) == 0;
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      if (($169 | 0) < 0 | ($169 | 0) == 0 & $172 >>> 0 < 8) {
       $221 = $172;
       $222 = $169;
       $x$313$i = $x$0$i;
       while (1) {
        $220 = $x$313$i << 4;
        $221 = _i64Add($221 | 0, $222 | 0, 1, 0) | 0;
        $222 = tempRet0;
        if (!(($222 | 0) < 0 | ($222 | 0) == 0 & $221 >>> 0 < 8)) {
         $x$3$lcssa$i = $220;
         break;
        } else {
         $x$313$i = $220;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      do {
       if (($c$2$lcssa$i | 32 | 0) == 112) {
        $232 = _scanexp($f, $pok) | 0;
        $233 = tempRet0;
        if (($232 | 0) == 0 & ($233 | 0) == -2147483648) {
         if ($39) {
          ___shlim($f, 0);
          $$0 = 0.0;
          STACKTOP = sp;
          return +$$0;
         } else {
          if ((HEAP32[$1 >> 2] | 0) == 0) {
           $249 = 0;
           $250 = 0;
           break;
          }
          HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
          $249 = 0;
          $250 = 0;
          break;
         }
        } else {
         $249 = $232;
         $250 = $233;
        }
       } else {
        if ((HEAP32[$1 >> 2] | 0) == 0) {
         $249 = 0;
         $250 = 0;
        } else {
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
         $249 = 0;
         $250 = 0;
        }
       }
      } while (0);
      $245 = _bitshift64Shl($211 | 0, $213 | 0, 2) | 0;
      $247 = _i64Add($245 | 0, tempRet0 | 0, -32, -1) | 0;
      $251 = _i64Add($247 | 0, tempRet0 | 0, $249 | 0, $250 | 0) | 0;
      $252 = tempRet0;
      if (($x$3$lcssa$i | 0) == 0) {
       $$0 = +($sign$0 | 0) * 0.0;
       STACKTOP = sp;
       return +$$0;
      }
      if (($252 | 0) > 0 | ($252 | 0) == 0 & $251 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
       $262 = ___errno_location() | 0;
       HEAP32[$262 >> 2] = 34;
       $$0 = +($sign$0 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308;
       STACKTOP = sp;
       return +$$0;
      }
      $266 = $emin$0$ph + -106 | 0;
      $268 = (($266 | 0) < 0) << 31 >> 31;
      if (($252 | 0) < ($268 | 0) | ($252 | 0) == ($268 | 0) & $251 >>> 0 < $266 >>> 0) {
       $275 = ___errno_location() | 0;
       HEAP32[$275 >> 2] = 34;
       $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
       STACKTOP = sp;
       return +$$0;
      }
      if (($x$3$lcssa$i | 0) > -1) {
       $283 = $251;
       $284 = $252;
       $x$48$i = $x$3$lcssa$i;
       $y$39$i = $y$0$i;
       while (1) {
        $280 = $x$48$i << 1;
        if (!($y$39$i >= .5)) {
         $$pn$i = $y$39$i;
         $x$5$i = $280;
        } else {
         $$pn$i = $y$39$i + -1.0;
         $x$5$i = $280 | 1;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = _i64Add($283 | 0, $284 | 0, -1, -1) | 0;
        $286 = tempRet0;
        if (($x$5$i | 0) > -1) {
         $283 = $285;
         $284 = $286;
         $x$48$i = $x$5$i;
         $y$39$i = $y$4$i;
        } else {
         $292 = $285;
         $293 = $286;
         $x$4$lcssa$i = $x$5$i;
         $y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;
       $293 = $252;
       $x$4$lcssa$i = $x$3$lcssa$i;
       $y$3$lcssa$i = $y$0$i;
      }
      $290 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
      $294 = _i64Add($292 | 0, $293 | 0, $290 | 0, tempRet0 | 0) | 0;
      $295 = tempRet0;
      if (0 > ($295 | 0) | 0 == ($295 | 0) & $bits$0$ph >>> 0 > $294 >>> 0) {
       $$02$i = ($294 | 0) < 0 ? 0 : $294;
      } else {
       $$02$i = $bits$0$ph;
      }
      do {
       if (($$02$i | 0) < 53) {
        $305 = +($sign$0 | 0);
        $306 = +_copysignl(+(+_scalbn(1.0, 84 - $$02$i | 0)), +$305);
        if (!(($$02$i | 0) < 32 & $y$3$lcssa$i != 0.0)) {
         $$pre$phi$iZ2D = $305;
         $bias$07$i = $306;
         $x$6$i = $x$4$lcssa$i;
         $y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $$pre$phi$iZ2D = $305;
        $bias$07$i = $306;
        $x$6$i = ($309 ^ 1) + $x$4$lcssa$i | 0;
        $y$5$i = ($309 | 0) == 0 ? 0.0 : $y$3$lcssa$i;
       } else {
        $$pre$phi$iZ2D = +($sign$0 | 0);
        $bias$07$i = 0.0;
        $x$6$i = $x$4$lcssa$i;
        $y$5$i = $y$3$lcssa$i;
       }
      } while (0);
      $317 = $$pre$phi$iZ2D * $y$5$i + ($bias$07$i + $$pre$phi$iZ2D * +($x$6$i >>> 0)) - $bias$07$i;
      if (!($317 != 0.0)) {
       $319 = ___errno_location() | 0;
       HEAP32[$319 >> 2] = 34;
      }
      $$0 = +_scalbnl($317, $292);
      STACKTOP = sp;
      return +$$0;
     } else {
      $c$6 = $c$5;
     }
    } while (0);
    $sum$i = $emin$0$ph + $bits$0$ph | 0;
    $325 = 0 - $sum$i | 0;
    $$08$i = $c$6;
    $gotdig$0$i9 = 0;
    while (1) {
     if (($$08$i | 0) == 46) {
      label = 139;
      break;
     } else if (($$08$i | 0) != 48) {
      $$2$i = $$08$i;
      $716 = 0;
      $717 = 0;
      $gotdig$2$i11 = $gotdig$0$i9;
      $gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0 >> 2] | 0;
     if ($326 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $326 + 1;
      $$08$i = HEAPU8[$326 >> 0] | 0;
      $gotdig$0$i9 = 1;
      continue;
     } else {
      $$08$i = ___shgetc($f) | 0;
      $gotdig$0$i9 = 1;
      continue;
     }
    }
    L173 : do {
     if ((label | 0) == 139) {
      $333 = HEAP32[$0 >> 2] | 0;
      if ($333 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $333 + 1;
       $$1$ph$i = HEAPU8[$333 >> 0] | 0;
      } else {
       $$1$ph$i = ___shgetc($f) | 0;
      }
      if (($$1$ph$i | 0) == 48) {
       $349 = -1;
       $350 = -1;
       while (1) {
        $341 = HEAP32[$0 >> 2] | 0;
        if ($341 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $341 + 1;
         $$1$be$i = HEAPU8[$341 >> 0] | 0;
        } else {
         $$1$be$i = ___shgetc($f) | 0;
        }
        if (($$1$be$i | 0) != 48) {
         $$2$i = $$1$be$i;
         $716 = $349;
         $717 = $350;
         $gotdig$2$i11 = 1;
         $gotrad$0$i12 = 1;
         break L173;
        }
        $351 = _i64Add($349 | 0, $350 | 0, -1, -1) | 0;
        $349 = $351;
        $350 = tempRet0;
       }
      } else {
       $$2$i = $$1$ph$i;
       $716 = 0;
       $717 = 0;
       $gotdig$2$i11 = $gotdig$0$i9;
       $gotrad$0$i12 = 1;
      }
     }
    } while (0);
    HEAP32[$x$i >> 2] = 0;
    $353 = $$2$i + -48 | 0;
    $355 = ($$2$i | 0) == 46;
    L187 : do {
     if ($353 >>> 0 < 10 | $355) {
      $356 = $x$i + 496 | 0;
      $$397$i = $$2$i;
      $358 = 0;
      $359 = 0;
      $718 = $355;
      $719 = $353;
      $720 = $716;
      $721 = $717;
      $gotdig$393$i = $gotdig$2$i11;
      $gotrad$194$i = $gotrad$0$i12;
      $j$096$i = 0;
      $k$095$i = 0;
      $lnz$092$i = 0;
      while (1) {
       do {
        if ($718) {
         if (($gotrad$194$i | 0) == 0) {
          $722 = $358;
          $723 = $359;
          $724 = $358;
          $725 = $359;
          $gotdig$4$i = $gotdig$393$i;
          $gotrad$2$i = 1;
          $j$2$i = $j$096$i;
          $k$2$i = $k$095$i;
          $lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;
          $405 = $720;
          $406 = $721;
          $421 = $358;
          $424 = $359;
          $gotdig$381$i = $gotdig$393$i;
          $j$086$i = $j$096$i;
          $k$084$i = $k$095$i;
          $lnz$079$i = $lnz$092$i;
          break L187;
         }
        } else {
         $360 = _i64Add($358 | 0, $359 | 0, 1, 0) | 0;
         $361 = tempRet0;
         $362 = ($$397$i | 0) != 48;
         if (($k$095$i | 0) >= 125) {
          if (!$362) {
           $722 = $720;
           $723 = $721;
           $724 = $360;
           $725 = $361;
           $gotdig$4$i = $gotdig$393$i;
           $gotrad$2$i = $gotrad$194$i;
           $j$2$i = $j$096$i;
           $k$2$i = $k$095$i;
           $lnz$2$i = $lnz$092$i;
           break;
          }
          HEAP32[$356 >> 2] = HEAP32[$356 >> 2] | 1;
          $722 = $720;
          $723 = $721;
          $724 = $360;
          $725 = $361;
          $gotdig$4$i = $gotdig$393$i;
          $gotrad$2$i = $gotrad$194$i;
          $j$2$i = $j$096$i;
          $k$2$i = $k$095$i;
          $lnz$2$i = $lnz$092$i;
          break;
         }
         $364 = $x$i + ($k$095$i << 2) | 0;
         if (($j$096$i | 0) == 0) {
          $storemerge$i = $719;
         } else {
          $storemerge$i = $$397$i + -48 + ((HEAP32[$364 >> 2] | 0) * 10 | 0) | 0;
         }
         HEAP32[$364 >> 2] = $storemerge$i;
         $369 = $j$096$i + 1 | 0;
         $370 = ($369 | 0) == 9;
         $722 = $720;
         $723 = $721;
         $724 = $360;
         $725 = $361;
         $gotdig$4$i = 1;
         $gotrad$2$i = $gotrad$194$i;
         $j$2$i = $370 ? 0 : $369;
         $k$2$i = ($370 & 1) + $k$095$i | 0;
         $lnz$2$i = $362 ? $360 : $lnz$092$i;
        }
       } while (0);
       $374 = HEAP32[$0 >> 2] | 0;
       if ($374 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $374 + 1;
        $$3$be$i = HEAPU8[$374 >> 0] | 0;
       } else {
        $$3$be$i = ___shgetc($f) | 0;
       }
       $719 = $$3$be$i + -48 | 0;
       $718 = ($$3$be$i | 0) == 46;
       if (!($719 >>> 0 < 10 | $718)) {
        $$3$lcssa$i = $$3$be$i;
        $386 = $724;
        $387 = $722;
        $389 = $725;
        $390 = $723;
        $gotdig$3$lcssa$i = $gotdig$4$i;
        $gotrad$1$lcssa$i = $gotrad$2$i;
        $j$0$lcssa$i = $j$2$i;
        $k$0$lcssa$i = $k$2$i;
        $lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       } else {
        $$397$i = $$3$be$i;
        $358 = $724;
        $359 = $725;
        $720 = $722;
        $721 = $723;
        $gotdig$393$i = $gotdig$4$i;
        $gotrad$194$i = $gotrad$2$i;
        $j$096$i = $j$2$i;
        $k$095$i = $k$2$i;
        $lnz$092$i = $lnz$2$i;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;
      $386 = 0;
      $387 = $716;
      $389 = 0;
      $390 = $717;
      $gotdig$3$lcssa$i = $gotdig$2$i11;
      $gotrad$1$lcssa$i = $gotrad$0$i12;
      $j$0$lcssa$i = 0;
      $k$0$lcssa$i = 0;
      $lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while (0);
    if ((label | 0) == 162) {
     $384 = ($gotrad$1$lcssa$i | 0) == 0;
     $$388$i = $$3$lcssa$i;
     $405 = $384 ? $386 : $387;
     $406 = $384 ? $389 : $390;
     $421 = $386;
     $424 = $389;
     $gotdig$381$i = $gotdig$3$lcssa$i;
     $j$086$i = $j$0$lcssa$i;
     $k$084$i = $k$0$lcssa$i;
     $lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i | 0) != 0;
    if ($391) {
     if (($$388$i | 32 | 0) == 101) {
      $394 = _scanexp($f, $pok) | 0;
      $395 = tempRet0;
      do {
       if (($394 | 0) == 0 & ($395 | 0) == -2147483648) {
        if ($39) {
         ___shlim($f, 0);
         $$0 = 0.0;
         STACKTOP = sp;
         return +$$0;
        } else {
         if ((HEAP32[$1 >> 2] | 0) == 0) {
          $403 = 0;
          $404 = 0;
          break;
         }
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
         $403 = 0;
         $404 = 0;
         break;
        }
       } else {
        $403 = $394;
        $404 = $395;
       }
      } while (0);
      $407 = _i64Add($403 | 0, $404 | 0, $405 | 0, $406 | 0) | 0;
      $420 = $407;
      $423 = tempRet0;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label | 0) == 171) {
     if (($$388$i | 0) > -1) {
      if ((HEAP32[$1 >> 2] | 0) == 0) {
       $420 = $405;
       $423 = $406;
      } else {
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       $420 = $405;
       $423 = $406;
      }
     } else {
      $420 = $405;
      $423 = $406;
     }
    }
    if (!$391) {
     $414 = ___errno_location() | 0;
     HEAP32[$414 >> 2] = 22;
     ___shlim($f, 0);
     $$0 = 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    $415 = HEAP32[$x$i >> 2] | 0;
    if (($415 | 0) == 0) {
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    do {
     if (($420 | 0) == ($421 | 0) & ($423 | 0) == ($424 | 0) & (($424 | 0) < 0 | ($424 | 0) == 0 & $421 >>> 0 < 10)) {
      if (!($bits$0$ph >>> 0 > 30)) {
       if (($415 >>> $bits$0$ph | 0) != 0) {
        break;
       }
      }
      $$0 = +($sign$0 | 0) * +($415 >>> 0);
      STACKTOP = sp;
      return +$$0;
     }
    } while (0);
    $437 = ($emin$0$ph | 0) / -2 | 0;
    $439 = (($437 | 0) < 0) << 31 >> 31;
    if (($423 | 0) > ($439 | 0) | ($423 | 0) == ($439 | 0) & $420 >>> 0 > $437 >>> 0) {
     $445 = ___errno_location() | 0;
     HEAP32[$445 >> 2] = 34;
     $$0 = +($sign$0 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308;
     STACKTOP = sp;
     return +$$0;
    }
    $449 = $emin$0$ph + -106 | 0;
    $451 = (($449 | 0) < 0) << 31 >> 31;
    if (($423 | 0) < ($451 | 0) | ($423 | 0) == ($451 | 0) & $420 >>> 0 < $449 >>> 0) {
     $457 = ___errno_location() | 0;
     HEAP32[$457 >> 2] = 34;
     $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = sp;
     return +$$0;
    }
    if (($j$086$i | 0) == 0) {
     $k$3$i = $k$084$i;
    } else {
     if (($j$086$i | 0) < 9) {
      $463 = $x$i + ($k$084$i << 2) | 0;
      $465 = HEAP32[$463 >> 2] | 0;
      $j$371$i = $j$086$i;
      do {
       $465 = $465 * 10 | 0;
       $j$371$i = $j$371$i + 1 | 0;
      } while (($j$371$i | 0) != 9);
      HEAP32[$463 >> 2] = $465;
     }
     $k$3$i = $k$084$i + 1 | 0;
    }
    do {
     if (($lnz$079$i | 0) < 9) {
      if (($lnz$079$i | 0) <= ($420 | 0) & ($420 | 0) < 18) {
       if (($420 | 0) == 9) {
        $$0 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
        STACKTOP = sp;
        return +$$0;
       }
       if (($420 | 0) < 9) {
        $$0 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[15144 + (8 - $420 << 2) >> 2] | 0);
        STACKTOP = sp;
        return +$$0;
       }
       $487 = $bits$0$ph + 27 + (Math_imul($420, -3) | 0) | 0;
       $$pre$i17 = HEAP32[$x$i >> 2] | 0;
       if (($487 | 0) <= 30) {
        if (($$pre$i17 >>> $487 | 0) != 0) {
         break;
        }
       }
       $$0 = +($sign$0 | 0) * +($$pre$i17 >>> 0) * +(HEAP32[15144 + ($420 + -10 << 2) >> 2] | 0);
       STACKTOP = sp;
       return +$$0;
      }
     }
    } while (0);
    $499 = ($420 | 0) % 9 | 0;
    if (($499 | 0) == 0) {
     $a$2$ph40$i = 0;
     $e2$0$ph$i = 0;
     $rp$2$ph38$i = $420;
     $z$1$ph39$i = $k$3$i;
    } else {
     $503 = ($420 | 0) > -1 ? $499 : $499 + 9 | 0;
     $506 = HEAP32[15144 + (8 - $503 << 2) >> 2] | 0;
     if (($k$3$i | 0) == 0) {
      $a$0$lcssa161$i = 0;
      $rp$0$lcssa162$i = $420;
      $z$0$i = 0;
     } else {
      $508 = 1e9 / ($506 | 0) | 0;
      $a$061$i = 0;
      $carry$063$i = 0;
      $k$462$i = 0;
      $rp$060$i = $420;
      while (1) {
       $509 = $x$i + ($k$462$i << 2) | 0;
       $510 = HEAP32[$509 >> 2] | 0;
       $513 = (($510 >>> 0) / ($506 >>> 0) | 0) + $carry$063$i | 0;
       HEAP32[$509 >> 2] = $513;
       $carry$063$i = Math_imul(($510 >>> 0) % ($506 >>> 0) | 0, $508) | 0;
       $k$462$i$looptemp = $k$462$i;
       $k$462$i = $k$462$i + 1 | 0;
       if (($k$462$i$looptemp | 0) == ($a$061$i | 0) & ($513 | 0) == 0) {
        $a$1$i = $k$462$i & 127;
        $rp$1$i18 = $rp$060$i + -9 | 0;
       } else {
        $a$1$i = $a$061$i;
        $rp$1$i18 = $rp$060$i;
       }
       if (($k$462$i | 0) == ($k$3$i | 0)) {
        break;
       } else {
        $a$061$i = $a$1$i;
        $rp$060$i = $rp$1$i18;
       }
      }
      if (($carry$063$i | 0) == 0) {
       $a$0$lcssa161$i = $a$1$i;
       $rp$0$lcssa162$i = $rp$1$i18;
       $z$0$i = $k$3$i;
      } else {
       HEAP32[$x$i + ($k$3$i << 2) >> 2] = $carry$063$i;
       $a$0$lcssa161$i = $a$1$i;
       $rp$0$lcssa162$i = $rp$1$i18;
       $z$0$i = $k$3$i + 1 | 0;
      }
     }
     $a$2$ph40$i = $a$0$lcssa161$i;
     $e2$0$ph$i = 0;
     $rp$2$ph38$i = 9 - $503 + $rp$0$lcssa162$i | 0;
     $z$1$ph39$i = $z$0$i;
    }
    L285 : while (1) {
     $527 = $x$i + ($a$2$ph40$i << 2) | 0;
     if (($rp$2$ph38$i | 0) < 18) {
      $e2$0$us$i = $e2$0$ph$i;
      $z$1$us$i = $z$1$ph39$i;
      while (1) {
       $carry1$0$us$i = 0;
       $k$5$in$us$i = $z$1$us$i + 127 | 0;
       $z$2$us$i = $z$1$us$i;
       while (1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = $x$i + ($k$5$us$i << 2) | 0;
        $532 = _bitshift64Shl(HEAP32[$530 >> 2] | 0, 0, 29) | 0;
        $534 = _i64Add($532 | 0, tempRet0 | 0, $carry1$0$us$i | 0, 0) | 0;
        $535 = tempRet0;
        if ($535 >>> 0 > 0 | ($535 | 0) == 0 & $534 >>> 0 > 1e9) {
         $541 = ___udivdi3($534 | 0, $535 | 0, 1e9, 0) | 0;
         $543 = ___uremdi3($534 | 0, $535 | 0, 1e9, 0) | 0;
         $$sink$off0$us$i = $543;
         $carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;
         $carry1$1$us$i = 0;
        }
        HEAP32[$530 >> 2] = $$sink$off0$us$i;
        $548 = ($k$5$us$i | 0) == ($a$2$ph40$i | 0);
        if (($k$5$us$i | 0) != ($z$2$us$i + 127 & 127 | 0) | $548) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $z$3$us$i = ($$sink$off0$us$i | 0) == 0 ? $k$5$us$i : $z$2$us$i;
        }
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;
         $k$5$in$us$i = $k$5$us$i + -1 | 0;
         $z$2$us$i = $z$3$us$i;
        }
       }
       $551 = $e2$0$us$i + -29 | 0;
       if (($carry1$1$us$i | 0) == 0) {
        $e2$0$us$i = $551;
        $z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;
        $carry1$1$lcssa$lcssa$i = $carry1$1$us$i;
        $z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      if (($rp$2$ph38$i | 0) == 18) {
       $e2$0$us44$i = $e2$0$ph$i;
       $z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;
       $e2$1$ph$i = $e2$0$ph$i;
       $rp$3$ph33$i = $rp$2$ph38$i;
       $z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while (1) {
       if (!((HEAP32[$527 >> 2] | 0) >>> 0 < 9007199)) {
        $a$3$ph$i = $a$2$ph40$i;
        $e2$1$ph$i = $e2$0$us44$i;
        $rp$3$ph33$i = 18;
        $z$5$ph$i = $z$1$us45$i;
        break L285;
       }
       $carry1$0$us49$i = 0;
       $k$5$in$us48$i = $z$1$us45$i + 127 | 0;
       $z$2$us47$i = $z$1$us45$i;
       while (1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = $x$i + ($k$5$us50$i << 2) | 0;
        $558 = _bitshift64Shl(HEAP32[$556 >> 2] | 0, 0, 29) | 0;
        $560 = _i64Add($558 | 0, tempRet0 | 0, $carry1$0$us49$i | 0, 0) | 0;
        $561 = tempRet0;
        if ($561 >>> 0 > 0 | ($561 | 0) == 0 & $560 >>> 0 > 1e9) {
         $567 = ___udivdi3($560 | 0, $561 | 0, 1e9, 0) | 0;
         $569 = ___uremdi3($560 | 0, $561 | 0, 1e9, 0) | 0;
         $$sink$off0$us53$i = $569;
         $carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;
         $carry1$1$us54$i = 0;
        }
        HEAP32[$556 >> 2] = $$sink$off0$us53$i;
        $574 = ($k$5$us50$i | 0) == ($a$2$ph40$i | 0);
        if (($k$5$us50$i | 0) != ($z$2$us47$i + 127 & 127 | 0) | $574) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $z$3$us57$i = ($$sink$off0$us53$i | 0) == 0 ? $k$5$us50$i : $z$2$us47$i;
        }
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;
         $k$5$in$us48$i = $k$5$us50$i + -1 | 0;
         $z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = $e2$0$us44$i + -29 | 0;
       if (($carry1$1$us54$i | 0) == 0) {
        $e2$0$us44$i = $577;
        $z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;
        $carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;
        $z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $581 = $a$2$ph40$i + 127 & 127;
     if (($581 | 0) == ($z$3$lcssa$lcssa$i | 0)) {
      $584 = $z$3$lcssa$lcssa$i + 127 & 127;
      $589 = $x$i + (($z$3$lcssa$lcssa$i + 126 & 127) << 2) | 0;
      HEAP32[$589 >> 2] = HEAP32[$589 >> 2] | HEAP32[$x$i + ($584 << 2) >> 2];
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     HEAP32[$x$i + ($581 << 2) >> 2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;
     $e2$0$ph$i = $$lcssa43$i;
     $rp$2$ph38$i = $rp$2$ph38$i + 9 | 0;
     $z$1$ph39$i = $z$4$i;
    }
    L316 : while (1) {
     $627 = $z$5$ph$i + 1 & 127;
     $632 = $x$i + (($z$5$ph$i + 127 & 127) << 2) | 0;
     $a$3$i$ph = $a$3$ph$i;
     $e2$1$i$ph = $e2$1$ph$i;
     $rp$3$i$ph = $rp$3$ph33$i;
     while (1) {
      $605 = ($rp$3$i$ph | 0) == 18;
      $$14$i = ($rp$3$i$ph | 0) > 27 ? 9 : 1;
      $a$3$i = $a$3$i$ph;
      $e2$1$i = $e2$1$i$ph;
      while (1) {
       $i$025$i = 0;
       while (1) {
        $596 = $i$025$i + $a$3$i & 127;
        if (($596 | 0) == ($z$5$ph$i | 0)) {
         $i$1$i = 2;
         break;
        }
        $599 = HEAP32[$x$i + ($596 << 2) >> 2] | 0;
        $601 = HEAP32[15136 + ($i$025$i << 2) >> 2] | 0;
        if ($599 >>> 0 < $601 >>> 0) {
         $i$1$i = 2;
         break;
        }
        $594 = $i$025$i + 1 | 0;
        if ($599 >>> 0 > $601 >>> 0) {
         $i$1$i = $i$025$i;
         break;
        }
        if (($594 | 0) < 2) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       if (($i$1$i | 0) == 2 & $605) {
        break L316;
       }
       $608 = $$14$i + $e2$1$i | 0;
       if (($a$3$i | 0) == ($z$5$ph$i | 0)) {
        $a$3$i = $z$5$ph$i;
        $e2$1$i = $608;
       } else {
        break;
       }
      }
      $611 = (1 << $$14$i) + -1 | 0;
      $612 = 1e9 >>> $$14$i;
      $a$427$i = $a$3$i;
      $carry3$030$i = 0;
      $k$628$i = $a$3$i;
      $rp$426$i = $rp$3$i$ph;
      do {
       $613 = $x$i + ($k$628$i << 2) | 0;
       $614 = HEAP32[$613 >> 2] | 0;
       $617 = ($614 >>> $$14$i) + $carry3$030$i | 0;
       HEAP32[$613 >> 2] = $617;
       $carry3$030$i = Math_imul($614 & $611, $612) | 0;
       $or$cond15$i = ($k$628$i | 0) == ($a$427$i | 0) & ($617 | 0) == 0;
       $k$628$i = $k$628$i + 1 & 127;
       $rp$426$i = $or$cond15$i ? $rp$426$i + -9 | 0 : $rp$426$i;
       $a$427$i = $or$cond15$i ? $k$628$i : $a$427$i;
      } while (($k$628$i | 0) != ($z$5$ph$i | 0));
      if (($carry3$030$i | 0) == 0) {
       $a$3$i$ph = $a$427$i;
       $e2$1$i$ph = $608;
       $rp$3$i$ph = $rp$426$i;
       continue;
      }
      if (($627 | 0) != ($a$427$i | 0)) {
       break;
      }
      HEAP32[$632 >> 2] = HEAP32[$632 >> 2] | 1;
      $a$3$i$ph = $a$427$i;
      $e2$1$i$ph = $608;
      $rp$3$i$ph = $rp$426$i;
     }
     HEAP32[$x$i + ($z$5$ph$i << 2) >> 2] = $carry3$030$i;
     $a$3$ph$i = $a$427$i;
     $e2$1$ph$i = $608;
     $rp$3$ph33$i = $rp$426$i;
     $z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    if (($606 | 0) == ($z$5$ph$i | 0)) {
     HEAP32[$x$i + ($627 + -1 << 2) >> 2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $640 = +((HEAP32[$x$i + ($606 << 2) >> 2] | 0) >>> 0);
    $642 = $a$3$i + 1 & 127;
    if (($642 | 0) == ($z$7$i | 0)) {
     $703 = $z$7$i + 1 & 127;
     HEAP32[$x$i + ($703 + -1 << 2) >> 2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $667 = +($sign$0 | 0);
    $649 = $667 * ($640 * 1.0e9 + +((HEAP32[$x$i + ($642 << 2) >> 2] | 0) >>> 0));
    $687 = $e2$1$i + 53 | 0;
    $645 = $687 - $emin$0$ph | 0;
    if (($645 | 0) < ($bits$0$ph | 0)) {
     $$09$i = ($645 | 0) < 0 ? 0 : $645;
     $denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;
     $denormal$0$i = 0;
    }
    if (($$09$i | 0) < 53) {
     $650 = +_copysignl(+(+_scalbn(1.0, 105 - $$09$i | 0)), +$649);
     $653 = +_fmodl(+$649, +(+_scalbn(1.0, 53 - $$09$i | 0)));
     $bias$0$i = $650;
     $frac$0$i = $653;
     $y$1$i23 = $650 + ($649 - $653);
    } else {
     $bias$0$i = 0.0;
     $frac$0$i = 0.0;
     $y$1$i23 = $649;
    }
    $657 = $a$3$i + 2 & 127;
    do {
     if (($657 | 0) == ($z$7$1$i | 0)) {
      $frac$2$i = $frac$0$i;
     } else {
      $660 = HEAP32[$x$i + ($657 << 2) >> 2] | 0;
      do {
       if ($660 >>> 0 < 5e8) {
        if (($660 | 0) == 0) {
         if (($a$3$i + 3 & 127 | 0) == ($z$7$1$i | 0)) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $frac$1$i = $667 * .25 + $frac$0$i;
       } else {
        if ($660 >>> 0 > 5e8) {
         $frac$1$i = $667 * .75 + $frac$0$i;
         break;
        }
        if (($a$3$i + 3 & 127 | 0) == ($z$7$1$i | 0)) {
         $frac$1$i = $667 * .5 + $frac$0$i;
         break;
        } else {
         $frac$1$i = $667 * .75 + $frac$0$i;
         break;
        }
       }
      } while (0);
      if ((53 - $$09$i | 0) <= 1) {
       $frac$2$i = $frac$1$i;
       break;
      }
      if (+_fmodl(+$frac$1$i, 1.0) != 0.0) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $frac$2$i = $frac$1$i + 1.0;
     }
    } while (0);
    $685 = $y$1$i23 + $frac$2$i - $bias$0$i;
    do {
     if (($687 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
      if (!(+Math_abs(+$685) >= 9007199254740992.0)) {
       $denormal$2$i = $denormal$0$i;
       $e2$2$i = $e2$1$i;
       $y$2$i24 = $685;
      } else {
       $denormal$2$i = ($denormal$0$i | 0) != 0 & ($$09$i | 0) == ($645 | 0) ? 0 : $denormal$0$i;
       $e2$2$i = $e2$1$i + 1 | 0;
       $y$2$i24 = $685 * .5;
      }
      if (($e2$2$i + 50 | 0) <= ($325 | 0)) {
       if (!(($denormal$2$i | 0) != 0 & $frac$2$i != 0.0)) {
        $e2$3$i = $e2$2$i;
        $y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = ___errno_location() | 0;
      HEAP32[$700 >> 2] = 34;
      $e2$3$i = $e2$2$i;
      $y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;
      $y$3$i = $685;
     }
    } while (0);
    $$0 = +_scalbnl($y$3$i, $e2$3$i);
    STACKTOP = sp;
    return +$$0;
   } else if (($i$3 | 0) == 3) {
    $68 = HEAP32[$0 >> 2] | 0;
    if ($68 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $68 + 1;
     $76 = HEAPU8[$68 >> 0] | 0;
    } else {
     $76 = ___shgetc($f) | 0;
    }
    if (($76 | 0) == 40) {
     $i$4 = 1;
    } else {
     if ((HEAP32[$1 >> 2] | 0) == 0) {
      $$0 = nan;
      STACKTOP = sp;
      return +$$0;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    while (1) {
     $81 = HEAP32[$0 >> 2] | 0;
     if ($81 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $81 + 1;
      $89 = HEAPU8[$81 >> 0] | 0;
     } else {
      $89 = ___shgetc($f) | 0;
     }
     if (!(($89 + -48 | 0) >>> 0 < 10 | ($89 + -65 | 0) >>> 0 < 26)) {
      if (!(($89 + -97 | 0) >>> 0 < 26 | ($89 | 0) == 95)) {
       break;
      }
     }
     $i$4 = $i$4 + 1 | 0;
    }
    if (($89 | 0) == 41) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    $98 = (HEAP32[$1 >> 2] | 0) == 0;
    if (!$98) {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    }
    if ($39) {
     $102 = ___errno_location() | 0;
     HEAP32[$102 >> 2] = 22;
     ___shlim($f, 0);
     $$0 = 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($i$4 | 0) == 0 | $98) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    } else {
     $$in = $i$4;
    }
    do {
     $$in = $$in + -1 | 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    } while (($$in | 0) != 0);
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   } else {
    if ((HEAP32[$1 >> 2] | 0) != 0) {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    }
    $112 = ___errno_location() | 0;
    HEAP32[$112 >> 2] = 22;
    ___shlim($f, 0);
    $$0 = 0.0;
    STACKTOP = sp;
    return +$$0;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  $42 = (HEAP32[$1 >> 2] | 0) == 0;
  if (!$42) {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  }
  if (!($i$0$lcssa >>> 0 < 4 | ($pok | 0) == 0 | $42)) {
   $i$166 = $i$0$lcssa;
   do {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $i$166 = $i$166 + -1 | 0;
   } while ($i$166 >>> 0 > 3);
  }
 }
 $$0 = +($sign$0 | 0) * inf;
 STACKTOP = sp;
 return +$$0;
}
function _MUSL_vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$4 = 0, $$lcssa18 = 0, $$pre$phi241Z2D = 0, $$pre234 = 0, $$pre236 = 0, $$pre238 = 0, $$size$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $108 = 0, $11 = 0, $112 = 0, $119 = 0, $124 = 0, $128 = 0, $13 = 0, $133 = 0, $134 = 0, $140 = 0, $143 = 0, $147 = 0, $149 = 0, $152 = 0, $155 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $168 = 0, $172 = 0, $177 = 0, $178 = 0, $180 = 0, $185 = 0, $189 = 0, $194 = 0, $200 = 0, $204 = 0, $209 = 0, $21 = 0, $216 = 0, $224 = 0, $229 = 0, $233 = 0, $235 = 0, $239 = 0, $241 = 0, $249 = 0, $257 = 0, $258 = 0, $261 = 0, $263 = 0, $269 = 0, $276 = 0, $278 = 0, $28 = 0, $284 = 0, $290 = 0, $294 = 0, $297 = 0, $3 = 0, $304 = 0, $314 = 0, $318 = 0, $322 = 0.0, $33 = 0, $37 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $58 = 0, $6 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $95 = 0, $98 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $base$0 = 0, $c$027 = 0, $dest$0 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph46 = 0, $i$0$ph46$lcssa = 0, $i$0$ph46$us53 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigittmp = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0130 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0136 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$321 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0135 = 0, $pos$1 = 0, $pos$2 = 0, $s$0128 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $scanset = 0, $size$0 = 0, $st = 0, $wc = 0, $wcs$0129 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph160 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $width$0$lcssa = 0, $width$022 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $ap2$i = sp + 16 | 0;
 $st = sp;
 $scanset = sp + 33 | 0;
 $wc = sp + 8 | 0;
 $0 = sp + 32 | 0;
 $1 = HEAP8[$fmt >> 0] | 0;
 if ($1 << 24 >> 24 == 0) {
  $matches$3 = 0;
  STACKTOP = sp;
  return $matches$3 | 0;
 }
 $3 = $f + 4 | 0;
 $4 = $f + 100 | 0;
 $5 = $f + 108 | 0;
 $6 = $f + 8 | 0;
 $7 = $scanset + 10 | 0;
 $8 = $scanset + 33 | 0;
 $9 = $st + 4 | 0;
 $10 = $scanset + 46 | 0;
 $11 = $scanset + 94 | 0;
 $13 = $1;
 $matches$0130 = 0;
 $p$0136 = $fmt;
 $pos$0135 = 0;
 $s$0128 = 0;
 $wcs$0129 = 0;
 L4 : while (1) {
  L6 : do {
   if ((_isspace($13 & 255) | 0) == 0) {
    $43 = (HEAP8[$p$0136 >> 0] | 0) == 37;
    L21 : do {
     if ($43) {
      $44 = $p$0136 + 1 | 0;
      $45 = HEAP8[$44 >> 0] | 0;
      do {
       if ($45 << 24 >> 24 == 42) {
        $dest$0 = 0;
        $p$2 = $p$0136 + 2 | 0;
       } else if ($45 << 24 >> 24 == 37) {
        break L21;
       } else {
        $isdigittmp = ($45 & 255) + -48 | 0;
        if ($isdigittmp >>> 0 < 10) {
         if ((HEAP8[$p$0136 + 2 >> 0] | 0) == 36) {
          HEAP32[$ap2$i >> 2] = HEAP32[$ap >> 2];
          $i$0$i = $isdigittmp;
          while (1) {
           $arglist_current = HEAP32[$ap2$i >> 2] | 0;
           $71 = HEAP32[$arglist_current >> 2] | 0;
           HEAP32[$ap2$i >> 2] = $arglist_current + 4;
           if ($i$0$i >>> 0 > 1) {
            $i$0$i = $i$0$i + -1 | 0;
           } else {
            break;
           }
          }
          $dest$0 = $71;
          $p$2 = $p$0136 + 3 | 0;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap >> 2] | 0;
        $74 = HEAP32[$arglist_current2 >> 2] | 0;
        HEAP32[$ap >> 2] = $arglist_current2 + 4;
        $dest$0 = $74;
        $p$2 = $44;
       }
      } while (0);
      $75 = HEAP8[$p$2 >> 0] | 0;
      $76 = $75 & 255;
      if (($76 + -48 | 0) >>> 0 < 10) {
       $80 = $76;
       $p$321 = $p$2;
       $width$022 = 0;
       while (1) {
        $79 = ($width$022 * 10 | 0) + -48 + $80 | 0;
        $81 = $p$321 + 1 | 0;
        $82 = HEAP8[$81 >> 0] | 0;
        $80 = $82 & 255;
        if (!(($80 + -48 | 0) >>> 0 < 10)) {
         $$lcssa18 = $82;
         $p$3$lcssa = $81;
         $width$0$lcssa = $79;
         break;
        } else {
         $p$321 = $81;
         $width$022 = $79;
        }
       }
      } else {
       $$lcssa18 = $75;
       $p$3$lcssa = $p$2;
       $width$0$lcssa = 0;
      }
      if ($$lcssa18 << 24 >> 24 == 109) {
       $87 = $p$3$lcssa + 1 | 0;
       $90 = HEAP8[$87 >> 0] | 0;
       $alloc$0 = ($dest$0 | 0) != 0 & 1;
       $p$4 = $87;
       $s$1 = 0;
       $wcs$1 = 0;
      } else {
       $90 = $$lcssa18;
       $alloc$0 = 0;
       $p$4 = $p$3$lcssa;
       $s$1 = $s$0128;
       $wcs$1 = $wcs$0129;
      }
      $88 = $p$4 + 1 | 0;
      switch ($90 & 255 | 0) {
      case 116:
      case 122:
       {
        $p$5 = $88;
        $size$0 = 1;
        break;
       }
      case 110:
      case 112:
      case 67:
      case 83:
      case 91:
      case 99:
      case 115:
      case 88:
      case 71:
      case 70:
      case 69:
      case 65:
      case 103:
      case 102:
      case 101:
      case 97:
      case 120:
      case 117:
      case 111:
      case 105:
      case 100:
       {
        $p$5 = $p$4;
        $size$0 = 0;
        break;
       }
      case 104:
       {
        $92 = (HEAP8[$88 >> 0] | 0) == 104;
        $p$5 = $92 ? $p$4 + 2 | 0 : $88;
        $size$0 = $92 ? -2 : -1;
        break;
       }
      case 106:
       {
        $p$5 = $88;
        $size$0 = 3;
        break;
       }
      case 76:
       {
        $p$5 = $88;
        $size$0 = 2;
        break;
       }
      case 108:
       {
        $95 = (HEAP8[$88 >> 0] | 0) == 108;
        $p$5 = $95 ? $p$4 + 2 | 0 : $88;
        $size$0 = $95 ? 3 : 1;
        break;
       }
      default:
       {
        $alloc$1 = $alloc$0;
        $s$6 = $s$1;
        $wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
      }
      $98 = HEAPU8[$p$5 >> 0] | 0;
      $100 = ($98 & 47 | 0) == 3;
      $$ = $100 ? $98 | 32 : $98;
      $$size$0 = $100 ? 1 : $size$0;
      if (($$ | 0) == 99) {
       $pos$1 = $pos$0135;
       $width$1 = ($width$0$lcssa | 0) < 1 ? 1 : $width$0$lcssa;
      } else if (($$ | 0) == 91) {
       $pos$1 = $pos$0135;
       $width$1 = $width$0$lcssa;
      } else if (($$ | 0) == 110) {
       if (($dest$0 | 0) == 0) {
        $matches$1 = $matches$0130;
        $p$11 = $p$5;
        $pos$2 = $pos$0135;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0 | 0) {
       case 0:
        {
         HEAP32[$dest$0 >> 2] = $pos$0135;
         $matches$1 = $matches$0130;
         $p$11 = $p$5;
         $pos$2 = $pos$0135;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L6;
         break;
        }
       case -1:
        {
         HEAP16[$dest$0 >> 1] = $pos$0135;
         $matches$1 = $matches$0130;
         $p$11 = $p$5;
         $pos$2 = $pos$0135;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L6;
         break;
        }
       case 3:
        {
         $108 = $dest$0;
         HEAP32[$108 >> 2] = $pos$0135;
         HEAP32[$108 + 4 >> 2] = (($pos$0135 | 0) < 0) << 31 >> 31;
         $matches$1 = $matches$0130;
         $p$11 = $p$5;
         $pos$2 = $pos$0135;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L6;
         break;
        }
       case 1:
        {
         HEAP32[$dest$0 >> 2] = $pos$0135;
         $matches$1 = $matches$0130;
         $p$11 = $p$5;
         $pos$2 = $pos$0135;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L6;
         break;
        }
       case -2:
        {
         HEAP8[$dest$0 >> 0] = $pos$0135;
         $matches$1 = $matches$0130;
         $p$11 = $p$5;
         $pos$2 = $pos$0135;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L6;
         break;
        }
       default:
        {
         $matches$1 = $matches$0130;
         $p$11 = $p$5;
         $pos$2 = $pos$0135;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L6;
        }
       }
      } else {
       ___shlim($f, 0);
       do {
        $112 = HEAP32[$3 >> 2] | 0;
        if ($112 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $112 + 1;
         $119 = HEAPU8[$112 >> 0] | 0;
        } else {
         $119 = ___shgetc($f) | 0;
        }
       } while ((_isspace($119) | 0) != 0);
       $$pre234 = HEAP32[$3 >> 2] | 0;
       if ((HEAP32[$4 >> 2] | 0) == 0) {
        $128 = $$pre234;
       } else {
        $124 = $$pre234 + -1 | 0;
        HEAP32[$3 >> 2] = $124;
        $128 = $124;
       }
       $pos$1 = (HEAP32[$5 >> 2] | 0) + $pos$0135 + $128 - (HEAP32[$6 >> 2] | 0) | 0;
       $width$1 = $width$0$lcssa;
      }
      ___shlim($f, $width$1);
      $133 = HEAP32[$3 >> 2] | 0;
      $134 = HEAP32[$4 >> 2] | 0;
      if ($133 >>> 0 < $134 >>> 0) {
       HEAP32[$3 >> 2] = $133 + 1;
       $140 = $134;
      } else {
       if ((___shgetc($f) | 0) < 0) {
        $alloc$1 = $alloc$0;
        $s$6 = $s$1;
        $wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $140 = HEAP32[$4 >> 2] | 0;
      }
      if (($140 | 0) != 0) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      }
      L78 : do {
       switch ($$ | 0) {
       case 117:
       case 100:
        {
         $base$0 = 10;
         label = 144;
         break;
        }
       case 105:
        {
         $base$0 = 0;
         label = 144;
         break;
        }
       case 120:
       case 88:
       case 112:
        {
         $base$0 = 16;
         label = 144;
         break;
        }
       case 71:
       case 103:
       case 70:
       case 102:
       case 69:
       case 101:
       case 65:
       case 97:
        {
         $322 = +___floatscan($f, $$size$0, 0);
         if ((HEAP32[$5 >> 2] | 0) == ((HEAP32[$6 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0)) {
          $alloc$2 = $alloc$0;
          $matches$2 = $matches$0130;
          $s$7 = $s$1;
          $wcs$8 = $wcs$1;
          break L4;
         }
         if (($dest$0 | 0) == 0) {
          $p$10 = $p$5;
          $s$4 = $s$1;
          $wcs$5 = $wcs$1;
         } else {
          if (($$size$0 | 0) == 0) {
           HEAPF32[$dest$0 >> 2] = $322;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L78;
          } else if (($$size$0 | 0) == 1) {
           HEAPF64[$dest$0 >> 3] = $322;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L78;
          } else if (($$size$0 | 0) == 2) {
           HEAPF64[$dest$0 >> 3] = $322;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L78;
          } else {
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L78;
          }
         }
         break;
        }
       case 111:
        {
         $base$0 = 8;
         label = 144;
         break;
        }
       case 91:
       case 99:
       case 115:
        {
         $143 = ($$ | 0) == 99;
         L90 : do {
          if (($$ & 239 | 0) == 99) {
           _memset($scanset | 0, -1, 257) | 0;
           HEAP8[$scanset >> 0] = 0;
           if (($$ | 0) == 115) {
            HEAP8[$8 >> 0] = 0;
            HEAP8[$7 + 0 >> 0] = 0;
            HEAP8[$7 + 1 >> 0] = 0;
            HEAP8[$7 + 2 >> 0] = 0;
            HEAP8[$7 + 3 >> 0] = 0;
            HEAP8[$7 + 4 >> 0] = 0;
            $p$9 = $p$5;
           } else {
            $p$9 = $p$5;
           }
          } else {
           $147 = $p$5 + 1 | 0;
           $149 = (HEAP8[$147 >> 0] | 0) == 94;
           $invert$0 = $149 & 1;
           $p$6 = $149 ? $p$5 + 2 | 0 : $147;
           _memset($scanset | 0, $149 & 1 | 0, 257) | 0;
           HEAP8[$scanset >> 0] = 0;
           $152 = HEAP8[$p$6 >> 0] | 0;
           if ($152 << 24 >> 24 == 45) {
            $155 = ($invert$0 ^ 1) & 255;
            HEAP8[$10 >> 0] = $155;
            $$pre$phi241Z2D = $155;
            $p$7$ph = $p$6 + 1 | 0;
           } else if ($152 << 24 >> 24 == 93) {
            $158 = ($invert$0 ^ 1) & 255;
            HEAP8[$11 >> 0] = $158;
            $$pre$phi241Z2D = $158;
            $p$7$ph = $p$6 + 1 | 0;
           } else {
            $$pre$phi241Z2D = ($invert$0 ^ 1) & 255;
            $p$7$ph = $p$6;
           }
           $p$7 = $p$7$ph;
           while (1) {
            $159 = HEAP8[$p$7 >> 0] | 0;
            if ($159 << 24 >> 24 == 0) {
             $alloc$1 = $alloc$0;
             $s$6 = $s$1;
             $wcs$7 = $wcs$1;
             label = 162;
             break L4;
            } else if ($159 << 24 >> 24 == 45) {
             $160 = $p$7 + 1 | 0;
             $161 = HEAP8[$160 >> 0] | 0;
             if ($161 << 24 >> 24 == 93 | $161 << 24 >> 24 == 0) {
              $172 = 45;
              $p$8 = $p$7;
             } else {
              $163 = HEAP8[$p$7 + -1 >> 0] | 0;
              if (($163 & 255) < ($161 & 255)) {
               $c$027 = $163 & 255;
               do {
                $c$027 = $c$027 + 1 | 0;
                HEAP8[$scanset + $c$027 >> 0] = $$pre$phi241Z2D;
                $168 = HEAP8[$160 >> 0] | 0;
               } while (($c$027 | 0) < ($168 & 255 | 0));
               $172 = $168;
               $p$8 = $160;
              } else {
               $172 = $161;
               $p$8 = $160;
              }
             }
            } else if ($159 << 24 >> 24 == 93) {
             $p$9 = $p$7;
             break L90;
            } else {
             $172 = $159;
             $p$8 = $p$7;
            }
            HEAP8[$scanset + (($172 & 255) + 1) >> 0] = $$pre$phi241Z2D;
            $p$7 = $p$8 + 1 | 0;
           }
          }
         } while (0);
         $$4 = $143 ? $width$1 + 1 | 0 : 31;
         $177 = ($$size$0 | 0) == 1;
         $178 = ($alloc$0 | 0) != 0;
         L109 : do {
          if ($177) {
           if ($178) {
            $180 = _malloc($$4 << 2) | 0;
            if (($180 | 0) == 0) {
             $alloc$1 = $alloc$0;
             $s$6 = 0;
             $wcs$7 = $180;
             label = 162;
             break L4;
            } else {
             $wcs$2 = $180;
            }
           } else {
            $wcs$2 = $dest$0;
           }
           HEAP32[$st >> 2] = 0;
           HEAP32[$9 >> 2] = 0;
           $i$0$ph = 0;
           $k$0$ph = $$4;
           $wcs$3$ph = $wcs$2;
           L144 : while (1) {
            if (($wcs$3$ph | 0) == 0) {
             while (1) {
              $185 = HEAP32[$3 >> 2] | 0;
              if ($185 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
               HEAP32[$3 >> 2] = $185 + 1;
               $189 = HEAPU8[$185 >> 0] | 0;
              } else {
               $189 = ___shgetc($f) | 0;
              }
              if ((HEAP8[$scanset + ($189 + 1) >> 0] | 0) == 0) {
               $i$0$ph46$lcssa = $i$0$ph;
               $wcs$3$ph160 = 0;
               break L144;
              }
              HEAP8[$0 >> 0] = $189;
              $194 = _mbrtowc($wc, $0, 1, $st) | 0;
              if (($194 | 0) == -1) {
               $alloc$1 = $alloc$0;
               $s$6 = 0;
               $wcs$7 = 0;
               label = 162;
               break L4;
              } else if (($194 | 0) == -2) {
               continue;
              }
              if ($178 & ($i$0$ph | 0) == ($k$0$ph | 0)) {
               $i$1$lcssa = $i$0$ph;
               break;
              }
             }
            } else {
             if ($178) {
              $i$0$ph46$us53 = $i$0$ph;
             } else {
              $i$0$ph46 = $i$0$ph;
              label = 98;
              break;
             }
             while (1) {
              while (1) {
               $200 = HEAP32[$3 >> 2] | 0;
               if ($200 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
                HEAP32[$3 >> 2] = $200 + 1;
                $204 = HEAPU8[$200 >> 0] | 0;
               } else {
                $204 = ___shgetc($f) | 0;
               }
               if ((HEAP8[$scanset + ($204 + 1) >> 0] | 0) == 0) {
                $i$0$ph46$lcssa = $i$0$ph46$us53;
                $wcs$3$ph160 = $wcs$3$ph;
                break L144;
               }
               HEAP8[$0 >> 0] = $204;
               $209 = _mbrtowc($wc, $0, 1, $st) | 0;
               if (($209 | 0) == -1) {
                $alloc$1 = $alloc$0;
                $s$6 = 0;
                $wcs$7 = $wcs$3$ph;
                label = 162;
                break L4;
               } else if (!(($209 | 0) == -2)) {
                break;
               }
              }
              HEAP32[$wcs$3$ph + ($i$0$ph46$us53 << 2) >> 2] = HEAP32[$wc >> 2];
              $i$0$ph46$us53 = $i$0$ph46$us53 + 1 | 0;
              if (($i$0$ph46$us53 | 0) == ($k$0$ph | 0)) {
               $i$1$lcssa = $k$0$ph;
               break;
              }
             }
            }
            $233 = $k$0$ph << 1 | 1;
            $235 = _realloc($wcs$3$ph, $233 << 2) | 0;
            if (($235 | 0) == 0) {
             $alloc$1 = $alloc$0;
             $s$6 = 0;
             $wcs$7 = $wcs$3$ph;
             label = 162;
             break L4;
            }
            $i$0$ph = $i$1$lcssa;
            $k$0$ph = $233;
            $wcs$3$ph = $235;
           }
           L168 : do {
            if ((label | 0) == 98) {
             while (1) {
              label = 0;
              while (1) {
               $216 = HEAP32[$3 >> 2] | 0;
               if ($216 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
                HEAP32[$3 >> 2] = $216 + 1;
                $224 = HEAPU8[$216 >> 0] | 0;
               } else {
                $224 = ___shgetc($f) | 0;
               }
               if ((HEAP8[$scanset + ($224 + 1) >> 0] | 0) == 0) {
                $i$0$ph46$lcssa = $i$0$ph46;
                $wcs$3$ph160 = $wcs$3$ph;
                break L168;
               }
               HEAP8[$0 >> 0] = $224;
               $229 = _mbrtowc($wc, $0, 1, $st) | 0;
               if (($229 | 0) == -1) {
                $alloc$1 = 0;
                $s$6 = 0;
                $wcs$7 = $wcs$3$ph;
                label = 162;
                break L4;
               } else if (!(($229 | 0) == -2)) {
                break;
               }
              }
              HEAP32[$wcs$3$ph + ($i$0$ph46 << 2) >> 2] = HEAP32[$wc >> 2];
              $i$0$ph46 = $i$0$ph46 + 1 | 0;
              label = 98;
             }
            }
           } while (0);
           if ((_mbsinit($st) | 0) == 0) {
            $alloc$1 = $alloc$0;
            $s$6 = 0;
            $wcs$7 = $wcs$3$ph160;
            label = 162;
            break L4;
           } else {
            $i$4 = $i$0$ph46$lcssa;
            $s$3 = 0;
            $wcs$4 = $wcs$3$ph160;
           }
          } else {
           if ($178) {
            $239 = _malloc($$4) | 0;
            if (($239 | 0) == 0) {
             $alloc$1 = $alloc$0;
             $s$6 = 0;
             $wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph = 0;
             $k$1$ph = $$4;
             $s$2$ph = $239;
            }
            while (1) {
             $i$2 = $i$2$ph;
             do {
              $241 = HEAP32[$3 >> 2] | 0;
              if ($241 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
               HEAP32[$3 >> 2] = $241 + 1;
               $249 = HEAPU8[$241 >> 0] | 0;
              } else {
               $249 = ___shgetc($f) | 0;
              }
              if ((HEAP8[$scanset + ($249 + 1) >> 0] | 0) == 0) {
               $i$4 = $i$2;
               $s$3 = $s$2$ph;
               $wcs$4 = 0;
               break L109;
              }
              HEAP8[$s$2$ph + $i$2 >> 0] = $249;
              $i$2 = $i$2 + 1 | 0;
             } while (($i$2 | 0) != ($k$1$ph | 0));
             $257 = $k$1$ph << 1 | 1;
             $258 = _realloc($s$2$ph, $257) | 0;
             if (($258 | 0) == 0) {
              $alloc$1 = $alloc$0;
              $s$6 = $s$2$ph;
              $wcs$7 = 0;
              label = 162;
              break L4;
             } else {
              $i$2$ph$phi = $k$1$ph;
              $k$1$ph = $257;
              $s$2$ph = $258;
              $i$2$ph = $i$2$ph$phi;
             }
            }
           }
           if (($dest$0 | 0) == 0) {
            $278 = $140;
            while (1) {
             $276 = HEAP32[$3 >> 2] | 0;
             if ($276 >>> 0 < $278 >>> 0) {
              HEAP32[$3 >> 2] = $276 + 1;
              $284 = HEAPU8[$276 >> 0] | 0;
             } else {
              $284 = ___shgetc($f) | 0;
             }
             if ((HEAP8[$scanset + ($284 + 1) >> 0] | 0) == 0) {
              $i$4 = 0;
              $s$3 = 0;
              $wcs$4 = 0;
              break L109;
             }
             $278 = HEAP32[$4 >> 2] | 0;
            }
           } else {
            $263 = $140;
            $i$3 = 0;
            while (1) {
             $261 = HEAP32[$3 >> 2] | 0;
             if ($261 >>> 0 < $263 >>> 0) {
              HEAP32[$3 >> 2] = $261 + 1;
              $269 = HEAPU8[$261 >> 0] | 0;
             } else {
              $269 = ___shgetc($f) | 0;
             }
             if ((HEAP8[$scanset + ($269 + 1) >> 0] | 0) == 0) {
              $i$4 = $i$3;
              $s$3 = $dest$0;
              $wcs$4 = 0;
              break L109;
             }
             HEAP8[$dest$0 + $i$3 >> 0] = $269;
             $263 = HEAP32[$4 >> 2] | 0;
             $i$3 = $i$3 + 1 | 0;
            }
           }
          }
         } while (0);
         $$pre236 = HEAP32[$3 >> 2] | 0;
         if ((HEAP32[$4 >> 2] | 0) == 0) {
          $294 = $$pre236;
         } else {
          $290 = $$pre236 + -1 | 0;
          HEAP32[$3 >> 2] = $290;
          $294 = $290;
         }
         $297 = $294 - (HEAP32[$6 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0;
         if (($297 | 0) == 0) {
          $alloc$2 = $alloc$0;
          $matches$2 = $matches$0130;
          $s$7 = $s$3;
          $wcs$8 = $wcs$4;
          break L4;
         }
         if (!(($297 | 0) == ($width$1 | 0) | $143 ^ 1)) {
          $alloc$2 = $alloc$0;
          $matches$2 = $matches$0130;
          $s$7 = $s$3;
          $wcs$8 = $wcs$4;
          break L4;
         }
         do {
          if ($178) {
           if ($177) {
            HEAP32[$dest$0 >> 2] = $wcs$4;
            break;
           } else {
            HEAP32[$dest$0 >> 2] = $s$3;
            break;
           }
          }
         } while (0);
         if ($143) {
          $p$10 = $p$9;
          $s$4 = $s$3;
          $wcs$5 = $wcs$4;
         } else {
          if (($wcs$4 | 0) != 0) {
           HEAP32[$wcs$4 + ($i$4 << 2) >> 2] = 0;
          }
          if (($s$3 | 0) == 0) {
           $p$10 = $p$9;
           $s$4 = 0;
           $wcs$5 = $wcs$4;
          } else {
           HEAP8[$s$3 + $i$4 >> 0] = 0;
           $p$10 = $p$9;
           $s$4 = $s$3;
           $wcs$5 = $wcs$4;
          }
         }
         break;
        }
       default:
        {
         $p$10 = $p$5;
         $s$4 = $s$1;
         $wcs$5 = $wcs$1;
        }
       }
      } while (0);
      L197 : do {
       if ((label | 0) == 144) {
        label = 0;
        $304 = ___intscan($f, $base$0, 0, -1, -1) | 0;
        if ((HEAP32[$5 >> 2] | 0) == ((HEAP32[$6 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0)) {
         $alloc$2 = $alloc$0;
         $matches$2 = $matches$0130;
         $s$7 = $s$1;
         $wcs$8 = $wcs$1;
         break L4;
        }
        $314 = ($dest$0 | 0) == 0;
        if (!(($$ | 0) != 112 | $314)) {
         HEAP32[$dest$0 >> 2] = $304;
         $p$10 = $p$5;
         $s$4 = $s$1;
         $wcs$5 = $wcs$1;
         break;
        }
        if ($314) {
         $p$10 = $p$5;
         $s$4 = $s$1;
         $wcs$5 = $wcs$1;
        } else {
         switch ($$size$0 | 0) {
         case -2:
          {
           HEAP8[$dest$0 >> 0] = $304;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L197;
           break;
          }
         case 0:
          {
           HEAP32[$dest$0 >> 2] = $304;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L197;
           break;
          }
         case 1:
          {
           HEAP32[$dest$0 >> 2] = $304;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L197;
           break;
          }
         case 3:
          {
           $318 = $dest$0;
           HEAP32[$318 >> 2] = $304;
           HEAP32[$318 + 4 >> 2] = tempRet0;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L197;
           break;
          }
         case -1:
          {
           HEAP16[$dest$0 >> 1] = $304;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L197;
           break;
          }
         default:
          {
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break L197;
          }
         }
        }
       }
      } while (0);
      $matches$1 = (($dest$0 | 0) != 0 & 1) + $matches$0130 | 0;
      $p$11 = $p$10;
      $pos$2 = (HEAP32[$5 >> 2] | 0) + $pos$1 + (HEAP32[$3 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0;
      $s$5 = $s$4;
      $wcs$6 = $wcs$5;
      break L6;
     }
    } while (0);
    $47 = $p$0136 + ($43 & 1) | 0;
    ___shlim($f, 0);
    $48 = HEAP32[$3 >> 2] | 0;
    if ($48 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $48 + 1;
     $58 = HEAPU8[$48 >> 0] | 0;
    } else {
     $58 = ___shgetc($f) | 0;
    }
    if (($58 | 0) != (HEAPU8[$47 >> 0] | 0)) {
     label = 19;
     break L4;
    }
    $matches$1 = $matches$0130;
    $p$11 = $47;
    $pos$2 = $pos$0135 + 1 | 0;
    $s$5 = $s$0128;
    $wcs$6 = $wcs$0129;
   } else {
    $p$1 = $p$0136;
    while (1) {
     $16 = $p$1 + 1 | 0;
     if ((_isspace(HEAPU8[$16 >> 0] | 0) | 0) == 0) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f, 0);
    do {
     $21 = HEAP32[$3 >> 2] | 0;
     if ($21 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $21 + 1;
      $28 = HEAPU8[$21 >> 0] | 0;
     } else {
      $28 = ___shgetc($f) | 0;
     }
    } while ((_isspace($28) | 0) != 0);
    $$pre238 = HEAP32[$3 >> 2] | 0;
    if ((HEAP32[$4 >> 2] | 0) == 0) {
     $37 = $$pre238;
    } else {
     $33 = $$pre238 + -1 | 0;
     HEAP32[$3 >> 2] = $33;
     $37 = $33;
    }
    $matches$1 = $matches$0130;
    $p$11 = $p$1;
    $pos$2 = (HEAP32[$5 >> 2] | 0) + $pos$0135 + $37 - (HEAP32[$6 >> 2] | 0) | 0;
    $s$5 = $s$0128;
    $wcs$6 = $wcs$0129;
   }
  } while (0);
  $p$0136 = $p$11 + 1 | 0;
  $13 = HEAP8[$p$0136 >> 0] | 0;
  if ($13 << 24 >> 24 == 0) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $matches$0130 = $matches$1;
   $pos$0135 = $pos$2;
   $s$0128 = $s$5;
   $wcs$0129 = $wcs$6;
  }
 }
 if ((label | 0) == 165) {
  STACKTOP = sp;
  return $matches$3 | 0;
 }
 if ((label | 0) == 19) {
  if ((HEAP32[$4 >> 2] | 0) != 0) {
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
  }
  if (($58 | 0) < 0) {
   $alloc$1 = 0;
   $s$6 = $s$0128;
   $wcs$7 = $wcs$0129;
   label = 162;
  } else {
   $matches$3 = $matches$0130;
   STACKTOP = sp;
   return $matches$3 | 0;
  }
 }
 if ((label | 0) == 162) {
  $alloc$2 = $alloc$1;
  $matches$2 = ((($matches$0130 | 0) == 0) << 31 >> 31) + $matches$0130 | 0;
  $s$7 = $s$6;
  $wcs$8 = $wcs$7;
 }
 if (($alloc$2 | 0) == 0) {
  $matches$3 = $matches$2;
  STACKTOP = sp;
  return $matches$3 | 0;
 }
 _free($s$7);
 _free($wcs$8);
 $matches$3 = $matches$2;
 STACKTOP = sp;
 return $matches$3 | 0;
}
function __ZN19BoostedFaceDetector17mergeCloseResultsEiii($this, $min_n_neighbours, $w, $h) {
 $this = $this | 0;
 $min_n_neighbours = $min_n_neighbours | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $$0$i$i$i = 0, $$0$i$i$i6 = 0, $$0$i2$i = 0, $$0$i2$i$i = 0, $$0$i2$i$i104 = 0, $$0$i3$i = 0, $$0$i3$i$i = 0, $$0$i3$i$i105 = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $122 = 0, $123 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $15 = 0, $151 = 0, $153 = 0, $155 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $168 = 0, $170 = 0, $176 = 0, $178 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $199 = 0, $20 = 0, $200 = 0, $202 = 0, $203 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $212 = 0.0, $227 = 0, $230 = 0, $235 = 0, $24 = 0, $248 = 0, $249 = 0, $252 = 0, $253 = 0.0, $254 = 0, $257 = 0.0, $259 = 0.0, $26 = 0, $264 = 0, $269 = 0.0, $274 = 0, $279 = 0.0, $284 = 0, $289 = 0.0, $294 = 0, $299 = 0.0, $303 = 0, $310 = 0, $311 = 0, $313 = 0, $317 = 0, $319 = 0, $320 = 0, $329 = 0, $33 = 0, $338 = 0, $339 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $345 = 0, $346 = 0, $348 = 0, $349 = 0, $352 = 0, $353 = 0, $355 = 0, $356 = 0, $361 = 0, $362 = 0, $365 = 0, $366 = 0, $367 = 0, $370 = 0, $372 = 0, $376 = 0, $377 = 0, $382 = 0, $384 = 0, $386 = 0, $387 = 0, $39 = 0.0, $390 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $399 = 0, $4 = 0, $401 = 0, $405 = 0, $406 = 0, $407 = 0, $410 = 0, $42 = 0.0, $427 = 0, $429 = 0, $434 = 0, $436 = 0, $445 = 0, $447 = 0, $448 = 0, $45 = 0.0, $451 = 0, $452 = 0, $457 = 0, $458 = 0, $459 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $84 = 0, $85 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $95 = 0, $99 = 0, $accepted_faces = 0, $best_index$0178 = 0, $best_index$1174 = 0, $best_index$2$lcssa = 0, $best_index$2164 = 0, $best_index$3 = 0, $best_ratio$0177 = 0.0, $best_ratio$1173 = 0.0, $best_ratio$2$lcssa = 0.0, $best_ratio$2163 = 0.0, $best_ratio$3 = 0.0, $final_items = 0, $i$0215 = 0, $i1$0212 = 0, $i11$0149 = 0, $i4$0198 = 0, $i7$0181 = 0, $i7$1 = 0, $j$0193 = 0, $j$1 = 0, $j8$0165 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i125 = 0, $x2$0205 = 0, $x5$0189 = 0, $x9$0153 = 0, $xs$0179 = 0, $y10$0150 = 0, $y3$0201 = 0, $y6$0185 = 0, $ys$0175 = 0, label = 0, sp = 0, $447$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $accepted_faces = sp + 12 | 0;
 $final_items = sp;
 $0 = Math_imul($h, $w) | 0;
 if (($0 | 0) == 0) {
  $445 = 0;
  $77 = 0;
 } else {
  if ($0 >>> 0 > 357913941) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  }
  $4 = __Znwj($0 * 12 | 0) | 0;
  $$0$i$i$i = $0;
  $6 = $4;
  while (1) {
   if (($6 | 0) == 0) {
    $10 = 0;
   } else {
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$6 + 8 >> 2] = 0;
    $10 = $6;
   }
   $9 = $10 + 12 | 0;
   $$0$i$i$i = $$0$i$i$i + -1 | 0;
   if (($$0$i$i$i | 0) == 0) {
    $445 = $9;
    $77 = $4;
    break;
   } else {
    $6 = $9;
   }
  }
 }
 $13 = $this + 24 | 0;
 $15 = HEAP32[$this + 28 >> 2] | 0;
 $16 = HEAP32[$13 >> 2] | 0;
 $19 = $15 - $16 | 0;
 $20 = ($19 | 0) / 24 | 0;
 $21 = ($15 | 0) == ($16 | 0);
 do {
  if ($21) {
   $249 = 0;
   $47 = 0;
  } else {
   if ($20 >>> 0 > 1073741823) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
   }
   $24 = __Znwj($20 << 2) | 0;
   $$0$i$i$i6 = $20;
   $26 = $24;
   while (1) {
    if (($26 | 0) != 0) {
     HEAPF32[$26 >> 2] = 1.0;
    }
    $$0$i$i$i6 = $$0$i$i$i6 + -1 | 0;
    if (($$0$i$i$i6 | 0) == 0) {
     break;
    } else {
     $26 = $26 + 4 | 0;
    }
   }
   if ($21) {
    $249 = $24;
    $47 = 0;
   } else {
    if ($20 >>> 0 > 268435455) {
     __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
    } else {
     $249 = $24;
     $47 = __Znwj($20 << 4) | 0;
     break;
    }
   }
  }
 } while (0);
 $33 = ($19 | 0) > 0;
 L28 : do {
  if ($33) {
   $i$0215 = 0;
   do {
    $39 = +(HEAP32[$16 + ($i$0215 * 24 | 0) + 4 >> 2] | 0);
    $42 = +(HEAP32[$16 + ($i$0215 * 24 | 0) + 8 >> 2] | 0);
    $45 = +(HEAP32[$16 + ($i$0215 * 24 | 0) + 12 >> 2] | 0);
    HEAPF32[$47 + ($i$0215 << 4) >> 2] = +(HEAP32[$16 + ($i$0215 * 24 | 0) >> 2] | 0);
    HEAPF32[$47 + ($i$0215 << 4) + 4 >> 2] = $39;
    HEAPF32[$47 + ($i$0215 << 4) + 8 >> 2] = $42;
    HEAPF32[$47 + ($i$0215 << 4) + 12 >> 2] = $45;
    $i$0215 = $i$0215 + 1 | 0;
   } while (($i$0215 | 0) < ($20 | 0));
   if ($33) {
    $58 = $16;
    $i1$0212 = 0;
    while (1) {
     $75 = (Math_imul(~~(+((HEAP32[$58 + ($i1$0212 * 24 | 0) + 12 >> 2] | 0) + (HEAP32[$58 + ($i1$0212 * 24 | 0) + 8 >> 2] | 0) | 0) * .5), $w) | 0) + ~~(+((HEAP32[$58 + ($i1$0212 * 24 | 0) + 4 >> 2] | 0) + (HEAP32[$58 + ($i1$0212 * 24 | 0) >> 2] | 0) | 0) * .5) | 0;
     $76 = $77 + ($75 * 12 | 0) + 4 | 0;
     $78 = HEAP32[$76 >> 2] | 0;
     $79 = $77 + ($75 * 12 | 0) + 8 | 0;
     if (($78 | 0) == (HEAP32[$79 >> 2] | 0)) {
      $84 = $77 + ($75 * 12 | 0) | 0;
      $85 = HEAP32[$84 >> 2] | 0;
      $88 = $78 - $85 | 0;
      $89 = $88 >> 2;
      $90 = $89 + 1 | 0;
      if ($90 >>> 0 > 1073741823) {
       break;
      }
      if ($89 >>> 0 < 536870911) {
       $93 = $88 >> 1;
       $95 = $93 >>> 0 < $90 >>> 0 ? $90 : $93;
       if (($95 | 0) == 0) {
        $$0$i3$i$i = 0;
        $100 = 0;
       } else {
        $$0$i2$i$i = $95;
        label = 32;
       }
      } else {
       $$0$i2$i$i = 1073741823;
       label = 32;
      }
      if ((label | 0) == 32) {
       label = 0;
       $$0$i3$i$i = $$0$i2$i$i;
       $100 = __Znwj($$0$i2$i$i << 2) | 0;
      }
      $99 = $100 + ($89 << 2) | 0;
      if (($99 | 0) != 0) {
       HEAP32[$99 >> 2] = $i1$0212;
      }
      _memcpy($100 | 0, $85 | 0, $88 | 0) | 0;
      HEAP32[$84 >> 2] = $100;
      HEAP32[$76 >> 2] = $100 + ($90 << 2);
      HEAP32[$79 >> 2] = $100 + ($$0$i3$i$i << 2);
      if (($85 | 0) != 0) {
       __ZdlPv($85);
      }
     } else {
      if (($78 | 0) != 0) {
       HEAP32[$78 >> 2] = $i1$0212;
      }
      HEAP32[$76 >> 2] = $78 + 4;
     }
     $105 = $i1$0212 + 1 | 0;
     if (($105 | 0) >= ($20 | 0)) {
      break L28;
     }
     $58 = HEAP32[$13 >> 2] | 0;
     $i1$0212 = $105;
    }
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
   }
  }
 } while (0);
 $53 = $w + -5 | 0;
 $54 = ($53 | 0) > 5;
 if ($54) {
  $55 = $h + -5 | 0;
  $56 = ($55 | 0) > 5;
  $x2$0205 = 5;
  do {
   if ($56) {
    $y3$0201 = 5;
    do {
     $110 = (Math_imul($y3$0201, $w) | 0) + $x2$0205 | 0;
     $111 = $77 + ($110 * 12 | 0) + 4 | 0;
     $112 = HEAP32[$111 >> 2] | 0;
     $113 = $77 + ($110 * 12 | 0) | 0;
     $114 = HEAP32[$113 >> 2] | 0;
     if (!($112 - $114 >> 2 >>> 0 < 2 | ($112 | 0) == ($114 | 0))) {
      $122 = $112;
      $123 = $114;
      $i4$0198 = 0;
      while (1) {
       if (($122 | 0) == ($123 | 0)) {
        $176 = $123;
        $178 = $123;
       } else {
        $126 = $123;
        $155 = $122;
        $j$0193 = 0;
        while (1) {
         do {
          if (($i4$0198 | 0) == ($j$0193 | 0)) {
           $168 = $155;
           $170 = $126;
           $j$1 = $i4$0198;
          } else {
           $127 = HEAP32[$126 + ($i4$0198 << 2) >> 2] | 0;
           $128 = HEAP32[$13 >> 2] | 0;
           $130 = HEAP32[$126 + ($j$0193 << 2) >> 2] | 0;
           if ((HEAP32[$128 + ($130 * 24 | 0) >> 2] | 0) == (HEAP32[$128 + ($127 * 24 | 0) >> 2] | 0)) {
            if ((HEAP32[$128 + ($130 * 24 | 0) + 4 >> 2] | 0) == (HEAP32[$128 + ($127 * 24 | 0) + 4 >> 2] | 0)) {
             if ((HEAP32[$128 + ($130 * 24 | 0) + 8 >> 2] | 0) == (HEAP32[$128 + ($127 * 24 | 0) + 8 >> 2] | 0)) {
              if ((HEAP32[$128 + ($130 * 24 | 0) + 12 >> 2] | 0) != (HEAP32[$128 + ($127 * 24 | 0) + 12 >> 2] | 0)) {
               $168 = $155;
               $170 = $126;
               $j$1 = $j$0193;
               break;
              }
              $151 = $j$0193 << 2 >> 2;
              $153 = $126 + ($151 + 1 << 2) | 0;
              $157 = $155 - $153 | 0;
              _memmove($126 + ($151 << 2) | 0, $153 | 0, $157 | 0) | 0;
              $159 = $126 + (($157 >> 2) + $151 << 2) | 0;
              $160 = HEAP32[$111 >> 2] | 0;
              if (($160 | 0) == ($159 | 0)) {
               $457 = $159;
              } else {
               $scevgep4$i$i$i125 = $160 + (~(($160 + -4 + (0 - $159) | 0) >>> 2) << 2) | 0;
               HEAP32[$111 >> 2] = $scevgep4$i$i$i125;
               $457 = $scevgep4$i$i$i125;
              }
              $168 = $457;
              $170 = HEAP32[$113 >> 2] | 0;
              $j$1 = $j$0193 + -1 | 0;
             } else {
              $168 = $155;
              $170 = $126;
              $j$1 = $j$0193;
             }
            } else {
             $168 = $155;
             $170 = $126;
             $j$1 = $j$0193;
            }
           } else {
            $168 = $155;
            $170 = $126;
            $j$1 = $j$0193;
           }
          }
         } while (0);
         $j$0193 = $j$1 + 1 | 0;
         if (!($j$0193 >>> 0 < $168 - $170 >> 2 >>> 0)) {
          $176 = $168;
          $178 = $170;
          break;
         } else {
          $126 = $170;
          $155 = $168;
         }
        }
       }
       $i4$0198 = $i4$0198 + 1 | 0;
       if (!($i4$0198 >>> 0 < $176 - $178 >> 2 >>> 0)) {
        break;
       } else {
        $122 = $176;
        $123 = $178;
       }
      }
     }
     $y3$0201 = $y3$0201 + 1 | 0;
    } while (($y3$0201 | 0) != ($55 | 0));
   }
   $x2$0205 = $x2$0205 + 1 | 0;
  } while (($x2$0205 | 0) != ($53 | 0));
  if ($54) {
   $107 = $h + -5 | 0;
   $108 = ($107 | 0) > 5;
   $x5$0189 = 5;
   do {
    if ($108) {
     $184 = $x5$0189 + -5 | 0;
     $185 = $x5$0189 + 5 | 0;
     $y6$0185 = 5;
     do {
      $187 = (Math_imul($y6$0185, $w) | 0) + $x5$0189 | 0;
      $188 = $77 + ($187 * 12 | 0) + 4 | 0;
      $190 = $77 + ($187 * 12 | 0) | 0;
      $191 = HEAP32[$190 >> 2] | 0;
      if ((HEAP32[$188 >> 2] | 0) != ($191 | 0)) {
       $193 = $y6$0185 + -5 | 0;
       $194 = $y6$0185 + 5 | 0;
       $196 = $191;
       $i7$0181 = 0;
       do {
        $197 = HEAP32[$196 + ($i7$0181 << 2) >> 2] | 0;
        $best_index$0178 = -1;
        $best_ratio$0177 = 0.0;
        $xs$0179 = $184;
        while (1) {
         $best_index$1174 = $best_index$0178;
         $best_ratio$1173 = $best_ratio$0177;
         $ys$0175 = $193;
         while (1) {
          $199 = (Math_imul($ys$0175, $w) | 0) + $xs$0179 | 0;
          $200 = $77 + ($199 * 12 | 0) + 4 | 0;
          $202 = $77 + ($199 * 12 | 0) | 0;
          $203 = HEAP32[$202 >> 2] | 0;
          if ((HEAP32[$200 >> 2] | 0) == ($203 | 0)) {
           $best_index$2$lcssa = $best_index$1174;
           $best_ratio$2$lcssa = $best_ratio$1173;
          } else {
           $206 = $203;
           $best_index$2164 = $best_index$1174;
           $best_ratio$2163 = $best_ratio$1173;
           $j8$0165 = 0;
           while (1) {
            $207 = HEAP32[$206 + ($j8$0165 << 2) >> 2] | 0;
            do {
             if (($197 | 0) == ($207 | 0)) {
              $best_index$3 = $best_index$2164;
              $best_ratio$3 = $best_ratio$2163;
             } else {
              $209 = HEAP32[$13 >> 2] | 0;
              $212 = +__Z26rectangleIntersectionRatioRK10SimpleRectS1_($209 + ($197 * 24 | 0) | 0, $209 + ($207 * 24 | 0) | 0);
              if (!($212 > $best_ratio$2163)) {
               $best_index$3 = $best_index$2164;
               $best_ratio$3 = $best_ratio$2163;
               break;
              }
              $best_index$3 = $207;
              $best_ratio$3 = $212;
             }
            } while (0);
            $j8$0165 = $j8$0165 + 1 | 0;
            $206 = HEAP32[$202 >> 2] | 0;
            if (!($j8$0165 >>> 0 < (HEAP32[$200 >> 2] | 0) - $206 >> 2 >>> 0)) {
             $best_index$2$lcssa = $best_index$3;
             $best_ratio$2$lcssa = $best_ratio$3;
             break;
            } else {
             $best_index$2164 = $best_index$3;
             $best_ratio$2163 = $best_ratio$3;
            }
           }
          }
          if (($ys$0175 | 0) < ($194 | 0)) {
           $best_index$1174 = $best_index$2$lcssa;
           $best_ratio$1173 = $best_ratio$2$lcssa;
           $ys$0175 = $ys$0175 + 1 | 0;
          } else {
           break;
          }
         }
         if (($xs$0179 | 0) < ($185 | 0)) {
          $best_index$0178 = $best_index$2$lcssa;
          $best_ratio$0177 = $best_ratio$2$lcssa;
          $xs$0179 = $xs$0179 + 1 | 0;
         } else {
          break;
         }
        }
        if (($best_index$2$lcssa | 0) == -1) {
         $329 = HEAP32[$188 >> 2] | 0;
         $i7$1 = $i7$0181;
        } else {
         $227 = HEAP32[$13 >> 2] | 0;
         $230 = $227 + ($best_index$2$lcssa * 24 | 0) | 0;
         if ((HEAP32[$227 + ($197 * 24 | 0) >> 2] | 0) == (HEAP32[$230 >> 2] | 0)) {
          $235 = $227 + ($best_index$2$lcssa * 24 | 0) + 4 | 0;
          if ((HEAP32[$227 + ($197 * 24 | 0) + 4 >> 2] | 0) == (HEAP32[$235 >> 2] | 0)) {
           if ((HEAP32[$227 + ($197 * 24 | 0) + 8 >> 2] | 0) == (HEAP32[$227 + ($best_index$2$lcssa * 24 | 0) + 8 >> 2] | 0)) {
            if ((HEAP32[$227 + ($197 * 24 | 0) + 12 >> 2] | 0) == (HEAP32[$227 + ($best_index$2$lcssa * 24 | 0) + 12 >> 2] | 0)) {
             $248 = $249 + ($best_index$2$lcssa << 2) | 0;
             HEAPF32[$248 >> 2] = +HEAPF32[$248 >> 2] + -1.0;
             $$pre$phiZ2D = $235;
            } else {
             $$pre$phiZ2D = $235;
            }
           } else {
            $$pre$phiZ2D = $235;
           }
          } else {
           $$pre$phiZ2D = $235;
          }
         } else {
          $$pre$phiZ2D = $227 + ($best_index$2$lcssa * 24 | 0) + 4 | 0;
         }
         $252 = $249 + ($best_index$2$lcssa << 2) | 0;
         $253 = +HEAPF32[$252 >> 2];
         $254 = $249 + ($197 << 2) | 0;
         $257 = $253 / ($253 + +HEAPF32[$254 >> 2]);
         $259 = 1.0 - $257;
         $264 = $47 + ($best_index$2$lcssa << 4) | 0;
         $269 = $259 * +HEAPF32[$47 + ($197 << 4) >> 2] + $257 * +HEAPF32[$264 >> 2];
         HEAPF32[$264 >> 2] = $269;
         $274 = $47 + ($best_index$2$lcssa << 4) + 4 | 0;
         $279 = $259 * +HEAPF32[$47 + ($197 << 4) + 4 >> 2] + $257 * +HEAPF32[$274 >> 2];
         HEAPF32[$274 >> 2] = $279;
         $284 = $47 + ($best_index$2$lcssa << 4) + 8 | 0;
         $289 = $259 * +HEAPF32[$47 + ($197 << 4) + 8 >> 2] + $257 * +HEAPF32[$284 >> 2];
         HEAPF32[$284 >> 2] = $289;
         $294 = $47 + ($best_index$2$lcssa << 4) + 12 | 0;
         $299 = $259 * +HEAPF32[$47 + ($197 << 4) + 12 >> 2] + $257 * +HEAPF32[$294 >> 2];
         HEAPF32[$294 >> 2] = $299;
         HEAP32[$230 >> 2] = ~~$269;
         HEAP32[$$pre$phiZ2D >> 2] = ~~$279;
         $303 = HEAP32[$13 >> 2] | 0;
         HEAP32[$303 + ($best_index$2$lcssa * 24 | 0) + 8 >> 2] = ~~$289;
         HEAP32[$303 + ($best_index$2$lcssa * 24 | 0) + 12 >> 2] = ~~$299;
         HEAPF32[$252 >> 2] = +HEAPF32[$254 >> 2] + +HEAPF32[$252 >> 2];
         $310 = HEAP32[$190 >> 2] | 0;
         $311 = $i7$0181 << 2 >> 2;
         $313 = $310 + ($311 + 1 << 2) | 0;
         $317 = (HEAP32[$188 >> 2] | 0) - $313 | 0;
         _memmove($310 + ($311 << 2) | 0, $313 | 0, $317 | 0) | 0;
         $319 = $310 + (($317 >> 2) + $311 << 2) | 0;
         $320 = HEAP32[$188 >> 2] | 0;
         if (($320 | 0) == ($319 | 0)) {
          $458 = $319;
         } else {
          $scevgep4$i$i$i = $320 + (~(($320 + -4 + (0 - $319) | 0) >>> 2) << 2) | 0;
          HEAP32[$188 >> 2] = $scevgep4$i$i$i;
          $458 = $scevgep4$i$i$i;
         }
         $329 = $458;
         $i7$1 = $i7$0181 + -1 | 0;
        }
        $i7$0181 = $i7$1 + 1 | 0;
        $196 = HEAP32[$190 >> 2] | 0;
       } while ($i7$0181 >>> 0 < $329 - $196 >> 2 >>> 0);
      }
      $y6$0185 = $y6$0185 + 1 | 0;
     } while (($y6$0185 | 0) < ($107 | 0));
    }
    $x5$0189 = $x5$0189 + 1 | 0;
   } while (($x5$0189 | 0) < ($53 | 0));
  }
 }
 HEAP32[$accepted_faces >> 2] = 0;
 $338 = $accepted_faces + 4 | 0;
 HEAP32[$338 >> 2] = 0;
 $339 = $accepted_faces + 8 | 0;
 HEAP32[$339 >> 2] = 0;
 HEAP32[$final_items >> 2] = 0;
 $340 = $final_items + 4 | 0;
 HEAP32[$340 >> 2] = 0;
 $341 = $final_items + 8 | 0;
 HEAP32[$341 >> 2] = 0;
 L123 : do {
  if ($54) {
   $342 = $h + -5 | 0;
   $343 = ($342 | 0) > 5;
   $459 = 0;
   $460 = 0;
   $461 = 0;
   $x9$0153 = 5;
   L125 : while (1) {
    if ($343) {
     $462 = $459;
     $463 = $460;
     $464 = $461;
     $y10$0150 = 5;
     while (1) {
      $345 = (Math_imul($y10$0150, $w) | 0) + $x9$0153 | 0;
      $346 = $77 + ($345 * 12 | 0) + 4 | 0;
      $348 = $77 + ($345 * 12 | 0) | 0;
      $349 = HEAP32[$348 >> 2] | 0;
      if ((HEAP32[$346 >> 2] | 0) == ($349 | 0)) {
       $468 = $462;
       $469 = $463;
       $470 = $464;
      } else {
       $352 = $349;
       $386 = $463;
       $387 = $462;
       $393 = $464;
       $i11$0149 = 0;
       while (1) {
        $353 = HEAP32[$352 + ($i11$0149 << 2) >> 2] | 0;
        $355 = (HEAP32[$13 >> 2] | 0) + ($353 * 24 | 0) | 0;
        $356 = HEAP32[$338 >> 2] | 0;
        if (($356 | 0) == (HEAP32[$339 >> 2] | 0)) {
         $362 = HEAP32[$accepted_faces >> 2] | 0;
         $365 = $356 - $362 | 0;
         $366 = ($365 | 0) / 24 | 0;
         $367 = $366 + 1 | 0;
         if ($367 >>> 0 > 178956970) {
          label = 92;
          break L125;
         }
         if ($366 >>> 0 < 89478485) {
          $370 = $366 << 1;
          $372 = $370 >>> 0 < $367 >>> 0 ? $367 : $370;
          if (($372 | 0) == 0) {
           $$0$i3$i = 0;
           $377 = 0;
          } else {
           $$0$i2$i = $372;
           label = 95;
          }
         } else {
          $$0$i2$i = 178956970;
          label = 95;
         }
         if ((label | 0) == 95) {
          label = 0;
          $$0$i3$i = $$0$i2$i;
          $377 = __Znwj($$0$i2$i * 24 | 0) | 0;
         }
         $376 = $377 + ($366 * 24 | 0) | 0;
         if (($376 | 0) != 0) {
          HEAP32[$376 + 0 >> 2] = HEAP32[$355 + 0 >> 2];
          HEAP32[$376 + 4 >> 2] = HEAP32[$355 + 4 >> 2];
          HEAP32[$376 + 8 >> 2] = HEAP32[$355 + 8 >> 2];
          HEAP32[$376 + 12 >> 2] = HEAP32[$355 + 12 >> 2];
          HEAP32[$376 + 16 >> 2] = HEAP32[$355 + 16 >> 2];
          HEAP32[$376 + 20 >> 2] = HEAP32[$355 + 20 >> 2];
         }
         $382 = $377 + (((($365 | 0) / -24 | 0) + $366 | 0) * 24 | 0) | 0;
         _memcpy($382 | 0, $362 | 0, $365 | 0) | 0;
         HEAP32[$accepted_faces >> 2] = $382;
         HEAP32[$338 >> 2] = $377 + ($367 * 24 | 0);
         HEAP32[$339 >> 2] = $377 + ($$0$i3$i * 24 | 0);
         if (($362 | 0) != 0) {
          __ZdlPv($362);
         }
        } else {
         if (($356 | 0) == 0) {
          $361 = 0;
         } else {
          HEAP32[$356 + 0 >> 2] = HEAP32[$355 + 0 >> 2];
          HEAP32[$356 + 4 >> 2] = HEAP32[$355 + 4 >> 2];
          HEAP32[$356 + 8 >> 2] = HEAP32[$355 + 8 >> 2];
          HEAP32[$356 + 12 >> 2] = HEAP32[$355 + 12 >> 2];
          HEAP32[$356 + 16 >> 2] = HEAP32[$355 + 16 >> 2];
          HEAP32[$356 + 20 >> 2] = HEAP32[$355 + 20 >> 2];
          $361 = $356;
         }
         HEAP32[$338 >> 2] = $361 + 24;
        }
        $384 = $249 + ($353 << 2) | 0;
        if (($386 | 0) == ($387 | 0)) {
         $394 = $387 - $393 | 0;
         $395 = $394 >> 2;
         $396 = $395 + 1 | 0;
         if ($396 >>> 0 > 1073741823) {
          label = 105;
          break L125;
         }
         if ($395 >>> 0 < 536870911) {
          $399 = $394 >> 1;
          $401 = $399 >>> 0 < $396 >>> 0 ? $396 : $399;
          if (($401 | 0) == 0) {
           $$0$i3$i$i105 = 0;
           $406 = 0;
          } else {
           $$0$i2$i$i104 = $401;
           label = 108;
          }
         } else {
          $$0$i2$i$i104 = 1073741823;
          label = 108;
         }
         if ((label | 0) == 108) {
          label = 0;
          $$0$i3$i$i105 = $$0$i2$i$i104;
          $406 = __Znwj($$0$i2$i$i104 << 2) | 0;
         }
         $405 = $406 + ($395 << 2) | 0;
         $407 = $406 + ($$0$i3$i$i105 << 2) | 0;
         if (($405 | 0) != 0) {
          HEAPF32[$405 >> 2] = +HEAPF32[$384 >> 2];
         }
         $410 = $406 + ($396 << 2) | 0;
         _memcpy($406 | 0, $393 | 0, $394 | 0) | 0;
         HEAP32[$final_items >> 2] = $406;
         HEAP32[$340 >> 2] = $410;
         HEAP32[$341 >> 2] = $407;
         if (($393 | 0) == 0) {
          $471 = $407;
          $472 = $410;
          $473 = $406;
         } else {
          __ZdlPv($393);
          $471 = $407;
          $472 = $410;
          $473 = $406;
         }
        } else {
         if (($386 | 0) != 0) {
          HEAPF32[$386 >> 2] = +HEAPF32[$384 >> 2];
         }
         $390 = $386 + 4 | 0;
         HEAP32[$340 >> 2] = $390;
         $471 = $387;
         $472 = $390;
         $473 = $393;
        }
        $i11$0149 = $i11$0149 + 1 | 0;
        $352 = HEAP32[$348 >> 2] | 0;
        if (!($i11$0149 >>> 0 < (HEAP32[$346 >> 2] | 0) - $352 >> 2 >>> 0)) {
         $468 = $471;
         $469 = $472;
         $470 = $473;
         break;
        } else {
         $386 = $472;
         $387 = $471;
         $393 = $473;
        }
       }
      }
      $y10$0150 = $y10$0150 + 1 | 0;
      if (($y10$0150 | 0) >= ($342 | 0)) {
       $465 = $468;
       $466 = $469;
       $467 = $470;
       break;
      } else {
       $462 = $468;
       $463 = $469;
       $464 = $470;
      }
     }
    } else {
     $465 = $459;
     $466 = $460;
     $467 = $461;
    }
    $x9$0153 = $x9$0153 + 1 | 0;
    if (($x9$0153 | 0) >= ($53 | 0)) {
     break L123;
    } else {
     $459 = $465;
     $460 = $466;
     $461 = $467;
    }
   }
   if ((label | 0) == 92) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
   } else if ((label | 0) == 105) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
   }
  }
 } while (0);
 if (($13 | 0) != ($accepted_faces | 0)) {
  __ZNSt3__16vectorI10SimpleRectNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($13, HEAP32[$accepted_faces >> 2] | 0, HEAP32[$338 >> 2] | 0);
 }
 __ZN19BoostedFaceDetector22mergeCloseResultsFinalEiRNSt3__16vectorIfNS0_9allocatorIfEEEE($this, $min_n_neighbours, $final_items);
 $427 = HEAP32[$final_items >> 2] | 0;
 if (($427 | 0) != 0) {
  $429 = HEAP32[$340 >> 2] | 0;
  if (($429 | 0) != ($427 | 0)) {
   HEAP32[$340 >> 2] = $429 + (~(($429 + -4 + (0 - $427) | 0) >>> 2) << 2);
  }
  __ZdlPv($427);
 }
 $434 = HEAP32[$accepted_faces >> 2] | 0;
 if (($434 | 0) != 0) {
  $436 = HEAP32[$338 >> 2] | 0;
  if (($436 | 0) != ($434 | 0)) {
   HEAP32[$338 >> 2] = $436 + (~((($436 + -24 + (0 - $434) | 0) >>> 0) / 24 | 0) * 24 | 0);
  }
  __ZdlPv($434);
 }
 if (($47 | 0) != 0) {
  __ZdlPv($47);
 }
 if (($249 | 0) != 0) {
  __ZdlPv($249);
 }
 if (($77 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (($445 | 0) != ($77 | 0)) {
  $447 = $445;
  do {
   $447$looptemp = $447;
   $447 = $447 + -12 | 0;
   $448 = HEAP32[$447 >> 2] | 0;
   if (($448 | 0) != 0) {
    $451 = $447$looptemp + -8 | 0;
    $452 = HEAP32[$451 >> 2] | 0;
    if (($452 | 0) != ($448 | 0)) {
     HEAP32[$451 >> 2] = $452 + (~(($452 + -4 + (0 - $448) | 0) >>> 2) << 2);
    }
    __ZdlPv($448);
   }
  } while (($447 | 0) != ($77 | 0));
 }
 __ZdlPv($77);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $101 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $128 = 0, $129 = 0, $13 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $144 = 0, $145 = 0, $15 = 0, $152 = 0, $153 = 0, $16 = 0, $161 = 0, $162 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $175 = 0, $176 = 0, $18 = 0, $184 = 0, $19 = 0, $192 = 0, $194 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $206 = 0, $21 = 0, $216 = 0, $217 = 0, $22 = 0, $226 = 0, $227 = 0, $23 = 0, $235 = 0, $238 = 0, $24 = 0, $242 = 0, $245 = 0, $249 = 0, $25 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $261 = 0, $263 = 0, $27 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $80 = 0, $85 = 0, $9 = 0, $90 = 0, $94 = 0, $97 = 0, $__t$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy30 = sp;
 $$byval_copy26 = sp + 160 | 0;
 $1 = sp + 156 | 0;
 $2 = sp + 152 | 0;
 $3 = sp + 148 | 0;
 $4 = sp + 144 | 0;
 $5 = sp + 140 | 0;
 $6 = sp + 136 | 0;
 $7 = sp + 132 | 0;
 $8 = sp + 128 | 0;
 $9 = sp + 124 | 0;
 $10 = sp + 120 | 0;
 $11 = sp + 116 | 0;
 $12 = sp + 112 | 0;
 $13 = sp + 108 | 0;
 $14 = sp + 104 | 0;
 $15 = sp + 100 | 0;
 $16 = sp + 96 | 0;
 $17 = sp + 92 | 0;
 $18 = sp + 88 | 0;
 $19 = sp + 164 | 0;
 $20 = sp + 44 | 0;
 $21 = sp + 36 | 0;
 $22 = sp + 32 | 0;
 $23 = sp + 28 | 0;
 $24 = sp + 40 | 0;
 $25 = sp + 16 | 0;
 $26 = sp + 12 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 24 | 0;
 $29 = sp + 80 | 0;
 $30 = sp + 48 | 0;
 $31 = sp + 52 | 0;
 $32 = sp + 56 | 0;
 $33 = sp + 60 | 0;
 $34 = sp + 64 | 0;
 $35 = sp + 68 | 0;
 $36 = sp + 72 | 0;
 $37 = sp + 76 | 0;
 $38 = sp + 84 | 0;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv($13, $__iob);
 $39 = HEAP32[$13 >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy30 >> 2] = 5144;
  HEAP32[$$byval_copy30 + 4 >> 2] = 123;
  HEAP32[$$byval_copy30 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy30, 124);
 }
 $45 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $49 = HEAP32[$39 + 8 >> 2] | 0;
 if (!((HEAP32[$39 + 12 >> 2] | 0) - $49 >> 2 >>> 0 > $45 >>> 0)) {
  $58 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($58);
  ___cxa_throw($58 | 0, 13864, 113);
 }
 $56 = HEAP32[$49 + ($45 << 2) >> 2] | 0;
 if (($56 | 0) == 0) {
  $58 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($58);
  ___cxa_throw($58 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$13 >> 2] | 0) | 0;
 L10 : do {
  switch ($__fmt << 24 >> 24 | 0) {
  case 72:
   {
    HEAP32[$9 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
    $128 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $129 = HEAP32[$__err >> 2] | 0;
    if (($129 & 4 | 0) == 0 & ($128 | 0) < 24) {
     HEAP32[$__tm + 8 >> 2] = $128;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $129 | 4;
     break L10;
    }
    break;
   }
  case 88:
   {
    $238 = $this + 8 | 0;
    $242 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$238 >> 2] | 0) + 24 >> 2] & 63]($238) | 0;
    HEAP32[$36 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$37 >> 2] = HEAP32[$__e >> 2];
    $245 = HEAP8[$242 >> 0] | 0;
    if (($245 & 1) == 0) {
     $257 = $242 + 4 | 0;
     $258 = ($245 & 255) >>> 1;
     $259 = $242 + 4 | 0;
    } else {
     $249 = HEAP32[$242 + 8 >> 2] | 0;
     $257 = $249;
     $258 = HEAP32[$242 + 4 >> 2] | 0;
     $259 = $249;
    }
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$36 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$37 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($35, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $259, $257 + ($258 << 2) | 0);
    HEAP32[$__b >> 2] = HEAP32[$35 >> 2];
    break;
   }
  case 70:
   {
    HEAP32[$21 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$22 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$21 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($20, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4272, 4304 | 0);
    HEAP32[$__b >> 2] = HEAP32[$20 >> 2];
    break;
   }
  case 99:
   {
    $90 = $this + 8 | 0;
    $94 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 12 >> 2] & 63]($90) | 0;
    HEAP32[$15 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$16 >> 2] = HEAP32[$__e >> 2];
    $97 = HEAP8[$94 >> 0] | 0;
    if (($97 & 1) == 0) {
     $109 = $94 + 4 | 0;
     $110 = ($97 & 255) >>> 1;
     $111 = $94 + 4 | 0;
    } else {
     $101 = HEAP32[$94 + 8 >> 2] | 0;
     $109 = $101;
     $110 = HEAP32[$94 + 4 >> 2] | 0;
     $111 = $101;
    }
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$16 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($14, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $111, $109 + ($110 << 2) | 0);
    HEAP32[$__b >> 2] = HEAP32[$14 >> 2];
    break;
   }
  case 73:
   {
    $135 = $__tm + 8 | 0;
    HEAP32[$8 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$8 + 0 >> 2];
    $137 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $138 = HEAP32[$__err >> 2] | 0;
    if (($138 & 4 | 0) == 0) {
     if (($137 + -1 | 0) >>> 0 < 12) {
      HEAP32[$135 >> 2] = $137;
      break L10;
     }
    }
    HEAP32[$__err >> 2] = $138 | 4;
    break;
   }
  case 65:
  case 97:
   {
    $61 = HEAP32[$__e >> 2] | 0;
    $62 = $this + 8 | 0;
    $65 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$62 >> 2] >> 2] & 63]($62) | 0;
    HEAP32[$12 >> 2] = $61;
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$12 + 0 >> 2];
    $70 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy30, $65, $65 + 168 | 0, $56, $__err, 0) | 0) - $65 | 0;
    if (($70 | 0) < 168) {
     HEAP32[$__tm + 24 >> 2] = (($70 | 0) / 12 | 0 | 0) % 7 | 0;
    }
    break;
   }
  case 109:
   {
    HEAP32[$6 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$6 + 0 >> 2];
    $152 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $153 = HEAP32[$__err >> 2] | 0;
    if (($153 & 4 | 0) == 0 & ($152 | 0) < 13) {
     HEAP32[$__tm + 16 >> 2] = $152 + -1;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $153 | 4;
     break L10;
    }
    break;
   }
  case 82:
   {
    HEAP32[$28 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$29 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$28 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$29 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($27, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4352, 4372 | 0);
    HEAP32[$__b >> 2] = HEAP32[$27 >> 2];
    break;
   }
  case 114:
   {
    HEAP32[$25 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$26 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$25 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4304, 4348 | 0);
    HEAP32[$__b >> 2] = HEAP32[$24 >> 2];
    break;
   }
  case 83:
   {
    HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
    $216 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $217 = HEAP32[$__err >> 2] | 0;
    if (($217 & 4 | 0) == 0 & ($216 | 0) < 61) {
     HEAP32[$__tm >> 2] = $216;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $217 | 4;
     break L10;
    }
    break;
   }
  case 119:
   {
    HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    $226 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 1) | 0;
    $227 = HEAP32[$__err >> 2] | 0;
    if (($227 & 4 | 0) == 0 & ($226 | 0) < 7) {
     HEAP32[$__tm + 24 >> 2] = $226;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $227 | 4;
     break L10;
    }
    break;
   }
  case 106:
   {
    HEAP32[$7 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$7 + 0 >> 2];
    $144 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 3) | 0;
    $145 = HEAP32[$__err >> 2] | 0;
    if (($145 & 4 | 0) == 0 & ($144 | 0) < 366) {
     HEAP32[$__tm + 28 >> 2] = $144;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $145 | 4;
     break L10;
    }
    break;
   }
  case 101:
  case 100:
   {
    $113 = $__tm + 12 | 0;
    HEAP32[$10 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
    $115 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $116 = HEAP32[$__err >> 2] | 0;
    if (($116 & 4 | 0) == 0) {
     if (($115 + -1 | 0) >>> 0 < 31) {
      HEAP32[$113 >> 2] = $115;
      break L10;
     }
    }
    HEAP32[$__err >> 2] = $116 | 4;
    break;
   }
  case 77:
   {
    HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
    $161 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $162 = HEAP32[$__err >> 2] | 0;
    if (($162 & 4 | 0) == 0 & ($161 | 0) < 60) {
     HEAP32[$__tm + 4 >> 2] = $161;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $162 | 4;
     break L10;
    }
    break;
   }
  case 84:
   {
    HEAP32[$31 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$32 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$31 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$32 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($30, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4376, 4408 | 0);
    HEAP32[$__b >> 2] = HEAP32[$30 >> 2];
    break;
   }
  case 120:
   {
    $235 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
    HEAP32[$33 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$34 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$33 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$34 + 0 >> 2];
    FUNCTION_TABLE_viiiiiii[$235 & 63]($agg$result, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm);
    STACKTOP = sp;
    return;
   }
  case 116:
  case 110:
   {
    HEAP32[$23 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0, $__b, $$byval_copy30, $__err, $56);
    break;
   }
  case 68:
   {
    HEAP32[$18 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$19 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$18 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($17, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4240, 4272 | 0);
    HEAP32[$__b >> 2] = HEAP32[$17 >> 2];
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    $75 = HEAP32[$__e >> 2] | 0;
    $76 = $this + 8 | 0;
    $80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 4 >> 2] & 63]($76) | 0;
    HEAP32[$11 >> 2] = $75;
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$11 + 0 >> 2];
    $85 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy30, $80, $80 + 288 | 0, $56, $__err, 0) | 0) - $80 | 0;
    if (($85 | 0) < 288) {
     HEAP32[$__tm + 16 >> 2] = (($85 | 0) / 12 | 0 | 0) % 12 | 0;
    }
    break;
   }
  case 112:
   {
    $169 = $__tm + 8 | 0;
    $170 = HEAP32[$__e >> 2] | 0;
    $171 = $this + 8 | 0;
    $175 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$171 >> 2] | 0) + 8 >> 2] & 63]($171) | 0;
    $176 = HEAP8[$175 >> 0] | 0;
    if (($176 & 1) == 0) {
     $194 = ($176 & 255) >>> 1;
    } else {
     $194 = HEAP32[$175 + 4 >> 2] | 0;
    }
    $184 = HEAP8[$175 + 12 >> 0] | 0;
    if (($184 & 1) == 0) {
     $192 = ($184 & 255) >>> 1;
    } else {
     $192 = HEAP32[$175 + 16 >> 2] | 0;
    }
    if (($194 | 0) == (0 - $192 | 0)) {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
     break L10;
    }
    HEAP32[$4 >> 2] = $170;
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
    $198 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy30, $175, $175 + 24 | 0, $56, $__err, 0) | 0;
    $201 = $198 - $175 | 0;
    if (($198 | 0) == ($175 | 0)) {
     if ((HEAP32[$169 >> 2] | 0) == 12) {
      HEAP32[$169 >> 2] = 0;
      break L10;
     }
    }
    if (($201 | 0) == 12) {
     $206 = HEAP32[$169 >> 2] | 0;
     if (($206 | 0) < 12) {
      HEAP32[$169 >> 2] = $206 + 12;
     }
    }
    break;
   }
  case 89:
   {
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$$byval_copy26 + 0 >> 2];
    $273 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 4) | 0;
    if ((HEAP32[$__err >> 2] & 4 | 0) == 0) {
     HEAP32[$__tm + 20 >> 2] = $273 + -1900;
    }
    break;
   }
  case 121:
   {
    $261 = $__tm + 20 | 0;
    HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
    $263 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 4) | 0;
    if ((HEAP32[$__err >> 2] & 4 | 0) == 0) {
     if (($263 | 0) < 69) {
      $__t$0$i = $263 + 2e3 | 0;
     } else {
      $__t$0$i = ($263 + -69 | 0) >>> 0 < 31 ? $263 + 1900 | 0 : $263;
     }
     HEAP32[$261 >> 2] = $__t$0$i + -1900;
    }
    break;
   }
  case 37:
   {
    HEAP32[$38 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$38 + 0 >> 2];
    __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0, $__b, $$byval_copy30, $__err, $56);
    break;
   }
  default:
   {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   }
  }
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $101 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $128 = 0, $129 = 0, $13 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $144 = 0, $145 = 0, $15 = 0, $152 = 0, $153 = 0, $16 = 0, $161 = 0, $162 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $175 = 0, $176 = 0, $18 = 0, $184 = 0, $19 = 0, $192 = 0, $194 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $206 = 0, $21 = 0, $216 = 0, $217 = 0, $22 = 0, $226 = 0, $227 = 0, $23 = 0, $235 = 0, $238 = 0, $24 = 0, $242 = 0, $245 = 0, $249 = 0, $25 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $261 = 0, $263 = 0, $27 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $80 = 0, $85 = 0, $9 = 0, $90 = 0, $94 = 0, $97 = 0, $__t$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy30 = sp;
 $$byval_copy26 = sp + 160 | 0;
 $1 = sp + 156 | 0;
 $2 = sp + 152 | 0;
 $3 = sp + 148 | 0;
 $4 = sp + 144 | 0;
 $5 = sp + 140 | 0;
 $6 = sp + 136 | 0;
 $7 = sp + 132 | 0;
 $8 = sp + 128 | 0;
 $9 = sp + 124 | 0;
 $10 = sp + 120 | 0;
 $11 = sp + 116 | 0;
 $12 = sp + 112 | 0;
 $13 = sp + 108 | 0;
 $14 = sp + 104 | 0;
 $15 = sp + 100 | 0;
 $16 = sp + 96 | 0;
 $17 = sp + 92 | 0;
 $18 = sp + 88 | 0;
 $19 = sp + 164 | 0;
 $20 = sp + 44 | 0;
 $21 = sp + 36 | 0;
 $22 = sp + 32 | 0;
 $23 = sp + 28 | 0;
 $24 = sp + 40 | 0;
 $25 = sp + 16 | 0;
 $26 = sp + 12 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 24 | 0;
 $29 = sp + 80 | 0;
 $30 = sp + 48 | 0;
 $31 = sp + 52 | 0;
 $32 = sp + 56 | 0;
 $33 = sp + 60 | 0;
 $34 = sp + 64 | 0;
 $35 = sp + 68 | 0;
 $36 = sp + 72 | 0;
 $37 = sp + 76 | 0;
 $38 = sp + 84 | 0;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv($13, $__iob);
 $39 = HEAP32[$13 >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy30 >> 2] = 5152;
  HEAP32[$$byval_copy30 + 4 >> 2] = 123;
  HEAP32[$$byval_copy30 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy30, 124);
 }
 $45 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $49 = HEAP32[$39 + 8 >> 2] | 0;
 if (!((HEAP32[$39 + 12 >> 2] | 0) - $49 >> 2 >>> 0 > $45 >>> 0)) {
  $58 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($58);
  ___cxa_throw($58 | 0, 13864, 113);
 }
 $56 = HEAP32[$49 + ($45 << 2) >> 2] | 0;
 if (($56 | 0) == 0) {
  $58 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($58);
  ___cxa_throw($58 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$13 >> 2] | 0) | 0;
 L10 : do {
  switch ($__fmt << 24 >> 24 | 0) {
  case 70:
   {
    HEAP32[$21 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$22 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$21 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($20, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4072, 4080 | 0);
    HEAP32[$__b >> 2] = HEAP32[$20 >> 2];
    break;
   }
  case 72:
   {
    HEAP32[$9 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
    $128 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $129 = HEAP32[$__err >> 2] | 0;
    if (($129 & 4 | 0) == 0 & ($128 | 0) < 24) {
     HEAP32[$__tm + 8 >> 2] = $128;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $129 | 4;
     break L10;
    }
    break;
   }
  case 101:
  case 100:
   {
    $113 = $__tm + 12 | 0;
    HEAP32[$10 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
    $115 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $116 = HEAP32[$__err >> 2] | 0;
    if (($116 & 4 | 0) == 0) {
     if (($115 + -1 | 0) >>> 0 < 31) {
      HEAP32[$113 >> 2] = $115;
      break L10;
     }
    }
    HEAP32[$__err >> 2] = $116 | 4;
    break;
   }
  case 65:
  case 97:
   {
    $61 = HEAP32[$__e >> 2] | 0;
    $62 = $this + 8 | 0;
    $65 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$62 >> 2] >> 2] & 63]($62) | 0;
    HEAP32[$12 >> 2] = $61;
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$12 + 0 >> 2];
    $70 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy30, $65, $65 + 168 | 0, $56, $__err, 0) | 0) - $65 | 0;
    if (($70 | 0) < 168) {
     HEAP32[$__tm + 24 >> 2] = (($70 | 0) / 12 | 0 | 0) % 7 | 0;
    }
    break;
   }
  case 106:
   {
    HEAP32[$7 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$7 + 0 >> 2];
    $144 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 3) | 0;
    $145 = HEAP32[$__err >> 2] | 0;
    if (($145 & 4 | 0) == 0 & ($144 | 0) < 366) {
     HEAP32[$__tm + 28 >> 2] = $144;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $145 | 4;
     break L10;
    }
    break;
   }
  case 112:
   {
    $169 = $__tm + 8 | 0;
    $170 = HEAP32[$__e >> 2] | 0;
    $171 = $this + 8 | 0;
    $175 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$171 >> 2] | 0) + 8 >> 2] & 63]($171) | 0;
    $176 = HEAP8[$175 >> 0] | 0;
    if (($176 & 1) == 0) {
     $194 = ($176 & 255) >>> 1;
    } else {
     $194 = HEAP32[$175 + 4 >> 2] | 0;
    }
    $184 = HEAP8[$175 + 12 >> 0] | 0;
    if (($184 & 1) == 0) {
     $192 = ($184 & 255) >>> 1;
    } else {
     $192 = HEAP32[$175 + 16 >> 2] | 0;
    }
    if (($194 | 0) == (0 - $192 | 0)) {
     HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
     break L10;
    }
    HEAP32[$4 >> 2] = $170;
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$4 + 0 >> 2];
    $198 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy30, $175, $175 + 24 | 0, $56, $__err, 0) | 0;
    $201 = $198 - $175 | 0;
    if (($198 | 0) == ($175 | 0)) {
     if ((HEAP32[$169 >> 2] | 0) == 12) {
      HEAP32[$169 >> 2] = 0;
      break L10;
     }
    }
    if (($201 | 0) == 12) {
     $206 = HEAP32[$169 >> 2] | 0;
     if (($206 | 0) < 12) {
      HEAP32[$169 >> 2] = $206 + 12;
     }
    }
    break;
   }
  case 68:
   {
    HEAP32[$18 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$19 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$18 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($17, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4064, 4072 | 0);
    HEAP32[$__b >> 2] = HEAP32[$17 >> 2];
    break;
   }
  case 109:
   {
    HEAP32[$6 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$6 + 0 >> 2];
    $152 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $153 = HEAP32[$__err >> 2] | 0;
    if (($153 & 4 | 0) == 0 & ($152 | 0) < 13) {
     HEAP32[$__tm + 16 >> 2] = $152 + -1;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $153 | 4;
     break L10;
    }
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[$23 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0, $__b, $$byval_copy30, $__err, $56);
    break;
   }
  case 82:
   {
    HEAP32[$28 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$29 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$28 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$29 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($27, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4096, 4101 | 0);
    HEAP32[$__b >> 2] = HEAP32[$27 >> 2];
    break;
   }
  case 73:
   {
    $135 = $__tm + 8 | 0;
    HEAP32[$8 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$8 + 0 >> 2];
    $137 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $138 = HEAP32[$__err >> 2] | 0;
    if (($138 & 4 | 0) == 0) {
     if (($137 + -1 | 0) >>> 0 < 12) {
      HEAP32[$135 >> 2] = $137;
      break L10;
     }
    }
    HEAP32[$__err >> 2] = $138 | 4;
    break;
   }
  case 84:
   {
    HEAP32[$31 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$32 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$31 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$32 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($30, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4104, 4112 | 0);
    HEAP32[$__b >> 2] = HEAP32[$30 >> 2];
    break;
   }
  case 119:
   {
    HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    $226 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 1) | 0;
    $227 = HEAP32[$__err >> 2] | 0;
    if (($227 & 4 | 0) == 0 & ($226 | 0) < 7) {
     HEAP32[$__tm + 24 >> 2] = $226;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $227 | 4;
     break L10;
    }
    break;
   }
  case 120:
   {
    $235 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
    HEAP32[$33 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$34 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$33 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$34 + 0 >> 2];
    FUNCTION_TABLE_viiiiiii[$235 & 63]($agg$result, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm);
    STACKTOP = sp;
    return;
   }
  case 88:
   {
    $238 = $this + 8 | 0;
    $242 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$238 >> 2] | 0) + 24 >> 2] & 63]($238) | 0;
    HEAP32[$36 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$37 >> 2] = HEAP32[$__e >> 2];
    $245 = HEAP8[$242 >> 0] | 0;
    if (($245 & 1) == 0) {
     $257 = $242 + 1 | 0;
     $258 = ($245 & 255) >>> 1;
     $259 = $242 + 1 | 0;
    } else {
     $249 = HEAP32[$242 + 8 >> 2] | 0;
     $257 = $249;
     $258 = HEAP32[$242 + 4 >> 2] | 0;
     $259 = $249;
    }
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$36 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$37 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($35, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $259, $257 + $258 | 0);
    HEAP32[$__b >> 2] = HEAP32[$35 >> 2];
    break;
   }
  case 99:
   {
    $90 = $this + 8 | 0;
    $94 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 12 >> 2] & 63]($90) | 0;
    HEAP32[$15 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$16 >> 2] = HEAP32[$__e >> 2];
    $97 = HEAP8[$94 >> 0] | 0;
    if (($97 & 1) == 0) {
     $109 = $94 + 1 | 0;
     $110 = ($97 & 255) >>> 1;
     $111 = $94 + 1 | 0;
    } else {
     $101 = HEAP32[$94 + 8 >> 2] | 0;
     $109 = $101;
     $110 = HEAP32[$94 + 4 >> 2] | 0;
     $111 = $101;
    }
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$16 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($14, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $111, $109 + $110 | 0);
    HEAP32[$__b >> 2] = HEAP32[$14 >> 2];
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    $75 = HEAP32[$__e >> 2] | 0;
    $76 = $this + 8 | 0;
    $80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 4 >> 2] & 63]($76) | 0;
    HEAP32[$11 >> 2] = $75;
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$11 + 0 >> 2];
    $85 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy30, $80, $80 + 288 | 0, $56, $__err, 0) | 0) - $80 | 0;
    if (($85 | 0) < 288) {
     HEAP32[$__tm + 16 >> 2] = (($85 | 0) / 12 | 0 | 0) % 12 | 0;
    }
    break;
   }
  case 114:
   {
    HEAP32[$25 >> 2] = HEAP32[$__b >> 2];
    HEAP32[$26 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$25 + 0 >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4080, 4091 | 0);
    HEAP32[$__b >> 2] = HEAP32[$24 >> 2];
    break;
   }
  case 77:
   {
    HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
    $161 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $162 = HEAP32[$__err >> 2] | 0;
    if (($162 & 4 | 0) == 0 & ($161 | 0) < 60) {
     HEAP32[$__tm + 4 >> 2] = $161;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $162 | 4;
     break L10;
    }
    break;
   }
  case 83:
   {
    HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
    $216 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 2) | 0;
    $217 = HEAP32[$__err >> 2] | 0;
    if (($217 & 4 | 0) == 0 & ($216 | 0) < 61) {
     HEAP32[$__tm >> 2] = $216;
     break L10;
    } else {
     HEAP32[$__err >> 2] = $217 | 4;
     break L10;
    }
    break;
   }
  case 121:
   {
    $261 = $__tm + 20 | 0;
    HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
    $263 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 4) | 0;
    if ((HEAP32[$__err >> 2] & 4 | 0) == 0) {
     if (($263 | 0) < 69) {
      $__t$0$i = $263 + 2e3 | 0;
     } else {
      $__t$0$i = ($263 + -69 | 0) >>> 0 < 31 ? $263 + 1900 | 0 : $263;
     }
     HEAP32[$261 >> 2] = $__t$0$i + -1900;
    }
    break;
   }
  case 89:
   {
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$$byval_copy26 + 0 >> 2];
    $273 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy30, $__err, $56, 4) | 0;
    if ((HEAP32[$__err >> 2] & 4 | 0) == 0) {
     HEAP32[$__tm + 20 >> 2] = $273 + -1900;
    }
    break;
   }
  case 37:
   {
    HEAP32[$38 >> 2] = HEAP32[$__e >> 2];
    HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$38 + 0 >> 2];
    __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0, $__b, $$byval_copy30, $__err, $56);
    break;
   }
  default:
   {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   }
  }
 } while (0);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}
function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $104 = 0, $113 = 0, $114 = 0, $12 = 0, $122 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $143 = 0, $15 = 0, $158 = 0, $163 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $19 = 0, $193 = 0, $194 = 0, $2 = 0, $203 = 0, $212 = 0, $219 = 0, $22 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $243 = 0, $244 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $269 = 0, $275 = 0, $279 = 0, $280 = 0, $287 = 0, $296 = 0, $299 = 0, $304 = 0, $311 = 0, $312 = 0, $313 = 0, $321 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $9 = 0, $91 = 0, $98 = 0, $F16$0 = 0, $I18$0 = 0, $K19$057 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, sp = 0;
 sp = STACKTOP;
 if (($mem | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = HEAP32[14352 >> 2] | 0;
 if ($1 >>> 0 < $2 >>> 0) {
  _abort();
 }
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) {
  _abort();
 }
 $8 = $5 & -8;
 $9 = $mem + ($8 + -8) | 0;
 do {
  if (($5 & 1 | 0) == 0) {
   $12 = HEAP32[$1 >> 2] | 0;
   if (($6 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   $$sum2 = -8 - $12 | 0;
   $14 = $mem + $$sum2 | 0;
   $15 = $12 + $8 | 0;
   if ($14 >>> 0 < $2 >>> 0) {
    _abort();
   }
   if (($14 | 0) == (HEAP32[14356 >> 2] | 0)) {
    $104 = $mem + ($8 + -4) | 0;
    if ((HEAP32[$104 >> 2] & 3 | 0) != 3) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    HEAP32[14344 >> 2] = $15;
    HEAP32[$104 >> 2] = HEAP32[$104 >> 2] & -2;
    HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1;
    HEAP32[$9 >> 2] = $15;
    STACKTOP = sp;
    return;
   }
   $19 = $12 >>> 3;
   if ($12 >>> 0 < 256) {
    $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
    $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
    $26 = 14376 + ($19 << 1 << 2) | 0;
    if (($22 | 0) != ($26 | 0)) {
     if ($22 >>> 0 < $2 >>> 0) {
      _abort();
     }
     if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) {
      _abort();
     }
    }
    if (($24 | 0) == ($22 | 0)) {
     HEAP32[3584] = HEAP32[3584] & ~(1 << $19);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    if (($24 | 0) == ($26 | 0)) {
     $$pre$phi70Z2D = $24 + 8 | 0;
    } else {
     if ($24 >>> 0 < $2 >>> 0) {
      _abort();
     }
     $39 = $24 + 8 | 0;
     if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
     }
    }
    HEAP32[$22 + 12 >> 2] = $24;
    HEAP32[$$pre$phi70Z2D >> 2] = $22;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0;
   $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
   do {
    if (($46 | 0) == ($14 | 0)) {
     $57 = $mem + ($$sum2 + 20) | 0;
     $58 = HEAP32[$57 >> 2] | 0;
     if (($58 | 0) == 0) {
      $60 = $mem + ($$sum2 + 16) | 0;
      $61 = HEAP32[$60 >> 2] | 0;
      if (($61 | 0) == 0) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;
       $RP$0 = $60;
      }
     } else {
      $R$0 = $58;
      $RP$0 = $57;
     }
     while (1) {
      $63 = $R$0 + 20 | 0;
      $64 = HEAP32[$63 >> 2] | 0;
      if (($64 | 0) != 0) {
       $R$0 = $64;
       $RP$0 = $63;
       continue;
      }
      $66 = $R$0 + 16 | 0;
      $67 = HEAP32[$66 >> 2] | 0;
      if (($67 | 0) == 0) {
       break;
      } else {
       $R$0 = $67;
       $RP$0 = $66;
      }
     }
     if ($RP$0 >>> 0 < $2 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP$0 >> 2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
     if ($49 >>> 0 < $2 >>> 0) {
      _abort();
     }
     $51 = $49 + 12 | 0;
     if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) {
      _abort();
     }
     $54 = $46 + 8 | 0;
     if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
      HEAP32[$51 >> 2] = $46;
      HEAP32[$54 >> 2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if (($44 | 0) == 0) {
    $p$0 = $14;
    $psize$0 = $15;
   } else {
    $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0;
    $73 = 14640 + ($72 << 2) | 0;
    if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
     HEAP32[$73 >> 2] = $R$1;
     if (($R$1 | 0) == 0) {
      HEAP32[14340 >> 2] = HEAP32[14340 >> 2] & ~(1 << $72);
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    } else {
     if ($44 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     }
     $82 = $44 + 16 | 0;
     if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) {
      HEAP32[$82 >> 2] = $R$1;
     } else {
      HEAP32[$44 + 20 >> 2] = $R$1;
     }
     if (($R$1 | 0) == 0) {
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
    if ($R$1 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
     _abort();
    }
    HEAP32[$R$1 + 24 >> 2] = $44;
    $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0;
    do {
     if (($91 | 0) != 0) {
      if ($91 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[$R$1 + 16 >> 2] = $91;
       HEAP32[$91 + 24 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $98 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0;
    if (($98 | 0) == 0) {
     $p$0 = $14;
     $psize$0 = $15;
    } else {
     if ($98 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R$1 + 20 >> 2] = $98;
      HEAP32[$98 + 24 >> 2] = $R$1;
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;
   $psize$0 = $8;
  }
 } while (0);
 if (!($p$0 >>> 0 < $9 >>> 0)) {
  _abort();
 }
 $113 = $mem + ($8 + -4) | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 if (($114 & 1 | 0) == 0) {
  _abort();
 }
 if (($114 & 2 | 0) == 0) {
  if (($9 | 0) == (HEAP32[14360 >> 2] | 0)) {
   $122 = (HEAP32[14348 >> 2] | 0) + $psize$0 | 0;
   HEAP32[14348 >> 2] = $122;
   HEAP32[14360 >> 2] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $122 | 1;
   if (($p$0 | 0) != (HEAP32[14356 >> 2] | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[14356 >> 2] = 0;
   HEAP32[14344 >> 2] = 0;
   STACKTOP = sp;
   return;
  }
  if (($9 | 0) == (HEAP32[14356 >> 2] | 0)) {
   $130 = (HEAP32[14344 >> 2] | 0) + $psize$0 | 0;
   HEAP32[14344 >> 2] = $130;
   HEAP32[14356 >> 2] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $130 | 1;
   HEAP32[$p$0 + $130 >> 2] = $130;
   STACKTOP = sp;
   return;
  }
  $135 = ($114 & -8) + $psize$0 | 0;
  $136 = $114 >>> 3;
  do {
   if ($114 >>> 0 < 256) {
    $139 = HEAP32[$mem + $8 >> 2] | 0;
    $141 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
    $143 = 14376 + ($136 << 1 << 2) | 0;
    if (($139 | 0) != ($143 | 0)) {
     if ($139 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     }
     if ((HEAP32[$139 + 12 >> 2] | 0) != ($9 | 0)) {
      _abort();
     }
    }
    if (($141 | 0) == ($139 | 0)) {
     HEAP32[3584] = HEAP32[3584] & ~(1 << $136);
     break;
    }
    if (($141 | 0) == ($143 | 0)) {
     $$pre$phi68Z2D = $141 + 8 | 0;
    } else {
     if ($141 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     }
     $158 = $141 + 8 | 0;
     if ((HEAP32[$158 >> 2] | 0) == ($9 | 0)) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
     }
    }
    HEAP32[$139 + 12 >> 2] = $141;
    HEAP32[$$pre$phi68Z2D >> 2] = $139;
   } else {
    $163 = HEAP32[$mem + ($8 + 16) >> 2] | 0;
    $165 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
    do {
     if (($165 | 0) == ($9 | 0)) {
      $177 = $mem + ($8 + 12) | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      if (($178 | 0) == 0) {
       $180 = $mem + ($8 + 8) | 0;
       $181 = HEAP32[$180 >> 2] | 0;
       if (($181 | 0) == 0) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;
        $RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;
       $RP9$0 = $177;
      }
      while (1) {
       $183 = $R7$0 + 20 | 0;
       $184 = HEAP32[$183 >> 2] | 0;
       if (($184 | 0) != 0) {
        $R7$0 = $184;
        $RP9$0 = $183;
        continue;
       }
       $186 = $R7$0 + 16 | 0;
       $187 = HEAP32[$186 >> 2] | 0;
       if (($187 | 0) == 0) {
        break;
       } else {
        $R7$0 = $187;
        $RP9$0 = $186;
       }
      }
      if ($RP9$0 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[$RP9$0 >> 2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $168 = HEAP32[$mem + $8 >> 2] | 0;
      if ($168 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      }
      $171 = $168 + 12 | 0;
      if ((HEAP32[$171 >> 2] | 0) != ($9 | 0)) {
       _abort();
      }
      $174 = $165 + 8 | 0;
      if ((HEAP32[$174 >> 2] | 0) == ($9 | 0)) {
       HEAP32[$171 >> 2] = $165;
       HEAP32[$174 >> 2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    if (($163 | 0) != 0) {
     $193 = HEAP32[$mem + ($8 + 20) >> 2] | 0;
     $194 = 14640 + ($193 << 2) | 0;
     if (($9 | 0) == (HEAP32[$194 >> 2] | 0)) {
      HEAP32[$194 >> 2] = $R7$1;
      if (($R7$1 | 0) == 0) {
       HEAP32[14340 >> 2] = HEAP32[14340 >> 2] & ~(1 << $193);
       break;
      }
     } else {
      if ($163 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      }
      $203 = $163 + 16 | 0;
      if ((HEAP32[$203 >> 2] | 0) == ($9 | 0)) {
       HEAP32[$203 >> 2] = $R7$1;
      } else {
       HEAP32[$163 + 20 >> 2] = $R7$1;
      }
      if (($R7$1 | 0) == 0) {
       break;
      }
     }
     if ($R7$1 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     }
     HEAP32[$R7$1 + 24 >> 2] = $163;
     $212 = HEAP32[$mem + ($8 + 8) >> 2] | 0;
     do {
      if (($212 | 0) != 0) {
       if ($212 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$R7$1 + 16 >> 2] = $212;
        HEAP32[$212 + 24 >> 2] = $R7$1;
        break;
       }
      }
     } while (0);
     $219 = HEAP32[$mem + ($8 + 12) >> 2] | 0;
     if (($219 | 0) != 0) {
      if ($219 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[$R7$1 + 20 >> 2] = $219;
       HEAP32[$219 + 24 >> 2] = $R7$1;
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $135 | 1;
  HEAP32[$p$0 + $135 >> 2] = $135;
  if (($p$0 | 0) == (HEAP32[14356 >> 2] | 0)) {
   HEAP32[14344 >> 2] = $135;
   STACKTOP = sp;
   return;
  } else {
   $psize$1 = $135;
  }
 } else {
  HEAP32[$113 >> 2] = $114 & -2;
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1;
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 if ($psize$1 >>> 0 < 256) {
  $236 = $234 << 1;
  $237 = 14376 + ($236 << 2) | 0;
  $238 = HEAP32[3584] | 0;
  $239 = 1 << $234;
  if (($238 & $239 | 0) == 0) {
   HEAP32[3584] = $238 | $239;
   $$pre$phiZ2D = 14376 + ($236 + 2 << 2) | 0;
   $F16$0 = $237;
  } else {
   $243 = 14376 + ($236 + 2 << 2) | 0;
   $244 = HEAP32[$243 >> 2] | 0;
   if ($244 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
    _abort();
   } else {
    $$pre$phiZ2D = $243;
    $F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  HEAP32[$F16$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $F16$0;
  HEAP32[$p$0 + 12 >> 2] = $237;
  STACKTOP = sp;
  return;
 }
 $250 = $psize$1 >>> 8;
 if (($250 | 0) == 0) {
  $I18$0 = 0;
 } else {
  if ($psize$1 >>> 0 > 16777215) {
   $I18$0 = 31;
  } else {
   $255 = ($250 + 1048320 | 0) >>> 16 & 8;
   $256 = $250 << $255;
   $259 = ($256 + 520192 | 0) >>> 16 & 4;
   $261 = $256 << $259;
   $264 = ($261 + 245760 | 0) >>> 16 & 2;
   $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
   $I18$0 = $psize$1 >>> ($269 + 7 | 0) & 1 | $269 << 1;
  }
 }
 $275 = 14640 + ($I18$0 << 2) | 0;
 HEAP32[$p$0 + 28 >> 2] = $I18$0;
 HEAP32[$p$0 + 20 >> 2] = 0;
 HEAP32[$p$0 + 16 >> 2] = 0;
 $279 = HEAP32[14340 >> 2] | 0;
 $280 = 1 << $I18$0;
 L199 : do {
  if (($279 & $280 | 0) == 0) {
   HEAP32[14340 >> 2] = $279 | $280;
   HEAP32[$275 >> 2] = $p$0;
   HEAP32[$p$0 + 24 >> 2] = $275;
   HEAP32[$p$0 + 12 >> 2] = $p$0;
   HEAP32[$p$0 + 8 >> 2] = $p$0;
  } else {
   $287 = HEAP32[$275 >> 2] | 0;
   if (($I18$0 | 0) == 31) {
    $296 = 0;
   } else {
    $296 = 25 - ($I18$0 >>> 1) | 0;
   }
   L205 : do {
    if ((HEAP32[$287 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $287;
    } else {
     $K19$057 = $psize$1 << $296;
     $T$056 = $287;
     while (1) {
      $304 = $T$056 + ($K19$057 >>> 31 << 2) + 16 | 0;
      $299 = HEAP32[$304 >> 2] | 0;
      if (($299 | 0) == 0) {
       break;
      }
      if ((HEAP32[$299 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $K19$057 << 1;
       $T$056 = $299;
      }
     }
     if ($304 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$304 >> 2] = $p$0;
      HEAP32[$p$0 + 24 >> 2] = $T$056;
      HEAP32[$p$0 + 12 >> 2] = $p$0;
      HEAP32[$p$0 + 8 >> 2] = $p$0;
      break L199;
     }
    }
   } while (0);
   $311 = $T$0$lcssa + 8 | 0;
   $312 = HEAP32[$311 >> 2] | 0;
   $313 = HEAP32[14352 >> 2] | 0;
   if ($T$0$lcssa >>> 0 < $313 >>> 0) {
    _abort();
   }
   if ($312 >>> 0 < $313 >>> 0) {
    _abort();
   } else {
    HEAP32[$312 + 12 >> 2] = $p$0;
    HEAP32[$311 >> 2] = $p$0;
    HEAP32[$p$0 + 8 >> 2] = $312;
    HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa;
    HEAP32[$p$0 + 24 >> 2] = 0;
    break;
   }
  }
 } while (0);
 $321 = (HEAP32[14368 >> 2] | 0) + -1 | 0;
 HEAP32[14368 >> 2] = $321;
 if (($321 | 0) == 0) {
  $sp$0$in$i = 14792 | 0;
 } else {
  STACKTOP = sp;
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (($sp$0$i | 0) == 0) {
   break;
  } else {
   $sp$0$in$i = $sp$0$i + 8 | 0;
  }
 }
 HEAP32[14368 >> 2] = -1;
 STACKTOP = sp;
 return;
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$sum24 = 0, $$sum27 = 0, $0 = 0, $10 = 0, $100 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $125 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $15 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $194 = 0, $2 = 0, $20 = 0, $203 = 0, $210 = 0, $22 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $234 = 0, $235 = 0, $241 = 0, $246 = 0, $247 = 0, $250 = 0, $252 = 0, $255 = 0, $260 = 0, $266 = 0, $270 = 0, $271 = 0, $278 = 0, $287 = 0, $290 = 0, $295 = 0, $302 = 0, $303 = 0, $304 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $87 = 0, $9 = 0, $94 = 0, $F16$0 = 0, $I19$0 = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do {
  if (($2 & 1 | 0) == 0) {
   $5 = HEAP32[$p >> 2] | 0;
   if (($2 & 3 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   $9 = $p + (0 - $5) | 0;
   $10 = $5 + $psize | 0;
   $11 = HEAP32[14352 >> 2] | 0;
   if ($9 >>> 0 < $11 >>> 0) {
    _abort();
   }
   if (($9 | 0) == (HEAP32[14356 >> 2] | 0)) {
    $100 = $p + ($psize + 4) | 0;
    if ((HEAP32[$100 >> 2] & 3 | 0) != 3) {
     $$0 = $9;
     $$02 = $10;
     break;
    }
    HEAP32[14344 >> 2] = $10;
    HEAP32[$100 >> 2] = HEAP32[$100 >> 2] & -2;
    HEAP32[$p + (4 - $5) >> 2] = $10 | 1;
    HEAP32[$0 >> 2] = $10;
    STACKTOP = sp;
    return;
   }
   $15 = $5 >>> 3;
   if ($5 >>> 0 < 256) {
    $18 = HEAP32[$p + (8 - $5) >> 2] | 0;
    $20 = HEAP32[$p + (12 - $5) >> 2] | 0;
    $22 = 14376 + ($15 << 1 << 2) | 0;
    if (($18 | 0) != ($22 | 0)) {
     if ($18 >>> 0 < $11 >>> 0) {
      _abort();
     }
     if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) {
      _abort();
     }
    }
    if (($20 | 0) == ($18 | 0)) {
     HEAP32[3584] = HEAP32[3584] & ~(1 << $15);
     $$0 = $9;
     $$02 = $10;
     break;
    }
    if (($20 | 0) == ($22 | 0)) {
     $$pre$phi65Z2D = $20 + 8 | 0;
    } else {
     if ($20 >>> 0 < $11 >>> 0) {
      _abort();
     }
     $35 = $20 + 8 | 0;
     if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
     }
    }
    HEAP32[$18 + 12 >> 2] = $20;
    HEAP32[$$pre$phi65Z2D >> 2] = $18;
    $$0 = $9;
    $$02 = $10;
    break;
   }
   $40 = HEAP32[$p + (24 - $5) >> 2] | 0;
   $42 = HEAP32[$p + (12 - $5) >> 2] | 0;
   do {
    if (($42 | 0) == ($9 | 0)) {
     $$sum24 = 16 - $5 | 0;
     $53 = $p + ($$sum24 + 4) | 0;
     $54 = HEAP32[$53 >> 2] | 0;
     if (($54 | 0) == 0) {
      $56 = $p + $$sum24 | 0;
      $57 = HEAP32[$56 >> 2] | 0;
      if (($57 | 0) == 0) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;
       $RP$0 = $56;
      }
     } else {
      $R$0 = $54;
      $RP$0 = $53;
     }
     while (1) {
      $59 = $R$0 + 20 | 0;
      $60 = HEAP32[$59 >> 2] | 0;
      if (($60 | 0) != 0) {
       $R$0 = $60;
       $RP$0 = $59;
       continue;
      }
      $62 = $R$0 + 16 | 0;
      $63 = HEAP32[$62 >> 2] | 0;
      if (($63 | 0) == 0) {
       break;
      } else {
       $R$0 = $63;
       $RP$0 = $62;
      }
     }
     if ($RP$0 >>> 0 < $11 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP$0 >> 2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $45 = HEAP32[$p + (8 - $5) >> 2] | 0;
     if ($45 >>> 0 < $11 >>> 0) {
      _abort();
     }
     $47 = $45 + 12 | 0;
     if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) {
      _abort();
     }
     $50 = $42 + 8 | 0;
     if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$47 >> 2] = $42;
      HEAP32[$50 >> 2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if (($40 | 0) == 0) {
    $$0 = $9;
    $$02 = $10;
   } else {
    $68 = HEAP32[$p + (28 - $5) >> 2] | 0;
    $69 = 14640 + ($68 << 2) | 0;
    if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
     HEAP32[$69 >> 2] = $R$1;
     if (($R$1 | 0) == 0) {
      HEAP32[14340 >> 2] = HEAP32[14340 >> 2] & ~(1 << $68);
      $$0 = $9;
      $$02 = $10;
      break;
     }
    } else {
     if ($40 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     }
     $78 = $40 + 16 | 0;
     if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$78 >> 2] = $R$1;
     } else {
      HEAP32[$40 + 20 >> 2] = $R$1;
     }
     if (($R$1 | 0) == 0) {
      $$0 = $9;
      $$02 = $10;
      break;
     }
    }
    if ($R$1 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
     _abort();
    }
    HEAP32[$R$1 + 24 >> 2] = $40;
    $$sum27 = 16 - $5 | 0;
    $87 = HEAP32[$p + $$sum27 >> 2] | 0;
    do {
     if (($87 | 0) != 0) {
      if ($87 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[$R$1 + 16 >> 2] = $87;
       HEAP32[$87 + 24 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $94 = HEAP32[$p + ($$sum27 + 4) >> 2] | 0;
    if (($94 | 0) == 0) {
     $$0 = $9;
     $$02 = $10;
    } else {
     if ($94 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R$1 + 20 >> 2] = $94;
      HEAP32[$94 + 24 >> 2] = $R$1;
      $$0 = $9;
      $$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;
   $$02 = $psize;
  }
 } while (0);
 $108 = HEAP32[14352 >> 2] | 0;
 if ($0 >>> 0 < $108 >>> 0) {
  _abort();
 }
 $110 = $p + ($psize + 4) | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (($111 & 2 | 0) == 0) {
  if (($0 | 0) == (HEAP32[14360 >> 2] | 0)) {
   $117 = (HEAP32[14348 >> 2] | 0) + $$02 | 0;
   HEAP32[14348 >> 2] = $117;
   HEAP32[14360 >> 2] = $$0;
   HEAP32[$$0 + 4 >> 2] = $117 | 1;
   if (($$0 | 0) != (HEAP32[14356 >> 2] | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[14356 >> 2] = 0;
   HEAP32[14344 >> 2] = 0;
   STACKTOP = sp;
   return;
  }
  if (($0 | 0) == (HEAP32[14356 >> 2] | 0)) {
   $125 = (HEAP32[14344 >> 2] | 0) + $$02 | 0;
   HEAP32[14344 >> 2] = $125;
   HEAP32[14356 >> 2] = $$0;
   HEAP32[$$0 + 4 >> 2] = $125 | 1;
   HEAP32[$$0 + $125 >> 2] = $125;
   STACKTOP = sp;
   return;
  }
  $130 = ($111 & -8) + $$02 | 0;
  $131 = $111 >>> 3;
  do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$p + ($psize + 8) >> 2] | 0;
    $136 = HEAP32[$p + ($psize + 12) >> 2] | 0;
    $138 = 14376 + ($131 << 1 << 2) | 0;
    if (($134 | 0) != ($138 | 0)) {
     if ($134 >>> 0 < $108 >>> 0) {
      _abort();
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($0 | 0)) {
      _abort();
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[3584] = HEAP32[3584] & ~(1 << $131);
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi63Z2D = $136 + 8 | 0;
    } else {
     if ($136 >>> 0 < $108 >>> 0) {
      _abort();
     }
     $151 = $136 + 8 | 0;
     if ((HEAP32[$151 >> 2] | 0) == ($0 | 0)) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
     }
    }
    HEAP32[$134 + 12 >> 2] = $136;
    HEAP32[$$pre$phi63Z2D >> 2] = $134;
   } else {
    $156 = HEAP32[$p + ($psize + 24) >> 2] | 0;
    $158 = HEAP32[$p + ($psize + 12) >> 2] | 0;
    do {
     if (($158 | 0) == ($0 | 0)) {
      $169 = $p + ($psize + 20) | 0;
      $170 = HEAP32[$169 >> 2] | 0;
      if (($170 | 0) == 0) {
       $172 = $p + ($psize + 16) | 0;
       $173 = HEAP32[$172 >> 2] | 0;
       if (($173 | 0) == 0) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;
        $RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;
       $RP9$0 = $169;
      }
      while (1) {
       $175 = $R7$0 + 20 | 0;
       $176 = HEAP32[$175 >> 2] | 0;
       if (($176 | 0) != 0) {
        $R7$0 = $176;
        $RP9$0 = $175;
        continue;
       }
       $178 = $R7$0 + 16 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       if (($179 | 0) == 0) {
        break;
       } else {
        $R7$0 = $179;
        $RP9$0 = $178;
       }
      }
      if ($RP9$0 >>> 0 < $108 >>> 0) {
       _abort();
      } else {
       HEAP32[$RP9$0 >> 2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $161 = HEAP32[$p + ($psize + 8) >> 2] | 0;
      if ($161 >>> 0 < $108 >>> 0) {
       _abort();
      }
      $163 = $161 + 12 | 0;
      if ((HEAP32[$163 >> 2] | 0) != ($0 | 0)) {
       _abort();
      }
      $166 = $158 + 8 | 0;
      if ((HEAP32[$166 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$163 >> 2] = $158;
       HEAP32[$166 >> 2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    if (($156 | 0) != 0) {
     $184 = HEAP32[$p + ($psize + 28) >> 2] | 0;
     $185 = 14640 + ($184 << 2) | 0;
     if (($0 | 0) == (HEAP32[$185 >> 2] | 0)) {
      HEAP32[$185 >> 2] = $R7$1;
      if (($R7$1 | 0) == 0) {
       HEAP32[14340 >> 2] = HEAP32[14340 >> 2] & ~(1 << $184);
       break;
      }
     } else {
      if ($156 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      }
      $194 = $156 + 16 | 0;
      if ((HEAP32[$194 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$194 >> 2] = $R7$1;
      } else {
       HEAP32[$156 + 20 >> 2] = $R7$1;
      }
      if (($R7$1 | 0) == 0) {
       break;
      }
     }
     if ($R7$1 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     }
     HEAP32[$R7$1 + 24 >> 2] = $156;
     $203 = HEAP32[$p + ($psize + 16) >> 2] | 0;
     do {
      if (($203 | 0) != 0) {
       if ($203 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$R7$1 + 16 >> 2] = $203;
        HEAP32[$203 + 24 >> 2] = $R7$1;
        break;
       }
      }
     } while (0);
     $210 = HEAP32[$p + ($psize + 20) >> 2] | 0;
     if (($210 | 0) != 0) {
      if ($210 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[$R7$1 + 20 >> 2] = $210;
       HEAP32[$210 + 24 >> 2] = $R7$1;
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$0 + 4 >> 2] = $130 | 1;
  HEAP32[$$0 + $130 >> 2] = $130;
  if (($$0 | 0) == (HEAP32[14356 >> 2] | 0)) {
   HEAP32[14344 >> 2] = $130;
   STACKTOP = sp;
   return;
  } else {
   $$1 = $130;
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$0 + 4 >> 2] = $$02 | 1;
  HEAP32[$$0 + $$02 >> 2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 if ($$1 >>> 0 < 256) {
  $227 = $225 << 1;
  $228 = 14376 + ($227 << 2) | 0;
  $229 = HEAP32[3584] | 0;
  $230 = 1 << $225;
  if (($229 & $230 | 0) == 0) {
   HEAP32[3584] = $229 | $230;
   $$pre$phiZ2D = 14376 + ($227 + 2 << 2) | 0;
   $F16$0 = $228;
  } else {
   $234 = 14376 + ($227 + 2 << 2) | 0;
   $235 = HEAP32[$234 >> 2] | 0;
   if ($235 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
    _abort();
   } else {
    $$pre$phiZ2D = $234;
    $F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0;
  HEAP32[$F16$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $F16$0;
  HEAP32[$$0 + 12 >> 2] = $228;
  STACKTOP = sp;
  return;
 }
 $241 = $$1 >>> 8;
 if (($241 | 0) == 0) {
  $I19$0 = 0;
 } else {
  if ($$1 >>> 0 > 16777215) {
   $I19$0 = 31;
  } else {
   $246 = ($241 + 1048320 | 0) >>> 16 & 8;
   $247 = $241 << $246;
   $250 = ($247 + 520192 | 0) >>> 16 & 4;
   $252 = $247 << $250;
   $255 = ($252 + 245760 | 0) >>> 16 & 2;
   $260 = 14 - ($250 | $246 | $255) + ($252 << $255 >>> 15) | 0;
   $I19$0 = $$1 >>> ($260 + 7 | 0) & 1 | $260 << 1;
  }
 }
 $266 = 14640 + ($I19$0 << 2) | 0;
 HEAP32[$$0 + 28 >> 2] = $I19$0;
 HEAP32[$$0 + 20 >> 2] = 0;
 HEAP32[$$0 + 16 >> 2] = 0;
 $270 = HEAP32[14340 >> 2] | 0;
 $271 = 1 << $I19$0;
 if (($270 & $271 | 0) == 0) {
  HEAP32[14340 >> 2] = $270 | $271;
  HEAP32[$266 >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $266;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  STACKTOP = sp;
  return;
 }
 $278 = HEAP32[$266 >> 2] | 0;
 if (($I19$0 | 0) == 31) {
  $287 = 0;
 } else {
  $287 = 25 - ($I19$0 >>> 1) | 0;
 }
 L194 : do {
  if ((HEAP32[$278 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
   $T$0$lcssa = $278;
  } else {
   $K20$049 = $$1 << $287;
   $T$048 = $278;
   while (1) {
    $295 = $T$048 + ($K20$049 >>> 31 << 2) + 16 | 0;
    $290 = HEAP32[$295 >> 2] | 0;
    if (($290 | 0) == 0) {
     break;
    }
    if ((HEAP32[$290 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $K20$049 << 1;
     $T$048 = $290;
    }
   }
   if ($295 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
    _abort();
   }
   HEAP32[$295 >> 2] = $$0;
   HEAP32[$$0 + 24 >> 2] = $T$048;
   HEAP32[$$0 + 12 >> 2] = $$0;
   HEAP32[$$0 + 8 >> 2] = $$0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 $302 = $T$0$lcssa + 8 | 0;
 $303 = HEAP32[$302 >> 2] | 0;
 $304 = HEAP32[14352 >> 2] | 0;
 if ($T$0$lcssa >>> 0 < $304 >>> 0) {
  _abort();
 }
 if ($303 >>> 0 < $304 >>> 0) {
  _abort();
 }
 HEAP32[$303 + 12 >> 2] = $$0;
 HEAP32[$302 >> 2] = $$0;
 HEAP32[$$0 + 8 >> 2] = $303;
 HEAP32[$$0 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$$0 + 24 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $$0$i$i = 0, $10 = 0, $14 = 0, $15 = 0, $176 = 0, $188 = 0, $2 = 0, $206 = 0, $207 = 0, $3 = 0, $32 = 0, $5 = 0, $56 = 0, $6 = 0, $8 = 0, $__p$i$i$i113 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i$i$i113 = sp;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 5072;
 $2 = $this + 8 | 0;
 $3 = $this + 12 | 0;
 $5 = $this + 136 | 0;
 $6 = $this + 24 | 0;
 HEAP8[$5 >> 0] = 1;
 HEAP32[$3 >> 2] = $6;
 HEAP32[$2 >> 2] = $6;
 HEAP32[$this + 16 >> 2] = $5;
 $$0$i$i = 28;
 $8 = $6;
 do {
  if (($8 | 0) == 0) {
   $10 = 0;
  } else {
   HEAP32[$8 >> 2] = 0;
   $10 = HEAP32[$3 >> 2] | 0;
  }
  $8 = $10 + 4 | 0;
  HEAP32[$3 >> 2] = $8;
  $$0$i$i = $$0$i$i + -1 | 0;
 } while (($$0$i$i | 0) != 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this + 144 | 0, 5056, 1);
 $14 = HEAP32[$2 >> 2] | 0;
 $15 = HEAP32[$3 >> 2] | 0;
 if (($15 | 0) != ($14 | 0)) {
  HEAP32[$3 >> 2] = $15 + (~(($15 + -4 + (0 - $14) | 0) >>> 2) << 2);
 }
 HEAP32[9964 >> 2] = 0;
 HEAP32[2490] = 3552;
 if (!((HEAP32[894] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 3576;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(3576, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9960, (HEAP32[3580 >> 2] | 0) + -1 | 0);
 HEAP32[9956 >> 2] = 0;
 HEAP32[2488] = 3592;
 if (!((HEAP32[904] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 3616;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(3616, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9952, (HEAP32[3620 >> 2] | 0) + -1 | 0);
 HEAP32[9940 >> 2] = 0;
 HEAP32[2484] = 5168;
 HEAP32[9944 >> 2] = 0;
 HEAP8[9948 >> 0] = 0;
 $32 = ___ctype_b_loc() | 0;
 HEAP32[9944 >> 2] = HEAP32[$32 >> 2];
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5152;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9936, (HEAP32[5156 >> 2] | 0) + -1 | 0);
 HEAP32[9932 >> 2] = 0;
 HEAP32[2482] = 6128;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5144;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9928, (HEAP32[5148 >> 2] | 0) + -1 | 0);
 HEAP32[9924 >> 2] = 0;
 HEAP32[2480] = 6344;
 if (!((HEAP32[1304] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5216;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5216, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9920, (HEAP32[5220 >> 2] | 0) + -1 | 0);
 HEAP32[9908 >> 2] = 0;
 HEAP32[2476] = 5240;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $56 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $56;
   ___cxa_guard_release(5048);
  }
 }
 HEAP32[9912 >> 2] = HEAP32[1260];
 if (!((HEAP32[1306] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5224;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5224, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9904, (HEAP32[5228 >> 2] | 0) + -1 | 0);
 HEAP32[9900 >> 2] = 0;
 HEAP32[2474] = 6568;
 if (!((HEAP32[1320] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5280;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5280, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9896, (HEAP32[5284 >> 2] | 0) + -1 | 0);
 HEAP32[9892 >> 2] = 0;
 HEAP32[2472] = 6688;
 if (!((HEAP32[1322] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5288;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5288, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9888, (HEAP32[5292 >> 2] | 0) + -1 | 0);
 HEAP32[9868 >> 2] = 0;
 HEAP32[2466] = 5320;
 HEAP8[9872 >> 0] = 46;
 HEAP8[9873 >> 0] = 44;
 HEAP32[9876 >> 2] = 0;
 HEAP32[9880 >> 2] = 0;
 HEAP32[9884 >> 2] = 0;
 if (!((HEAP32[1324] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5296;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5296, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9864, (HEAP32[5300 >> 2] | 0) + -1 | 0);
 HEAP32[9836 >> 2] = 0;
 HEAP32[2458] = 5360;
 HEAP32[9840 >> 2] = 46;
 HEAP32[9844 >> 2] = 44;
 HEAP32[9848 >> 2] = 0;
 HEAP32[9852 >> 2] = 0;
 HEAP32[9856 >> 2] = 0;
 if (!((HEAP32[1326] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 5304;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5304, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9832, (HEAP32[5308 >> 2] | 0) + -1 | 0);
 HEAP32[9828 >> 2] = 0;
 HEAP32[2456] = 3632;
 if (!((HEAP32[922] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 3688;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(3688, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9824, (HEAP32[3692 >> 2] | 0) + -1 | 0);
 HEAP32[9820 >> 2] = 0;
 HEAP32[2454] = 3752;
 if (!((HEAP32[952] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 3808;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(3808, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9816, (HEAP32[3812 >> 2] | 0) + -1 | 0);
 HEAP32[9812 >> 2] = 0;
 HEAP32[2452] = 3824;
 if (!((HEAP32[968] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 3872;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(3872, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9808, (HEAP32[3876 >> 2] | 0) + -1 | 0);
 HEAP32[9804 >> 2] = 0;
 HEAP32[2450] = 3888;
 if (!((HEAP32[984] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 3936;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(3936, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9800, (HEAP32[3940 >> 2] | 0) + -1 | 0);
 HEAP32[9796 >> 2] = 0;
 HEAP32[2448] = 4480;
 if (!((HEAP32[1132] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4528;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4528, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9792, (HEAP32[4532 >> 2] | 0) + -1 | 0);
 HEAP32[9788 >> 2] = 0;
 HEAP32[2446] = 4544;
 if (!((HEAP32[1148] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4592;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4592, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9784, (HEAP32[4596 >> 2] | 0) + -1 | 0);
 HEAP32[9780 >> 2] = 0;
 HEAP32[2444] = 4608;
 if (!((HEAP32[1164] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4656;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4656, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9776, (HEAP32[4660 >> 2] | 0) + -1 | 0);
 HEAP32[9772 >> 2] = 0;
 HEAP32[2442] = 4672;
 if (!((HEAP32[1180] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4720;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4720, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9768, (HEAP32[4724 >> 2] | 0) + -1 | 0);
 HEAP32[9764 >> 2] = 0;
 HEAP32[2440] = 4736;
 if (!((HEAP32[1190] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4760;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4760, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9760, (HEAP32[4764 >> 2] | 0) + -1 | 0);
 HEAP32[9756 >> 2] = 0;
 HEAP32[2438] = 4816;
 if (!((HEAP32[1210] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4840;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4840, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9752, (HEAP32[4844 >> 2] | 0) + -1 | 0);
 HEAP32[9748 >> 2] = 0;
 HEAP32[2436] = 4872;
 if (!((HEAP32[1224] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4896;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4896, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9744, (HEAP32[4900 >> 2] | 0) + -1 | 0);
 HEAP32[9740 >> 2] = 0;
 HEAP32[2434] = 4920;
 if (!((HEAP32[1236] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4944;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4944, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9736, (HEAP32[4948 >> 2] | 0) + -1 | 0);
 HEAP32[9724 >> 2] = 0;
 HEAP32[2430] = 3968;
 HEAP32[9728 >> 2] = 4016;
 if (!((HEAP32[1012] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4048;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4048, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9720, (HEAP32[4052 >> 2] | 0) + -1 | 0);
 HEAP32[9708 >> 2] = 0;
 HEAP32[2426] = 4120;
 HEAP32[9712 >> 2] = 4168;
 if (!((HEAP32[1050] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4200;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4200, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9704, (HEAP32[4204 >> 2] | 0) + -1 | 0);
 HEAP32[9692 >> 2] = 0;
 HEAP32[2422] = 6064;
 do {
  if ((HEAP8[5048] | 0) == 0) {
   if ((___cxa_guard_acquire(5048) | 0) == 0) {
    break;
   }
   $176 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $176;
   ___cxa_guard_release(5048);
  }
 } while (0);
 HEAP32[9696 >> 2] = HEAP32[1260];
 HEAP32[2422] = 4416;
 if (!((HEAP32[1108] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4432;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4432, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9688, (HEAP32[4436 >> 2] | 0) + -1 | 0);
 HEAP32[9676 >> 2] = 0;
 HEAP32[2418] = 6064;
 do {
  if ((HEAP8[5048] | 0) == 0) {
   if ((___cxa_guard_acquire(5048) | 0) == 0) {
    break;
   }
   $188 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $188;
   ___cxa_guard_release(5048);
  }
 } while (0);
 HEAP32[9680 >> 2] = HEAP32[1260];
 HEAP32[2418] = 4448;
 if (!((HEAP32[1116] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4464;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4464, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9672, (HEAP32[4468 >> 2] | 0) + -1 | 0);
 HEAP32[9668 >> 2] = 0;
 HEAP32[2416] = 4960;
 if (!((HEAP32[1246] | 0) == -1)) {
  HEAP32[$__p$i$i$i113 >> 2] = 4984;
  HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(4984, $__p$i$i$i113, 124);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9664, (HEAP32[4988 >> 2] | 0) + -1 | 0);
 HEAP32[9660 >> 2] = 0;
 HEAP32[2414] = 5e3;
 if ((HEAP32[1256] | 0) == -1) {
  $206 = HEAP32[5028 >> 2] | 0;
  $207 = $206 + -1 | 0;
  __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9656, $207);
  STACKTOP = sp;
  return;
 }
 HEAP32[$__p$i$i$i113 >> 2] = 5024;
 HEAP32[$__p$i$i$i113 + 4 >> 2] = 123;
 HEAP32[$__p$i$i$i113 + 8 >> 2] = 0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(5024, $__p$i$i$i113, 124);
 $206 = HEAP32[5028 >> 2] | 0;
 $207 = $206 + -1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, 9656, $207);
 STACKTOP = sp;
 return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$pre = 0, $$pre$i3$i$i19 = 0, $106 = 0, $114 = 0, $118 = 0, $121 = 0, $122 = 0, $123 = 0, $134 = 0, $142 = 0, $144 = 0, $149 = 0, $16 = 0, $161 = 0, $178 = 0, $183 = 0, $184 = 0, $22 = 0, $25 = 0, $3 = 0, $35 = 0, $38 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $68 = 0, $7 = 0, $70 = 0, $75 = 0, $8 = 0, $84 = 0, $87 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (($5 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $183 = $5;
   $__status$0 = $5;
  }
 } else {
  $183 = 0;
  $__status$0 = $__statbuf;
 }
 $7 = ($__kb | 0) == ($__ke | 0);
 if ($7) {
  $__n_does_match$0$lcssa = 0;
  $__n_might_match$0$lcssa = $3;
 } else {
  $__ky$068 = $__kb;
  $__n_does_match$066 = 0;
  $__n_might_match$065 = $3;
  $__st$067 = $__status$0;
  while (1) {
   $8 = HEAP8[$__ky$068 >> 0] | 0;
   if (($8 & 1) == 0) {
    $16 = ($8 & 255) >>> 1;
   } else {
    $16 = HEAP32[$__ky$068 + 4 >> 2] | 0;
   }
   if (($16 | 0) == 0) {
    HEAP8[$__st$067 >> 0] = 2;
    $__n_does_match$1 = $__n_does_match$066 + 1 | 0;
    $__n_might_match$1 = $__n_might_match$065 + -1 | 0;
   } else {
    HEAP8[$__st$067 >> 0] = 1;
    $__n_does_match$1 = $__n_does_match$066;
    $__n_might_match$1 = $__n_might_match$065;
   }
   $__ky$068 = $__ky$068 + 12 | 0;
   if (($__ky$068 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1;
    $__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__n_does_match$066 = $__n_does_match$1;
    $__n_might_match$065 = $__n_might_match$1;
    $__st$067 = $__st$067 + 1 | 0;
   }
  }
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0$lcssa;
 $__n_might_match$2 = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $22 = HEAP32[$__b >> 2] | 0;
  do {
   if (($22 | 0) == 0) {
    $48 = 1;
   } else {
    $25 = HEAP32[$22 + 12 >> 2] | 0;
    if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0;
    } else {
     $$0$i$i$i$i = HEAP32[$25 >> 2] | 0;
    }
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $48 = 1;
     break;
    } else {
     $48 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  $35 = HEAP32[$__e >> 2] | 0;
  if (($35 | 0) == 0) {
   $$pre$i3$i$i19 = 0;
   $49 = 1;
  } else {
   $38 = HEAP32[$35 + 12 >> 2] | 0;
   if (($38 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 63]($35) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$38 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    $$pre$i3$i$i19 = 0;
    $49 = 1;
   } else {
    $$pre$i3$i$i19 = $35;
    $49 = 0;
   }
  }
  $51 = HEAP32[$__b >> 2] | 0;
  if (!(($48 ^ $49) & ($__n_might_match$2 | 0) != 0)) {
   break;
  }
  $53 = HEAP32[$51 + 12 >> 2] | 0;
  if (($53 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0;
  } else {
   $$0$i$i = HEAP32[$53 >> 2] | 0;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, $$0$i$i) | 0;
  }
  $$pre = $__indx$0 + 1 | 0;
  if ($7) {
   $__indx$0 = $$pre;
   continue;
  }
  L46 : do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0;
    $__ky1$040$us = $__kb;
    $__n_does_match$336$us = $__n_does_match$2;
    $__n_might_match$335$us = $__n_might_match$2;
    $__st$137$us = $__status$0;
    while (1) {
     do {
      if ((HEAP8[$__st$137$us >> 0] | 0) == 1) {
       $68 = HEAP8[$__ky1$040$us >> 0] | 0;
       $70 = ($68 & 1) == 0;
       if ($70) {
        $75 = $__ky1$040$us + 4 | 0;
       } else {
        $75 = HEAP32[$__ky1$040$us + 8 >> 2] | 0;
       }
       if (($__c$0 | 0) != (HEAP32[$75 + ($__indx$0 << 2) >> 2] | 0)) {
        HEAP8[$__st$137$us >> 0] = 0;
        $__consume$1$off0$us = $__consume$0$off039$us;
        $__n_does_match$4$us = $__n_does_match$336$us;
        $__n_might_match$4$us = $__n_might_match$335$us + -1 | 0;
        break;
       }
       if ($70) {
        $84 = ($68 & 255) >>> 1;
       } else {
        $84 = HEAP32[$__ky1$040$us + 4 >> 2] | 0;
       }
       if (($84 | 0) == ($$pre | 0)) {
        HEAP8[$__st$137$us >> 0] = 2;
        $__consume$1$off0$us = 1;
        $__n_does_match$4$us = $__n_does_match$336$us + 1 | 0;
        $__n_might_match$4$us = $__n_might_match$335$us + -1 | 0;
       } else {
        $__consume$1$off0$us = 1;
        $__n_does_match$4$us = $__n_does_match$336$us;
        $__n_might_match$4$us = $__n_might_match$335$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us;
       $__n_does_match$4$us = $__n_does_match$336$us;
       $__n_might_match$4$us = $__n_might_match$335$us;
      }
     } while (0);
     $87 = $__ky1$040$us + 12 | 0;
     if (($87 | 0) == ($__ke | 0)) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;
      $__n_does_match$3$lcssa = $__n_does_match$4$us;
      $__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L46;
     }
     $__consume$0$off039$us = $__consume$1$off0$us;
     $__ky1$040$us = $87;
     $__n_does_match$336$us = $__n_does_match$4$us;
     $__n_might_match$335$us = $__n_might_match$4$us;
     $__st$137$us = $__st$137$us + 1 | 0;
    }
   } else {
    $__consume$0$off039 = 0;
    $__ky1$040 = $__kb;
    $__n_does_match$336 = $__n_does_match$2;
    $__n_might_match$335 = $__n_might_match$2;
    $__st$137 = $__status$0;
    while (1) {
     do {
      if ((HEAP8[$__st$137 >> 0] | 0) == 1) {
       if ((HEAP8[$__ky1$040 >> 0] & 1) == 0) {
        $99 = $__ky1$040 + 4 | 0;
       } else {
        $99 = HEAP32[$__ky1$040 + 8 >> 2] | 0;
       }
       if (($__c$0 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, HEAP32[$99 + ($__indx$0 << 2) >> 2] | 0) | 0)) {
        HEAP8[$__st$137 >> 0] = 0;
        $__consume$1$off0 = $__consume$0$off039;
        $__n_does_match$4 = $__n_does_match$336;
        $__n_might_match$4 = $__n_might_match$335 + -1 | 0;
        break;
       }
       $106 = HEAP8[$__ky1$040 >> 0] | 0;
       if (($106 & 1) == 0) {
        $114 = ($106 & 255) >>> 1;
       } else {
        $114 = HEAP32[$__ky1$040 + 4 >> 2] | 0;
       }
       if (($114 | 0) == ($$pre | 0)) {
        HEAP8[$__st$137 >> 0] = 2;
        $__consume$1$off0 = 1;
        $__n_does_match$4 = $__n_does_match$336 + 1 | 0;
        $__n_might_match$4 = $__n_might_match$335 + -1 | 0;
       } else {
        $__consume$1$off0 = 1;
        $__n_does_match$4 = $__n_does_match$336;
        $__n_might_match$4 = $__n_might_match$335;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off039;
       $__n_does_match$4 = $__n_does_match$336;
       $__n_might_match$4 = $__n_might_match$335;
      }
     } while (0);
     $118 = $__ky1$040 + 12 | 0;
     if (($118 | 0) == ($__ke | 0)) {
      $__consume$0$off0$lcssa = $__consume$1$off0;
      $__n_does_match$3$lcssa = $__n_does_match$4;
      $__n_might_match$3$lcssa = $__n_might_match$4;
      break L46;
     }
     $__consume$0$off039 = $__consume$1$off0;
     $__ky1$040 = $118;
     $__n_does_match$336 = $__n_does_match$4;
     $__n_might_match$335 = $__n_might_match$4;
     $__st$137 = $__st$137 + 1 | 0;
    }
   }
  } while (0);
  if (!$__consume$0$off0$lcssa) {
   $__indx$0 = $$pre;
   $__n_does_match$2 = $__n_does_match$3$lcssa;
   $__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $121 = HEAP32[$__b >> 2] | 0;
  $122 = $121 + 12 | 0;
  $123 = HEAP32[$122 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$121 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 40 >> 2] & 63]($121) | 0;
  } else {
   HEAP32[$122 >> 2] = $123 + 4;
  }
  if (($__n_might_match$3$lcssa + $__n_does_match$3$lcssa | 0) >>> 0 < 2) {
   $__indx$0 = $$pre;
   $__n_does_match$2 = $__n_does_match$3$lcssa;
   $__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$051 = $__kb;
   $__n_does_match$549 = $__n_does_match$3$lcssa;
   $__st$250 = $__status$0;
  }
  while (1) {
   if ((HEAP8[$__st$250 >> 0] | 0) == 2) {
    $134 = HEAP8[$__ky2$051 >> 0] | 0;
    if (($134 & 1) == 0) {
     $142 = ($134 & 255) >>> 1;
    } else {
     $142 = HEAP32[$__ky2$051 + 4 >> 2] | 0;
    }
    if (($142 | 0) == ($$pre | 0)) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250 >> 0] = 0;
     $__n_does_match$6 = $__n_does_match$549 + -1 | 0;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $144 = $__ky2$051 + 12 | 0;
   if (($144 | 0) == ($__ke | 0)) {
    $__indx$0 = $$pre;
    $__n_does_match$2 = $__n_does_match$6;
    $__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L17;
   } else {
    $__ky2$051 = $144;
    $__n_does_match$549 = $__n_does_match$6;
    $__st$250 = $__st$250 + 1 | 0;
   }
  }
 }
 do {
  if (($51 | 0) == 0) {
   $184 = 1;
  } else {
   $149 = HEAP32[$51 + 12 >> 2] | 0;
   if (($149 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
    $$0$i$i$i$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0;
   } else {
    $$0$i$i$i$i11 = HEAP32[$149 >> 2] | 0;
   }
   if (($$0$i$i$i$i11 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $184 = 1;
    break;
   } else {
    $184 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if (($$pre$i3$i$i19 | 0) == 0) {
   label = 85;
  } else {
   $161 = HEAP32[$$pre$i3$i$i19 + 12 >> 2] | 0;
   if (($161 | 0) == (HEAP32[$$pre$i3$i$i19 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i19 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i19) | 0;
   } else {
    $$0$i$i1$i$i17 = HEAP32[$161 >> 2] | 0;
   }
   if (($$0$i$i1$i$i17 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 85;
    break;
   } else {
    if ($184) {
     break;
    } else {
     label = 87;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 85) {
  if ($184) {
   label = 87;
  }
 }
 if ((label | 0) == 87) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 L124 : do {
  if ($7) {
   label = 92;
  } else {
   if ((HEAP8[$__status$0 >> 0] | 0) == 2) {
    $$028 = $__kb;
   } else {
    $$03082 = $__kb;
    $__st$32983 = $__status$0;
    while (1) {
     $178 = $$03082 + 12 | 0;
     $__st$32983 = $__st$32983 + 1 | 0;
     if (($178 | 0) == ($__ke | 0)) {
      label = 92;
      break L124;
     }
     if ((HEAP8[$__st$32983 >> 0] | 0) == 2) {
      $$028 = $178;
      break;
     } else {
      $$03082 = $178;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 92) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$028 = $__ke;
 }
 if (($183 | 0) == 0) {
  STACKTOP = sp;
  return $$028 | 0;
 }
 _free($183);
 STACKTOP = sp;
 return $$028 | 0;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$024 = 0, $$02680 = 0, $$pre = 0, $$pre$i2$i$i16 = 0, $100 = 0, $107 = 0, $115 = 0, $119 = 0, $122 = 0, $123 = 0, $124 = 0, $135 = 0, $143 = 0, $145 = 0, $159 = 0, $16 = 0, $160 = 0, $178 = 0, $183 = 0, $22 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $62 = 0, $69 = 0, $7 = 0, $71 = 0, $76 = 0, $8 = 0, $85 = 0, $88 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0, $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0, $__n_might_match$331$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0, $__st$133$us = 0, $__st$246 = 0, $__st$32581 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (($5 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $183 = $5;
   $__status$0 = $5;
  }
 } else {
  $183 = 0;
  $__status$0 = $__statbuf;
 }
 $7 = ($__kb | 0) == ($__ke | 0);
 if ($7) {
  $__n_does_match$0$lcssa = 0;
  $__n_might_match$0$lcssa = $3;
 } else {
  $__ky$064 = $__kb;
  $__n_does_match$062 = 0;
  $__n_might_match$061 = $3;
  $__st$063 = $__status$0;
  while (1) {
   $8 = HEAP8[$__ky$064 >> 0] | 0;
   if (($8 & 1) == 0) {
    $16 = ($8 & 255) >>> 1;
   } else {
    $16 = HEAP32[$__ky$064 + 4 >> 2] | 0;
   }
   if (($16 | 0) == 0) {
    HEAP8[$__st$063 >> 0] = 2;
    $__n_does_match$1 = $__n_does_match$062 + 1 | 0;
    $__n_might_match$1 = $__n_might_match$061 + -1 | 0;
   } else {
    HEAP8[$__st$063 >> 0] = 1;
    $__n_does_match$1 = $__n_does_match$062;
    $__n_might_match$1 = $__n_might_match$061;
   }
   $__ky$064 = $__ky$064 + 12 | 0;
   if (($__ky$064 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1;
    $__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__n_does_match$062 = $__n_does_match$1;
    $__n_might_match$061 = $__n_might_match$1;
    $__st$063 = $__st$063 + 1 | 0;
   }
  }
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0$lcssa;
 $__n_might_match$2 = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $22 = HEAP32[$__b >> 2] | 0;
  do {
   if (($22 | 0) == 0) {
    $35 = 0;
   } else {
    if ((HEAP32[$22 + 12 >> 2] | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $35 = 0;
      break;
     } else {
      $35 = HEAP32[$__b >> 2] | 0;
      break;
     }
    } else {
     $35 = $22;
    }
   }
  } while (0);
  $34 = ($35 | 0) == 0;
  $36 = HEAP32[$__e >> 2] | 0;
  if (($36 | 0) == 0) {
   $$pre$i2$i$i16 = 0;
  } else {
   if ((HEAP32[$36 + 12 >> 2] | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 63]($36) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i2$i$i16 = 0;
    } else {
     $$pre$i2$i$i16 = $36;
    }
   } else {
    $$pre$i2$i$i16 = $36;
   }
  }
  $48 = ($$pre$i2$i$i16 | 0) == 0;
  $50 = HEAP32[$__b >> 2] | 0;
  if (!(($34 ^ $48) & ($__n_might_match$2 | 0) != 0)) {
   break;
  }
  $52 = HEAP32[$50 + 12 >> 2] | 0;
  if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 63]($50) | 0;
  } else {
   $$0$i$i = HEAPU8[$52 >> 0] | 0;
  }
  $62 = $$0$i$i & 255;
  if ($__case_sensitive) {
   $__c$0 = $62;
  } else {
   $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 15]($__ct, $62) | 0;
  }
  $$pre = $__indx$0 + 1 | 0;
  if ($7) {
   $__indx$0 = $$pre;
   continue;
  }
  L40 : do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0;
    $__ky1$036$us = $__kb;
    $__n_does_match$332$us = $__n_does_match$2;
    $__n_might_match$331$us = $__n_might_match$2;
    $__st$133$us = $__status$0;
    while (1) {
     do {
      if ((HEAP8[$__st$133$us >> 0] | 0) == 1) {
       $69 = HEAP8[$__ky1$036$us >> 0] | 0;
       $71 = ($69 & 1) == 0;
       if ($71) {
        $76 = $__ky1$036$us + 1 | 0;
       } else {
        $76 = HEAP32[$__ky1$036$us + 8 >> 2] | 0;
       }
       if (!($__c$0 << 24 >> 24 == (HEAP8[$76 + $__indx$0 >> 0] | 0))) {
        HEAP8[$__st$133$us >> 0] = 0;
        $__consume$1$off0$us = $__consume$0$off035$us;
        $__n_does_match$4$us = $__n_does_match$332$us;
        $__n_might_match$4$us = $__n_might_match$331$us + -1 | 0;
        break;
       }
       if ($71) {
        $85 = ($69 & 255) >>> 1;
       } else {
        $85 = HEAP32[$__ky1$036$us + 4 >> 2] | 0;
       }
       if (($85 | 0) == ($$pre | 0)) {
        HEAP8[$__st$133$us >> 0] = 2;
        $__consume$1$off0$us = 1;
        $__n_does_match$4$us = $__n_does_match$332$us + 1 | 0;
        $__n_might_match$4$us = $__n_might_match$331$us + -1 | 0;
       } else {
        $__consume$1$off0$us = 1;
        $__n_does_match$4$us = $__n_does_match$332$us;
        $__n_might_match$4$us = $__n_might_match$331$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us;
       $__n_does_match$4$us = $__n_does_match$332$us;
       $__n_might_match$4$us = $__n_might_match$331$us;
      }
     } while (0);
     $88 = $__ky1$036$us + 12 | 0;
     if (($88 | 0) == ($__ke | 0)) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;
      $__n_does_match$3$lcssa = $__n_does_match$4$us;
      $__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L40;
     }
     $__consume$0$off035$us = $__consume$1$off0$us;
     $__ky1$036$us = $88;
     $__n_does_match$332$us = $__n_does_match$4$us;
     $__n_might_match$331$us = $__n_might_match$4$us;
     $__st$133$us = $__st$133$us + 1 | 0;
    }
   } else {
    $__consume$0$off035 = 0;
    $__ky1$036 = $__kb;
    $__n_does_match$332 = $__n_does_match$2;
    $__n_might_match$331 = $__n_might_match$2;
    $__st$133 = $__status$0;
    while (1) {
     do {
      if ((HEAP8[$__st$133 >> 0] | 0) == 1) {
       if ((HEAP8[$__ky1$036 >> 0] & 1) == 0) {
        $100 = $__ky1$036 + 1 | 0;
       } else {
        $100 = HEAP32[$__ky1$036 + 8 >> 2] | 0;
       }
       if (!($__c$0 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 15]($__ct, HEAP8[$100 + $__indx$0 >> 0] | 0) | 0) << 24 >> 24)) {
        HEAP8[$__st$133 >> 0] = 0;
        $__consume$1$off0 = $__consume$0$off035;
        $__n_does_match$4 = $__n_does_match$332;
        $__n_might_match$4 = $__n_might_match$331 + -1 | 0;
        break;
       }
       $107 = HEAP8[$__ky1$036 >> 0] | 0;
       if (($107 & 1) == 0) {
        $115 = ($107 & 255) >>> 1;
       } else {
        $115 = HEAP32[$__ky1$036 + 4 >> 2] | 0;
       }
       if (($115 | 0) == ($$pre | 0)) {
        HEAP8[$__st$133 >> 0] = 2;
        $__consume$1$off0 = 1;
        $__n_does_match$4 = $__n_does_match$332 + 1 | 0;
        $__n_might_match$4 = $__n_might_match$331 + -1 | 0;
       } else {
        $__consume$1$off0 = 1;
        $__n_does_match$4 = $__n_does_match$332;
        $__n_might_match$4 = $__n_might_match$331;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off035;
       $__n_does_match$4 = $__n_does_match$332;
       $__n_might_match$4 = $__n_might_match$331;
      }
     } while (0);
     $119 = $__ky1$036 + 12 | 0;
     if (($119 | 0) == ($__ke | 0)) {
      $__consume$0$off0$lcssa = $__consume$1$off0;
      $__n_does_match$3$lcssa = $__n_does_match$4;
      $__n_might_match$3$lcssa = $__n_might_match$4;
      break L40;
     }
     $__consume$0$off035 = $__consume$1$off0;
     $__ky1$036 = $119;
     $__n_does_match$332 = $__n_does_match$4;
     $__n_might_match$331 = $__n_might_match$4;
     $__st$133 = $__st$133 + 1 | 0;
    }
   }
  } while (0);
  if (!$__consume$0$off0$lcssa) {
   $__indx$0 = $$pre;
   $__n_does_match$2 = $__n_does_match$3$lcssa;
   $__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $122 = HEAP32[$__b >> 2] | 0;
  $123 = $122 + 12 | 0;
  $124 = HEAP32[$123 >> 2] | 0;
  if (($124 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 40 >> 2] & 63]($122) | 0;
  } else {
   HEAP32[$123 >> 2] = $124 + 1;
  }
  if (($__n_might_match$3$lcssa + $__n_does_match$3$lcssa | 0) >>> 0 < 2) {
   $__indx$0 = $$pre;
   $__n_does_match$2 = $__n_does_match$3$lcssa;
   $__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$047 = $__kb;
   $__n_does_match$545 = $__n_does_match$3$lcssa;
   $__st$246 = $__status$0;
  }
  while (1) {
   if ((HEAP8[$__st$246 >> 0] | 0) == 2) {
    $135 = HEAP8[$__ky2$047 >> 0] | 0;
    if (($135 & 1) == 0) {
     $143 = ($135 & 255) >>> 1;
    } else {
     $143 = HEAP32[$__ky2$047 + 4 >> 2] | 0;
    }
    if (($143 | 0) == ($$pre | 0)) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246 >> 0] = 0;
     $__n_does_match$6 = $__n_does_match$545 + -1 | 0;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $145 = $__ky2$047 + 12 | 0;
   if (($145 | 0) == ($__ke | 0)) {
    $__indx$0 = $$pre;
    $__n_does_match$2 = $__n_does_match$6;
    $__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L17;
   } else {
    $__ky2$047 = $145;
    $__n_does_match$545 = $__n_does_match$6;
    $__st$246 = $__st$246 + 1 | 0;
   }
  }
 }
 do {
  if (($50 | 0) == 0) {
   $160 = 0;
  } else {
   if ((HEAP32[$50 + 12 >> 2] | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 63]($50) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $160 = 0;
     break;
    } else {
     $160 = HEAP32[$__b >> 2] | 0;
     break;
    }
   } else {
    $160 = $50;
   }
  }
 } while (0);
 $159 = ($160 | 0) == 0;
 do {
  if ($48) {
   label = 78;
  } else {
   if ((HEAP32[$$pre$i2$i$i16 + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i16 + 16 >> 2] | 0)) {
    if ($159) {
     break;
    } else {
     label = 80;
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i16 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i16) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 78;
    break;
   } else {
    if ($159) {
     break;
    } else {
     label = 80;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 78) {
  if ($159) {
   label = 80;
  }
 }
 if ((label | 0) == 80) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 L114 : do {
  if ($7) {
   label = 85;
  } else {
   if ((HEAP8[$__status$0 >> 0] | 0) == 2) {
    $$024 = $__kb;
   } else {
    $$02680 = $__kb;
    $__st$32581 = $__status$0;
    while (1) {
     $178 = $$02680 + 12 | 0;
     $__st$32581 = $__st$32581 + 1 | 0;
     if (($178 | 0) == ($__ke | 0)) {
      label = 85;
      break L114;
     }
     if ((HEAP8[$__st$32581 >> 0] | 0) == 2) {
      $$024 = $178;
      break;
     } else {
      $$02680 = $178;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 85) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$024 = $__ke;
 }
 if (($183 | 0) == 0) {
  STACKTOP = sp;
  return $$024 | 0;
 }
 _free($183);
 STACKTOP = sp;
 return $$024 | 0;
}
function __ZN16StrongClassifieraSERKS_($this, $right) {
 $this = $this | 0;
 $right = $right | 0;
 var $$0$i2$i$i = 0, $$0$i2$i$i11 = 0, $$0$i2$i$i29 = 0, $$0$i2$i$i38 = 0, $$0$i3$i$i = 0, $$0$i3$i$i13 = 0, $$0$i3$i$i31 = 0, $$0$i3$i$i40 = 0, $$pre56 = 0, $0 = 0, $10 = 0, $101 = 0, $102 = 0, $109 = 0, $110 = 0, $111 = 0, $116 = 0, $117 = 0, $120 = 0, $121 = 0, $122 = 0, $125 = 0, $127 = 0, $131 = 0, $132 = 0, $138 = 0, $139 = 0, $155 = 0, $158 = 0, $160 = 0, $163 = 0, $164 = 0, $168 = 0, $169 = 0, $17 = 0, $176 = 0, $177 = 0, $178 = 0, $183 = 0, $184 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $192 = 0, $194 = 0, $198 = 0, $199 = 0, $205 = 0, $207 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $221 = 0, $223 = 0, $227 = 0, $228 = 0, $23 = 0, $241 = 0, $27 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $88 = 0, $9 = 0, $91 = 0, $93 = 0, $96 = 0, $97 = 0, $i$050 = 0, $i1$045 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAPF32[$this + 12 >> 2] = +HEAPF32[$right + 12 >> 2];
 $4 = $this + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = HEAP32[$this >> 2] | 0;
 if (($5 | 0) != ($6 | 0)) {
  $241 = $5;
  $9 = $6;
  $i$050 = 0;
  while (1) {
   $10 = HEAP32[$9 + ($i$050 << 2) >> 2] | 0;
   if (($10 | 0) == 0) {
    $17 = $241;
    $19 = $9;
   } else {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] & 255]($10);
    $17 = HEAP32[$4 >> 2] | 0;
    $19 = HEAP32[$this >> 2] | 0;
   }
   $i$050 = $i$050 + 1 | 0;
   if (!($i$050 >>> 0 < $17 - $19 >> 2 >>> 0)) {
    break;
   } else {
    $241 = $17;
    $9 = $19;
   }
  }
 }
 HEAP32[$0 >> 2] = 0;
 $23 = $0 + 4 | 0;
 HEAP32[$23 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 if (($this | 0) != ($0 | 0)) {
  __ZNSt3__16vectorIP10ClassifierNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this, 0, 0);
  $$pre56 = HEAP32[$0 >> 2] | 0;
  if (($$pre56 | 0) != 0) {
   $27 = HEAP32[$23 >> 2] | 0;
   if (($27 | 0) != ($$pre56 | 0)) {
    HEAP32[$23 >> 2] = $27 + (~(($27 + -4 + (0 - $$pre56) | 0) >>> 2) << 2);
   }
   __ZdlPv($$pre56);
  }
 }
 $32 = $right + 4 | 0;
 $34 = HEAP32[$right >> 2] | 0;
 if ((HEAP32[$32 >> 2] | 0) == ($34 | 0)) {
  STACKTOP = sp;
  return $this | 0;
 }
 $36 = $this + 8 | 0;
 $38 = $34;
 $i1$045 = 0;
 L18 : while (1) {
  $37 = $38 + ($i1$045 << 2) | 0;
  $39 = HEAP32[$37 >> 2] | 0;
  do {
   if (($39 | 0) != 0) {
    if ((___dynamic_cast($39, 224, 416, 0) | 0) != 0) {
     $42 = __Znwj(84) | 0;
     __ZN14HaarClassifierC2ERKS_($42, HEAP32[$37 >> 2] | 0);
     $44 = HEAP32[$4 >> 2] | 0;
     if (($44 | 0) != (HEAP32[$36 >> 2] | 0)) {
      if (($44 | 0) == 0) {
       $49 = 0;
      } else {
       HEAP32[$44 >> 2] = $42;
       $49 = HEAP32[$4 >> 2] | 0;
      }
      HEAP32[$4 >> 2] = $49 + 4;
      break;
     }
     $50 = HEAP32[$this >> 2] | 0;
     $53 = $44 - $50 | 0;
     $54 = $53 >> 2;
     $55 = $54 + 1 | 0;
     if ($55 >>> 0 > 1073741823) {
      label = 19;
      break L18;
     }
     if ($54 >>> 0 < 536870911) {
      $58 = $53 >> 1;
      $60 = $58 >>> 0 < $55 >>> 0 ? $55 : $58;
      if (($60 | 0) == 0) {
       $$0$i3$i$i31 = 0;
       $65 = 0;
      } else {
       $$0$i2$i$i29 = $60;
       label = 22;
      }
     } else {
      $$0$i2$i$i29 = 1073741823;
      label = 22;
     }
     if ((label | 0) == 22) {
      label = 0;
      $$0$i3$i$i31 = $$0$i2$i$i29;
      $65 = __Znwj($$0$i2$i$i29 << 2) | 0;
     }
     $64 = $65 + ($54 << 2) | 0;
     if (($64 | 0) != 0) {
      HEAP32[$64 >> 2] = $42;
     }
     _memcpy($65 | 0, $50 | 0, $53 | 0) | 0;
     HEAP32[$this >> 2] = $65;
     HEAP32[$4 >> 2] = $65 + ($55 << 2);
     HEAP32[$36 >> 2] = $65 + ($$0$i3$i$i31 << 2);
     if (($50 | 0) == 0) {
      break;
     }
     __ZdlPv($50);
     break;
    }
    if ((___dynamic_cast($39, 224, 448, 0) | 0) != 0) {
     $71 = __Znwj(48) | 0;
     $72 = HEAP32[$37 >> 2] | 0;
     HEAP32[$71 >> 2] = 568;
     HEAP32[$71 + 4 >> 2] = HEAP32[$72 + 4 >> 2];
     HEAPF32[$71 + 8 >> 2] = +HEAPF32[$72 + 8 >> 2];
     HEAPF32[$71 + 12 >> 2] = +HEAPF32[$72 + 12 >> 2];
     HEAPF32[$71 + 16 >> 2] = +HEAPF32[$72 + 16 >> 2];
     HEAP32[$71 + 20 >> 2] = HEAP32[$72 + 20 >> 2];
     $88 = $72 + 24 | 0;
     if ((HEAP32[$88 >> 2] | 0) == 0) {
      HEAP32[$71 + 24 >> 2] = 0;
     } else {
      $91 = _malloc(72) | 0;
      HEAP32[$71 + 24 >> 2] = $91;
      $93 = HEAP32[$88 >> 2] | 0;
      dest = $91 + 0 | 0;
      src = $93 + 0 | 0;
      stop = dest + 72 | 0;
      do {
       HEAP32[dest >> 2] = HEAP32[src >> 2];
       dest = dest + 4 | 0;
       src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $96 = HEAP32[$91 + 48 >> 2] << 2;
      $97 = _malloc($96) | 0;
      HEAP32[$91 + 60 >> 2] = $97;
      $101 = HEAP32[$91 + 52 >> 2] << 3;
      $102 = _malloc($101) | 0;
      HEAP32[$91 + 56 >> 2] = $102;
      _memcpy($97 | 0, HEAP32[$93 + 60 >> 2] | 0, $96 | 0) | 0;
      _memcpy($102 | 0, HEAP32[$93 + 56 >> 2] | 0, $101 | 0) | 0;
     }
     HEAP32[$71 >> 2] = 280;
     $109 = $71 + 28 | 0;
     $110 = $72 + 28 | 0;
     HEAP32[$109 + 0 >> 2] = HEAP32[$110 + 0 >> 2];
     HEAP32[$109 + 4 >> 2] = HEAP32[$110 + 4 >> 2];
     HEAP32[$109 + 8 >> 2] = HEAP32[$110 + 8 >> 2];
     HEAP32[$109 + 12 >> 2] = HEAP32[$110 + 12 >> 2];
     HEAP32[$109 + 16 >> 2] = HEAP32[$110 + 16 >> 2];
     $111 = HEAP32[$4 >> 2] | 0;
     if (($111 | 0) != (HEAP32[$36 >> 2] | 0)) {
      if (($111 | 0) == 0) {
       $116 = 0;
      } else {
       HEAP32[$111 >> 2] = $71;
       $116 = HEAP32[$4 >> 2] | 0;
      }
      HEAP32[$4 >> 2] = $116 + 4;
      break;
     }
     $117 = HEAP32[$this >> 2] | 0;
     $120 = $111 - $117 | 0;
     $121 = $120 >> 2;
     $122 = $121 + 1 | 0;
     if ($122 >>> 0 > 1073741823) {
      label = 36;
      break L18;
     }
     if ($121 >>> 0 < 536870911) {
      $125 = $120 >> 1;
      $127 = $125 >>> 0 < $122 >>> 0 ? $122 : $125;
      if (($127 | 0) == 0) {
       $$0$i3$i$i40 = 0;
       $132 = 0;
      } else {
       $$0$i2$i$i38 = $127;
       label = 39;
      }
     } else {
      $$0$i2$i$i38 = 1073741823;
      label = 39;
     }
     if ((label | 0) == 39) {
      label = 0;
      $$0$i3$i$i40 = $$0$i2$i$i38;
      $132 = __Znwj($$0$i2$i$i38 << 2) | 0;
     }
     $131 = $132 + ($121 << 2) | 0;
     if (($131 | 0) != 0) {
      HEAP32[$131 >> 2] = $71;
     }
     _memcpy($132 | 0, $117 | 0, $120 | 0) | 0;
     HEAP32[$this >> 2] = $132;
     HEAP32[$4 >> 2] = $132 + ($122 << 2);
     HEAP32[$36 >> 2] = $132 + ($$0$i3$i$i40 << 2);
     if (($117 | 0) == 0) {
      break;
     }
     __ZdlPv($117);
     break;
    }
    if ((___dynamic_cast($39, 224, 488, 0) | 0) == 0) {
     if ((___dynamic_cast($39, 224, 536, 0) | 0) == 0) {
      break;
     }
     $205 = __Znwj(52) | 0;
     __ZN23HOGRegressionClassifierC2ERKS_($205, HEAP32[$37 >> 2] | 0);
     $207 = HEAP32[$4 >> 2] | 0;
     if (($207 | 0) != (HEAP32[$36 >> 2] | 0)) {
      if (($207 | 0) == 0) {
       $212 = 0;
      } else {
       HEAP32[$207 >> 2] = $205;
       $212 = HEAP32[$4 >> 2] | 0;
      }
      HEAP32[$4 >> 2] = $212 + 4;
      break;
     }
     $213 = HEAP32[$this >> 2] | 0;
     $216 = $207 - $213 | 0;
     $217 = $216 >> 2;
     $218 = $217 + 1 | 0;
     if ($218 >>> 0 > 1073741823) {
      label = 67;
      break L18;
     }
     if ($217 >>> 0 < 536870911) {
      $221 = $216 >> 1;
      $223 = $221 >>> 0 < $218 >>> 0 ? $218 : $221;
      if (($223 | 0) == 0) {
       $$0$i3$i$i = 0;
       $228 = 0;
      } else {
       $$0$i2$i$i = $223;
       label = 70;
      }
     } else {
      $$0$i2$i$i = 1073741823;
      label = 70;
     }
     if ((label | 0) == 70) {
      label = 0;
      $$0$i3$i$i = $$0$i2$i$i;
      $228 = __Znwj($$0$i2$i$i << 2) | 0;
     }
     $227 = $228 + ($217 << 2) | 0;
     if (($227 | 0) != 0) {
      HEAP32[$227 >> 2] = $205;
     }
     _memcpy($228 | 0, $213 | 0, $216 | 0) | 0;
     HEAP32[$this >> 2] = $228;
     HEAP32[$4 >> 2] = $228 + ($218 << 2);
     HEAP32[$36 >> 2] = $228 + ($$0$i3$i$i << 2);
     if (($213 | 0) == 0) {
      break;
     }
     __ZdlPv($213);
     break;
    }
    $138 = __Znwj(52) | 0;
    $139 = HEAP32[$37 >> 2] | 0;
    HEAP32[$138 >> 2] = 568;
    HEAP32[$138 + 4 >> 2] = HEAP32[$139 + 4 >> 2];
    HEAPF32[$138 + 8 >> 2] = +HEAPF32[$139 + 8 >> 2];
    HEAPF32[$138 + 12 >> 2] = +HEAPF32[$139 + 12 >> 2];
    HEAPF32[$138 + 16 >> 2] = +HEAPF32[$139 + 16 >> 2];
    HEAP32[$138 + 20 >> 2] = HEAP32[$139 + 20 >> 2];
    $155 = $139 + 24 | 0;
    if ((HEAP32[$155 >> 2] | 0) == 0) {
     HEAP32[$138 + 24 >> 2] = 0;
    } else {
     $158 = _malloc(72) | 0;
     HEAP32[$138 + 24 >> 2] = $158;
     $160 = HEAP32[$155 >> 2] | 0;
     dest = $158 + 0 | 0;
     src = $160 + 0 | 0;
     stop = dest + 72 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     $163 = HEAP32[$158 + 48 >> 2] << 2;
     $164 = _malloc($163) | 0;
     HEAP32[$158 + 60 >> 2] = $164;
     $168 = HEAP32[$158 + 52 >> 2] << 3;
     $169 = _malloc($168) | 0;
     HEAP32[$158 + 56 >> 2] = $169;
     _memcpy($164 | 0, HEAP32[$160 + 60 >> 2] | 0, $163 | 0) | 0;
     _memcpy($169 | 0, HEAP32[$160 + 56 >> 2] | 0, $168 | 0) | 0;
    }
    HEAP32[$138 >> 2] = 320;
    $176 = $138 + 28 | 0;
    $177 = $139 + 28 | 0;
    HEAP32[$176 + 0 >> 2] = HEAP32[$177 + 0 >> 2];
    HEAP32[$176 + 4 >> 2] = HEAP32[$177 + 4 >> 2];
    HEAP32[$176 + 8 >> 2] = HEAP32[$177 + 8 >> 2];
    HEAP32[$176 + 12 >> 2] = HEAP32[$177 + 12 >> 2];
    HEAP32[$176 + 16 >> 2] = HEAP32[$177 + 16 >> 2];
    HEAP32[$176 + 20 >> 2] = HEAP32[$177 + 20 >> 2];
    $178 = HEAP32[$4 >> 2] | 0;
    if (($178 | 0) != (HEAP32[$36 >> 2] | 0)) {
     if (($178 | 0) == 0) {
      $183 = 0;
     } else {
      HEAP32[$178 >> 2] = $138;
      $183 = HEAP32[$4 >> 2] | 0;
     }
     HEAP32[$4 >> 2] = $183 + 4;
     break;
    }
    $184 = HEAP32[$this >> 2] | 0;
    $187 = $178 - $184 | 0;
    $188 = $187 >> 2;
    $189 = $188 + 1 | 0;
    if ($189 >>> 0 > 1073741823) {
     label = 53;
     break L18;
    }
    if ($188 >>> 0 < 536870911) {
     $192 = $187 >> 1;
     $194 = $192 >>> 0 < $189 >>> 0 ? $189 : $192;
     if (($194 | 0) == 0) {
      $$0$i3$i$i13 = 0;
      $199 = 0;
     } else {
      $$0$i2$i$i11 = $194;
      label = 56;
     }
    } else {
     $$0$i2$i$i11 = 1073741823;
     label = 56;
    }
    if ((label | 0) == 56) {
     label = 0;
     $$0$i3$i$i13 = $$0$i2$i$i11;
     $199 = __Znwj($$0$i2$i$i11 << 2) | 0;
    }
    $198 = $199 + ($188 << 2) | 0;
    if (($198 | 0) != 0) {
     HEAP32[$198 >> 2] = $138;
    }
    _memcpy($199 | 0, $184 | 0, $187 | 0) | 0;
    HEAP32[$this >> 2] = $199;
    HEAP32[$4 >> 2] = $199 + ($189 << 2);
    HEAP32[$36 >> 2] = $199 + ($$0$i3$i$i13 << 2);
    if (($184 | 0) != 0) {
     __ZdlPv($184);
    }
   }
  } while (0);
  $i1$045 = $i1$045 + 1 | 0;
  $38 = HEAP32[$right >> 2] | 0;
  if (!($i1$045 >>> 0 < (HEAP32[$32 >> 2] | 0) - $38 >> 2 >>> 0)) {
   label = 76;
   break;
  }
 }
 if ((label | 0) == 19) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 } else if ((label | 0) == 36) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 } else if ((label | 0) == 53) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 } else if ((label | 0) == 67) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 } else if ((label | 0) == 76) {
  STACKTOP = sp;
  return $this | 0;
 }
 return 0;
}
function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$121 = 0, $$122 = 0, $$base16 = 0, $$lcssa = 0, $106 = 0, $118 = 0, $119 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $133 = 0, $134 = 0, $142 = 0, $146 = 0, $147 = 0, $149 = 0, $152 = 0, $155 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $183 = 0, $184 = 0, $192 = 0, $197 = 0, $199 = 0, $200 = 0, $202 = 0, $205 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $218 = 0, $219 = 0, $220 = 0, $235 = 0, $246 = 0, $25 = 0, $252 = 0, $255 = 0, $263 = 0, $264 = 0, $271 = 0, $273 = 0, $276 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $5 = 0, $51 = 0, $6 = 0, $65 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $78 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($base >>> 0 > 36) {
  $5 = ___errno_location() | 0;
  HEAP32[$5 >> 2] = 22;
  $278 = 0;
  $279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;
  return $279 | 0;
 }
 $3 = $f + 4 | 0;
 $4 = $f + 100 | 0;
 do {
  $6 = HEAP32[$3 >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $6 + 1;
   $13 = HEAPU8[$6 >> 0] | 0;
  } else {
   $13 = ___shgetc($f) | 0;
  }
 } while ((_isspace($13) | 0) != 0);
 do {
  if (($13 | 0) == 43 | ($13 | 0) == 45) {
   $17 = (($13 | 0) == 45) << 31 >> 31;
   $18 = HEAP32[$3 >> 2] | 0;
   if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $18 + 1;
    $c$0 = HEAPU8[$18 >> 0] | 0;
    $neg$0 = $17;
    break;
   } else {
    $c$0 = ___shgetc($f) | 0;
    $neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;
   $neg$0 = 0;
  }
 } while (0);
 $25 = ($base | 0) == 0;
 do {
  if (($base & -17 | 0) == 0 & ($c$0 | 0) == 48) {
   $29 = HEAP32[$3 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $29 + 1;
    $37 = HEAPU8[$29 >> 0] | 0;
   } else {
    $37 = ___shgetc($f) | 0;
   }
   if (($37 | 32 | 0) != 120) {
    $$1 = $25 ? 8 : $base;
    $c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3 >> 2] | 0;
   if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $39 + 1;
    $46 = HEAPU8[$39 >> 0] | 0;
   } else {
    $46 = ___shgetc($f) | 0;
   }
   if ((HEAPU8[$46 + 14833 >> 0] | 0) > 15) {
    $51 = (HEAP32[$4 >> 2] | 0) == 0;
    if (!$51) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    }
    if (($pok | 0) == 0) {
     ___shlim($f, 0);
     $278 = 0;
     $279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;
     return $279 | 0;
    }
    if ($51) {
     $278 = 0;
     $279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;
     return $279 | 0;
    }
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    $278 = 0;
    $279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;
    return $279 | 0;
   } else {
    $$122 = 16;
    $c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   if ((HEAPU8[$c$0 + 14833 >> 0] | 0) >>> 0 < $$base16 >>> 0) {
    $$1 = $$base16;
    $c$1 = $c$0;
    label = 32;
   } else {
    if ((HEAP32[$4 >> 2] | 0) != 0) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    }
    ___shlim($f, 0);
    $65 = ___errno_location() | 0;
    HEAP32[$65 >> 2] = 22;
    $278 = 0;
    $279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;
    return $279 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 32) {
  if (($$1 | 0) == 10) {
   $67 = $c$1 + -48 | 0;
   if ($67 >>> 0 < 10) {
    $70 = $67;
    $x$068 = 0;
    while (1) {
     $69 = $x$068 + $70 | 0;
     $71 = HEAP32[$3 >> 2] | 0;
     if ($71 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $71 + 1;
      $c$2$be = HEAPU8[$71 >> 0] | 0;
     } else {
      $c$2$be = ___shgetc($f) | 0;
     }
     $78 = $c$2$be + -48 | 0;
     if (!($78 >>> 0 < 10 & $69 >>> 0 < 429496729)) {
      break;
     }
     $70 = $78;
     $x$068 = $69 * 10 | 0;
    }
    $280 = $69;
    $281 = 0;
    $c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;
    $281 = 0;
    $c$2$lcssa = $c$1;
   }
   $81 = $c$2$lcssa + -48 | 0;
   if ($81 >>> 0 < 10) {
    $83 = $280;
    $84 = $281;
    $88 = $81;
    $c$359 = $c$2$lcssa;
    while (1) {
     $85 = ___muldi3($83 | 0, $84 | 0, 10, 0) | 0;
     $86 = tempRet0;
     $89 = (($88 | 0) < 0) << 31 >> 31;
     $91 = ~$89;
     if ($86 >>> 0 > $91 >>> 0 | ($86 | 0) == ($91 | 0) & $85 >>> 0 > ~$88 >>> 0) {
      $$lcssa = $88;
      $282 = $83;
      $283 = $84;
      $c$3$lcssa = $c$359;
      break;
     }
     $97 = _i64Add($85 | 0, $86 | 0, $88 | 0, $89 | 0) | 0;
     $98 = tempRet0;
     $99 = HEAP32[$3 >> 2] | 0;
     if ($99 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $99 + 1;
      $c$3$be = HEAPU8[$99 >> 0] | 0;
     } else {
      $c$3$be = ___shgetc($f) | 0;
     }
     $106 = $c$3$be + -48 | 0;
     if ($106 >>> 0 < 10 & ($98 >>> 0 < 429496729 | ($98 | 0) == 429496729 & $97 >>> 0 < 2576980378)) {
      $83 = $97;
      $84 = $98;
      $88 = $106;
      $c$359 = $c$3$be;
     } else {
      $$lcssa = $106;
      $282 = $97;
      $283 = $98;
      $c$3$lcssa = $c$3$be;
      break;
     }
    }
    if ($$lcssa >>> 0 > 9) {
     $252 = $283;
     $255 = $282;
    } else {
     $$121 = 10;
     $284 = $282;
     $285 = $283;
     $c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $252 = $281;
    $255 = $280;
   }
  } else {
   $$122 = $$1;
   $c$123 = $c$1;
   label = 47;
  }
 }
 L70 : do {
  if ((label | 0) == 47) {
   if (($$122 + -1 & $$122 | 0) == 0) {
    $126 = HEAP8[15096 + (($$122 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $128 = HEAP8[$c$123 + 14833 >> 0] | 0;
    $129 = $128 & 255;
    if ($129 >>> 0 < $$122 >>> 0) {
     $133 = $129;
     $x$135 = 0;
     do {
      $x$135 = $133 | $x$135 << $126;
      $134 = HEAP32[$3 >> 2] | 0;
      if ($134 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $134 + 1;
       $c$4$be = HEAPU8[$134 >> 0] | 0;
      } else {
       $c$4$be = ___shgetc($f) | 0;
      }
      $142 = HEAP8[$c$4$be + 14833 >> 0] | 0;
      $133 = $142 & 255;
     } while ($133 >>> 0 < $$122 >>> 0 & $x$135 >>> 0 < 134217728);
     $149 = $142;
     $152 = 0;
     $155 = $x$135;
     $c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;
     $152 = 0;
     $155 = 0;
     $c$4$lcssa = $c$123;
    }
    $146 = _bitshift64Lshr(-1, -1, $126 | 0) | 0;
    $147 = tempRet0;
    if (($149 & 255) >>> 0 >= $$122 >>> 0 | ($152 >>> 0 > $147 >>> 0 | ($152 | 0) == ($147 | 0) & $155 >>> 0 > $146 >>> 0)) {
     $$121 = $$122;
     $284 = $155;
     $285 = $152;
     $c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $155;
     $159 = $152;
     $163 = $149;
    }
    while (1) {
     $160 = _bitshift64Shl($158 | 0, $159 | 0, $126 | 0) | 0;
     $161 = tempRet0;
     $164 = $163 & 255 | $160;
     $165 = HEAP32[$3 >> 2] | 0;
     if ($165 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $165 + 1;
      $c$5$be = HEAPU8[$165 >> 0] | 0;
     } else {
      $c$5$be = ___shgetc($f) | 0;
     }
     $163 = HEAP8[$c$5$be + 14833 >> 0] | 0;
     if (($163 & 255) >>> 0 >= $$122 >>> 0 | ($161 >>> 0 > $147 >>> 0 | ($161 | 0) == ($147 | 0) & $164 >>> 0 > $146 >>> 0)) {
      $$121 = $$122;
      $284 = $164;
      $285 = $161;
      $c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;
      $159 = $161;
     }
    }
   }
   $118 = HEAP8[$c$123 + 14833 >> 0] | 0;
   $119 = $118 & 255;
   if ($119 >>> 0 < $$122 >>> 0) {
    $183 = $119;
    $x$253 = 0;
    do {
     $x$253 = $183 + (Math_imul($x$253, $$122) | 0) | 0;
     $184 = HEAP32[$3 >> 2] | 0;
     if ($184 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $184 + 1;
      $c$6$be = HEAPU8[$184 >> 0] | 0;
     } else {
      $c$6$be = ___shgetc($f) | 0;
     }
     $192 = HEAP8[$c$6$be + 14833 >> 0] | 0;
     $183 = $192 & 255;
    } while ($183 >>> 0 < $$122 >>> 0 & $x$253 >>> 0 < 119304647);
    $197 = $192;
    $286 = $x$253;
    $287 = 0;
    $c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;
    $286 = 0;
    $287 = 0;
    $c$6$lcssa = $c$123;
   }
   if (($197 & 255) >>> 0 < $$122 >>> 0) {
    $199 = ___udivdi3(-1, -1, $$122 | 0, 0) | 0;
    $200 = tempRet0;
    $202 = $287;
    $205 = $286;
    $211 = $197;
    $c$744 = $c$6$lcssa;
    while (1) {
     if ($202 >>> 0 > $200 >>> 0 | ($202 | 0) == ($200 | 0) & $205 >>> 0 > $199 >>> 0) {
      $$121 = $$122;
      $284 = $205;
      $285 = $202;
      $c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = ___muldi3($205 | 0, $202 | 0, $$122 | 0, 0) | 0;
     $209 = tempRet0;
     $210 = $211 & 255;
     if ($209 >>> 0 > 4294967295 | ($209 | 0) == -1 & $208 >>> 0 > ~$210 >>> 0) {
      $$121 = $$122;
      $284 = $205;
      $285 = $202;
      $c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = _i64Add($210 | 0, 0, $208 | 0, $209 | 0) | 0;
     $219 = tempRet0;
     $220 = HEAP32[$3 >> 2] | 0;
     if ($220 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $220 + 1;
      $c$7$be = HEAPU8[$220 >> 0] | 0;
     } else {
      $c$7$be = ___shgetc($f) | 0;
     }
     $211 = HEAP8[$c$7$be + 14833 >> 0] | 0;
     if (!(($211 & 255) >>> 0 < $$122 >>> 0)) {
      $$121 = $$122;
      $284 = $218;
      $285 = $219;
      $c$8 = $c$7$be;
      label = 73;
      break;
     } else {
      $202 = $219;
      $205 = $218;
      $c$744 = $c$7$be;
     }
    }
   } else {
    $$121 = $$122;
    $284 = $286;
    $285 = $287;
    $c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while (0);
 if ((label | 0) == 73) {
  if ((HEAPU8[$c$8 + 14833 >> 0] | 0) >>> 0 < $$121 >>> 0) {
   do {
    $235 = HEAP32[$3 >> 2] | 0;
    if ($235 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $235 + 1;
     $c$9$be = HEAPU8[$235 >> 0] | 0;
    } else {
     $c$9$be = ___shgetc($f) | 0;
    }
   } while ((HEAPU8[$c$9$be + 14833 >> 0] | 0) >>> 0 < $$121 >>> 0);
   $246 = ___errno_location() | 0;
   HEAP32[$246 >> 2] = 34;
   $252 = $1;
   $255 = $0;
  } else {
   $252 = $285;
   $255 = $284;
  }
 }
 if ((HEAP32[$4 >> 2] | 0) != 0) {
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
 }
 if (!($252 >>> 0 < $1 >>> 0 | ($252 | 0) == ($1 | 0) & $255 >>> 0 < $0 >>> 0)) {
  if (($0 & 1 | 0) == 0 & 0 == 0 & ($neg$0 | 0) == 0) {
   $263 = ___errno_location() | 0;
   HEAP32[$263 >> 2] = 34;
   $264 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
   $278 = tempRet0;
   $279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;
   return $279 | 0;
  }
  if ($252 >>> 0 > $1 >>> 0 | ($252 | 0) == ($1 | 0) & $255 >>> 0 > $0 >>> 0) {
   $271 = ___errno_location() | 0;
   HEAP32[$271 >> 2] = 34;
   $278 = $1;
   $279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;
   return $279 | 0;
  }
 }
 $273 = (($neg$0 | 0) < 0) << 31 >> 31;
 $276 = _i64Subtract($255 ^ $neg$0 | 0, $252 ^ $273 | 0, $neg$0 | 0, $273 | 0) | 0;
 $278 = tempRet0;
 $279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;
 return $279 | 0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $108 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $154 = 0, $161 = 0, $171 = 0, $181 = 0, $184 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $41 = 0, $44 = 0, $60 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $95 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 28 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 24 | 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $4 = HEAP32[$0 >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy1 >> 2] = 5144;
  HEAP32[$$byval_copy1 + 4 >> 2] = 123;
  HEAP32[$$byval_copy1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy1, 124);
 }
 $10 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $14 = HEAP32[$4 + 8 >> 2] | 0;
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($23);
  ___cxa_throw($23 | 0, 13864, 113);
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0;
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($23);
  ___cxa_throw($23 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$__err >> 2] = 0;
 L10 : do {
  if (($__fmtb | 0) == ($__fmte | 0)) {
   label = 69;
  } else {
   $$0$ph43 = $__fmtb;
   $$pre44 = 0;
   L12 : while (1) {
    $27 = $$pre44;
    while (1) {
     if (($27 | 0) != 0) {
      label = 69;
      break L10;
     }
     $28 = HEAP32[$__b >> 2] | 0;
     if (($28 | 0) == 0) {
      $197 = 1;
      $77 = 0;
     } else {
      $31 = HEAP32[$28 + 12 >> 2] | 0;
      if (($31 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
       $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0;
      } else {
       $$0$i$i$i$i = HEAP32[$31 >> 2] | 0;
      }
      if (($$0$i$i$i$i | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $197 = 1;
       $77 = 0;
      } else {
       $197 = 0;
       $77 = $28;
      }
     }
     $41 = HEAP32[$__e >> 2] | 0;
     do {
      if (($41 | 0) == 0) {
       label = 22;
      } else {
       $44 = HEAP32[$41 + 12 >> 2] | 0;
       if (($44 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) {
        $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 63]($41) | 0;
       } else {
        $$0$i$i1$i$i = HEAP32[$44 >> 2] | 0;
       }
       if (($$0$i$i1$i$i | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        label = 22;
        break;
       } else {
        if ($197) {
         $78 = $41;
         break;
        } else {
         label = 24;
         break L12;
        }
       }
      }
     } while (0);
     if ((label | 0) == 22) {
      label = 0;
      if ($197) {
       label = 24;
       break L12;
      } else {
       $78 = 0;
      }
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 52 >> 2] & 31]($21, HEAP32[$$0$ph43 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
      label = 26;
      break;
     }
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 31]($21, 8192, HEAP32[$$0$ph43 >> 2] | 0) | 0) {
      $$0$pn = $$0$ph43;
      label = 36;
      break;
     }
     $141 = $77 + 12 | 0;
     $142 = HEAP32[$141 >> 2] | 0;
     $143 = $77 + 16 | 0;
     if (($142 | 0) == (HEAP32[$143 >> 2] | 0)) {
      $$0$i$i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 63]($77) | 0;
     } else {
      $$0$i$i16 = HEAP32[$142 >> 2] | 0;
     }
     $154 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 28 >> 2] & 15]($21, $$0$i$i16) | 0;
     if (($154 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 28 >> 2] & 15]($21, HEAP32[$$0$ph43 >> 2] | 0) | 0)) {
      label = 64;
      break;
     }
     HEAP32[$__err >> 2] = 4;
     $27 = 4;
    }
    L44 : do {
     if ((label | 0) == 26) {
      label = 0;
      $60 = $$0$ph43 + 4 | 0;
      if (($60 | 0) == ($__fmte | 0)) {
       label = 27;
       break L12;
      }
      $66 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 52 >> 2] & 31]($21, HEAP32[$60 >> 2] | 0, 0) | 0;
      if ($66 << 24 >> 24 == 48 | $66 << 24 >> 24 == 69) {
       $67 = $$0$ph43 + 8 | 0;
       if (($67 | 0) == ($__fmte | 0)) {
        label = 30;
        break L12;
       }
       $$1 = $67;
       $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 52 >> 2] & 31]($21, HEAP32[$67 >> 2] | 0, 0) | 0;
       $__opt$0 = $66;
      } else {
       $$1 = $60;
       $__cmd$0 = $66;
       $__opt$0 = 0;
      }
      $76 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
      HEAP32[$2 >> 2] = $77;
      HEAP32[$3 >> 2] = $78;
      HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
      HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
      FUNCTION_TABLE_viiiiiiiii[$76 & 3]($1, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0);
      HEAP32[$__b >> 2] = HEAP32[$1 >> 2];
      $$0$ph$be = $$1 + 4 | 0;
     } else if ((label | 0) == 36) {
      while (1) {
       label = 0;
       $$2 = $$0$pn + 4 | 0;
       if (($$2 | 0) == ($__fmte | 0)) {
        $$2$lcssa = $__fmte;
        break;
       }
       if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 31]($21, 8192, HEAP32[$$2 >> 2] | 0) | 0) {
        $$0$pn = $$2;
        label = 36;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i6 = $77;
      $$pre$i3$i$i12 = $78;
      $106 = $78;
      while (1) {
       if (($$pre$i$i$i6 | 0) == 0) {
        $118 = 1;
        $120 = 0;
       } else {
        $95 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0;
        if (($95 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) {
         $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i6) | 0;
        } else {
         $$0$i$i$i$i4 = HEAP32[$95 >> 2] | 0;
        }
        if (($$0$i$i$i$i4 | 0) == -1) {
         HEAP32[$__b >> 2] = 0;
         $118 = 1;
         $120 = 0;
        } else {
         $118 = 0;
         $120 = $$pre$i$i$i6;
        }
       }
       do {
        if (($106 | 0) == 0) {
         $$pre$i3$i$i1246 = $$pre$i3$i$i12;
         label = 51;
        } else {
         $108 = HEAP32[$106 + 12 >> 2] | 0;
         if (($108 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) {
          $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 63]($106) | 0;
         } else {
          $$0$i$i1$i$i10 = HEAP32[$108 >> 2] | 0;
         }
         if (($$0$i$i1$i$i10 | 0) == -1) {
          HEAP32[$__e >> 2] = 0;
          $$pre$i3$i$i1246 = 0;
          label = 51;
          break;
         } else {
          if ($118 ^ ($$pre$i3$i$i12 | 0) == 0) {
           $$pre$i3$i$i1245 = $$pre$i3$i$i12;
           $198 = $$pre$i3$i$i12;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L44;
          }
         }
        }
       } while (0);
       if ((label | 0) == 51) {
        label = 0;
        if ($118) {
         $$0$ph$be = $$2$lcssa;
         break L44;
        } else {
         $$pre$i3$i$i1245 = $$pre$i3$i$i1246;
         $198 = 0;
        }
       }
       $119 = $120 + 12 | 0;
       $121 = HEAP32[$119 >> 2] | 0;
       $122 = $120 + 16 | 0;
       if (($121 | 0) == (HEAP32[$122 >> 2] | 0)) {
        $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$120 >> 2] | 0) + 36 >> 2] & 63]($120) | 0;
       } else {
        $$0$i$i = HEAP32[$121 >> 2] | 0;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 31]($21, 8192, $$0$i$i) | 0)) {
        $$0$ph$be = $$2$lcssa;
        break L44;
       }
       $134 = HEAP32[$119 >> 2] | 0;
       if (($134 | 0) == (HEAP32[$122 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$120 >> 2] | 0) + 40 >> 2] & 63]($120) | 0;
        $$pre$i$i$i6 = $120;
        $$pre$i3$i$i12 = $$pre$i3$i$i1245;
        $106 = $198;
        continue;
       } else {
        HEAP32[$119 >> 2] = $134 + 4;
        $$pre$i$i$i6 = $120;
        $$pre$i3$i$i12 = $$pre$i3$i$i1245;
        $106 = $198;
        continue;
       }
      }
     } else if ((label | 0) == 64) {
      label = 0;
      $161 = HEAP32[$141 >> 2] | 0;
      if (($161 | 0) == (HEAP32[$143 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 40 >> 2] & 63]($77) | 0;
      } else {
       HEAP32[$141 >> 2] = $161 + 4;
      }
      $$0$ph$be = $$0$ph43 + 4 | 0;
     }
    } while (0);
    if (($$0$ph$be | 0) == ($__fmte | 0)) {
     label = 69;
     break L10;
    }
    $$0$ph43 = $$0$ph$be;
    $$pre44 = HEAP32[$__err >> 2] | 0;
   }
   if ((label | 0) == 24) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i21 = $77;
    break;
   } else if ((label | 0) == 27) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i21 = $77;
    break;
   } else if ((label | 0) == 30) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i21 = $77;
    break;
   }
  }
 } while (0);
 if ((label | 0) == 69) {
  $$pre$i$i$i21 = HEAP32[$__b >> 2] | 0;
 }
 if (($$pre$i$i$i21 | 0) == 0) {
  $196 = 0;
  $199 = 1;
 } else {
  $171 = HEAP32[$$pre$i$i$i21 + 12 >> 2] | 0;
  if (($171 | 0) == (HEAP32[$$pre$i$i$i21 + 16 >> 2] | 0)) {
   $$0$i$i$i$i19 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i21 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i21) | 0;
  } else {
   $$0$i$i$i$i19 = HEAP32[$171 >> 2] | 0;
  }
  if (($$0$i$i$i$i19 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $196 = 0;
   $199 = 1;
  } else {
   $196 = $$pre$i$i$i21;
   $199 = 0;
  }
 }
 $181 = HEAP32[$__e >> 2] | 0;
 do {
  if (($181 | 0) == 0) {
   label = 82;
  } else {
   $184 = HEAP32[$181 + 12 >> 2] | 0;
   if (($184 | 0) == (HEAP32[$181 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$181 >> 2] | 0) + 36 >> 2] & 63]($181) | 0;
   } else {
    $$0$i$i1$i$i25 = HEAP32[$184 >> 2] | 0;
   }
   if (($$0$i$i1$i$i25 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 82;
    break;
   }
   if ($199) {
    HEAP32[$agg$result >> 2] = $196;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 82) {
  if (!$199) {
   HEAP32[$agg$result >> 2] = $196;
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $196;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph38 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1140 = 0, $$pre$i2$i$i1141 = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $107 = 0, $108 = 0, $110 = 0, $122 = 0, $123 = 0, $124 = 0, $14 = 0, $140 = 0, $147 = 0, $148 = 0, $149 = 0, $162 = 0, $169 = 0, $188 = 0, $189 = 0, $190 = 0, $2 = 0, $204 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $61 = 0, $67 = 0, $68 = 0, $77 = 0, $78 = 0, $82 = 0, $84 = 0, $90 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 28 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 24 | 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $4 = HEAP32[$0 >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy1 >> 2] = 5152;
  HEAP32[$$byval_copy1 + 4 >> 2] = 123;
  HEAP32[$$byval_copy1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy1, 124);
 }
 $10 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $14 = HEAP32[$4 + 8 >> 2] | 0;
 if (!((HEAP32[$4 + 12 >> 2] | 0) - $14 >> 2 >>> 0 > $10 >>> 0)) {
  $23 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($23);
  ___cxa_throw($23 | 0, 13864, 113);
 }
 $21 = HEAP32[$14 + ($10 << 2) >> 2] | 0;
 if (($21 | 0) == 0) {
  $23 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($23);
  ___cxa_throw($23 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$__err >> 2] = 0;
 L10 : do {
  if (($__fmtb | 0) == ($__fmte | 0)) {
   label = 65;
  } else {
   $26 = $21 + 8 | 0;
   $$0$ph38 = $__fmtb;
   $$pre39 = 0;
   L12 : while (1) {
    $28 = $$pre39;
    while (1) {
     if (($28 | 0) != 0) {
      label = 65;
      break L10;
     }
     $29 = HEAP32[$__b >> 2] | 0;
     if (($29 | 0) == 0) {
      $42 = 0;
     } else {
      if ((HEAP32[$29 + 12 >> 2] | 0) == (HEAP32[$29 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 63]($29) | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $42 = 0;
       } else {
        $42 = $29;
       }
      } else {
       $42 = $29;
      }
     }
     $41 = ($42 | 0) == 0;
     $43 = HEAP32[$__e >> 2] | 0;
     do {
      if (($43 | 0) == 0) {
       label = 19;
      } else {
       if ((HEAP32[$43 + 12 >> 2] | 0) == (HEAP32[$43 + 16 >> 2] | 0)) {
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$43 >> 2] | 0) + 36 >> 2] & 63]($43) | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         label = 19;
         break;
        }
       }
       if ($41) {
        $78 = $43;
       } else {
        label = 20;
        break L12;
       }
      }
     } while (0);
     if ((label | 0) == 19) {
      label = 0;
      if ($41) {
       label = 20;
       break L12;
      } else {
       $78 = 0;
      }
     }
     if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 31]($21, HEAP8[$$0$ph38 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
      label = 22;
      break;
     }
     $82 = HEAP8[$$0$ph38 >> 0] | 0;
     if ($82 << 24 >> 24 > -1) {
      $84 = HEAP32[$26 >> 2] | 0;
      if (!((HEAP16[$84 + ($82 << 24 >> 24 << 1) >> 1] & 8192) == 0)) {
       $$0$pn = $$0$ph38;
       label = 33;
       break;
      }
     }
     $147 = $42 + 12 | 0;
     $148 = HEAP32[$147 >> 2] | 0;
     $149 = $42 + 16 | 0;
     if (($148 | 0) == (HEAP32[$149 >> 2] | 0)) {
      $$0$i$i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 63]($42) | 0;
     } else {
      $$0$i$i16 = HEAPU8[$148 >> 0] | 0;
     }
     $162 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 15]($21, $$0$i$i16 & 255) | 0;
     if ($162 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 15]($21, HEAP8[$$0$ph38 >> 0] | 0) | 0) << 24 >> 24) {
      label = 60;
      break;
     }
     HEAP32[$__err >> 2] = 4;
     $28 = 4;
    }
    L40 : do {
     if ((label | 0) == 22) {
      label = 0;
      $61 = $$0$ph38 + 1 | 0;
      if (($61 | 0) == ($__fmte | 0)) {
       label = 23;
       break L12;
      }
      $67 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 31]($21, HEAP8[$61 >> 0] | 0, 0) | 0;
      if ($67 << 24 >> 24 == 48 | $67 << 24 >> 24 == 69) {
       $68 = $$0$ph38 + 2 | 0;
       if (($68 | 0) == ($__fmte | 0)) {
        label = 26;
        break L12;
       }
       $$1 = $68;
       $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 31]($21, HEAP8[$68 >> 0] | 0, 0) | 0;
       $__opt$0 = $67;
      } else {
       $$1 = $61;
       $__cmd$0 = $67;
       $__opt$0 = 0;
      }
      $77 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
      HEAP32[$2 >> 2] = $42;
      HEAP32[$3 >> 2] = $78;
      HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
      HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
      FUNCTION_TABLE_viiiiiiiii[$77 & 3]($1, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0);
      HEAP32[$__b >> 2] = HEAP32[$1 >> 2];
      $$0$ph$be = $$1 + 1 | 0;
     } else if ((label | 0) == 33) {
      while (1) {
       label = 0;
       $$2 = $$0$pn + 1 | 0;
       if (($$2 | 0) == ($__fmte | 0)) {
        $$2$lcssa = $__fmte;
        break;
       }
       $90 = HEAP8[$$2 >> 0] | 0;
       if (!($90 << 24 >> 24 > -1)) {
        $$2$lcssa = $$2;
        break;
       }
       if ((HEAP16[$84 + ($90 << 24 >> 24 << 1) >> 1] & 8192) == 0) {
        $$2$lcssa = $$2;
        break;
       } else {
        $$0$pn = $$2;
        label = 33;
       }
      }
      $$pre$i$i$i7 = $42;
      $$pre$i2$i$i11 = $78;
      $110 = $78;
      while (1) {
       if (($$pre$i$i$i7 | 0) == 0) {
        $108 = 0;
       } else {
        if ((HEAP32[$$pre$i$i$i7 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i7 + 16 >> 2] | 0)) {
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i7 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i7) | 0) == -1) {
          HEAP32[$__b >> 2] = 0;
          $108 = 0;
         } else {
          $108 = $$pre$i$i$i7;
         }
        } else {
         $108 = $$pre$i$i$i7;
        }
       }
       $107 = ($108 | 0) == 0;
       do {
        if (($110 | 0) == 0) {
         $$pre$i2$i$i1141 = $$pre$i2$i$i11;
         label = 46;
        } else {
         if ((HEAP32[$110 + 12 >> 2] | 0) != (HEAP32[$110 + 16 >> 2] | 0)) {
          if ($107) {
           $$pre$i2$i$i1140 = $$pre$i2$i$i11;
           $204 = $110;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L40;
          }
         }
         if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$110 >> 2] | 0) + 36 >> 2] & 63]($110) | 0) == -1) {
          HEAP32[$__e >> 2] = 0;
          $$pre$i2$i$i1141 = 0;
          label = 46;
          break;
         } else {
          if ($107 ^ ($$pre$i2$i$i11 | 0) == 0) {
           $$pre$i2$i$i1140 = $$pre$i2$i$i11;
           $204 = $$pre$i2$i$i11;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L40;
          }
         }
        }
       } while (0);
       if ((label | 0) == 46) {
        label = 0;
        if ($107) {
         $$0$ph$be = $$2$lcssa;
         break L40;
        } else {
         $$pre$i2$i$i1140 = $$pre$i2$i$i1141;
         $204 = 0;
        }
       }
       $122 = $108 + 12 | 0;
       $123 = HEAP32[$122 >> 2] | 0;
       $124 = $108 + 16 | 0;
       if (($123 | 0) == (HEAP32[$124 >> 2] | 0)) {
        $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$108 >> 2] | 0) + 36 >> 2] & 63]($108) | 0;
       } else {
        $$0$i$i = HEAPU8[$123 >> 0] | 0;
       }
       if (!(($$0$i$i & 255) << 24 >> 24 > -1)) {
        $$0$ph$be = $$2$lcssa;
        break L40;
       }
       if ((HEAP16[(HEAP32[$26 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192) == 0) {
        $$0$ph$be = $$2$lcssa;
        break L40;
       }
       $140 = HEAP32[$122 >> 2] | 0;
       if (($140 | 0) == (HEAP32[$124 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$108 >> 2] | 0) + 40 >> 2] & 63]($108) | 0;
        $$pre$i$i$i7 = $108;
        $$pre$i2$i$i11 = $$pre$i2$i$i1140;
        $110 = $204;
        continue;
       } else {
        HEAP32[$122 >> 2] = $140 + 1;
        $$pre$i$i$i7 = $108;
        $$pre$i2$i$i11 = $$pre$i2$i$i1140;
        $110 = $204;
        continue;
       }
      }
     } else if ((label | 0) == 60) {
      label = 0;
      $169 = HEAP32[$147 >> 2] | 0;
      if (($169 | 0) == (HEAP32[$149 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 40 >> 2] & 63]($42) | 0;
      } else {
       HEAP32[$147 >> 2] = $169 + 1;
      }
      $$0$ph$be = $$0$ph38 + 1 | 0;
     }
    } while (0);
    if (($$0$ph$be | 0) == ($__fmte | 0)) {
     label = 65;
     break L10;
    }
    $$0$ph38 = $$0$ph$be;
    $$pre39 = HEAP32[$__err >> 2] | 0;
   }
   if ((label | 0) == 20) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i20 = $42;
    break;
   } else if ((label | 0) == 23) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i20 = $42;
    break;
   } else if ((label | 0) == 26) {
    HEAP32[$__err >> 2] = 4;
    $$pre$i$i$i20 = $42;
    break;
   }
  }
 } while (0);
 if ((label | 0) == 65) {
  $$pre$i$i$i20 = HEAP32[$__b >> 2] | 0;
 }
 if (($$pre$i$i$i20 | 0) == 0) {
  $189 = 0;
 } else {
  if ((HEAP32[$$pre$i$i$i20 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i20 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i20 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i20) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $189 = 0;
   } else {
    $189 = $$pre$i$i$i20;
   }
  } else {
   $189 = $$pre$i$i$i20;
  }
 }
 $188 = ($189 | 0) == 0;
 $190 = HEAP32[$__e >> 2] | 0;
 do {
  if (($190 | 0) == 0) {
   label = 75;
  } else {
   if ((HEAP32[$190 + 12 >> 2] | 0) == (HEAP32[$190 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$190 >> 2] | 0) + 36 >> 2] & 63]($190) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 75;
     break;
    }
   }
   if ($188) {
    HEAP32[$agg$result >> 2] = $189;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 75) {
  if (!$188) {
   HEAP32[$agg$result >> 2] = $189;
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $189;
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $125 = 0, $128 = 0, $13 = 0, $133 = 0, $137 = 0, $138 = 0, $142 = 0, $144 = 0, $146 = 0, $148 = 0, $153 = 0, $155 = 0, $160 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $171 = 0, $173 = 0, $175 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $7 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0, $__f$033 = 0, $__f$139 = 0, $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $scevgep59 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 1 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sn + 4 | 0;
 $4 = ($__flags & 512 | 0) == 0;
 $5 = $__sym + 1 | 0;
 $6 = $__sym + 8 | 0;
 $7 = $__sym + 4 | 0;
 $8 = ($__fd | 0) > 0;
 $9 = $__grp + 1 | 0;
 $10 = $__grp + 8 | 0;
 $11 = $__grp + 4 | 0;
 $12 = $__ct + 8 | 0;
 $13 = 0 - $__fd | 0;
 $$050 = $__db;
 $__p$049 = 0;
 while (1) {
  switch (HEAP8[$__pat + $__p$049 >> 0] | 0) {
  case 2:
   {
    $38 = HEAP8[$__sym >> 0] | 0;
    $40 = ($38 & 1) == 0;
    if ($40) {
     $45 = ($38 & 255) >>> 1;
    } else {
     $45 = HEAP32[$7 >> 2] | 0;
    }
    if (($45 | 0) == 0 | $4) {
     $$2 = $$050;
    } else {
     if ($40) {
      $51 = $5;
      $52 = ($38 & 255) >>> 1;
     } else {
      $51 = HEAP32[$6 >> 2] | 0;
      $52 = HEAP32[$7 >> 2] | 0;
     }
     $50 = $51 + $52 | 0;
     $53 = HEAP32[$__me >> 2] | 0;
     if (($51 | 0) == ($50 | 0)) {
      $$0$lcssa$i$i17 = $53;
     } else {
      $$01$i$i15 = $53;
      $56 = $51;
      while (1) {
       HEAP8[$$01$i$i15 >> 0] = HEAP8[$56 >> 0] | 0;
       $56 = $56 + 1 | 0;
       $58 = $$01$i$i15 + 1 | 0;
       if (($56 | 0) == ($50 | 0)) {
        $$0$lcssa$i$i17 = $58;
        break;
       } else {
        $$01$i$i15 = $58;
       }
      }
     }
     HEAP32[$__me >> 2] = $$0$lcssa$i$i17;
     $$2 = $$050;
    }
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 32) | 0;
    $23 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $23 + 1;
    HEAP8[$23 >> 0] = $22;
    $$2 = $$050;
    break;
   }
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$050;
    break;
   }
  case 4:
   {
    $60 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$050 + 1 | 0 : $$050;
    L21 : do {
     if ($$$0 >>> 0 < $__de >>> 0) {
      $__d$029 = $$$0;
      while (1) {
       $65 = HEAP8[$__d$029 >> 0] | 0;
       if (!($65 << 24 >> 24 > -1)) {
        $__d$0$lcssa = $__d$029;
        break L21;
       }
       $64 = $__d$029 + 1 | 0;
       if ((HEAP16[(HEAP32[$12 >> 2] | 0) + ($65 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
        $__d$0$lcssa = $__d$029;
        break L21;
       }
       if ($64 >>> 0 < $__de >>> 0) {
        $__d$029 = $64;
       } else {
        $__d$0$lcssa = $64;
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0;
     }
    } while (0);
    $__d$0$lcssa58 = $__d$0$lcssa;
    if ($8) {
     if ($__d$0$lcssa >>> 0 > $$$0 >>> 0) {
      $scevgep59 = $$$0 + (0 - $__d$0$lcssa58) | 0;
      $umax = $scevgep59 >>> 0 < $13 >>> 0 ? $13 : $scevgep59;
      $scevgep6162 = $umax + $__fd | 0;
      $78 = $60;
      $__d$132 = $__d$0$lcssa;
      $__f$033 = $__fd;
      while (1) {
       $75 = $__d$132 + -1 | 0;
       $76 = HEAP8[$75 >> 0] | 0;
       HEAP32[$__me >> 2] = $78 + 1;
       HEAP8[$78 >> 0] = $76;
       $79 = $__f$033 + -1 | 0;
       $81 = ($79 | 0) > 0;
       if (!($75 >>> 0 > $$$0 >>> 0 & $81)) {
        break;
       }
       $78 = HEAP32[$__me >> 2] | 0;
       $__d$132 = $75;
       $__f$033 = $79;
      }
      $scevgep63 = $__d$0$lcssa + $umax | 0;
      if ($81) {
       $__d$1$lcssa74 = $scevgep63;
       $__f$0$lcssa72 = $scevgep6162;
       label = 32;
      } else {
       $89 = 0;
       $__d$1$lcssa73 = $scevgep63;
       $__f$0$lcssa71 = $scevgep6162;
      }
     } else {
      $__d$1$lcssa74 = $__d$0$lcssa;
      $__f$0$lcssa72 = $__fd;
      label = 32;
     }
     if ((label | 0) == 32) {
      label = 0;
      $89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 48) | 0;
      $__d$1$lcssa73 = $__d$1$lcssa74;
      $__f$0$lcssa71 = $__f$0$lcssa72;
     }
     $87 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $87 + 1;
     if (($__f$0$lcssa71 | 0) > 0) {
      $90 = $87;
      $__f$139 = $__f$0$lcssa71;
      while (1) {
       HEAP8[$90 >> 0] = $89;
       $__f$139 = $__f$139 + -1 | 0;
       $93 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $93 + 1;
       if (($__f$139 | 0) <= 0) {
        $$lcssa38 = $93;
        break;
       } else {
        $90 = $93;
       }
      }
     } else {
      $$lcssa38 = $87;
     }
     HEAP8[$$lcssa38 >> 0] = $__dp;
     $__d$2 = $__d$1$lcssa73;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $99 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 48) | 0;
     $100 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $100 + 1;
     HEAP8[$100 >> 0] = $99;
    } else {
     $102 = HEAP8[$__grp >> 0] | 0;
     $104 = ($102 & 1) == 0;
     if ($104) {
      $109 = ($102 & 255) >>> 1;
     } else {
      $109 = HEAP32[$11 >> 2] | 0;
     }
     if (($109 | 0) == 0) {
      $__d$343 = $__d$2;
      $__gl$046 = -1;
      $__ig$045 = 0;
      $__ng$044 = 0;
     } else {
      if ($104) {
       $112 = $9;
      } else {
       $112 = HEAP32[$10 >> 2] | 0;
      }
      $__d$343 = $__d$2;
      $__gl$046 = HEAP8[$112 >> 0] | 0;
      $__ig$045 = 0;
      $__ng$044 = 0;
     }
     while (1) {
      if (($__ng$044 | 0) == ($__gl$046 | 0)) {
       $115 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $115 + 1;
       HEAP8[$115 >> 0] = $__ts;
       $117 = $__ig$045 + 1 | 0;
       $118 = HEAP8[$__grp >> 0] | 0;
       $120 = ($118 & 1) == 0;
       if ($120) {
        $125 = ($118 & 255) >>> 1;
       } else {
        $125 = HEAP32[$11 >> 2] | 0;
       }
       if ($117 >>> 0 < $125 >>> 0) {
        if ($120) {
         $128 = $9;
        } else {
         $128 = HEAP32[$10 >> 2] | 0;
        }
        if ((HEAP8[$128 + $117 >> 0] | 0) == 127) {
         $__gl$1 = -1;
         $__ig$1 = $117;
         $__ng$1 = 0;
        } else {
         if ($120) {
          $133 = $9;
         } else {
          $133 = HEAP32[$10 >> 2] | 0;
         }
         $__gl$1 = HEAP8[$133 + $117 >> 0] | 0;
         $__ig$1 = $117;
         $__ng$1 = 0;
        }
       } else {
        $__gl$1 = $__gl$046;
        $__ig$1 = $117;
        $__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;
       $__ig$1 = $__ig$045;
       $__ng$1 = $__ng$044;
      }
      $__d$343 = $__d$343 + -1 | 0;
      $137 = HEAP8[$__d$343 >> 0] | 0;
      $138 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $138 + 1;
      HEAP8[$138 >> 0] = $137;
      if (($__d$343 | 0) == ($$$0 | 0)) {
       break;
      } else {
       $__gl$046 = $__gl$1;
       $__ig$045 = $__ig$1;
       $__ng$044 = $__ng$1 + 1 | 0;
      }
     }
    }
    $142 = HEAP32[$__me >> 2] | 0;
    if (($60 | 0) == ($142 | 0)) {
     $$2 = $$$0;
    } else {
     $144 = $142 + -1 | 0;
     if ($144 >>> 0 > $60 >>> 0) {
      $$012$i$i = $60;
      $148 = $144;
      do {
       $146 = HEAP8[$$012$i$i >> 0] | 0;
       HEAP8[$$012$i$i >> 0] = HEAP8[$148 >> 0] | 0;
       HEAP8[$148 >> 0] = $146;
       $$012$i$i = $$012$i$i + 1 | 0;
       $148 = $148 + -1 | 0;
      } while ($$012$i$i >>> 0 < $148 >>> 0);
      $$2 = $$$0;
     } else {
      $$2 = $$$0;
     }
    }
    break;
   }
  case 3:
   {
    $25 = HEAP8[$__sn >> 0] | 0;
    $27 = ($25 & 1) == 0;
    if ($27) {
     $32 = ($25 & 255) >>> 1;
    } else {
     $32 = HEAP32[$2 >> 2] | 0;
    }
    if (($32 | 0) == 0) {
     $$2 = $$050;
    } else {
     if ($27) {
      $35 = $0;
     } else {
      $35 = HEAP32[$1 >> 2] | 0;
     }
     $34 = HEAP8[$35 >> 0] | 0;
     $36 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $36 + 1;
     HEAP8[$36 >> 0] = $34;
     $$2 = $$050;
    }
    break;
   }
  default:
   {
    $$2 = $$050;
   }
  }
  $__p$049 = $__p$049 + 1 | 0;
  if (($__p$049 | 0) == 4) {
   break;
  } else {
   $$050 = $$2;
  }
 }
 $153 = HEAP8[$__sn >> 0] | 0;
 $155 = ($153 & 1) == 0;
 if ($155) {
  $160 = ($153 & 255) >>> 1;
 } else {
  $160 = HEAP32[$2 >> 2] | 0;
 }
 if ($160 >>> 0 > 1) {
  if ($155) {
   $$pn = $0;
   $167 = ($153 & 255) >>> 1;
  } else {
   $$pn = HEAP32[$1 >> 2] | 0;
   $167 = HEAP32[$2 >> 2] | 0;
  }
  $165 = $$pn + 1 | 0;
  $166 = $$pn + $167 | 0;
  $168 = HEAP32[$__me >> 2] | 0;
  if (($165 | 0) == ($166 | 0)) {
   $$0$lcssa$i$i = $168;
  } else {
   $$01$i$i = $168;
   $171 = $165;
   while (1) {
    HEAP8[$$01$i$i >> 0] = HEAP8[$171 >> 0] | 0;
    $171 = $171 + 1 | 0;
    $173 = $$01$i$i + 1 | 0;
    if (($171 | 0) == ($166 | 0)) {
     $$0$lcssa$i$i = $173;
     break;
    } else {
     $$01$i$i = $173;
    }
   }
  }
  HEAP32[$__me >> 2] = $$0$lcssa$i$i;
 }
 $175 = $__flags & 176;
 if (($175 | 0) == 16) {
  STACKTOP = sp;
  return;
 } else if (($175 | 0) == 32) {
  HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$__mi >> 2] = $__mb;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $0 = 0, $1 = 0, $100 = 0, $105 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $121 = 0, $124 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $139 = 0, $140 = 0, $142 = 0, $144 = 0, $149 = 0, $151 = 0, $156 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $167 = 0, $169 = 0, $174 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $63 = 0, $7 = 0, $73 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $86$phi = 0, $9 = 0, $90 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0, $__d$353 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, label = 0, sp = 0, $73$looptemp = 0;
 sp = STACKTOP;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $3 = ($__flags & 512 | 0) == 0;
 $4 = $__sym + 4 | 0;
 $5 = $__sym + 8 | 0;
 $6 = ($__fd | 0) > 0;
 $7 = $__grp + 1 | 0;
 $8 = $__grp + 8 | 0;
 $9 = $__grp + 4 | 0;
 $$059 = $__db;
 $__p$058 = 0;
 while (1) {
  switch (HEAP8[$__pat + $__p$058 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$059;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 32) | 0;
    $19 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $19 + 4;
    HEAP32[$19 >> 2] = $18;
    $$2 = $$059;
    break;
   }
  case 4:
   {
    $59 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$059 + 4 | 0 : $$059;
    L7 : do {
     if ($$$0 >>> 0 < $__de >>> 0) {
      $__d$034 = $$$0;
      while (1) {
       $63 = $__d$034 + 4 | 0;
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, HEAP32[$__d$034 >> 2] | 0) | 0)) {
        $__d$0$lcssa = $__d$034;
        break L7;
       }
       if ($63 >>> 0 < $__de >>> 0) {
        $__d$034 = $63;
       } else {
        $__d$0$lcssa = $63;
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0;
     }
    } while (0);
    if ($6) {
     if ($__d$0$lcssa >>> 0 > $$$0 >>> 0) {
      $73 = HEAP32[$__me >> 2] | 0;
      $__d$137 = $__d$0$lcssa;
      $__f$038 = $__fd;
      do {
       $__d$137 = $__d$137 + -4 | 0;
       $73$looptemp = $73;
       $73 = $73 + 4 | 0;
       HEAP32[$73$looptemp >> 2] = HEAP32[$__d$137 >> 2];
       $__f$038 = $__f$038 + -1 | 0;
       $76 = ($__f$038 | 0) > 0;
      } while ($__d$137 >>> 0 > $$$0 >>> 0 & $76);
      HEAP32[$__me >> 2] = $73;
      if ($76) {
       $__d$1$lcssa79 = $__d$137;
       $__f$0$lcssa77 = $__f$038;
       label = 34;
      } else {
       $77 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $77 + 4;
       $$lcssa44 = $77;
       $__d$1$lcssa7880 = $__d$137;
      }
     } else {
      $__d$1$lcssa79 = $__d$0$lcssa;
      $__f$0$lcssa77 = $__fd;
      label = 34;
     }
     if ((label | 0) == 34) {
      label = 0;
      $82 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 48) | 0;
      $84 = HEAP32[$__me >> 2] | 0;
      $85 = $84 + 4 | 0;
      HEAP32[$__me >> 2] = $85;
      if (($__f$0$lcssa77 | 0) > 0) {
       $86 = $84;
       $90 = $85;
       $__f$145 = $__f$0$lcssa77;
       while (1) {
        HEAP32[$86 >> 2] = $82;
        $__f$145 = $__f$145 + -1 | 0;
        if (($__f$145 | 0) <= 0) {
         break;
        } else {
         $86$phi = $90;
         $90 = $90 + 4 | 0;
         $86 = $86$phi;
        }
       }
       HEAP32[$__me >> 2] = $84 + ($__f$0$lcssa77 + 1 << 2);
       $$lcssa44 = $84 + ($__f$0$lcssa77 << 2) | 0;
       $__d$1$lcssa7880 = $__d$1$lcssa79;
      } else {
       $$lcssa44 = $84;
       $__d$1$lcssa7880 = $__d$1$lcssa79;
      }
     }
     HEAP32[$$lcssa44 >> 2] = $__dp;
     $__d$2 = $__d$1$lcssa7880;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $95 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 48) | 0;
     $96 = HEAP32[$__me >> 2] | 0;
     $97 = $96 + 4 | 0;
     HEAP32[$__me >> 2] = $97;
     HEAP32[$96 >> 2] = $95;
     $139 = $97;
    } else {
     $98 = HEAP8[$__grp >> 0] | 0;
     $100 = ($98 & 1) == 0;
     if ($100) {
      $105 = ($98 & 255) >>> 1;
     } else {
      $105 = HEAP32[$9 >> 2] | 0;
     }
     if (($105 | 0) == 0) {
      $__d$353 = $__d$2;
      $__gl$056 = -1;
      $__ig$055 = 0;
      $__ng$054 = 0;
     } else {
      if ($100) {
       $108 = $7;
      } else {
       $108 = HEAP32[$8 >> 2] | 0;
      }
      $__d$353 = $__d$2;
      $__gl$056 = HEAP8[$108 >> 0] | 0;
      $__ig$055 = 0;
      $__ng$054 = 0;
     }
     while (1) {
      $111 = HEAP32[$__me >> 2] | 0;
      if (($__ng$054 | 0) == ($__gl$056 | 0)) {
       $112 = $111 + 4 | 0;
       HEAP32[$__me >> 2] = $112;
       HEAP32[$111 >> 2] = $__ts;
       $113 = $__ig$055 + 1 | 0;
       $114 = HEAP8[$__grp >> 0] | 0;
       $116 = ($114 & 1) == 0;
       if ($116) {
        $121 = ($114 & 255) >>> 1;
       } else {
        $121 = HEAP32[$9 >> 2] | 0;
       }
       if ($113 >>> 0 < $121 >>> 0) {
        if ($116) {
         $124 = $7;
        } else {
         $124 = HEAP32[$8 >> 2] | 0;
        }
        if ((HEAP8[$124 + $113 >> 0] | 0) == 127) {
         $135 = $112;
         $__gl$1 = -1;
         $__ig$1 = $113;
         $__ng$1 = 0;
        } else {
         if ($116) {
          $129 = $7;
         } else {
          $129 = HEAP32[$8 >> 2] | 0;
         }
         $135 = $112;
         $__gl$1 = HEAP8[$129 + $113 >> 0] | 0;
         $__ig$1 = $113;
         $__ng$1 = 0;
        }
       } else {
        $135 = $112;
        $__gl$1 = $__gl$056;
        $__ig$1 = $113;
        $__ng$1 = 0;
       }
      } else {
       $135 = $111;
       $__gl$1 = $__gl$056;
       $__ig$1 = $__ig$055;
       $__ng$1 = $__ng$054;
      }
      $__d$353 = $__d$353 + -4 | 0;
      $133 = HEAP32[$__d$353 >> 2] | 0;
      $134 = $135 + 4 | 0;
      HEAP32[$__me >> 2] = $134;
      HEAP32[$135 >> 2] = $133;
      if (($__d$353 | 0) == ($$$0 | 0)) {
       $139 = $134;
       break;
      } else {
       $__gl$056 = $__gl$1;
       $__ig$055 = $__ig$1;
       $__ng$054 = $__ng$1 + 1 | 0;
      }
     }
    }
    if (($59 | 0) == ($139 | 0)) {
     $$2 = $$$0;
    } else {
     $140 = $139 + -4 | 0;
     if ($140 >>> 0 > $59 >>> 0) {
      $$012$i$i = $59;
      $144 = $140;
      do {
       $142 = HEAP32[$$012$i$i >> 2] | 0;
       HEAP32[$$012$i$i >> 2] = HEAP32[$144 >> 2];
       HEAP32[$144 >> 2] = $142;
       $$012$i$i = $$012$i$i + 4 | 0;
       $144 = $144 + -4 | 0;
      } while ($$012$i$i >>> 0 < $144 >>> 0);
      $$2 = $$$0;
     } else {
      $$2 = $$$0;
     }
    }
    break;
   }
  case 2:
   {
    $34 = HEAP8[$__sym >> 0] | 0;
    $36 = ($34 & 1) == 0;
    if ($36) {
     $41 = ($34 & 255) >>> 1;
    } else {
     $41 = HEAP32[$4 >> 2] | 0;
    }
    if (($41 | 0) == 0 | $3) {
     $$2 = $$059;
    } else {
     if ($36) {
      $47 = $4;
      $48 = ($34 & 255) >>> 1;
     } else {
      $47 = HEAP32[$5 >> 2] | 0;
      $48 = HEAP32[$4 >> 2] | 0;
     }
     $46 = $47 + ($48 << 2) | 0;
     $49 = HEAP32[$__me >> 2] | 0;
     if (($47 | 0) == ($46 | 0)) {
      $$0$lcssa$i$i22 = $49;
     } else {
      $52 = ($47 + ($48 + -1 << 2) + (0 - $47) | 0) >>> 2;
      $$01$i$i19 = $49;
      $54 = $47;
      while (1) {
       HEAP32[$$01$i$i19 >> 2] = HEAP32[$54 >> 2];
       $55 = $54 + 4 | 0;
       if (($55 | 0) == ($46 | 0)) {
        break;
       }
       $$01$i$i19 = $$01$i$i19 + 4 | 0;
       $54 = $55;
      }
      $$0$lcssa$i$i22 = $49 + ($52 + 1 << 2) | 0;
     }
     HEAP32[$__me >> 2] = $$0$lcssa$i$i22;
     $$2 = $$059;
    }
    break;
   }
  case 3:
   {
    $21 = HEAP8[$__sn >> 0] | 0;
    $23 = ($21 & 1) == 0;
    if ($23) {
     $28 = ($21 & 255) >>> 1;
    } else {
     $28 = HEAP32[$0 >> 2] | 0;
    }
    if (($28 | 0) == 0) {
     $$2 = $$059;
    } else {
     if ($23) {
      $31 = $0;
     } else {
      $31 = HEAP32[$1 >> 2] | 0;
     }
     $30 = HEAP32[$31 >> 2] | 0;
     $32 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $32 + 4;
     HEAP32[$32 >> 2] = $30;
     $$2 = $$059;
    }
    break;
   }
  default:
   {
    $$2 = $$059;
   }
  }
  $__p$058 = $__p$058 + 1 | 0;
  if (($__p$058 | 0) == 4) {
   break;
  } else {
   $$059 = $$2;
  }
 }
 $149 = HEAP8[$__sn >> 0] | 0;
 $151 = ($149 & 1) == 0;
 if ($151) {
  $156 = ($149 & 255) >>> 1;
 } else {
  $156 = HEAP32[$0 >> 2] | 0;
 }
 if ($156 >>> 0 > 1) {
  if ($151) {
   $$pn = $0;
   $163 = ($149 & 255) >>> 1;
  } else {
   $$pn = HEAP32[$1 >> 2] | 0;
   $163 = HEAP32[$0 >> 2] | 0;
  }
  $161 = $$pn + 4 | 0;
  $162 = $$pn + ($163 << 2) | 0;
  $164 = HEAP32[$__me >> 2] | 0;
  if (($161 | 0) == ($162 | 0)) {
   $$0$lcssa$i$i = $164;
  } else {
   $167 = ($$pn + ($163 + -1 << 2) + (0 - $161) | 0) >>> 2;
   $$01$i$i = $164;
   $169 = $161;
   while (1) {
    HEAP32[$$01$i$i >> 2] = HEAP32[$169 >> 2];
    $169 = $169 + 4 | 0;
    if (($169 | 0) == ($162 | 0)) {
     break;
    } else {
     $$01$i$i = $$01$i$i + 4 | 0;
    }
   }
   $$0$lcssa$i$i = $164 + ($167 + 1 << 2) | 0;
  }
  HEAP32[$__me >> 2] = $$0$lcssa$i$i;
 }
 $174 = $__flags & 176;
 if (($174 | 0) == 32) {
  HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
  STACKTOP = sp;
  return;
 } else if (($174 | 0) == 16) {
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$__mi >> 2] = $__mb;
  STACKTOP = sp;
  return;
 }
}
function __ZN16StrongClassifier4loadEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var $$0$i2$i$i = 0, $$0$i2$i$i14 = 0, $$0$i2$i$i23 = 0, $$0$i2$i$i5 = 0, $$0$i3$i$i = 0, $$0$i3$i$i16 = 0, $$0$i3$i$i25 = 0, $$0$i3$i$i7 = 0, $1 = 0, $103 = 0, $104 = 0, $107 = 0, $108 = 0, $109 = 0, $112 = 0, $114 = 0, $118 = 0, $119 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $139 = 0, $144 = 0, $145 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $155 = 0, $159 = 0, $160 = 0, $167 = 0, $17 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $57 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $71 = 0, $73 = 0, $77 = 0, $78 = 0, $8 = 0, $83 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $98 = 0, $i$030 = 0, $nElements = 0, $tempAlfa = 0, $tempBeta = 0, $tempType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $nElements = sp + 12 | 0;
 $tempAlfa = sp;
 $tempBeta = sp + 4 | 0;
 $tempType = sp + 8 | 0;
 _fread($this + 12 | 0, 4, 1, $fil | 0) | 0;
 _fread($nElements | 0, 4, 1, $fil | 0) | 0;
 $1 = HEAP32[$nElements >> 2] | 0;
 if (($1 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $3 = $this + 4 | 0;
 $4 = $this + 8 | 0;
 $i$030 = 0;
 L4 : while (1) {
  _fread($tempAlfa | 0, 4, 1, $fil | 0) | 0;
  _fread($tempBeta | 0, 4, 1, $fil | 0) | 0;
  _fread($tempType | 0, 4, 1, $fil | 0) | 0;
  $5 = HEAP32[$tempType >> 2] | 0;
  if (($5 | 0) > 5) {
   $8 = ~~(HEAP32[tempDoublePtr >> 2] = $5, +HEAPF32[tempDoublePtr >> 2]);
   HEAP32[$tempType >> 2] = $8;
   $167 = $8;
  } else {
   $167 = $5;
  }
  do {
   if (($167 | 0) == 3) {
    $124 = __Znwj(52) | 0;
    $125 = $124 + 4 | 0;
    HEAPF32[$124 + 8 >> 2] = 0.0;
    $127 = $124 + 12 | 0;
    HEAPF32[$127 >> 2] = 0.0;
    $128 = $124 + 16 | 0;
    HEAPF32[$128 >> 2] = 0.0;
    $129 = $124 + 24 | 0;
    HEAP32[$124 >> 2] = 360;
    $130 = $124 + 28 | 0;
    HEAP32[$130 + 0 >> 2] = 0;
    HEAP32[$130 + 4 >> 2] = 0;
    HEAP32[$130 + 8 >> 2] = 0;
    HEAP32[$130 + 12 >> 2] = 0;
    HEAP32[$130 + 16 >> 2] = 0;
    HEAP32[$130 + 20 >> 2] = 0;
    HEAP32[$125 >> 2] = 1;
    HEAP32[$129 >> 2] = 0;
    HEAP32[$124 + 20 >> 2] = 3;
    __ZN10Classifier4loadEP8_IO_FILE($124, $fil);
    _fread($130 | 0, 4, 1, $fil | 0) | 0;
    _fread($124 + 32 | 0, 4, 1, $fil | 0) | 0;
    _fread($124 + 36 | 0, 4, 1, $fil | 0) | 0;
    _fread($124 + 40 | 0, 4, 1, $fil | 0) | 0;
    _fread($124 + 44 | 0, 4, 1, $fil | 0) | 0;
    _fread($124 + 48 | 0, 4, 1, $fil | 0) | 0;
    HEAPF32[$127 >> 2] = +HEAPF32[$tempAlfa >> 2];
    HEAPF32[$128 >> 2] = +HEAPF32[$tempBeta >> 2];
    $139 = HEAP32[$3 >> 2] | 0;
    if (($139 | 0) != (HEAP32[$4 >> 2] | 0)) {
     if (($139 | 0) == 0) {
      $144 = 0;
     } else {
      HEAP32[$139 >> 2] = $124;
      $144 = HEAP32[$3 >> 2] | 0;
     }
     HEAP32[$3 >> 2] = $144 + 4;
     break;
    }
    $145 = HEAP32[$this >> 2] | 0;
    $148 = $139 - $145 | 0;
    $149 = $148 >> 2;
    $150 = $149 + 1 | 0;
    if ($150 >>> 0 > 1073741823) {
     label = 50;
     break L4;
    }
    if ($149 >>> 0 < 536870911) {
     $153 = $148 >> 1;
     $155 = $153 >>> 0 < $150 >>> 0 ? $150 : $153;
     if (($155 | 0) == 0) {
      $$0$i3$i$i25 = 0;
      $160 = 0;
     } else {
      $$0$i2$i$i23 = $155;
      label = 53;
     }
    } else {
     $$0$i2$i$i23 = 1073741823;
     label = 53;
    }
    if ((label | 0) == 53) {
     label = 0;
     $$0$i3$i$i25 = $$0$i2$i$i23;
     $160 = __Znwj($$0$i2$i$i23 << 2) | 0;
    }
    $159 = $160 + ($149 << 2) | 0;
    if (($159 | 0) != 0) {
     HEAP32[$159 >> 2] = $124;
    }
    _memcpy($160 | 0, $145 | 0, $148 | 0) | 0;
    HEAP32[$this >> 2] = $160;
    HEAP32[$3 >> 2] = $160 + ($150 << 2);
    HEAP32[$4 >> 2] = $160 + ($$0$i3$i$i25 << 2);
    if (($145 | 0) != 0) {
     __ZdlPv($145);
    }
   } else if (($167 | 0) == 2) {
    $83 = __Znwj(52) | 0;
    $86 = $83 + 12 | 0;
    HEAPF32[$86 >> 2] = 0.0;
    $87 = $83 + 16 | 0;
    HEAPF32[$87 >> 2] = 0.0;
    HEAP32[$83 + 24 >> 2] = 0;
    HEAP32[$83 >> 2] = 320;
    HEAP32[$83 + 4 >> 2] = 0;
    HEAPF32[$83 + 8 >> 2] = 0.0;
    $89 = $83 + 28 | 0;
    $90 = $83 + 20 | 0;
    HEAP32[$89 + 0 >> 2] = 0;
    HEAP32[$89 + 4 >> 2] = 0;
    HEAP32[$89 + 8 >> 2] = 0;
    HEAP32[$89 + 12 >> 2] = 0;
    HEAP32[$89 + 16 >> 2] = 0;
    HEAP32[$89 + 20 >> 2] = 0;
    HEAP32[$90 >> 2] = 2;
    __ZN10Classifier4loadEP8_IO_FILE($83, $fil);
    _fread($89 | 0, 4, 1, $fil | 0) | 0;
    _fread($83 + 32 | 0, 4, 1, $fil | 0) | 0;
    _fread($83 + 36 | 0, 4, 1, $fil | 0) | 0;
    _fread($83 + 40 | 0, 4, 1, $fil | 0) | 0;
    _fread($83 + 44 | 0, 4, 1, $fil | 0) | 0;
    _fread($83 + 48 | 0, 4, 1, $fil | 0) | 0;
    HEAPF32[$86 >> 2] = +HEAPF32[$tempAlfa >> 2];
    HEAPF32[$87 >> 2] = +HEAPF32[$tempBeta >> 2];
    $98 = HEAP32[$3 >> 2] | 0;
    if (($98 | 0) != (HEAP32[$4 >> 2] | 0)) {
     if (($98 | 0) == 0) {
      $103 = 0;
     } else {
      HEAP32[$98 >> 2] = $83;
      $103 = HEAP32[$3 >> 2] | 0;
     }
     HEAP32[$3 >> 2] = $103 + 4;
     break;
    }
    $104 = HEAP32[$this >> 2] | 0;
    $107 = $98 - $104 | 0;
    $108 = $107 >> 2;
    $109 = $108 + 1 | 0;
    if ($109 >>> 0 > 1073741823) {
     label = 37;
     break L4;
    }
    if ($108 >>> 0 < 536870911) {
     $112 = $107 >> 1;
     $114 = $112 >>> 0 < $109 >>> 0 ? $109 : $112;
     if (($114 | 0) == 0) {
      $$0$i3$i$i16 = 0;
      $119 = 0;
     } else {
      $$0$i2$i$i14 = $114;
      label = 40;
     }
    } else {
     $$0$i2$i$i14 = 1073741823;
     label = 40;
    }
    if ((label | 0) == 40) {
     label = 0;
     $$0$i3$i$i16 = $$0$i2$i$i14;
     $119 = __Znwj($$0$i2$i$i14 << 2) | 0;
    }
    $118 = $119 + ($108 << 2) | 0;
    if (($118 | 0) != 0) {
     HEAP32[$118 >> 2] = $83;
    }
    _memcpy($119 | 0, $104 | 0, $107 | 0) | 0;
    HEAP32[$this >> 2] = $119;
    HEAP32[$3 >> 2] = $119 + ($109 << 2);
    HEAP32[$4 >> 2] = $119 + ($$0$i3$i$i16 << 2);
    if (($104 | 0) != 0) {
     __ZdlPv($104);
    }
   } else if (($167 | 0) == 0) {
    $9 = __Znwj(84) | 0;
    __ZN14HaarClassifierC2Eiiiiiiii($9, 0, 0, 0, 0, 0, 0, 0, 1);
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 63]($9, $fil);
    HEAPF32[$9 + 12 >> 2] = +HEAPF32[$tempAlfa >> 2];
    HEAPF32[$9 + 16 >> 2] = +HEAPF32[$tempBeta >> 2];
    $17 = HEAP32[$3 >> 2] | 0;
    if (($17 | 0) != (HEAP32[$4 >> 2] | 0)) {
     if (($17 | 0) == 0) {
      $22 = 0;
     } else {
      HEAP32[$17 >> 2] = $9;
      $22 = HEAP32[$3 >> 2] | 0;
     }
     HEAP32[$3 >> 2] = $22 + 4;
     break;
    }
    $23 = HEAP32[$this >> 2] | 0;
    $26 = $17 - $23 | 0;
    $27 = $26 >> 2;
    $28 = $27 + 1 | 0;
    if ($28 >>> 0 > 1073741823) {
     label = 11;
     break L4;
    }
    if ($27 >>> 0 < 536870911) {
     $31 = $26 >> 1;
     $33 = $31 >>> 0 < $28 >>> 0 ? $28 : $31;
     if (($33 | 0) == 0) {
      $$0$i3$i$i = 0;
      $38 = 0;
     } else {
      $$0$i2$i$i = $33;
      label = 14;
     }
    } else {
     $$0$i2$i$i = 1073741823;
     label = 14;
    }
    if ((label | 0) == 14) {
     label = 0;
     $$0$i3$i$i = $$0$i2$i$i;
     $38 = __Znwj($$0$i2$i$i << 2) | 0;
    }
    $37 = $38 + ($27 << 2) | 0;
    if (($37 | 0) != 0) {
     HEAP32[$37 >> 2] = $9;
    }
    _memcpy($38 | 0, $23 | 0, $26 | 0) | 0;
    HEAP32[$this >> 2] = $38;
    HEAP32[$3 >> 2] = $38 + ($28 << 2);
    HEAP32[$4 >> 2] = $38 + ($$0$i3$i$i << 2);
    if (($23 | 0) != 0) {
     __ZdlPv($23);
    }
   } else if (($167 | 0) == 1) {
    $43 = __Znwj(48) | 0;
    $46 = $43 + 12 | 0;
    HEAPF32[$46 >> 2] = 0.0;
    $47 = $43 + 16 | 0;
    HEAPF32[$47 >> 2] = 0.0;
    HEAP32[$43 + 24 >> 2] = 0;
    HEAP32[$43 >> 2] = 280;
    HEAP32[$43 + 4 >> 2] = 0;
    HEAPF32[$43 + 8 >> 2] = 0.0;
    $49 = $43 + 28 | 0;
    $50 = $43 + 20 | 0;
    HEAP32[$49 + 0 >> 2] = 0;
    HEAP32[$49 + 4 >> 2] = 0;
    HEAP32[$49 + 8 >> 2] = 0;
    HEAP32[$49 + 12 >> 2] = 0;
    HEAP32[$49 + 16 >> 2] = 0;
    HEAP32[$50 >> 2] = 1;
    __ZN10Classifier4loadEP8_IO_FILE($43, $fil);
    _fread($43 + 44 | 0, 4, 1, $fil | 0) | 0;
    _fread($49 | 0, 4, 1, $fil | 0) | 0;
    _fread($43 + 32 | 0, 4, 1, $fil | 0) | 0;
    _fread($43 + 36 | 0, 4, 1, $fil | 0) | 0;
    _fread($43 + 40 | 0, 4, 1, $fil | 0) | 0;
    HEAPF32[$46 >> 2] = +HEAPF32[$tempAlfa >> 2];
    HEAPF32[$47 >> 2] = +HEAPF32[$tempBeta >> 2];
    $57 = HEAP32[$3 >> 2] | 0;
    if (($57 | 0) != (HEAP32[$4 >> 2] | 0)) {
     if (($57 | 0) == 0) {
      $62 = 0;
     } else {
      HEAP32[$57 >> 2] = $43;
      $62 = HEAP32[$3 >> 2] | 0;
     }
     HEAP32[$3 >> 2] = $62 + 4;
     break;
    }
    $63 = HEAP32[$this >> 2] | 0;
    $66 = $57 - $63 | 0;
    $67 = $66 >> 2;
    $68 = $67 + 1 | 0;
    if ($68 >>> 0 > 1073741823) {
     label = 24;
     break L4;
    }
    if ($67 >>> 0 < 536870911) {
     $71 = $66 >> 1;
     $73 = $71 >>> 0 < $68 >>> 0 ? $68 : $71;
     if (($73 | 0) == 0) {
      $$0$i3$i$i7 = 0;
      $78 = 0;
     } else {
      $$0$i2$i$i5 = $73;
      label = 27;
     }
    } else {
     $$0$i2$i$i5 = 1073741823;
     label = 27;
    }
    if ((label | 0) == 27) {
     label = 0;
     $$0$i3$i$i7 = $$0$i2$i$i5;
     $78 = __Znwj($$0$i2$i$i5 << 2) | 0;
    }
    $77 = $78 + ($67 << 2) | 0;
    if (($77 | 0) != 0) {
     HEAP32[$77 >> 2] = $43;
    }
    _memcpy($78 | 0, $63 | 0, $66 | 0) | 0;
    HEAP32[$this >> 2] = $78;
    HEAP32[$3 >> 2] = $78 + ($68 << 2);
    HEAP32[$4 >> 2] = $78 + ($$0$i3$i$i7 << 2);
    if (($63 | 0) != 0) {
     __ZdlPv($63);
    }
   }
  } while (0);
  $i$030 = $i$030 + 1 | 0;
  if (($i$030 | 0) >= ($1 | 0)) {
   label = 59;
   break;
  }
 }
 if ((label | 0) == 11) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 } else if ((label | 0) == 24) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 } else if ((label | 0) == 37) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 } else if ((label | 0) == 50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 } else if ((label | 0) == 59) {
  STACKTOP = sp;
  return;
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$0$lcssa$i$i = 0, $$01$i$i = 0, $$ph = 0, $$ph34 = 0, $$ph35 = 0, $$pre$i$i$i10 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $0 = 0, $1 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $114 = 0, $121 = 0, $124 = 0, $128 = 0, $134 = 0, $135 = 0, $152 = 0, $153 = 0, $154 = 0, $167 = 0, $168 = 0, $171 = 0, $174 = 0, $18 = 0, $184 = 0, $187 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $40 = 0, $50 = 0, $53 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $81 = 0, $87 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 200 | 0;
 $__grouping = sp + 12 | 0;
 $0 = sp + 24 | 0;
 $__buf = sp + 28 | 0;
 $__g = sp + 40 | 0;
 HEAP32[$__grouping + 0 >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $1 = HEAP32[$0 >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$vararg_buffer >> 2] = 5144;
  HEAP32[$vararg_buffer + 4 >> 2] = 123;
  HEAP32[$vararg_buffer + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $vararg_buffer, 124);
 }
 $7 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $11 = HEAP32[$1 + 8 >> 2] | 0;
 if (!((HEAP32[$1 + 12 >> 2] | 0) - $11 >> 2 >>> 0 > $7 >>> 0)) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 $18 = HEAP32[$11 + ($7 << 2) >> 2] | 0;
 if (($18 | 0) == 0) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$18 >> 2] | 0) + 48 >> 2] & 7]($18, 3696, 3722 | 0, $__atoms) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $30 = $__buf + 1 | 0;
  $$pre$phi41Z2D = $30;
  $$pre$phi43Z2D = $__buf + 8 | 0;
  $200 = $30;
 } else {
  $28 = $__buf + 8 | 0;
  $$pre$phi41Z2D = $__buf + 1 | 0;
  $$pre$phi43Z2D = $28;
  $200 = HEAP32[$28 >> 2] | 0;
 }
 $31 = $__buf + 4 | 0;
 $32 = $__atoms + 96 | 0;
 $33 = $__atoms + 100 | 0;
 $34 = $__g;
 $35 = $__atoms + 104 | 0;
 $36 = $__atoms;
 $37 = $__grouping + 4 | 0;
 $$pre$i$i$i10 = HEAP32[$__b >> 2] | 0;
 $124 = $__g;
 $128 = 0;
 $64 = $200;
 $__a$0 = $200;
 L14 : while (1) {
  if (($$pre$i$i$i10 | 0) == 0) {
   $201 = 1;
   $96 = 0;
  } else {
   $40 = HEAP32[$$pre$i$i$i10 + 12 >> 2] | 0;
   if (($40 | 0) == (HEAP32[$$pre$i$i$i10 + 16 >> 2] | 0)) {
    $$0$i$i$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i10 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i10) | 0;
   } else {
    $$0$i$i$i$i8 = HEAP32[$40 >> 2] | 0;
   }
   if (($$0$i$i$i$i8 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $201 = 1;
    $96 = 0;
   } else {
    $201 = 0;
    $96 = $$pre$i$i$i10;
   }
  }
  $50 = HEAP32[$__e >> 2] | 0;
  do {
   if (($50 | 0) == 0) {
    label = 22;
   } else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 63]($50) | 0;
    } else {
     $$0$i$i1$i$i14 = HEAP32[$53 >> 2] | 0;
    }
    if (($$0$i$i1$i$i14 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 22;
     break;
    } else {
     if ($201) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L14;
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($201) {
    $__a$2 = $__a$0;
    break;
   }
  }
  $67 = HEAP8[$__buf >> 0] | 0;
  $69 = ($67 & 1) == 0;
  if ($69) {
   $74 = ($67 & 255) >>> 1;
  } else {
   $74 = HEAP32[$31 >> 2] | 0;
  }
  if (($64 - $__a$0 | 0) == ($74 | 0)) {
   if ($69) {
    $81 = ($67 & 255) >>> 1;
    $94 = ($67 & 255) >>> 1;
   } else {
    $75 = HEAP32[$31 >> 2] | 0;
    $81 = $75;
    $94 = $75;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $81 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $87 = 10;
   } else {
    $87 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $87, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $93 = $$pre$phi41Z2D;
   } else {
    $93 = HEAP32[$$pre$phi43Z2D >> 2] | 0;
   }
   $107 = $93 + $94 | 0;
   $__a$1 = $93;
  } else {
   $107 = $64;
   $__a$1 = $__a$0;
  }
  $97 = HEAP32[$96 + 12 >> 2] | 0;
  if (($97 | 0) == (HEAP32[$96 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$96 >> 2] | 0) + 36 >> 2] & 63]($96) | 0;
  } else {
   $$0$i$i = HEAP32[$97 >> 2] | 0;
  }
  $106 = ($107 | 0) == ($__a$1 | 0);
  do {
   if ($106) {
    $109 = (HEAP32[$32 >> 2] | 0) == ($$0$i$i | 0);
    if (!$109) {
     if ((HEAP32[$33 >> 2] | 0) != ($$0$i$i | 0)) {
      label = 43;
      break;
     }
    }
    HEAP8[$107 >> 0] = $109 ? 43 : 45;
    $$ph = $107 + 1 | 0;
    $$ph34 = $124;
    $$ph35 = 0;
   } else {
    label = 43;
   }
  } while (0);
  do {
   if ((label | 0) == 43) {
    label = 0;
    $114 = HEAP8[$__grouping >> 0] | 0;
    if (($114 & 1) == 0) {
     $121 = ($114 & 255) >>> 1;
    } else {
     $121 = HEAP32[$37 >> 2] | 0;
    }
    if (($121 | 0) != 0 & ($$0$i$i | 0) == 0) {
     if (($124 - $34 | 0) >= 160) {
      $$ph = $107;
      $$ph34 = $124;
      $$ph35 = $128;
      break;
     }
     HEAP32[$124 >> 2] = $128;
     $$ph = $107;
     $$ph34 = $124 + 4 | 0;
     $$ph35 = 0;
     break;
    } else {
     $$01$i$i = $__atoms;
    }
    while (1) {
     if ((HEAP32[$$01$i$i >> 2] | 0) == ($$0$i$i | 0)) {
      $$0$lcssa$i$i = $$01$i$i;
      break;
     }
     $$01$i$i = $$01$i$i + 4 | 0;
     if (($$01$i$i | 0) == ($35 | 0)) {
      $$0$lcssa$i$i = $35;
      break;
     }
    }
    $134 = $$0$lcssa$i$i - $36 | 0;
    $135 = $134 >> 2;
    if (($134 | 0) > 92) {
     $__a$2 = $__a$1;
     break L14;
    }
    if (($134 | 0) < 88) {
     HEAP8[$107 >> 0] = HEAP8[3696 + $135 >> 0] | 0;
     $$ph = $107 + 1 | 0;
     $$ph34 = $124;
     $$ph35 = $128 + 1 | 0;
     break;
    }
    if ($106) {
     $__a$2 = $107;
     break L14;
    }
    if (($107 - $__a$1 | 0) >= 3) {
     $__a$2 = $__a$1;
     break L14;
    }
    if ((HEAP8[$107 + -1 >> 0] | 0) != 48) {
     $__a$2 = $__a$1;
     break L14;
    }
    HEAP8[$107 >> 0] = HEAP8[3696 + $135 >> 0] | 0;
    $$ph = $107 + 1 | 0;
    $$ph34 = $124;
    $$ph35 = 0;
   }
  } while (0);
  $152 = HEAP32[$__b >> 2] | 0;
  $153 = $152 + 12 | 0;
  $154 = HEAP32[$153 >> 2] | 0;
  if (($154 | 0) == (HEAP32[$152 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$152 >> 2] | 0) + 40 >> 2] & 63]($152) | 0;
   $$pre$i$i$i10 = $152;
   $124 = $$ph34;
   $128 = $$ph35;
   $64 = $$ph;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$153 >> 2] = $154 + 4;
   $$pre$i$i$i10 = $152;
   $124 = $$ph34;
   $128 = $$ph35;
   $64 = $$ph;
   $__a$0 = $__a$1;
   continue;
  }
 }
 HEAP8[$__a$2 + 3 >> 0] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $167 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $167;
   ___cxa_guard_release(5048);
  }
 }
 $168 = HEAP32[1260] | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a$2, $168, 3736, $vararg_buffer) | 0) != 1) {
  HEAP32[$__err >> 2] = 4;
 }
 $171 = HEAP32[$__b >> 2] | 0;
 if (($171 | 0) == 0) {
  $199 = 0;
  $202 = 1;
 } else {
  $174 = HEAP32[$171 + 12 >> 2] | 0;
  if (($174 | 0) == (HEAP32[$171 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] & 63]($171) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$174 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $199 = 0;
   $202 = 1;
  } else {
   $199 = $171;
   $202 = 0;
  }
 }
 $184 = HEAP32[$__e >> 2] | 0;
 do {
  if (($184 | 0) == 0) {
   label = 78;
  } else {
   $187 = HEAP32[$184 + 12 >> 2] | 0;
   if (($187 | 0) == (HEAP32[$184 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$184 >> 2] | 0) + 36 >> 2] & 63]($184) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$187 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 78;
    break;
   }
   if ($202) {
    HEAP32[$agg$result >> 2] = $199;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 78) {
  if (!$202) {
   HEAP32[$agg$result >> 2] = $199;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $199;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $113 = 0, $12 = 0, $126 = 0, $140 = 0, $144 = 0, $18 = 0, $2 = 0, $22 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $96 = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__p$i$i$i$i8 = sp;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 112 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 44 | 0;
 $11 = sp + 56 | 0;
 $12 = HEAP32[$__loc >> 2] | 0;
 if ($__intl) {
  if (!((HEAP32[1180] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i8 >> 2] = 4720;
   HEAP32[$__p$i$i$i$i8 + 4 >> 2] = 123;
   HEAP32[$__p$i$i$i$i8 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(4720, $__p$i$i$i$i8, 124);
  }
  $18 = (HEAP32[4724 >> 2] | 0) + -1 | 0;
  $22 = HEAP32[$12 + 8 >> 2] | 0;
  if (!((HEAP32[$12 + 12 >> 2] | 0) - $22 >> 2 >>> 0 > $18 >>> 0)) {
   $31 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw($31 | 0, 13864, 113);
  }
  $29 = HEAP32[$22 + ($18 << 2) >> 2] | 0;
  if (($29 | 0) == 0) {
   $31 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw($31 | 0, 13864, 113);
  }
  $32 = HEAP32[$29 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$32 + 44 >> 2] & 63]($0, $29);
   $35 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $35;
   HEAP8[$__pat + 1 >> 0] = $35 >> 8;
   HEAP8[$__pat + 2 >> 0] = $35 >> 16;
   HEAP8[$__pat + 3 >> 0] = $35 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 32 >> 2] & 63]($1, $29);
   if ((HEAP8[$__sn >> 0] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$32 + 40 >> 2] & 63]($2, $29);
   $48 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $48;
   HEAP8[$__pat + 1 >> 0] = $48 >> 8;
   HEAP8[$__pat + 2 >> 0] = $48 >> 16;
   HEAP8[$__pat + 3 >> 0] = $48 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 28 >> 2] & 63]($3, $29);
   if ((HEAP8[$__sn >> 0] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$3 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 0 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
  }
  $62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 12 >> 2] & 63]($29) | 0;
  HEAP32[$__dp >> 2] = $62;
  $66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 16 >> 2] & 63]($29) | 0;
  HEAP32[$__ts >> 2] = $66;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] & 63]($4, $29);
  if ((HEAP8[$__grp >> 0] & 1) == 0) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 24 >> 2] & 63]($5, $29);
  if ((HEAP8[$__sym >> 0] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$5 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$5 + 0 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 63]($29) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } else {
  if (!((HEAP32[1164] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i8 >> 2] = 4656;
   HEAP32[$__p$i$i$i$i8 + 4 >> 2] = 123;
   HEAP32[$__p$i$i$i$i8 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(4656, $__p$i$i$i$i8, 124);
  }
  $96 = (HEAP32[4660 >> 2] | 0) + -1 | 0;
  $100 = HEAP32[$12 + 8 >> 2] | 0;
  if (!((HEAP32[$12 + 12 >> 2] | 0) - $100 >> 2 >>> 0 > $96 >>> 0)) {
   $109 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($109);
   ___cxa_throw($109 | 0, 13864, 113);
  }
  $107 = HEAP32[$100 + ($96 << 2) >> 2] | 0;
  if (($107 | 0) == 0) {
   $109 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($109);
   ___cxa_throw($109 | 0, 13864, 113);
  }
  $110 = HEAP32[$107 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$110 + 44 >> 2] & 63]($6, $107);
   $113 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $113;
   HEAP8[$__pat + 1 >> 0] = $113 >> 8;
   HEAP8[$__pat + 2 >> 0] = $113 >> 16;
   HEAP8[$__pat + 3 >> 0] = $113 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$107 >> 2] | 0) + 32 >> 2] & 63]($7, $107);
   if ((HEAP8[$__sn >> 0] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 0 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   HEAP32[$7 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$110 + 40 >> 2] & 63]($8, $107);
   $126 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $126;
   HEAP8[$__pat + 1 >> 0] = $126 >> 8;
   HEAP8[$__pat + 2 >> 0] = $126 >> 16;
   HEAP8[$__pat + 3 >> 0] = $126 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$107 >> 2] | 0) + 28 >> 2] & 63]($9, $107);
   if ((HEAP8[$__sn >> 0] & 1) == 0) {
    HEAP32[$__sn + 4 >> 2] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$9 + 0 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$9 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  }
  $140 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 12 >> 2] & 63]($107) | 0;
  HEAP32[$__dp >> 2] = $140;
  $144 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 16 >> 2] & 63]($107) | 0;
  HEAP32[$__ts >> 2] = $144;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$107 >> 2] | 0) + 20 >> 2] & 63]($10, $107);
  if ((HEAP8[$__grp >> 0] & 1) == 0) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$10 + 0 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$107 >> 2] | 0) + 24 >> 2] & 63]($11, $107);
  if ((HEAP8[$__sym >> 0] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$11 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  HEAP32[$11 + 0 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 36 >> 2] & 63]($107) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $113 = 0, $12 = 0, $126 = 0, $140 = 0, $144 = 0, $18 = 0, $2 = 0, $22 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $62 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $96 = 0, $__p$i$i$i$i10 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__p$i$i$i$i10 = sp;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 112 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 44 | 0;
 $11 = sp + 56 | 0;
 $12 = HEAP32[$__loc >> 2] | 0;
 if ($__intl) {
  if (!((HEAP32[1148] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i10 >> 2] = 4592;
   HEAP32[$__p$i$i$i$i10 + 4 >> 2] = 123;
   HEAP32[$__p$i$i$i$i10 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(4592, $__p$i$i$i$i10, 124);
  }
  $18 = (HEAP32[4596 >> 2] | 0) + -1 | 0;
  $22 = HEAP32[$12 + 8 >> 2] | 0;
  if (!((HEAP32[$12 + 12 >> 2] | 0) - $22 >> 2 >>> 0 > $18 >>> 0)) {
   $31 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw($31 | 0, 13864, 113);
  }
  $29 = HEAP32[$22 + ($18 << 2) >> 2] | 0;
  if (($29 | 0) == 0) {
   $31 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw($31 | 0, 13864, 113);
  }
  $32 = HEAP32[$29 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$32 + 44 >> 2] & 63]($0, $29);
   $35 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $35;
   HEAP8[$__pat + 1 >> 0] = $35 >> 8;
   HEAP8[$__pat + 2 >> 0] = $35 >> 16;
   HEAP8[$__pat + 3 >> 0] = $35 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 32 >> 2] & 63]($1, $29);
   if ((HEAP8[$__sn >> 0] & 1) == 0) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$32 + 40 >> 2] & 63]($2, $29);
   $48 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $48;
   HEAP8[$__pat + 1 >> 0] = $48 >> 8;
   HEAP8[$__pat + 2 >> 0] = $48 >> 16;
   HEAP8[$__pat + 3 >> 0] = $48 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 28 >> 2] & 63]($3, $29);
   if ((HEAP8[$__sn >> 0] & 1) == 0) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$3 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 0 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  }
  $62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 12 >> 2] & 63]($29) | 0;
  HEAP8[$__dp >> 0] = $62;
  $66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 16 >> 2] & 63]($29) | 0;
  HEAP8[$__ts >> 0] = $66;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] & 63]($4, $29);
  if ((HEAP8[$__grp >> 0] & 1) == 0) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$29 >> 2] | 0) + 24 >> 2] & 63]($5, $29);
  if ((HEAP8[$__sym >> 0] & 1) == 0) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$5 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$5 + 0 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 63]($29) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } else {
  if (!((HEAP32[1132] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i10 >> 2] = 4528;
   HEAP32[$__p$i$i$i$i10 + 4 >> 2] = 123;
   HEAP32[$__p$i$i$i$i10 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(4528, $__p$i$i$i$i10, 124);
  }
  $96 = (HEAP32[4532 >> 2] | 0) + -1 | 0;
  $100 = HEAP32[$12 + 8 >> 2] | 0;
  if (!((HEAP32[$12 + 12 >> 2] | 0) - $100 >> 2 >>> 0 > $96 >>> 0)) {
   $109 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($109);
   ___cxa_throw($109 | 0, 13864, 113);
  }
  $107 = HEAP32[$100 + ($96 << 2) >> 2] | 0;
  if (($107 | 0) == 0) {
   $109 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($109);
   ___cxa_throw($109 | 0, 13864, 113);
  }
  $110 = HEAP32[$107 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$110 + 44 >> 2] & 63]($6, $107);
   $113 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $113;
   HEAP8[$__pat + 1 >> 0] = $113 >> 8;
   HEAP8[$__pat + 2 >> 0] = $113 >> 16;
   HEAP8[$__pat + 3 >> 0] = $113 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$107 >> 2] | 0) + 32 >> 2] & 63]($7, $107);
   if ((HEAP8[$__sn >> 0] & 1) == 0) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 0 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   HEAP32[$7 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$110 + 40 >> 2] & 63]($8, $107);
   $126 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $126;
   HEAP8[$__pat + 1 >> 0] = $126 >> 8;
   HEAP8[$__pat + 2 >> 0] = $126 >> 16;
   HEAP8[$__pat + 3 >> 0] = $126 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$107 >> 2] | 0) + 28 >> 2] & 63]($9, $107);
   if ((HEAP8[$__sn >> 0] & 1) == 0) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$9 + 0 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$9 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  }
  $140 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 12 >> 2] & 63]($107) | 0;
  HEAP8[$__dp >> 0] = $140;
  $144 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 16 >> 2] & 63]($107) | 0;
  HEAP8[$__ts >> 0] = $144;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$107 >> 2] | 0) + 20 >> 2] & 63]($10, $107);
  if ((HEAP8[$__grp >> 0] & 1) == 0) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$10 + 0 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$107 >> 2] | 0) + 24 >> 2] & 63]($11, $107);
  if ((HEAP8[$__sym >> 0] & 1) == 0) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$11 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  HEAP32[$11 + 0 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 36 >> 2] & 63]($107) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $101 = 0, $104 = 0, $108 = 0, $109 = 0, $115 = 0, $127 = 0, $128 = 0, $129 = 0, $137 = 0, $138 = 0, $14 = 0, $144 = 0, $159 = 0, $160 = 0, $166 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $41 = 0, $6 = 0, $65 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $87 = 0, $95 = 0, $98 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $6 = $info + 28 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$6 >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if (($this | 0) == (HEAP32[$info >> 2] | 0)) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) {
     STACKTOP = sp;
     return;
    }
    $24 = HEAP32[$this + 12 >> 2] | 0;
    $25 = $this + ($24 << 3) + 16 | 0;
    L19 : do {
     if (($24 | 0) > 0) {
      $28 = $info + 52 | 0;
      $29 = $info + 53 | 0;
      $30 = $info + 54 | 0;
      $31 = $this + 8 | 0;
      $32 = $info + 24 | 0;
      $does_dst_type_point_to_our_static_type$0$off019 = 0;
      $is_dst_type_derived_from_static_type$0$off021 = 0;
      $p$020 = $this + 16 | 0;
      L21 : while (1) {
       HEAP8[$28 >> 0] = 0;
       HEAP8[$29 >> 0] = 0;
       $34 = HEAP32[$p$020 + 4 >> 2] | 0;
       $35 = $34 >> 8;
       if (($34 & 1 | 0) == 0) {
        $offset_to_base$0$i13 = $35;
       } else {
        $offset_to_base$0$i13 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $35 >> 2] | 0;
       }
       $41 = HEAP32[$p$020 >> 2] | 0;
       FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$41 >> 2] | 0) + 20 >> 2] & 15]($41, $info, $current_ptr, $current_ptr + $offset_to_base$0$i13 | 0, 2 - ($34 >>> 1 & 1) | 0, $use_strcmp);
       if ((HEAP8[$30 >> 0] | 0) != 0) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;
        $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       do {
        if ((HEAP8[$29 >> 0] | 0) == 0) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;
         $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         if ((HEAP8[$28 >> 0] | 0) == 0) {
          if ((HEAP32[$31 >> 2] & 1 | 0) == 0) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;
           $is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;
           $is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         if ((HEAP32[$32 >> 2] | 0) == 1) {
          label = 27;
          break L19;
         }
         if ((HEAP32[$31 >> 2] & 2 | 0) == 0) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;
          $is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while (0);
       $p$020 = $p$020 + 8 | 0;
       if (!($p$020 >>> 0 < $25 >>> 0)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;
        $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       } else {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;
        $is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while (0);
    if ((label | 0) == 23) {
     HEAP32[$14 >> 2] = $current_ptr;
     $65 = $info + 40 | 0;
     HEAP32[$65 >> 2] = (HEAP32[$65 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
      if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
       HEAP8[$info + 54 >> 0] = 1;
       if ($is_dst_type_derived_from_static_type$2$off030) {
        label = 27;
       } else {
        label = 28;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
      label = 26;
     }
    }
    if ((label | 0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label | 0) == 27) {
     HEAP32[$20 >> 2] = 3;
     STACKTOP = sp;
     return;
    } else if ((label | 0) == 28) {
     HEAP32[$20 >> 2] = 4;
     STACKTOP = sp;
     return;
    }
   }
  }
  if (($path_below | 0) != 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$info + 32 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 $76 = HEAP32[$this + 12 >> 2] | 0;
 $77 = $this + ($76 << 3) + 16 | 0;
 $79 = HEAP32[$this + 20 >> 2] | 0;
 $80 = $79 >> 8;
 if (($79 & 1 | 0) == 0) {
  $offset_to_base$0$i14 = $80;
 } else {
  $offset_to_base$0$i14 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $80 >> 2] | 0;
 }
 $87 = HEAP32[$this + 16 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$87 >> 2] | 0) + 24 >> 2] & 3]($87, $info, $current_ptr + $offset_to_base$0$i14 | 0, ($79 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 $95 = $this + 24 | 0;
 if (($76 | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 $98 = HEAP32[$this + 8 >> 2] | 0;
 if (($98 & 2 | 0) == 0) {
  $101 = $info + 36 | 0;
  if ((HEAP32[$101 >> 2] | 0) != 1) {
   if (($98 & 1 | 0) == 0) {
    $129 = $info + 54 | 0;
    $p2$2 = $95;
    while (1) {
     if ((HEAP8[$129 >> 0] | 0) != 0) {
      label = 53;
      break;
     }
     if ((HEAP32[$101 >> 2] | 0) == 1) {
      label = 53;
      break;
     }
     $159 = HEAP32[$p2$2 + 4 >> 2] | 0;
     $160 = $159 >> 8;
     if (($159 & 1 | 0) == 0) {
      $offset_to_base$0$i = $160;
     } else {
      $offset_to_base$0$i = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $160 >> 2] | 0;
     }
     $166 = HEAP32[$p2$2 >> 2] | 0;
     FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$166 >> 2] | 0) + 24 >> 2] & 3]($166, $info, $current_ptr + $offset_to_base$0$i | 0, ($159 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
     $p2$2 = $p2$2 + 8 | 0;
     if (!($p2$2 >>> 0 < $77 >>> 0)) {
      label = 53;
      break;
     }
    }
    if ((label | 0) == 53) {
     STACKTOP = sp;
     return;
    }
   }
   $127 = $info + 24 | 0;
   $128 = $info + 54 | 0;
   $p2$1 = $95;
   while (1) {
    if ((HEAP8[$128 >> 0] | 0) != 0) {
     label = 53;
     break;
    }
    if ((HEAP32[$101 >> 2] | 0) == 1) {
     if ((HEAP32[$127 >> 2] | 0) == 1) {
      label = 53;
      break;
     }
    }
    $137 = HEAP32[$p2$1 + 4 >> 2] | 0;
    $138 = $137 >> 8;
    if (($137 & 1 | 0) == 0) {
     $offset_to_base$0$i9 = $138;
    } else {
     $offset_to_base$0$i9 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $138 >> 2] | 0;
    }
    $144 = HEAP32[$p2$1 >> 2] | 0;
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$144 >> 2] | 0) + 24 >> 2] & 3]($144, $info, $current_ptr + $offset_to_base$0$i9 | 0, ($137 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
    $p2$1 = $p2$1 + 8 | 0;
    if (!($p2$1 >>> 0 < $77 >>> 0)) {
     label = 53;
     break;
    }
   }
   if ((label | 0) == 53) {
    STACKTOP = sp;
    return;
   }
  }
 }
 $104 = $info + 54 | 0;
 $p2$0 = $95;
 while (1) {
  if ((HEAP8[$104 >> 0] | 0) != 0) {
   label = 53;
   break;
  }
  $108 = HEAP32[$p2$0 + 4 >> 2] | 0;
  $109 = $108 >> 8;
  if (($108 & 1 | 0) == 0) {
   $offset_to_base$0$i11 = $109;
  } else {
   $offset_to_base$0$i11 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $109 >> 2] | 0;
  }
  $115 = HEAP32[$p2$0 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$115 >> 2] | 0) + 24 >> 2] & 3]($115, $info, $current_ptr + $offset_to_base$0$i11 | 0, ($108 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
  $p2$0 = $p2$0 + 8 | 0;
  if (!($p2$0 >>> 0 < $77 >>> 0)) {
   label = 53;
   break;
  }
 }
 if ((label | 0) == 53) {
  STACKTOP = sp;
  return;
 }
}
function __ZN19HistogramClassifier8responseERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $$0$i2$i$i = 0, $$0$i2$i$i13 = 0, $$0$i3$i$i = 0, $$0$i3$i$i15 = 0, $101 = 0, $102 = 0, $103 = 0, $108 = 0, $125 = 0.0, $13 = 0, $142 = 0.0, $150 = 0.0, $171 = 0.0, $179 = 0.0, $18 = 0, $195 = 0.0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $23 = 0, $25 = 0, $30 = 0.0, $32 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $57 = 0, $59 = 0.0, $6 = 0, $64 = 0.0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $91 = 0, $93 = 0.0, $97 = 0, $99 = 0, $centralMom32$0$lcssa = 0.0, $centralMom32$035 = 0.0, $centralMom42$0$lcssa = 0.0, $centralMom42$051 = 0.0, $histogramSum2$082 = 0.0, $histogramSum2$1100 = 0.0, $histogramSum2$2 = 0.0, $i$081 = 0, $i1$0101 = 0, $i10$058 = 0, $i11$052 = 0, $i2$066 = 0, $i3$022 = 0, $i4$031 = 0, $i5$025 = 0, $i6$047 = 0, $i7$042 = 0, $i8$036 = 0, $i9$063 = 0, $mean2$021 = 0.0, $mean2$130 = 0.0, $mean2$246 = 0.0, $mean2$362 = 0.0, $phitmp106 = 0.0, $phitmp109 = 0.0, $res2$0 = 0, $var2$024 = 0.0, $var2$1$lcssa144 = 0.0, $var2$141 = 0.0, $var2$2$lcssa146 = 0.0, $var2$257 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ~~(+($startX | 0) + +(HEAP32[$this + 36 >> 2] | 0) * $scale);
 $13 = ~~(+($startY | 0) + +(HEAP32[$this + 40 >> 2] | 0) * $scale);
 $18 = ~~(+(HEAP32[$this + 44 >> 2] | 0) * $scale);
 $23 = ~~(+(HEAP32[$this + 48 >> 2] | 0) * $scale);
 $25 = HEAP32[$this + 28 >> 2] | 0;
 L1 : do {
  if (($25 | 0) == 0) {
   if (($18 | 0) > 0) {
    $66 = 0;
    $67 = 0;
    $72 = 0;
    $histogramSum2$1100 = 0.0;
    $i1$0101 = 0;
    while (1) {
     $64 = +(__ZNK11SimpleImage12getRegionSumEiiii($img, $i1$0101 + $6 | 0, $13, 1, $23) | 0);
     if (($66 | 0) == ($67 | 0)) {
      $73 = $66 - $72 | 0;
      $74 = $73 >> 2;
      $75 = $74 + 1 | 0;
      if ($75 >>> 0 > 1073741823) {
       break;
      }
      if ($74 >>> 0 < 536870911) {
       $78 = $73 >> 1;
       $80 = $78 >>> 0 < $75 >>> 0 ? $75 : $78;
       if (($80 | 0) == 0) {
        $$0$i3$i$i15 = 0;
        $85 = 0;
       } else {
        $$0$i2$i$i13 = $80;
        label = 26;
       }
      } else {
       $$0$i2$i$i13 = 1073741823;
       label = 26;
      }
      if ((label | 0) == 26) {
       label = 0;
       $$0$i3$i$i15 = $$0$i2$i$i13;
       $85 = __Znwj($$0$i2$i$i13 << 2) | 0;
      }
      $84 = $85 + ($74 << 2) | 0;
      $86 = $85 + ($$0$i3$i$i15 << 2) | 0;
      if (($84 | 0) != 0) {
       HEAPF32[$84 >> 2] = $64;
      }
      $88 = $85 + ($75 << 2) | 0;
      _memcpy($85 | 0, $72 | 0, $73 | 0) | 0;
      if (($72 | 0) == 0) {
       $199 = $86;
       $200 = $88;
       $91 = $85;
      } else {
       __ZdlPv($72);
       $199 = $86;
       $200 = $88;
       $91 = $85;
      }
     } else {
      if (($66 | 0) != 0) {
       HEAPF32[$66 >> 2] = $64;
      }
      $199 = $67;
      $200 = $66 + 4 | 0;
      $91 = $72;
     }
     $93 = $histogramSum2$1100 + +HEAPF32[$91 + ($i1$0101 << 2) >> 2];
     $i1$0101 = $i1$0101 + 1 | 0;
     if (($i1$0101 | 0) >= ($18 | 0)) {
      $97 = $200;
      $99 = $91;
      $histogramSum2$2 = $93;
      break L1;
     } else {
      $66 = $200;
      $67 = $199;
      $72 = $91;
      $histogramSum2$1100 = $93;
     }
    }
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
   } else {
    $97 = 0;
    $99 = 0;
    $histogramSum2$2 = 0.0;
   }
  } else if (($25 | 0) == 1) {
   if (($23 | 0) > 0) {
    $32 = 0;
    $33 = 0;
    $38 = 0;
    $histogramSum2$082 = 0.0;
    $i$081 = 0;
    while (1) {
     $30 = +(__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $i$081 + $13 | 0, $18, 1) | 0);
     if (($32 | 0) == ($33 | 0)) {
      $39 = $32 - $38 | 0;
      $40 = $39 >> 2;
      $41 = $40 + 1 | 0;
      if ($41 >>> 0 > 1073741823) {
       break;
      }
      if ($40 >>> 0 < 536870911) {
       $44 = $39 >> 1;
       $46 = $44 >>> 0 < $41 >>> 0 ? $41 : $44;
       if (($46 | 0) == 0) {
        $$0$i3$i$i = 0;
        $51 = 0;
       } else {
        $$0$i2$i$i = $46;
        label = 12;
       }
      } else {
       $$0$i2$i$i = 1073741823;
       label = 12;
      }
      if ((label | 0) == 12) {
       label = 0;
       $$0$i3$i$i = $$0$i2$i$i;
       $51 = __Znwj($$0$i2$i$i << 2) | 0;
      }
      $50 = $51 + ($40 << 2) | 0;
      $52 = $51 + ($$0$i3$i$i << 2) | 0;
      if (($50 | 0) != 0) {
       HEAPF32[$50 >> 2] = $30;
      }
      $54 = $51 + ($41 << 2) | 0;
      _memcpy($51 | 0, $38 | 0, $39 | 0) | 0;
      if (($38 | 0) == 0) {
       $197 = $52;
       $198 = $54;
       $57 = $51;
      } else {
       __ZdlPv($38);
       $197 = $52;
       $198 = $54;
       $57 = $51;
      }
     } else {
      if (($32 | 0) != 0) {
       HEAPF32[$32 >> 2] = $30;
      }
      $197 = $33;
      $198 = $32 + 4 | 0;
      $57 = $38;
     }
     $59 = $histogramSum2$082 + +HEAPF32[$57 + ($i$081 << 2) >> 2];
     $i$081 = $i$081 + 1 | 0;
     if (($i$081 | 0) >= ($23 | 0)) {
      $97 = $198;
      $99 = $57;
      $histogramSum2$2 = $59;
      break L1;
     } else {
      $32 = $198;
      $33 = $197;
      $38 = $57;
      $histogramSum2$082 = $59;
     }
    }
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
   } else {
    $97 = 0;
    $99 = 0;
    $histogramSum2$2 = 0.0;
   }
  } else {
   $97 = 0;
   $99 = 0;
   $histogramSum2$2 = 0.0;
  }
 } while (0);
 $101 = $97 - $99 >> 2;
 $102 = ($101 | 0) == 0;
 if (!$102) {
  $i2$066 = 0;
  do {
   $103 = $99 + ($i2$066 << 2) | 0;
   HEAPF32[$103 >> 2] = +HEAPF32[$103 >> 2] / $histogramSum2$2;
   $i2$066 = $i2$066 + 1 | 0;
  } while (($i2$066 | 0) != ($101 | 0));
 }
 $108 = HEAP32[$this + 32 >> 2] | 0;
 if (($108 | 0) == 1) {
  if ($102) {
   $res2$0 = 0;
  } else {
   $i4$031 = 0;
   $mean2$130 = 0.0;
   do {
    $mean2$130 = $mean2$130 + +($i4$031 | 0) * +HEAPF32[$99 + ($i4$031 << 2) >> 2] / $scale;
    $i4$031 = $i4$031 + 1 | 0;
   } while (($i4$031 | 0) != ($101 | 0));
   if ($102) {
    $res2$0 = 0;
   } else {
    $i5$025 = 0;
    $var2$024 = 0.0;
    do {
     $125 = +($i5$025 | 0) / $scale - $mean2$130;
     $var2$024 = $var2$024 + +HEAPF32[$99 + ($i5$025 << 2) >> 2] * $125 * $125;
     $i5$025 = $i5$025 + 1 | 0;
    } while (($i5$025 | 0) != ($101 | 0));
    $res2$0 = ~~($var2$024 * 1.0e3);
   }
  }
 } else if (($108 | 0) == 0) {
  if ($102) {
   $res2$0 = 0;
  } else {
   $i3$022 = 0;
   $mean2$021 = 0.0;
   do {
    $mean2$021 = $mean2$021 + +($i3$022 | 0) * +HEAPF32[$99 + ($i3$022 << 2) >> 2] / $scale;
    $i3$022 = $i3$022 + 1 | 0;
   } while (($i3$022 | 0) != ($101 | 0));
   $res2$0 = ~~($mean2$021 * 1.0e3);
  }
 } else if (($108 | 0) == 3) {
  if ($102) {
   $centralMom32$0$lcssa = 0.0;
   $var2$1$lcssa144 = 0.0;
  } else {
   $i6$047 = 0;
   $mean2$246 = 0.0;
   do {
    $mean2$246 = $mean2$246 + +($i6$047 | 0) * +HEAPF32[$99 + ($i6$047 << 2) >> 2] / $scale;
    $i6$047 = $i6$047 + 1 | 0;
   } while (($i6$047 | 0) != ($101 | 0));
   if ($102) {
    $centralMom32$0$lcssa = 0.0;
    $var2$1$lcssa144 = 0.0;
   } else {
    $i7$042 = 0;
    $var2$141 = 0.0;
    do {
     $142 = +($i7$042 | 0) / $scale - $mean2$246;
     $var2$141 = $var2$141 + +HEAPF32[$99 + ($i7$042 << 2) >> 2] * $142 * $142;
     $i7$042 = $i7$042 + 1 | 0;
    } while (($i7$042 | 0) != ($101 | 0));
    $phitmp109 = $var2$141;
    if ($102) {
     $centralMom32$0$lcssa = 0.0;
     $var2$1$lcssa144 = $phitmp109;
    } else {
     $centralMom32$035 = 0.0;
     $i8$036 = 0;
     do {
      $150 = +($i8$036 | 0) / $scale - $mean2$246;
      $centralMom32$035 = $centralMom32$035 + +HEAPF32[$99 + ($i8$036 << 2) >> 2] * $150 * $150 * $150;
      $i8$036 = $i8$036 + 1 | 0;
     } while (($i8$036 | 0) != ($101 | 0));
     $centralMom32$0$lcssa = $centralMom32$035 * 1.0e3;
     $var2$1$lcssa144 = $phitmp109;
    }
   }
  }
  $res2$0 = ~~($centralMom32$0$lcssa / +Math_pow(+$var2$1$lcssa144, 1.5));
 } else if (($108 | 0) == 2) {
  if ($102) {
   $centralMom42$0$lcssa = 0.0;
   $var2$2$lcssa146 = 0.0;
  } else {
   $i9$063 = 0;
   $mean2$362 = 0.0;
   do {
    $mean2$362 = $mean2$362 + +($i9$063 | 0) * +HEAPF32[$99 + ($i9$063 << 2) >> 2] / $scale;
    $i9$063 = $i9$063 + 1 | 0;
   } while (($i9$063 | 0) != ($101 | 0));
   if ($102) {
    $centralMom42$0$lcssa = 0.0;
    $var2$2$lcssa146 = 0.0;
   } else {
    $i10$058 = 0;
    $var2$257 = 0.0;
    do {
     $171 = +($i10$058 | 0) / $scale - $mean2$362;
     $var2$257 = $var2$257 + +HEAPF32[$99 + ($i10$058 << 2) >> 2] * $171 * $171;
     $i10$058 = $i10$058 + 1 | 0;
    } while (($i10$058 | 0) != ($101 | 0));
    $phitmp106 = $var2$257;
    if ($102) {
     $centralMom42$0$lcssa = 0.0;
     $var2$2$lcssa146 = $phitmp106;
    } else {
     $centralMom42$051 = 0.0;
     $i11$052 = 0;
     do {
      $179 = +($i11$052 | 0) / $scale - $mean2$362;
      $centralMom42$051 = $centralMom42$051 + +HEAPF32[$99 + ($i11$052 << 2) >> 2] * $179 * $179 * $179 * $179;
      $i11$052 = $i11$052 + 1 | 0;
     } while (($i11$052 | 0) != ($101 | 0));
     $centralMom42$0$lcssa = $centralMom42$051;
     $var2$2$lcssa146 = $phitmp106;
    }
   }
  }
  $res2$0 = ~~(($centralMom42$0$lcssa / ($var2$2$lcssa146 * $var2$2$lcssa146) + -3.0) * 1.0e3);
 } else {
  $res2$0 = 0;
 }
 $195 = +(Math_imul(HEAP32[$this + 4 >> 2] | 0, $res2$0) | 0);
 if (($99 | 0) == 0) {
  STACKTOP = sp;
  return +$195;
 }
 __ZdlPv($99);
 STACKTOP = sp;
 return +$195;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$lcssa$i$i = 0, $$01$i$i = 0, $$ph = 0, $$ph31 = 0, $$ph32 = 0, $$pre$i$i$i9 = 0, $$pre$phi39Z2D = 0, $$pre$phi41Z2D = 0, $0 = 0, $1 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $115 = 0, $122 = 0, $125 = 0, $129 = 0, $135 = 0, $152 = 0, $153 = 0, $154 = 0, $167 = 0, $168 = 0, $171 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $20 = 0, $200 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $49 = 0, $50 = 0, $51 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $81 = 0, $87 = 0, $93 = 0, $94 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 200 | 0;
 $__grouping = sp + 12 | 0;
 $0 = sp + 24 | 0;
 $__buf = sp + 28 | 0;
 $__g = sp + 40 | 0;
 HEAP32[$__grouping + 0 >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $1 = HEAP32[$0 >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$vararg_buffer >> 2] = 5152;
  HEAP32[$vararg_buffer + 4 >> 2] = 123;
  HEAP32[$vararg_buffer + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $vararg_buffer, 124);
 }
 $7 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $11 = HEAP32[$1 + 8 >> 2] | 0;
 if (!((HEAP32[$1 + 12 >> 2] | 0) - $11 >> 2 >>> 0 > $7 >>> 0)) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 $18 = HEAP32[$11 + ($7 << 2) >> 2] | 0;
 if (($18 | 0) == 0) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$18 >> 2] | 0) + 32 >> 2] & 7]($18, 3696, 3722 | 0, $__atoms) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $30 = $__buf + 1 | 0;
  $$pre$phi39Z2D = $30;
  $$pre$phi41Z2D = $__buf + 8 | 0;
  $200 = $30;
 } else {
  $28 = $__buf + 8 | 0;
  $$pre$phi39Z2D = $__buf + 1 | 0;
  $$pre$phi41Z2D = $28;
  $200 = HEAP32[$28 >> 2] | 0;
 }
 $31 = $__buf + 4 | 0;
 $32 = $__atoms + 24 | 0;
 $33 = $__atoms + 25 | 0;
 $34 = $__g;
 $35 = $__atoms + 26 | 0;
 $36 = $__atoms;
 $37 = $__grouping + 4 | 0;
 $$pre$i$i$i9 = HEAP32[$__b >> 2] | 0;
 $125 = $__g;
 $129 = 0;
 $64 = $200;
 $__a$0 = $200;
 L14 : while (1) {
  if (($$pre$i$i$i9 | 0) == 0) {
   $50 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i9 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i9 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i9 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i9) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $50 = 0;
    } else {
     $50 = $$pre$i$i$i9;
    }
   } else {
    $50 = $$pre$i$i$i9;
   }
  }
  $49 = ($50 | 0) == 0;
  $51 = HEAP32[$__e >> 2] | 0;
  do {
   if (($51 | 0) == 0) {
    label = 19;
   } else {
    if ((HEAP32[$51 + 12 >> 2] | 0) != (HEAP32[$51 + 16 >> 2] | 0)) {
     if ($49) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L14;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L14;
     }
    }
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $__a$2 = $__a$0;
    break;
   }
  }
  $67 = HEAP8[$__buf >> 0] | 0;
  $69 = ($67 & 1) == 0;
  if ($69) {
   $74 = ($67 & 255) >>> 1;
  } else {
   $74 = HEAP32[$31 >> 2] | 0;
  }
  if (($64 - $__a$0 | 0) == ($74 | 0)) {
   if ($69) {
    $81 = ($67 & 255) >>> 1;
    $94 = ($67 & 255) >>> 1;
   } else {
    $75 = HEAP32[$31 >> 2] | 0;
    $81 = $75;
    $94 = $75;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $81 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $87 = 10;
   } else {
    $87 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $87, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $93 = $$pre$phi39Z2D;
   } else {
    $93 = HEAP32[$$pre$phi41Z2D >> 2] | 0;
   }
   $108 = $93 + $94 | 0;
   $__a$1 = $93;
  } else {
   $108 = $64;
   $__a$1 = $__a$0;
  }
  $96 = HEAP32[$50 + 12 >> 2] | 0;
  if (($96 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 63]($50) | 0;
  } else {
   $$0$i$i = HEAPU8[$96 >> 0] | 0;
  }
  $106 = $$0$i$i & 255;
  $107 = ($108 | 0) == ($__a$1 | 0);
  do {
   if ($107) {
    $110 = (HEAP8[$32 >> 0] | 0) == $106 << 24 >> 24;
    if (!$110) {
     if (!((HEAP8[$33 >> 0] | 0) == $106 << 24 >> 24)) {
      label = 40;
      break;
     }
    }
    HEAP8[$108 >> 0] = $110 ? 43 : 45;
    $$ph = $108 + 1 | 0;
    $$ph31 = $125;
    $$ph32 = 0;
   } else {
    label = 40;
   }
  } while (0);
  do {
   if ((label | 0) == 40) {
    label = 0;
    $115 = HEAP8[$__grouping >> 0] | 0;
    if (($115 & 1) == 0) {
     $122 = ($115 & 255) >>> 1;
    } else {
     $122 = HEAP32[$37 >> 2] | 0;
    }
    if (($122 | 0) != 0 & $106 << 24 >> 24 == 0) {
     if (($125 - $34 | 0) >= 160) {
      $$ph = $108;
      $$ph31 = $125;
      $$ph32 = $129;
      break;
     }
     HEAP32[$125 >> 2] = $129;
     $$ph = $108;
     $$ph31 = $125 + 4 | 0;
     $$ph32 = 0;
     break;
    } else {
     $$01$i$i = $__atoms;
    }
    while (1) {
     if ((HEAP8[$$01$i$i >> 0] | 0) == $106 << 24 >> 24) {
      $$0$lcssa$i$i = $$01$i$i;
      break;
     }
     $$01$i$i = $$01$i$i + 1 | 0;
     if (($$01$i$i | 0) == ($35 | 0)) {
      $$0$lcssa$i$i = $35;
      break;
     }
    }
    $135 = $$0$lcssa$i$i - $36 | 0;
    if (($135 | 0) > 23) {
     $__a$2 = $__a$1;
     break L14;
    }
    if (($135 | 0) < 22) {
     HEAP8[$108 >> 0] = HEAP8[3696 + $135 >> 0] | 0;
     $$ph = $108 + 1 | 0;
     $$ph31 = $125;
     $$ph32 = $129 + 1 | 0;
     break;
    }
    if ($107) {
     $__a$2 = $108;
     break L14;
    }
    if (($108 - $__a$1 | 0) >= 3) {
     $__a$2 = $__a$1;
     break L14;
    }
    if ((HEAP8[$108 + -1 >> 0] | 0) != 48) {
     $__a$2 = $__a$1;
     break L14;
    }
    HEAP8[$108 >> 0] = HEAP8[3696 + $135 >> 0] | 0;
    $$ph = $108 + 1 | 0;
    $$ph31 = $125;
    $$ph32 = 0;
   }
  } while (0);
  $152 = HEAP32[$__b >> 2] | 0;
  $153 = $152 + 12 | 0;
  $154 = HEAP32[$153 >> 2] | 0;
  if (($154 | 0) == (HEAP32[$152 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$152 >> 2] | 0) + 40 >> 2] & 63]($152) | 0;
   $$pre$i$i$i9 = $152;
   $125 = $$ph31;
   $129 = $$ph32;
   $64 = $$ph;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$153 >> 2] = $154 + 1;
   $$pre$i$i$i9 = $152;
   $125 = $$ph31;
   $129 = $$ph32;
   $64 = $$ph;
   $__a$0 = $__a$1;
   continue;
  }
 }
 HEAP8[$__a$2 + 3 >> 0] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $167 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $167;
   ___cxa_guard_release(5048);
  }
 }
 $168 = HEAP32[1260] | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a$2, $168, 3736, $vararg_buffer) | 0) != 1) {
  HEAP32[$__err >> 2] = 4;
 }
 $171 = HEAP32[$__b >> 2] | 0;
 if (($171 | 0) == 0) {
  $184 = 0;
 } else {
  if ((HEAP32[$171 + 12 >> 2] | 0) == (HEAP32[$171 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] & 63]($171) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $184 = 0;
   } else {
    $184 = $171;
   }
  } else {
   $184 = $171;
  }
 }
 $183 = ($184 | 0) == 0;
 $185 = HEAP32[$__e >> 2] | 0;
 do {
  if (($185 | 0) == 0) {
   label = 72;
  } else {
   if ((HEAP32[$185 + 12 >> 2] | 0) != (HEAP32[$185 + 16 >> 2] | 0)) {
    if (!$183) {
     break;
    }
    HEAP32[$agg$result >> 2] = $184;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$185 >> 2] | 0) + 36 >> 2] & 63]($185) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 72;
    break;
   }
   if ($183 ^ ($185 | 0) == 0) {
    HEAP32[$agg$result >> 2] = $184;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 72) {
  if (!$183) {
   HEAP32[$agg$result >> 2] = $184;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $184;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i13 = 0, $0 = 0, $10 = 0, $107 = 0, $116 = 0, $118 = 0, $120 = 0, $122 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $146 = 0, $148 = 0, $155 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $178 = 0, $183 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $203 = 0, $207 = 0, $213 = 0, $26 = 0, $30 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $49 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $64 = 0, $66 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $82 = 0, $88 = 0, $89 = 0, $94 = 0, $99 = 0, $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__p$i$i$i$i1 = sp;
 $__grouping = sp + 12 | 0;
 $0 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5144;
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $__p$i$i$i$i1, 124);
 }
 $6 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $10 >> 2 >>> 0 > $6 >>> 0)) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $17 = HEAP32[$10 + ($6 << 2) >> 2] | 0;
 if (($17 | 0) == 0) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $20 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1326] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5304;
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5304, $__p$i$i$i$i1, 124);
 }
 $26 = (HEAP32[5308 >> 2] | 0) + -1 | 0;
 $30 = HEAP32[$20 + 8 >> 2] | 0;
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $30 >> 2 >>> 0 > $26 >>> 0)) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 $37 = HEAP32[$30 + ($26 << 2) >> 2] | 0;
 if (($37 | 0) == 0) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$37 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $37);
 HEAP32[$__oe >> 2] = $__ob;
 $43 = HEAP8[$__nb >> 0] | 0;
 if ($43 << 24 >> 24 == 43 | $43 << 24 >> 24 == 45) {
  $47 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, $43) | 0;
  $49 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $49 + 4;
  HEAP32[$49 >> 2] = $47;
  $__nf$0 = $__nb + 1 | 0;
 } else {
  $__nf$0 = $__nb;
 }
 $51 = $__ne;
 L22 : do {
  if (($51 - $__nf$0 | 0) > 1) {
   if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
    $58 = $__nf$0 + 1 | 0;
    $59 = HEAP8[$58 >> 0] | 0;
    if ($59 << 24 >> 24 == 88 | $59 << 24 >> 24 == 120) {
     $63 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, 48) | 0;
     $64 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $64 + 4;
     HEAP32[$64 >> 2] = $63;
     $66 = $__nf$0 + 2 | 0;
     $71 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, HEAP8[$58 >> 0] | 0) | 0;
     $72 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $72 + 4;
     HEAP32[$72 >> 2] = $71;
     if ($66 >>> 0 < $__ne >>> 0) {
      $__ns$042 = $66;
      while (1) {
       $77 = HEAP8[$__ns$042 >> 0] | 0;
       if ((HEAP8[5048] | 0) == 0) {
        if ((___cxa_guard_acquire(5048) | 0) != 0) {
         $82 = _newlocale(2147483647, 5056, 0) | 0;
         HEAP32[1260] = $82;
         ___cxa_guard_release(5048);
        }
       }
       $76 = $__ns$042 + 1 | 0;
       if ((_isxdigit_l($77 << 24 >> 24, HEAP32[1260] | 0) | 0) == 0) {
        $__nf$1 = $66;
        $__ns$2 = $__ns$042;
        break L22;
       }
       if ($76 >>> 0 < $__ne >>> 0) {
        $__ns$042 = $76;
       } else {
        $__nf$1 = $66;
        $__ns$2 = $76;
        break;
       }
      }
     } else {
      $__nf$1 = $66;
      $__ns$2 = $66;
     }
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
 } while (0);
 L33 : do {
  if ((label | 0) == 14) {
   if ($__nf$0 >>> 0 < $__ne >>> 0) {
    $__ns$133 = $__nf$0;
    while (1) {
     $89 = HEAP8[$__ns$133 >> 0] | 0;
     if ((HEAP8[5048] | 0) == 0) {
      if ((___cxa_guard_acquire(5048) | 0) != 0) {
       $94 = _newlocale(2147483647, 5056, 0) | 0;
       HEAP32[1260] = $94;
       ___cxa_guard_release(5048);
      }
     }
     $88 = $__ns$133 + 1 | 0;
     if ((_isdigit_l($89 << 24 >> 24, HEAP32[1260] | 0) | 0) == 0) {
      $__nf$1 = $__nf$0;
      $__ns$2 = $__ns$133;
      break L33;
     }
     if ($88 >>> 0 < $__ne >>> 0) {
      $__ns$133 = $88;
     } else {
      $__nf$1 = $__nf$0;
      $__ns$2 = $88;
      break;
     }
    }
   } else {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__nf$0;
   }
  }
 } while (0);
 $99 = HEAP8[$__grouping >> 0] | 0;
 if (($99 & 1) == 0) {
  $107 = ($99 & 255) >>> 1;
 } else {
  $107 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($107 | 0) == 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 48 >> 2] & 7]($17, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  $116 = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0;
  HEAP32[$__oe >> 2] = $116;
  $213 = $116;
 } else {
  if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $118 = $__ns$2 + -1 | 0;
   if ($118 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i = $__nf$1;
    $122 = $118;
    do {
     $120 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$122 >> 0] | 0;
     HEAP8[$122 >> 0] = $120;
     $$012$i$i = $$012$i$i + 1 | 0;
     $122 = $122 + -1 | 0;
    } while ($$012$i$i >>> 0 < $122 >>> 0);
   }
  }
  $129 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 16 >> 2] & 63]($37) | 0;
  if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
   $131 = $__grouping + 1 | 0;
   $132 = $__grouping + 4 | 0;
   $133 = $__grouping + 8 | 0;
   $__dc$024 = 0;
   $__dg$025 = 0;
   $__p$026 = $__nf$1;
   while (1) {
    $136 = (HEAP8[$__grouping >> 0] & 1) == 0;
    if ((HEAP8[($136 ? $131 : HEAP32[$133 >> 2] | 0) + $__dg$025 >> 0] | 0) > 0) {
     if (($__dc$024 | 0) == (HEAP8[($136 ? $131 : HEAP32[$133 >> 2] | 0) + $__dg$025 >> 0] | 0)) {
      $146 = HEAP32[$__oe >> 2] | 0;
      HEAP32[$__oe >> 2] = $146 + 4;
      HEAP32[$146 >> 2] = $129;
      $148 = HEAP8[$__grouping >> 0] | 0;
      if (($148 & 1) == 0) {
       $155 = ($148 & 255) >>> 1;
      } else {
       $155 = HEAP32[$132 >> 2] | 0;
      }
      $__dc$1 = 0;
      $__dg$1 = ($__dg$025 >>> 0 < ($155 + -1 | 0) >>> 0 & 1) + $__dg$025 | 0;
     } else {
      $__dc$1 = $__dc$024;
      $__dg$1 = $__dg$025;
     }
    } else {
     $__dc$1 = $__dc$024;
     $__dg$1 = $__dg$025;
    }
    $162 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, HEAP8[$__p$026 >> 0] | 0) | 0;
    $163 = HEAP32[$__oe >> 2] | 0;
    $164 = $163 + 4 | 0;
    HEAP32[$__oe >> 2] = $164;
    HEAP32[$163 >> 2] = $162;
    $__p$026 = $__p$026 + 1 | 0;
    if (!($__p$026 >>> 0 < $__ns$2 >>> 0)) {
     $173 = $164;
     break;
    } else {
     $__dc$024 = $__dc$1 + 1 | 0;
     $__dg$025 = $__dg$1;
    }
   }
  } else {
   $173 = HEAP32[$__oe >> 2] | 0;
  }
  $171 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  if (($171 | 0) == ($173 | 0)) {
   $213 = $173;
  } else {
   $174 = $173 + -4 | 0;
   if ($174 >>> 0 > $171 >>> 0) {
    $$012$i$i13 = $171;
    $178 = $174;
    do {
     $176 = HEAP32[$$012$i$i13 >> 2] | 0;
     HEAP32[$$012$i$i13 >> 2] = HEAP32[$178 >> 2];
     HEAP32[$178 >> 2] = $176;
     $$012$i$i13 = $$012$i$i13 + 4 | 0;
     $178 = $178 + -4 | 0;
    } while ($$012$i$i13 >>> 0 < $178 >>> 0);
    $213 = $173;
   } else {
    $213 = $173;
   }
  }
 }
 L73 : do {
  if ($__ns$2 >>> 0 < $__ne >>> 0) {
   $__nf$220 = $__ns$2;
   while (1) {
    $183 = HEAP8[$__nf$220 >> 0] | 0;
    if ($183 << 24 >> 24 == 46) {
     break;
    }
    $195 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, $183) | 0;
    $196 = HEAP32[$__oe >> 2] | 0;
    $197 = $196 + 4 | 0;
    HEAP32[$__oe >> 2] = $197;
    HEAP32[$196 >> 2] = $195;
    $198 = $__nf$220 + 1 | 0;
    if ($198 >>> 0 < $__ne >>> 0) {
     $__nf$220 = $198;
    } else {
     $203 = $197;
     $__nf$3 = $198;
     break L73;
    }
   }
   $188 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 12 >> 2] & 63]($37) | 0;
   $189 = HEAP32[$__oe >> 2] | 0;
   $190 = $189 + 4 | 0;
   HEAP32[$__oe >> 2] = $190;
   HEAP32[$189 >> 2] = $188;
   $203 = $190;
   $__nf$3 = $__nf$220 + 1 | 0;
  } else {
   $203 = $213;
   $__nf$3 = $__ns$2;
  }
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 48 >> 2] & 7]($17, $__nf$3, $__ne, $203) | 0;
 $207 = (HEAP32[$__oe >> 2] | 0) + ($51 - $__nf$3 << 2) | 0;
 HEAP32[$__oe >> 2] = $207;
 if (($__np | 0) == ($__ne | 0)) {
  $storemerge = $207;
  HEAP32[$__op >> 2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;
  return;
 }
 $storemerge = $__ob + ($__np - $__nb << 2) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i13 = 0, $0 = 0, $10 = 0, $107 = 0, $118 = 0, $120 = 0, $122 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $146 = 0, $148 = 0, $155 = 0, $162 = 0, $163 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $176 = 0, $178 = 0, $183 = 0, $188 = 0, $189 = 0, $19 = 0, $195 = 0, $196 = 0, $198 = 0, $20 = 0, $207 = 0, $26 = 0, $30 = 0, $37 = 0, $39 = 0, $43 = 0, $47 = 0, $49 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $64 = 0, $66 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $82 = 0, $88 = 0, $89 = 0, $94 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0, $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__p$i$i$i$i1 = sp;
 $__grouping = sp + 12 | 0;
 $0 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5152;
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $__p$i$i$i$i1, 124);
 }
 $6 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $10 >> 2 >>> 0 > $6 >>> 0)) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $17 = HEAP32[$10 + ($6 << 2) >> 2] | 0;
 if (($17 | 0) == 0) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $20 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1324] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5296;
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5296, $__p$i$i$i$i1, 124);
 }
 $26 = (HEAP32[5300 >> 2] | 0) + -1 | 0;
 $30 = HEAP32[$20 + 8 >> 2] | 0;
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $30 >> 2 >>> 0 > $26 >>> 0)) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 $37 = HEAP32[$30 + ($26 << 2) >> 2] | 0;
 if (($37 | 0) == 0) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$37 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $37);
 HEAP32[$__oe >> 2] = $__ob;
 $43 = HEAP8[$__nb >> 0] | 0;
 if ($43 << 24 >> 24 == 43 | $43 << 24 >> 24 == 45) {
  $47 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, $43) | 0;
  $49 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $49 + 1;
  HEAP8[$49 >> 0] = $47;
  $__nf$0 = $__nb + 1 | 0;
 } else {
  $__nf$0 = $__nb;
 }
 $51 = $__ne;
 L22 : do {
  if (($51 - $__nf$0 | 0) > 1) {
   if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
    $58 = $__nf$0 + 1 | 0;
    $59 = HEAP8[$58 >> 0] | 0;
    if ($59 << 24 >> 24 == 88 | $59 << 24 >> 24 == 120) {
     $63 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, 48) | 0;
     $64 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $64 + 1;
     HEAP8[$64 >> 0] = $63;
     $66 = $__nf$0 + 2 | 0;
     $71 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, HEAP8[$58 >> 0] | 0) | 0;
     $72 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $72 + 1;
     HEAP8[$72 >> 0] = $71;
     if ($66 >>> 0 < $__ne >>> 0) {
      $__ns$043 = $66;
      while (1) {
       $77 = HEAP8[$__ns$043 >> 0] | 0;
       if ((HEAP8[5048] | 0) == 0) {
        if ((___cxa_guard_acquire(5048) | 0) != 0) {
         $82 = _newlocale(2147483647, 5056, 0) | 0;
         HEAP32[1260] = $82;
         ___cxa_guard_release(5048);
        }
       }
       $76 = $__ns$043 + 1 | 0;
       if ((_isxdigit_l($77 << 24 >> 24, HEAP32[1260] | 0) | 0) == 0) {
        $__nf$1 = $66;
        $__ns$2 = $__ns$043;
        break L22;
       }
       if ($76 >>> 0 < $__ne >>> 0) {
        $__ns$043 = $76;
       } else {
        $__nf$1 = $66;
        $__ns$2 = $76;
        break;
       }
      }
     } else {
      $__nf$1 = $66;
      $__ns$2 = $66;
     }
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
 } while (0);
 L33 : do {
  if ((label | 0) == 14) {
   if ($__nf$0 >>> 0 < $__ne >>> 0) {
    $__ns$134 = $__nf$0;
    while (1) {
     $89 = HEAP8[$__ns$134 >> 0] | 0;
     if ((HEAP8[5048] | 0) == 0) {
      if ((___cxa_guard_acquire(5048) | 0) != 0) {
       $94 = _newlocale(2147483647, 5056, 0) | 0;
       HEAP32[1260] = $94;
       ___cxa_guard_release(5048);
      }
     }
     $88 = $__ns$134 + 1 | 0;
     if ((_isdigit_l($89 << 24 >> 24, HEAP32[1260] | 0) | 0) == 0) {
      $__nf$1 = $__nf$0;
      $__ns$2 = $__ns$134;
      break L33;
     }
     if ($88 >>> 0 < $__ne >>> 0) {
      $__ns$134 = $88;
     } else {
      $__nf$1 = $__nf$0;
      $__ns$2 = $88;
      break;
     }
    }
   } else {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__nf$0;
   }
  }
 } while (0);
 $99 = HEAP8[$__grouping >> 0] | 0;
 if (($99 & 1) == 0) {
  $107 = ($99 & 255) >>> 1;
 } else {
  $107 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($107 | 0) == 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] & 7]($17, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1);
 } else {
  if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $118 = $__ns$2 + -1 | 0;
   if ($118 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i = $__nf$1;
    $122 = $118;
    do {
     $120 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$122 >> 0] | 0;
     HEAP8[$122 >> 0] = $120;
     $$012$i$i = $$012$i$i + 1 | 0;
     $122 = $122 + -1 | 0;
    } while ($$012$i$i >>> 0 < $122 >>> 0);
   }
  }
  $129 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 16 >> 2] & 63]($37) | 0;
  if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
   $131 = $__grouping + 1 | 0;
   $132 = $__grouping + 4 | 0;
   $133 = $__grouping + 8 | 0;
   $__dc$025 = 0;
   $__dg$026 = 0;
   $__p$027 = $__nf$1;
   while (1) {
    $136 = (HEAP8[$__grouping >> 0] & 1) == 0;
    if ((HEAP8[($136 ? $131 : HEAP32[$133 >> 2] | 0) + $__dg$026 >> 0] | 0) > 0) {
     if (($__dc$025 | 0) == (HEAP8[($136 ? $131 : HEAP32[$133 >> 2] | 0) + $__dg$026 >> 0] | 0)) {
      $146 = HEAP32[$__oe >> 2] | 0;
      HEAP32[$__oe >> 2] = $146 + 1;
      HEAP8[$146 >> 0] = $129;
      $148 = HEAP8[$__grouping >> 0] | 0;
      if (($148 & 1) == 0) {
       $155 = ($148 & 255) >>> 1;
      } else {
       $155 = HEAP32[$132 >> 2] | 0;
      }
      $__dc$1 = 0;
      $__dg$1 = ($__dg$026 >>> 0 < ($155 + -1 | 0) >>> 0 & 1) + $__dg$026 | 0;
     } else {
      $__dc$1 = $__dc$025;
      $__dg$1 = $__dg$026;
     }
    } else {
     $__dc$1 = $__dc$025;
     $__dg$1 = $__dg$026;
    }
    $162 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, HEAP8[$__p$027 >> 0] | 0) | 0;
    $163 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $163 + 1;
    HEAP8[$163 >> 0] = $162;
    $__p$027 = $__p$027 + 1 | 0;
    if (!($__p$027 >>> 0 < $__ns$2 >>> 0)) {
     break;
    } else {
     $__dc$025 = $__dc$1 + 1 | 0;
     $__dg$026 = $__dg$1;
    }
   }
  }
  $171 = $__ob + ($__nf$1 - $__nb) | 0;
  $172 = HEAP32[$__oe >> 2] | 0;
  if (($171 | 0) != ($172 | 0)) {
   $174 = $172 + -1 | 0;
   if ($174 >>> 0 > $171 >>> 0) {
    $$012$i$i13 = $171;
    $178 = $174;
    do {
     $176 = HEAP8[$$012$i$i13 >> 0] | 0;
     HEAP8[$$012$i$i13 >> 0] = HEAP8[$178 >> 0] | 0;
     HEAP8[$178 >> 0] = $176;
     $$012$i$i13 = $$012$i$i13 + 1 | 0;
     $178 = $178 + -1 | 0;
    } while ($$012$i$i13 >>> 0 < $178 >>> 0);
   }
  }
 }
 L72 : do {
  if ($__ns$2 >>> 0 < $__ne >>> 0) {
   $__nf$221 = $__ns$2;
   while (1) {
    $183 = HEAP8[$__nf$221 >> 0] | 0;
    if ($183 << 24 >> 24 == 46) {
     break;
    }
    $195 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, $183) | 0;
    $196 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $196 + 1;
    HEAP8[$196 >> 0] = $195;
    $198 = $__nf$221 + 1 | 0;
    if ($198 >>> 0 < $__ne >>> 0) {
     $__nf$221 = $198;
    } else {
     $__nf$3 = $198;
     break L72;
    }
   }
   $188 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 12 >> 2] & 63]($37) | 0;
   $189 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $189 + 1;
   HEAP8[$189 >> 0] = $188;
   $__nf$3 = $__nf$221 + 1 | 0;
  } else {
   $__nf$3 = $__ns$2;
  }
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] & 7]($17, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0;
 $207 = (HEAP32[$__oe >> 2] | 0) + ($51 - $__nf$3) | 0;
 HEAP32[$__oe >> 2] = $207;
 if (($__np | 0) == ($__ne | 0)) {
  $storemerge = $207;
  HEAP32[$__op >> 2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;
  return;
 }
 $storemerge = $__ob + ($__np - $__nb) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZN19BoostedFaceDetector22mergeCloseResultsFinalEiRNSt3__16vectorIfNS0_9allocatorIfEEEE($this, $min_n_neighbours, $items) {
 $this = $this | 0;
 $min_n_neighbours = $min_n_neighbours | 0;
 $items = $items | 0;
 var $$0$i2$i = 0, $$0$i3$i = 0, $0 = 0, $1 = 0, $102 = 0, $104 = 0, $105 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0.0, $121 = 0, $122 = 0, $123 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $143 = 0, $144 = 0, $149 = 0, $16 = 0.0, $162 = 0, $164 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $35 = 0.0, $37 = 0, $42 = 0, $43 = 0, $48 = 0, $53 = 0, $54 = 0, $59 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $87 = 0, $89 = 0, $90 = 0, $95 = 0, $96 = 0, $98 = 0, $accepted_faces = 0, $best_index$sroa$0$057 = 0, $best_index$sroa$0$150$us = 0, $best_index$sroa$0$240$us = 0, $best_index$sroa$0$3$us = 0, $best_index$sroa$1$058 = 0, $best_index$sroa$1$151$us = 0, $best_index$sroa$1$241$us = 0, $best_index$sroa$1$3$us = 0, $best_result$152$us = 0.0, $best_result$242$us = 0.0, $best_result$3$us = 0.0, $i$048$us = 0, $i1$038 = 0, $j$039$us = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $accepted_faces = sp;
 $0 = $this + 28 | 0;
 $1 = $this + 24 | 0;
 $2 = $items + 4 | 0;
 $best_index$sroa$0$057 = 0;
 $best_index$sroa$1$058 = 0;
 while (1) {
  $7 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0;
  $8 = ($7 | 0) / 24 | 0;
  if (($7 | 0) > 0) {
   $best_index$sroa$0$150$us = $best_index$sroa$0$057;
   $best_index$sroa$1$151$us = $best_index$sroa$1$058;
   $best_result$152$us = 0.0;
   $i$048$us = 0;
  } else {
   break;
  }
  while (1) {
   $best_index$sroa$0$240$us = $best_index$sroa$0$150$us;
   $best_index$sroa$1$241$us = $best_index$sroa$1$151$us;
   $best_result$242$us = $best_result$152$us;
   $j$039$us = 0;
   while (1) {
    if (($i$048$us | 0) == ($j$039$us | 0)) {
     $best_index$sroa$0$3$us = $best_index$sroa$0$240$us;
     $best_index$sroa$1$3$us = $best_index$sroa$1$241$us;
     $best_result$3$us = $best_result$242$us;
    } else {
     $13 = HEAP32[$1 >> 2] | 0;
     $16 = +__Z26rectangleIntersectionRatioRK10SimpleRectS1_($13 + ($i$048$us * 24 | 0) | 0, $13 + ($j$039$us * 24 | 0) | 0);
     if ($16 > $best_result$242$us) {
      $best_index$sroa$0$3$us = $i$048$us;
      $best_index$sroa$1$3$us = $j$039$us;
      $best_result$3$us = $16;
     } else {
      $best_index$sroa$0$3$us = $best_index$sroa$0$240$us;
      $best_index$sroa$1$3$us = $best_index$sroa$1$241$us;
      $best_result$3$us = $best_result$242$us;
     }
    }
    $j$039$us = $j$039$us + 1 | 0;
    if (($j$039$us | 0) >= ($8 | 0)) {
     break;
    } else {
     $best_index$sroa$0$240$us = $best_index$sroa$0$3$us;
     $best_index$sroa$1$241$us = $best_index$sroa$1$3$us;
     $best_result$242$us = $best_result$3$us;
    }
   }
   $i$048$us = $i$048$us + 1 | 0;
   if (($i$048$us | 0) >= ($8 | 0)) {
    break;
   } else {
    $best_index$sroa$0$150$us = $best_index$sroa$0$3$us;
    $best_index$sroa$1$151$us = $best_index$sroa$1$3$us;
    $best_result$152$us = $best_result$3$us;
   }
  }
  $20 = $best_result$3$us > .30000001192092896;
  if (!$20) {
   break;
  }
  $21 = HEAP32[$items >> 2] | 0;
  $22 = $21 + ($best_index$sroa$0$3$us << 2) | 0;
  $23 = +HEAPF32[$22 >> 2];
  $26 = $23 + +HEAPF32[$21 + ($best_index$sroa$1$3$us << 2) >> 2];
  $27 = $23 / $26;
  $28 = HEAP32[$1 >> 2] | 0;
  $29 = $28 + ($best_index$sroa$0$3$us * 24 | 0) | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  $35 = 1.0 - $27;
  $37 = HEAP32[$28 + ($best_index$sroa$1$3$us * 24 | 0) >> 2] | 0;
  $42 = $28 + ($best_index$sroa$0$3$us * 24 | 0) + 4 | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  $48 = HEAP32[$28 + ($best_index$sroa$1$3$us * 24 | 0) + 4 >> 2] | 0;
  $53 = $28 + ($best_index$sroa$0$3$us * 24 | 0) + 8 | 0;
  $54 = HEAP32[$53 >> 2] | 0;
  $59 = HEAP32[$28 + ($best_index$sroa$1$3$us * 24 | 0) + 8 >> 2] | 0;
  $64 = $28 + ($best_index$sroa$0$3$us * 24 | 0) + 12 | 0;
  $65 = HEAP32[$64 >> 2] | 0;
  $70 = HEAP32[$28 + ($best_index$sroa$1$3$us * 24 | 0) + 12 >> 2] | 0;
  if (($37 | 0) == ($30 | 0) & ($48 | 0) == ($43 | 0) & ($59 | 0) == ($54 | 0) & ($70 | 0) == ($65 | 0)) {
   $storemerge = $26 + -1.0;
  } else {
   $storemerge = $26;
  }
  HEAPF32[$22 >> 2] = $storemerge;
  HEAP32[$29 >> 2] = ~~($27 * +($30 | 0) + $35 * +($37 | 0));
  HEAP32[$42 >> 2] = ~~($27 * +($43 | 0) + $35 * +($48 | 0));
  HEAP32[$53 >> 2] = ~~($27 * +($54 | 0) + $35 * +($59 | 0));
  HEAP32[$64 >> 2] = ~~($27 * +($65 | 0) + $35 * +($70 | 0));
  $80 = HEAP32[$items >> 2] | 0;
  $81 = $best_index$sroa$1$3$us << 2 >> 2;
  $83 = $80 + ($81 + 1 << 2) | 0;
  $87 = (HEAP32[$2 >> 2] | 0) - $83 | 0;
  _memmove($80 + ($81 << 2) | 0, $83 | 0, $87 | 0) | 0;
  $89 = $80 + (($87 >> 2) + $81 << 2) | 0;
  $90 = HEAP32[$2 >> 2] | 0;
  if (($90 | 0) != ($89 | 0)) {
   HEAP32[$2 >> 2] = $90 + (~(($90 + -4 + (0 - $89) | 0) >>> 2) << 2);
  }
  $95 = HEAP32[$1 >> 2] | 0;
  $96 = ($best_index$sroa$1$3$us * 24 | 0) / 24 | 0;
  $98 = $95 + (($96 + 1 | 0) * 24 | 0) | 0;
  $102 = (HEAP32[$0 >> 2] | 0) - $98 | 0;
  _memmove($95 + ($96 * 24 | 0) | 0, $98 | 0, $102 | 0) | 0;
  $104 = $95 + (((($102 | 0) / 24 | 0) + $96 | 0) * 24 | 0) | 0;
  $105 = HEAP32[$0 >> 2] | 0;
  if (($105 | 0) == ($104 | 0)) {
   if ($20) {
    $best_index$sroa$0$057 = $best_index$sroa$0$3$us;
    $best_index$sroa$1$058 = $best_index$sroa$1$3$us;
    continue;
   } else {
    break;
   }
  } else {
   HEAP32[$0 >> 2] = $105 + (~((($105 + -24 + (0 - $104) | 0) >>> 0) / 24 | 0) * 24 | 0);
   if ($20) {
    $best_index$sroa$0$057 = $best_index$sroa$0$3$us;
    $best_index$sroa$1$058 = $best_index$sroa$1$3$us;
    continue;
   } else {
    break;
   }
  }
 }
 HEAP32[$accepted_faces >> 2] = 0;
 $110 = $accepted_faces + 4 | 0;
 HEAP32[$110 >> 2] = 0;
 $111 = $accepted_faces + 8 | 0;
 HEAP32[$111 >> 2] = 0;
 $112 = $this + 24 | 0;
 $114 = HEAP32[$112 >> 2] | 0;
 L24 : do {
  if ((HEAP32[$0 >> 2] | 0) != ($114 | 0)) {
   $116 = +($min_n_neighbours | 0);
   $122 = $114;
   $i1$038 = 0;
   L26 : while (1) {
    do {
     if (+HEAPF32[(HEAP32[$items >> 2] | 0) + ($i1$038 << 2) >> 2] >= $116) {
      $121 = $122 + ($i1$038 * 24 | 0) | 0;
      $123 = HEAP32[$110 >> 2] | 0;
      if (($123 | 0) != (HEAP32[$111 >> 2] | 0)) {
       if (($123 | 0) == 0) {
        $128 = 0;
       } else {
        HEAP32[$123 + 0 >> 2] = HEAP32[$121 + 0 >> 2];
        HEAP32[$123 + 4 >> 2] = HEAP32[$121 + 4 >> 2];
        HEAP32[$123 + 8 >> 2] = HEAP32[$121 + 8 >> 2];
        HEAP32[$123 + 12 >> 2] = HEAP32[$121 + 12 >> 2];
        HEAP32[$123 + 16 >> 2] = HEAP32[$121 + 16 >> 2];
        HEAP32[$123 + 20 >> 2] = HEAP32[$121 + 20 >> 2];
        $128 = $123;
       }
       HEAP32[$110 >> 2] = $128 + 24;
       break;
      }
      $129 = HEAP32[$accepted_faces >> 2] | 0;
      $132 = $123 - $129 | 0;
      $133 = ($132 | 0) / 24 | 0;
      $134 = $133 + 1 | 0;
      if ($134 >>> 0 > 178956970) {
       break L26;
      }
      if ($133 >>> 0 < 89478485) {
       $137 = $133 << 1;
       $139 = $137 >>> 0 < $134 >>> 0 ? $134 : $137;
       if (($139 | 0) == 0) {
        $$0$i3$i = 0;
        $144 = 0;
       } else {
        $$0$i2$i = $139;
        label = 28;
       }
      } else {
       $$0$i2$i = 178956970;
       label = 28;
      }
      if ((label | 0) == 28) {
       label = 0;
       $$0$i3$i = $$0$i2$i;
       $144 = __Znwj($$0$i2$i * 24 | 0) | 0;
      }
      $143 = $144 + ($133 * 24 | 0) | 0;
      if (($143 | 0) != 0) {
       HEAP32[$143 + 0 >> 2] = HEAP32[$121 + 0 >> 2];
       HEAP32[$143 + 4 >> 2] = HEAP32[$121 + 4 >> 2];
       HEAP32[$143 + 8 >> 2] = HEAP32[$121 + 8 >> 2];
       HEAP32[$143 + 12 >> 2] = HEAP32[$121 + 12 >> 2];
       HEAP32[$143 + 16 >> 2] = HEAP32[$121 + 16 >> 2];
       HEAP32[$143 + 20 >> 2] = HEAP32[$121 + 20 >> 2];
      }
      $149 = $144 + (((($132 | 0) / -24 | 0) + $133 | 0) * 24 | 0) | 0;
      _memcpy($149 | 0, $129 | 0, $132 | 0) | 0;
      HEAP32[$accepted_faces >> 2] = $149;
      HEAP32[$110 >> 2] = $144 + ($134 * 24 | 0);
      HEAP32[$111 >> 2] = $144 + ($$0$i3$i * 24 | 0);
      if (($129 | 0) != 0) {
       __ZdlPv($129);
      }
     }
    } while (0);
    $i1$038 = $i1$038 + 1 | 0;
    $122 = HEAP32[$112 >> 2] | 0;
    if (!($i1$038 >>> 0 < (((HEAP32[$0 >> 2] | 0) - $122 | 0) / 24 | 0) >>> 0)) {
     break L24;
    }
   }
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  }
 } while (0);
 if (($112 | 0) != ($accepted_faces | 0)) {
  __ZNSt3__16vectorI10SimpleRectNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($112, HEAP32[$accepted_faces >> 2] | 0, HEAP32[$110 >> 2] | 0);
 }
 $162 = HEAP32[$accepted_faces >> 2] | 0;
 if (($162 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $164 = HEAP32[$110 >> 2] | 0;
 if (($164 | 0) != ($162 | 0)) {
  HEAP32[$110 >> 2] = $164 + (~((($164 + -24 + (0 - $162) | 0) >>> 0) / 24 | 0) * 24 | 0);
 }
 __ZdlPv($162);
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $103 = 0, $105 = 0, $109 = 0, $133 = 0, $137 = 0, $16 = 0, $2 = 0, $20 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $5 = 0, $57 = 0, $6 = 0, $61 = 0, $7 = 0, $8 = 0, $86 = 0, $9 = 0, $92 = 0, $96 = 0, $__p$i$i$i$i6 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__p$i$i$i$i6 = sp;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 52 | 0;
 if ($__intl) {
  $10 = HEAP32[$__loc >> 2] | 0;
  if (!((HEAP32[1180] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i6 >> 2] = 4720;
   HEAP32[$__p$i$i$i$i6 + 4 >> 2] = 123;
   HEAP32[$__p$i$i$i$i6 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(4720, $__p$i$i$i$i6, 124);
  }
  $16 = (HEAP32[4724 >> 2] | 0) + -1 | 0;
  $20 = HEAP32[$10 + 8 >> 2] | 0;
  if (!((HEAP32[$10 + 12 >> 2] | 0) - $20 >> 2 >>> 0 > $16 >>> 0)) {
   $29 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw($29 | 0, 13864, 113);
  }
  $27 = HEAP32[$20 + ($16 << 2) >> 2] | 0;
  if (($27 | 0) == 0) {
   $29 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw($29 | 0, 13864, 113);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 44 >> 2] & 63]($0, $27);
  $33 = HEAP32[$0 >> 2] | 0;
  HEAP8[$__pat >> 0] = $33;
  HEAP8[$__pat + 1 >> 0] = $33 >> 8;
  HEAP8[$__pat + 2 >> 0] = $33 >> 16;
  HEAP8[$__pat + 3 >> 0] = $33 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] & 63]($1, $27);
  if ((HEAP8[$__nsn >> 0] & 1) == 0) {
   HEAP32[$__nsn + 4 >> 2] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 0 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 28 >> 2] & 63]($2, $27);
  if ((HEAP8[$__psn >> 0] & 1) == 0) {
   HEAP32[$__psn + 4 >> 2] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 0 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $57 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 12 >> 2] & 63]($27) | 0;
  HEAP32[$__dp >> 2] = $57;
  $61 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 16 >> 2] & 63]($27) | 0;
  HEAP32[$__ts >> 2] = $61;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 20 >> 2] & 63]($3, $27);
  if ((HEAP8[$__grp >> 0] & 1) == 0) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$3 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 0 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 24 >> 2] & 63]($4, $27);
  if ((HEAP8[$__sym >> 0] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } else {
  $86 = HEAP32[$__loc >> 2] | 0;
  if (!((HEAP32[1164] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i6 >> 2] = 4656;
   HEAP32[$__p$i$i$i$i6 + 4 >> 2] = 123;
   HEAP32[$__p$i$i$i$i6 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(4656, $__p$i$i$i$i6, 124);
  }
  $92 = (HEAP32[4660 >> 2] | 0) + -1 | 0;
  $96 = HEAP32[$86 + 8 >> 2] | 0;
  if (!((HEAP32[$86 + 12 >> 2] | 0) - $96 >> 2 >>> 0 > $92 >>> 0)) {
   $105 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($105);
   ___cxa_throw($105 | 0, 13864, 113);
  }
  $103 = HEAP32[$96 + ($92 << 2) >> 2] | 0;
  if (($103 | 0) == 0) {
   $105 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($105);
   ___cxa_throw($105 | 0, 13864, 113);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] & 63]($5, $103);
  $109 = HEAP32[$5 >> 2] | 0;
  HEAP8[$__pat >> 0] = $109;
  HEAP8[$__pat + 1 >> 0] = $109 >> 8;
  HEAP8[$__pat + 2 >> 0] = $109 >> 16;
  HEAP8[$__pat + 3 >> 0] = $109 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 32 >> 2] & 63]($6, $103);
  if ((HEAP8[$__nsn >> 0] & 1) == 0) {
   HEAP32[$__nsn + 4 >> 2] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$6 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$6 + 0 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 28 >> 2] & 63]($7, $103);
  if ((HEAP8[$__psn >> 0] & 1) == 0) {
   HEAP32[$__psn + 4 >> 2] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$7 + 0 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $133 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 12 >> 2] & 63]($103) | 0;
  HEAP32[$__dp >> 2] = $133;
  $137 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 16 >> 2] & 63]($103) | 0;
  HEAP32[$__ts >> 2] = $137;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 20 >> 2] & 63]($8, $103);
  if ((HEAP8[$__grp >> 0] & 1) == 0) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$8 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$8 + 0 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 24 >> 2] & 63]($9, $103);
  if ((HEAP8[$__sym >> 0] & 1) == 0) {
   HEAP32[$__sym + 4 >> 2] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$9 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$9 + 0 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 36 >> 2] & 63]($103) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $103 = 0, $105 = 0, $109 = 0, $133 = 0, $137 = 0, $16 = 0, $2 = 0, $20 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $5 = 0, $57 = 0, $6 = 0, $61 = 0, $7 = 0, $8 = 0, $86 = 0, $9 = 0, $92 = 0, $96 = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__p$i$i$i$i8 = sp;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 52 | 0;
 if ($__intl) {
  $10 = HEAP32[$__loc >> 2] | 0;
  if (!((HEAP32[1148] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i8 >> 2] = 4592;
   HEAP32[$__p$i$i$i$i8 + 4 >> 2] = 123;
   HEAP32[$__p$i$i$i$i8 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(4592, $__p$i$i$i$i8, 124);
  }
  $16 = (HEAP32[4596 >> 2] | 0) + -1 | 0;
  $20 = HEAP32[$10 + 8 >> 2] | 0;
  if (!((HEAP32[$10 + 12 >> 2] | 0) - $20 >> 2 >>> 0 > $16 >>> 0)) {
   $29 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw($29 | 0, 13864, 113);
  }
  $27 = HEAP32[$20 + ($16 << 2) >> 2] | 0;
  if (($27 | 0) == 0) {
   $29 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw($29 | 0, 13864, 113);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 44 >> 2] & 63]($0, $27);
  $33 = HEAP32[$0 >> 2] | 0;
  HEAP8[$__pat >> 0] = $33;
  HEAP8[$__pat + 1 >> 0] = $33 >> 8;
  HEAP8[$__pat + 2 >> 0] = $33 >> 16;
  HEAP8[$__pat + 3 >> 0] = $33 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] & 63]($1, $27);
  if ((HEAP8[$__nsn >> 0] & 1) == 0) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 0 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 28 >> 2] & 63]($2, $27);
  if ((HEAP8[$__psn >> 0] & 1) == 0) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 0 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $57 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 12 >> 2] & 63]($27) | 0;
  HEAP8[$__dp >> 0] = $57;
  $61 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 16 >> 2] & 63]($27) | 0;
  HEAP8[$__ts >> 0] = $61;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 20 >> 2] & 63]($3, $27);
  if ((HEAP8[$__grp >> 0] & 1) == 0) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$3 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 0 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$27 >> 2] | 0) + 24 >> 2] & 63]($4, $27);
  if ((HEAP8[$__sym >> 0] & 1) == 0) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 } else {
  $86 = HEAP32[$__loc >> 2] | 0;
  if (!((HEAP32[1132] | 0) == -1)) {
   HEAP32[$__p$i$i$i$i8 >> 2] = 4528;
   HEAP32[$__p$i$i$i$i8 + 4 >> 2] = 123;
   HEAP32[$__p$i$i$i$i8 + 8 >> 2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(4528, $__p$i$i$i$i8, 124);
  }
  $92 = (HEAP32[4532 >> 2] | 0) + -1 | 0;
  $96 = HEAP32[$86 + 8 >> 2] | 0;
  if (!((HEAP32[$86 + 12 >> 2] | 0) - $96 >> 2 >>> 0 > $92 >>> 0)) {
   $105 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($105);
   ___cxa_throw($105 | 0, 13864, 113);
  }
  $103 = HEAP32[$96 + ($92 << 2) >> 2] | 0;
  if (($103 | 0) == 0) {
   $105 = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($105);
   ___cxa_throw($105 | 0, 13864, 113);
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] & 63]($5, $103);
  $109 = HEAP32[$5 >> 2] | 0;
  HEAP8[$__pat >> 0] = $109;
  HEAP8[$__pat + 1 >> 0] = $109 >> 8;
  HEAP8[$__pat + 2 >> 0] = $109 >> 16;
  HEAP8[$__pat + 3 >> 0] = $109 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 32 >> 2] & 63]($6, $103);
  if ((HEAP8[$__nsn >> 0] & 1) == 0) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$6 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$6 + 0 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 28 >> 2] & 63]($7, $103);
  if ((HEAP8[$__psn >> 0] & 1) == 0) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$7 + 0 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $133 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 12 >> 2] & 63]($103) | 0;
  HEAP8[$__dp >> 0] = $133;
  $137 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 16 >> 2] & 63]($103) | 0;
  HEAP8[$__ts >> 0] = $137;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 20 >> 2] & 63]($8, $103);
  if ((HEAP8[$__grp >> 0] & 1) == 0) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$8 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$8 + 0 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 24 >> 2] & 63]($9, $103);
  if ((HEAP8[$__sym >> 0] & 1) == 0) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$9 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$9 + 0 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 36 >> 2] & 63]($103) | 0;
  HEAP32[$__fd >> 2] = $storemerge;
  STACKTOP = sp;
  return;
 }
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
     HEAP32[$rem + 4 >> 2] = 0;
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0;
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = $a$0 | 0;
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $51 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $119 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $88 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
    HEAP32[$rem + 4 >> 2] = 0;
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = $a$0 | 0 | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
function __ZN19BoostedFaceDetector11detectFacesER11SimpleImageiibfffi($agg$result, $this, $img, $base_window_size, $min_n_neighbours, $merge_close_results, $starting_scale, $scale_factor, $detection_step, $n_scales) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $img = $img | 0;
 $base_window_size = $base_window_size | 0;
 $min_n_neighbours = $min_n_neighbours | 0;
 $merge_close_results = $merge_close_results | 0;
 $starting_scale = +$starting_scale;
 $scale_factor = +$scale_factor;
 $detection_step = +$detection_step;
 $n_scales = $n_scales | 0;
 var $$0$i2$i = 0, $$0$i3$i = 0, $$01$i$i$i = 0, $$pre2$i$i$i = 0, $0 = 0, $1 = 0, $101 = 0, $105 = 0, $108 = 0, $11 = 0, $110 = 0, $15 = 0, $18 = 0.0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $65 = 0, $67 = 0, $7 = 0.0, $71 = 0, $75 = 0, $8 = 0, $84 = 0, $9 = 0.0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $97 = 0, $98 = 0, $actual_scale$040 = 0.0, $detected_faces = 0, $fy$028 = 0.0, $fy$1 = 0.0, $hog = 0, $ix$036 = 0, $n_analysed_windows$034 = 0, $n_analysed_windows$1$lcssa = 0, $n_analysed_windows$126 = 0, $scale_n$041 = 0, $scale_n$135 = 0, $scale_n$2$lcssa = 0, $scale_n$227 = 0, $scale_n$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $detected_faces = sp + 96 | 0;
 $hog = sp;
 HEAP32[$detected_faces >> 2] = 0;
 $0 = $detected_faces + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $detected_faces + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 __ZN12HOGExtractorC2Ei($hog, 8);
 $2 = HEAP32[$img >> 2] | 0;
 $3 = $img + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 __ZN11SimpleImage19updateIntegralImageEv($img);
 __ZN11SimpleImage26updateRotatedIntegralImageEv($img);
 __ZN12HOGExtractor9updateHOGER11SimpleImage($hog, $img);
 $5 = $this + 4 | 0;
 HEAP32[$5 >> 2] = 0;
 L1 : do {
  if (($n_scales | 0) > 0) {
   $7 = +($base_window_size | 0);
   $8 = $this + 12 | 0;
   $9 = +($4 | 0);
   $actual_scale$040 = $starting_scale;
   $scale_n$041 = 0;
   L3 : while (1) {
    $11 = ~~($7 * $actual_scale$040);
    $15 = ~~(+($2 - $11 | 0) / $detection_step);
    if (($15 | 0) <= 0) {
     break L1;
    }
    $18 = +($4 - $11 | 0);
    $19 = $18 > 0.0;
    $ix$036 = 0;
    $n_analysed_windows$034 = 0;
    $scale_n$135 = $scale_n$041;
    while (1) {
     if ($19) {
      $22 = ~~(+($ix$036 | 0) * $detection_step);
      $23 = $22 + $11 | 0;
      $fy$028 = 0.0;
      $n_analysed_windows$126 = $n_analysed_windows$034;
      $scale_n$227 = $scale_n$135;
      while (1) {
       $24 = ~~$fy$028;
       $25 = $n_analysed_windows$126 + 1 | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
       if ((__ZN18CascadedClassifier8classifyERK11SimpleImageRK12HOGExtractoriifbi($8, $img, $hog, $22, $24, $actual_scale$040, 1, 0) | 0) == 1) {
        $30 = $24 + $11 | 0;
        $31 = HEAP32[$0 >> 2] | 0;
        if (($31 | 0) == (HEAP32[$1 >> 2] | 0)) {
         $42 = HEAP32[$detected_faces >> 2] | 0;
         $45 = $31 - $42 | 0;
         $46 = ($45 | 0) / 24 | 0;
         $47 = $46 + 1 | 0;
         if ($47 >>> 0 > 178956970) {
          break L3;
         }
         if ($46 >>> 0 < 89478485) {
          $50 = $46 << 1;
          $52 = $50 >>> 0 < $47 >>> 0 ? $47 : $50;
          if (($52 | 0) == 0) {
           $$0$i3$i = 0;
           $57 = 0;
          } else {
           $$0$i2$i = $52;
           label = 16;
          }
         } else {
          $$0$i2$i = 178956970;
          label = 16;
         }
         if ((label | 0) == 16) {
          label = 0;
          $$0$i3$i = $$0$i2$i;
          $57 = __Znwj($$0$i2$i * 24 | 0) | 0;
         }
         $56 = $57 + ($46 * 24 | 0) | 0;
         if (($56 | 0) != 0) {
          HEAP32[$56 >> 2] = $22;
          HEAP32[$57 + ($46 * 24 | 0) + 4 >> 2] = $23;
          HEAP32[$57 + ($46 * 24 | 0) + 8 >> 2] = $24;
          HEAP32[$57 + ($46 * 24 | 0) + 12 >> 2] = $30;
          HEAP32[$57 + ($46 * 24 | 0) + 16 >> 2] = $11;
          HEAP32[$57 + ($46 * 24 | 0) + 20 >> 2] = $11;
         }
         $65 = $57 + ($47 * 24 | 0) | 0;
         $67 = $57 + (((($45 | 0) / -24 | 0) + $46 | 0) * 24 | 0) | 0;
         _memcpy($67 | 0, $42 | 0, $45 | 0) | 0;
         HEAP32[$detected_faces >> 2] = $67;
         HEAP32[$0 >> 2] = $65;
         HEAP32[$1 >> 2] = $57 + ($$0$i3$i * 24 | 0);
         if (($42 | 0) == 0) {
          $71 = $65;
         } else {
          __ZdlPv($42);
          $71 = HEAP32[$0 >> 2] | 0;
         }
        } else {
         if (($31 | 0) == 0) {
          $41 = 0;
         } else {
          HEAP32[$31 >> 2] = $22;
          HEAP32[$31 + 4 >> 2] = $23;
          HEAP32[$31 + 8 >> 2] = $24;
          HEAP32[$31 + 12 >> 2] = $30;
          HEAP32[$31 + 16 >> 2] = $11;
          HEAP32[$31 + 20 >> 2] = $11;
          $41 = HEAP32[$0 >> 2] | 0;
         }
         $40 = $41 + 24 | 0;
         HEAP32[$0 >> 2] = $40;
         $71 = $40;
        }
        $75 = (($71 - (HEAP32[$detected_faces >> 2] | 0) | 0) / 24 | 0) >>> 0 > 1e4;
        $fy$1 = $75 ? $9 : $fy$028;
        $scale_n$3 = $75 ? $n_scales : $scale_n$227;
       } else {
        $fy$1 = $fy$028;
        $scale_n$3 = $scale_n$227;
       }
       $fy$028 = $fy$1 + $detection_step;
       if (!($fy$028 < $18)) {
        $n_analysed_windows$1$lcssa = $25;
        $scale_n$2$lcssa = $scale_n$3;
        break;
       } else {
        $n_analysed_windows$126 = $25;
        $scale_n$227 = $scale_n$3;
       }
      }
     } else {
      $n_analysed_windows$1$lcssa = $n_analysed_windows$034;
      $scale_n$2$lcssa = $scale_n$135;
     }
     $ix$036 = $ix$036 + 1 | 0;
     if (($ix$036 | 0) >= ($15 | 0)) {
      break;
     } else {
      $n_analysed_windows$034 = $n_analysed_windows$1$lcssa;
      $scale_n$135 = $scale_n$2$lcssa;
     }
    }
    if (($n_analysed_windows$1$lcssa | 0) == 0) {
     break L1;
    }
    $scale_n$041 = $scale_n$2$lcssa + 1 | 0;
    if (($scale_n$041 | 0) >= ($n_scales | 0)) {
     break L1;
    } else {
     $actual_scale$040 = $actual_scale$040 * $scale_factor;
    }
   }
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  }
 } while (0);
 $84 = $this + 24 | 0;
 if (($84 | 0) != ($detected_faces | 0)) {
  __ZNSt3__16vectorI10SimpleRectNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($84, HEAP32[$detected_faces >> 2] | 0, HEAP32[$0 >> 2] | 0);
 }
 if ($merge_close_results) {
  __ZN19BoostedFaceDetector17mergeCloseResultsEiii($this, $min_n_neighbours, HEAP32[$img >> 2] | 0, HEAP32[$3 >> 2] | 0);
 }
 HEAP32[$agg$result >> 2] = 0;
 $90 = $agg$result + 4 | 0;
 HEAP32[$90 >> 2] = 0;
 $91 = $agg$result + 8 | 0;
 HEAP32[$91 >> 2] = 0;
 $93 = HEAP32[$this + 28 >> 2] | 0;
 $94 = HEAP32[$84 >> 2] | 0;
 $97 = $93 - $94 | 0;
 $98 = ($97 | 0) / 24 | 0;
 if (($93 | 0) != ($94 | 0)) {
  if ($98 >>> 0 > 178956970) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  }
  $101 = __Znwj($97) | 0;
  HEAP32[$90 >> 2] = $101;
  HEAP32[$agg$result >> 2] = $101;
  HEAP32[$91 >> 2] = $101 + ($98 * 24 | 0);
  $$01$i$i$i = $94;
  $$pre2$i$i$i = $101;
  do {
   if (($$pre2$i$i$i | 0) == 0) {
    $105 = 0;
   } else {
    HEAP32[$$pre2$i$i$i + 0 >> 2] = HEAP32[$$01$i$i$i + 0 >> 2];
    HEAP32[$$pre2$i$i$i + 4 >> 2] = HEAP32[$$01$i$i$i + 4 >> 2];
    HEAP32[$$pre2$i$i$i + 8 >> 2] = HEAP32[$$01$i$i$i + 8 >> 2];
    HEAP32[$$pre2$i$i$i + 12 >> 2] = HEAP32[$$01$i$i$i + 12 >> 2];
    HEAP32[$$pre2$i$i$i + 16 >> 2] = HEAP32[$$01$i$i$i + 16 >> 2];
    HEAP32[$$pre2$i$i$i + 20 >> 2] = HEAP32[$$01$i$i$i + 20 >> 2];
    $105 = $$pre2$i$i$i;
   }
   $$pre2$i$i$i = $105 + 24 | 0;
   HEAP32[$90 >> 2] = $$pre2$i$i$i;
   $$01$i$i$i = $$01$i$i$i + 24 | 0;
  } while (($$01$i$i$i | 0) != ($93 | 0));
 }
 __ZN12HOGExtractorD2Ev($hog);
 $108 = HEAP32[$detected_faces >> 2] | 0;
 if (($108 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $110 = HEAP32[$0 >> 2] | 0;
 if (($110 | 0) != ($108 | 0)) {
  HEAP32[$0 >> 2] = $110 + (~((($110 + -24 + (0 - $108) | 0) >>> 0) / 24 | 0) * 24 | 0);
 }
 __ZdlPv($108);
 STACKTOP = sp;
 return;
}
function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$443 = 0, $$444 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$842 = 0, $$in = 0, $0 = 0, $100 = 0, $104 = 0, $110 = 0, $111 = 0, $119 = 0, $121 = 0, $125 = 0, $129 = 0, $130 = 0, $134 = 0, $14 = 0, $147 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $27 = 0, $28 = 0, $33 = 0, $40 = 0, $47 = 0, $55 = 0, $65 = 0, $7 = 0, $73 = 0, $89 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1045 = 0, $s$1046 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src >> 2] | 0;
 if (($st | 0) == 0) {
  label = 5;
 } else {
  $2 = HEAP32[$st >> 2] | 0;
  if (($2 | 0) == 0) {
   label = 5;
  } else {
   if (($ws | 0) == 0) {
    $$35 = $wn;
    $c$2 = $2;
    $s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st >> 2] = 0;
    $$3 = $ws;
    $$7 = $wn;
    $c$4 = $2;
    $s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label | 0) == 5) {
  if (($ws | 0) == 0) {
   $$02 = $wn;
   $s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;
   $$46$ph = $wn;
   $s$5$ph = $0;
   label = 6;
  }
 }
 L7 : while (1) {
  if ((label | 0) == 6) {
   label = 0;
   if (($$46$ph | 0) == 0) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0123 = $$01$ph;
    $$4622 = $$46$ph;
    $s$524 = $s$5$ph;
   }
   while (1) {
    $65 = HEAP8[$s$524 >> 0] | 0;
    do {
     if ((($65 & 255) + -1 | 0) >>> 0 < 127) {
      if (($s$524 & 3 | 0) == 0 & $$4622 >>> 0 > 4) {
       $$113 = $$0123;
       $$512 = $$4622;
       $s$614 = $s$524;
       while (1) {
        $73 = HEAP32[$s$614 >> 2] | 0;
        if ((($73 + -16843009 | $73) & -2139062144 | 0) != 0) {
         label = 31;
         break;
        }
        HEAP32[$$113 >> 2] = $73 & 255;
        HEAP32[$$113 + 4 >> 2] = HEAPU8[$s$614 + 1 >> 0] | 0;
        HEAP32[$$113 + 8 >> 2] = HEAPU8[$s$614 + 2 >> 0] | 0;
        $89 = $s$614 + 4 | 0;
        $92 = $$113 + 16 | 0;
        HEAP32[$$113 + 12 >> 2] = HEAPU8[$s$614 + 3 >> 0] | 0;
        $93 = $$512 + -4 | 0;
        if ($93 >>> 0 > 4) {
         $$113 = $92;
         $$512 = $93;
         $s$614 = $89;
        } else {
         label = 32;
         break;
        }
       }
       if ((label | 0) == 31) {
        label = 0;
        $$2 = $$113;
        $$6 = $$512;
        $97 = $73 & 255;
        $s$7 = $s$614;
        break;
       } else if ((label | 0) == 32) {
        label = 0;
        $$2 = $92;
        $$6 = $93;
        $97 = HEAP8[$89 >> 0] | 0;
        $s$7 = $89;
        break;
       }
      } else {
       $$2 = $$0123;
       $$6 = $$4622;
       $97 = $65;
       $s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;
      $$6 = $$4622;
      $97 = $65;
      $s$7 = $s$524;
     }
    } while (0);
    $96 = $97 & 255;
    if (!(($96 + -1 | 0) >>> 0 < 127)) {
     break;
    }
    $100 = $s$7 + 1 | 0;
    HEAP32[$$2 >> 2] = $96;
    $$4622 = $$6 + -1 | 0;
    if (($$4622 | 0) == 0) {
     $s$5$lcssa = $100;
     label = 26;
     break L7;
    } else {
     $$0123 = $$2 + 4 | 0;
     $s$524 = $100;
    }
   }
   $104 = $96 + -194 | 0;
   if ($104 >>> 0 > 50) {
    $$444 = $$2;
    $$842 = $$6;
    $s$1046 = $s$7;
    label = 48;
    break;
   }
   $$3 = $$2;
   $$7 = $$6;
   $c$4 = HEAP32[12808 + ($104 << 2) >> 2] | 0;
   $s$8 = $s$7 + 1 | 0;
   label = 37;
   continue;
  } else if ((label | 0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0 >> 0] | 0;
   if ((($7 & 255) + -1 | 0) >>> 0 < 127) {
    if (($s$0 & 3 | 0) == 0) {
     $14 = HEAP32[$s$0 >> 2] | 0;
     if ((($14 + -16843009 | $14) & -2139062144 | 0) == 0) {
      $$137 = $$02;
      $s$18 = $s$0;
      while (1) {
       $19 = $s$18 + 4 | 0;
       $20 = $$137 + -4 | 0;
       $21 = HEAP32[$19 >> 2] | 0;
       if ((($21 + -16843009 | $21) & -2139062144 | 0) == 0) {
        $$137 = $20;
        $s$18 = $19;
       } else {
        $$13$lcssa = $20;
        $$in = $21;
        $s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;
      $$in = $14;
      $s$1$lcssa = $s$0;
     }
     $$24 = $$13$lcssa;
     $28 = $$in & 255;
     $s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;
     $28 = $7;
     $s$2 = $s$0;
    }
   } else {
    $$24 = $$02;
    $28 = $7;
    $s$2 = $s$0;
   }
   $27 = $28 & 255;
   if (($27 + -1 | 0) >>> 0 < 127) {
    $$02 = $$24 + -1 | 0;
    $s$0 = $s$2 + 1 | 0;
    label = 7;
    continue;
   }
   $33 = $27 + -194 | 0;
   if ($33 >>> 0 > 50) {
    $$444 = $ws;
    $$842 = $$24;
    $s$1046 = $s$2;
    label = 48;
    break;
   }
   $$35 = $$24;
   $c$2 = HEAP32[12808 + ($33 << 2) >> 2] | 0;
   $s$3 = $s$2 + 1 | 0;
   label = 16;
   continue;
  } else if ((label | 0) == 16) {
   label = 0;
   $40 = (HEAPU8[$s$3 >> 0] | 0) >>> 3;
   if (($40 + -16 | $40 + ($c$2 >> 26)) >>> 0 > 7) {
    label = 17;
    break;
   }
   $47 = $s$3 + 1 | 0;
   if (($c$2 & 33554432 | 0) == 0) {
    $s$4 = $47;
   } else {
    if (((HEAPU8[$47 >> 0] | 0) + -128 | 0) >>> 0 > 63) {
     label = 20;
     break;
    }
    $55 = $s$3 + 2 | 0;
    if (($c$2 & 524288 | 0) == 0) {
     $s$4 = $55;
    } else {
     if (((HEAPU8[$55 >> 0] | 0) + -128 | 0) >>> 0 > 63) {
      label = 23;
      break;
     }
     $s$4 = $s$3 + 3 | 0;
    }
   }
   $$02 = $$35 + -1 | 0;
   $s$0 = $s$4;
   label = 7;
   continue;
  } else if ((label | 0) == 37) {
   label = 0;
   $110 = HEAPU8[$s$8 >> 0] | 0;
   $111 = $110 >>> 3;
   if (($111 + -16 | $111 + ($c$4 >> 26)) >>> 0 > 7) {
    label = 38;
    break;
   }
   $119 = $s$8 + 1 | 0;
   $121 = $110 + -128 | $c$4 << 6;
   if (($121 | 0) < 0) {
    $125 = (HEAPU8[$119 >> 0] | 0) + -128 | 0;
    if ($125 >>> 0 > 63) {
     label = 41;
     break;
    }
    $129 = $s$8 + 2 | 0;
    $130 = $125 | $121 << 6;
    if (($130 | 0) < 0) {
     $134 = (HEAPU8[$129 >> 0] | 0) + -128 | 0;
     if ($134 >>> 0 > 63) {
      label = 44;
      break;
     }
     $c$5 = $134 | $130 << 6;
     $s$9 = $s$8 + 3 | 0;
    } else {
     $c$5 = $130;
     $s$9 = $129;
    }
   } else {
    $c$5 = $121;
    $s$9 = $119;
   }
   HEAP32[$$3 >> 2] = $c$5;
   $$01$ph = $$3 + 4 | 0;
   $$46$ph = $$7 + -1 | 0;
   $s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label | 0) == 17) {
  $$4 = $ws;
  $$8 = $$35;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 20) {
  $$4 = $ws;
  $$8 = $$35;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 23) {
  $$4 = $ws;
  $$8 = $$35;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 26) {
  HEAP32[$src >> 2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 38) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $c$4;
  $s$10 = $s$8 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 41) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $121;
  $s$10 = $s$8 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 44) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $130;
  $s$10 = $s$8 + -1 | 0;
  label = 47;
 }
 if ((label | 0) == 47) {
  if (($c$6 | 0) == 0) {
   $$444 = $$4;
   $$842 = $$8;
   $s$1046 = $s$10;
   label = 48;
  } else {
   $$443 = $$4;
   $s$1045 = $s$10;
  }
 }
 if ((label | 0) == 48) {
  if ((HEAP8[$s$1046 >> 0] | 0) == 0) {
   if (($$444 | 0) != 0) {
    HEAP32[$$444 >> 2] = 0;
    HEAP32[$src >> 2] = 0;
   }
   $$0 = $wn - $$842 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$443 = $$444;
   $s$1045 = $s$1046;
  }
 }
 $147 = ___errno_location() | 0;
 HEAP32[$147 >> 2] = 84;
 if (($$443 | 0) == 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$src >> 2] = $s$1045;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $103 = 0, $106 = 0.0, $110 = 0, $12 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $22 = 0, $25 = 0, $3 = 0, $39 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $80 = 0, $87 = 0, $9 = 0, $95 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 176 | 0;
 $__decimal_point = sp + 332 | 0;
 $__thousands_sep = sp + 328 | 0;
 $__grouping = sp + 316 | 0;
 $__buf = sp + 304 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $5 = $__buf + 1 | 0;
  $$pre$phi35Z2D = $5;
  $$pre$phi37Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi35Z2D = $__buf + 1 | 0;
  $$pre$phi37Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP32[$__decimal_point >> 2] | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $135 = 1;
   $68 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $135 = 1;
    $68 = 0;
   } else {
    $135 = 0;
    $68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do {
   if (($22 | 0) == 0) {
    label = 17;
   } else {
    $25 = HEAP32[$22 + 12 >> 2] | 0;
    if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;
      $__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $39 = HEAP8[$__buf >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) {
   $46 = ($39 & 255) >>> 1;
  } else {
   $46 = HEAP32[$7 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($46 | 0)) {
   if ($41) {
    $53 = ($39 & 255) >>> 1;
    $66 = ($39 & 255) >>> 1;
   } else {
    $47 = HEAP32[$7 >> 2] | 0;
    $53 = $47;
    $66 = $47;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $53 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $59 = 10;
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $65 = $$pre$phi35Z2D;
   } else {
    $65 = HEAP32[$$pre$phi37Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $65 + $66;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = $68 + 12 | 0;
  $69 = HEAP32[$67 >> 2] | 0;
  $70 = $68 + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 63]($68) | 0;
  } else {
   $$0$i$i = HEAP32[$69 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 40 >> 2] & 63]($68) | 0;
   $$pre$i$i$i5 = $68;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $80 + 4;
   $$pre$i$i$i5 = $68;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 if (($87 & 1) == 0) {
  $95 = ($87 & 255) >>> 1;
 } else {
  $95 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($95 | 0) != 0) {
  if ((HEAP8[$__in_units >> 0] | 0) != 0) {
   $98 = HEAP32[$__g_end >> 2] | 0;
   if (($98 - $__g | 0) < 160) {
    $103 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $98 + 4;
    HEAP32[$98 >> 2] = $103;
   }
  }
 }
 $106 = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF32[$__v >> 2] = $106;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($68 | 0) == 0) {
  $134 = 0;
  $137 = 1;
 } else {
  $110 = HEAP32[$68 + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$68 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 63]($68) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 0;
   $137 = 1;
  } else {
   $134 = $68;
   $137 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 57;
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result >> 2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 57) {
  if (!$137) {
   HEAP32[$agg$result >> 2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $103 = 0, $106 = 0.0, $110 = 0, $12 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $22 = 0, $25 = 0, $3 = 0, $39 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $80 = 0, $87 = 0, $9 = 0, $95 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 176 | 0;
 $__decimal_point = sp + 332 | 0;
 $__thousands_sep = sp + 328 | 0;
 $__grouping = sp + 316 | 0;
 $__buf = sp + 304 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $5 = $__buf + 1 | 0;
  $$pre$phi35Z2D = $5;
  $$pre$phi37Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi35Z2D = $__buf + 1 | 0;
  $$pre$phi37Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP32[$__decimal_point >> 2] | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $135 = 1;
   $68 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $135 = 1;
    $68 = 0;
   } else {
    $135 = 0;
    $68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do {
   if (($22 | 0) == 0) {
    label = 17;
   } else {
    $25 = HEAP32[$22 + 12 >> 2] | 0;
    if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;
      $__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $39 = HEAP8[$__buf >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) {
   $46 = ($39 & 255) >>> 1;
  } else {
   $46 = HEAP32[$7 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($46 | 0)) {
   if ($41) {
    $53 = ($39 & 255) >>> 1;
    $66 = ($39 & 255) >>> 1;
   } else {
    $47 = HEAP32[$7 >> 2] | 0;
    $53 = $47;
    $66 = $47;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $53 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $59 = 10;
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $65 = $$pre$phi35Z2D;
   } else {
    $65 = HEAP32[$$pre$phi37Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $65 + $66;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = $68 + 12 | 0;
  $69 = HEAP32[$67 >> 2] | 0;
  $70 = $68 + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 63]($68) | 0;
  } else {
   $$0$i$i = HEAP32[$69 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 40 >> 2] & 63]($68) | 0;
   $$pre$i$i$i5 = $68;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $80 + 4;
   $$pre$i$i$i5 = $68;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 if (($87 & 1) == 0) {
  $95 = ($87 & 255) >>> 1;
 } else {
  $95 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($95 | 0) != 0) {
  if ((HEAP8[$__in_units >> 0] | 0) != 0) {
   $98 = HEAP32[$__g_end >> 2] | 0;
   if (($98 - $__g | 0) < 160) {
    $103 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $98 + 4;
    HEAP32[$98 >> 2] = $103;
   }
  }
 }
 $106 = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $106;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($68 | 0) == 0) {
  $134 = 0;
  $137 = 1;
 } else {
  $110 = HEAP32[$68 + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$68 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 63]($68) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 0;
   $137 = 1;
  } else {
   $134 = $68;
   $137 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 57;
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result >> 2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 57) {
  if (!$137) {
   HEAP32[$agg$result >> 2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $103 = 0, $106 = 0.0, $110 = 0, $12 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $22 = 0, $25 = 0, $3 = 0, $39 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $80 = 0, $87 = 0, $9 = 0, $95 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 176 | 0;
 $__decimal_point = sp + 332 | 0;
 $__thousands_sep = sp + 328 | 0;
 $__grouping = sp + 316 | 0;
 $__buf = sp + 304 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $5 = $__buf + 1 | 0;
  $$pre$phi35Z2D = $5;
  $$pre$phi37Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi35Z2D = $__buf + 1 | 0;
  $$pre$phi37Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP32[$__decimal_point >> 2] | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $135 = 1;
   $68 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $135 = 1;
    $68 = 0;
   } else {
    $135 = 0;
    $68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do {
   if (($22 | 0) == 0) {
    label = 17;
   } else {
    $25 = HEAP32[$22 + 12 >> 2] | 0;
    if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;
      $__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $39 = HEAP8[$__buf >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) {
   $46 = ($39 & 255) >>> 1;
  } else {
   $46 = HEAP32[$7 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($46 | 0)) {
   if ($41) {
    $53 = ($39 & 255) >>> 1;
    $66 = ($39 & 255) >>> 1;
   } else {
    $47 = HEAP32[$7 >> 2] | 0;
    $53 = $47;
    $66 = $47;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $53 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $59 = 10;
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $65 = $$pre$phi35Z2D;
   } else {
    $65 = HEAP32[$$pre$phi37Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $65 + $66;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = $68 + 12 | 0;
  $69 = HEAP32[$67 >> 2] | 0;
  $70 = $68 + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 63]($68) | 0;
  } else {
   $$0$i$i = HEAP32[$69 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 40 >> 2] & 63]($68) | 0;
   $$pre$i$i$i5 = $68;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $80 + 4;
   $$pre$i$i$i5 = $68;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 if (($87 & 1) == 0) {
  $95 = ($87 & 255) >>> 1;
 } else {
  $95 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($95 | 0) != 0) {
  if ((HEAP8[$__in_units >> 0] | 0) != 0) {
   $98 = HEAP32[$__g_end >> 2] | 0;
   if (($98 - $__g | 0) < 160) {
    $103 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $98 + 4;
    HEAP32[$98 >> 2] = $103;
   }
  }
 }
 $106 = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $106;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($68 | 0) == 0) {
  $134 = 0;
  $137 = 1;
 } else {
  $110 = HEAP32[$68 + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$68 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 63]($68) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 0;
   $137 = 1;
  } else {
   $134 = $68;
   $137 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 57;
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result >> 2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 57) {
  if (!$137) {
   HEAP32[$agg$result >> 2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $10 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $115 = 0, $127 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $2 = 0, $24 = 0, $27 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $82 = 0, $89 = 0, $9 = 0, $97 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 196 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 0) {
  $$0$i = 0;
 } else if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 8) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $8;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $140 = 1;
   $70 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$14 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $140 = 1;
    $70 = 0;
   } else {
    $140 = 0;
    $70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e >> 2] | 0;
  do {
   if (($24 | 0) == 0) {
    label = 21;
   } else {
    $27 = HEAP32[$24 + 12 >> 2] | 0;
    if (($27 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$27 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 21;
     break;
    } else {
     if ($140) {
      $141 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0;
   if ($140) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi34Z2D;
   } else {
    $67 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $70 + 12 | 0;
  $71 = HEAP32[$69 >> 2] | 0;
  $72 = $70 + 16 | 0;
  if (($71 | 0) == (HEAP32[$72 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i = HEAP32[$71 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $141;
   $__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$72 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] & 63]($70) | 0;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $82 + 4;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping >> 0] | 0;
 if (($89 & 1) == 0) {
  $97 = ($89 & 255) >>> 1;
 } else {
  $97 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($97 | 0) != 0) {
  $98 = HEAP32[$__g_end >> 2] | 0;
  if (($98 - $__g | 0) < 160) {
   $103 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $98 + 4;
   HEAP32[$98 >> 2] = $103;
  }
 }
 $106 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 $108 = $__v;
 HEAP32[$108 >> 2] = $106;
 HEAP32[$108 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($70 | 0) == 0) {
  $139 = 0;
  $142 = 1;
 } else {
  $115 = HEAP32[$70 + 12 >> 2] | 0;
  if (($115 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$115 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $139 = 0;
   $142 = 1;
  } else {
   $139 = $70;
   $142 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60;
  } else {
   $127 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($127 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$127 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   }
   if ($142) {
    HEAP32[$agg$result >> 2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  if (!$142) {
   HEAP32[$agg$result >> 2] = $139;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $139;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $10 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $115 = 0, $127 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $2 = 0, $24 = 0, $27 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $82 = 0, $89 = 0, $9 = 0, $97 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 196 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 8) {
  $$0$i = 16;
 } else if (($2 | 0) == 0) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $8;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $140 = 1;
   $70 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$14 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $140 = 1;
    $70 = 0;
   } else {
    $140 = 0;
    $70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e >> 2] | 0;
  do {
   if (($24 | 0) == 0) {
    label = 21;
   } else {
    $27 = HEAP32[$24 + 12 >> 2] | 0;
    if (($27 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$27 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 21;
     break;
    } else {
     if ($140) {
      $141 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0;
   if ($140) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi34Z2D;
   } else {
    $67 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $70 + 12 | 0;
  $71 = HEAP32[$69 >> 2] | 0;
  $72 = $70 + 16 | 0;
  if (($71 | 0) == (HEAP32[$72 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i = HEAP32[$71 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $141;
   $__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$72 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] & 63]($70) | 0;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $82 + 4;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping >> 0] | 0;
 if (($89 & 1) == 0) {
  $97 = ($89 & 255) >>> 1;
 } else {
  $97 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($97 | 0) != 0) {
  $98 = HEAP32[$__g_end >> 2] | 0;
  if (($98 - $__g | 0) < 160) {
   $103 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $98 + 4;
   HEAP32[$98 >> 2] = $103;
  }
 }
 $106 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 $108 = $__v;
 HEAP32[$108 >> 2] = $106;
 HEAP32[$108 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($70 | 0) == 0) {
  $139 = 0;
  $142 = 1;
 } else {
  $115 = HEAP32[$70 + 12 >> 2] | 0;
  if (($115 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$115 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $139 = 0;
   $142 = 1;
  } else {
   $139 = $70;
   $142 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60;
  } else {
   $127 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($127 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$127 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   }
   if ($142) {
    HEAP32[$agg$result >> 2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  if (!$142) {
   HEAP32[$agg$result >> 2] = $139;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $139;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $104 = 0, $107 = 0.0, $120 = 0, $121 = 0, $136 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $39 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $81 = 0, $88 = 0, $9 = 0, $96 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 8 | 0;
 $__buf = sp + 20 | 0;
 $__a_end = sp + 192 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 4 | 0;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $5 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $5;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP8[$__decimal_point >> 0] | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $22 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $22 = 0;
    } else {
     $22 = $$pre$i$i$i4;
    }
   } else {
    $22 = $$pre$i$i$i4;
   }
  }
  $21 = ($22 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do {
   if (($23 | 0) == 0) {
    label = 14;
   } else {
    if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;
      $__a$2 = $__a$0;
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 14;
     break;
    } else {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;
      $__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($21) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $39 = HEAP8[$__buf >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) {
   $46 = ($39 & 255) >>> 1;
  } else {
   $46 = HEAP32[$7 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($46 | 0)) {
   if ($41) {
    $53 = ($39 & 255) >>> 1;
    $66 = ($39 & 255) >>> 1;
   } else {
    $47 = HEAP32[$7 >> 2] | 0;
    $53 = $47;
    $66 = $47;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $53 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $59 = 10;
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $65 = $$pre$phi33Z2D;
   } else {
    $65 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $65 + $66;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = $22 + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $22 + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0;
  } else {
   $$0$i$i = HEAPU8[$68 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0;
   $$pre$i$i$i4 = $22;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i4 = $22;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 if (($88 & 1) == 0) {
  $96 = ($88 & 255) >>> 1;
 } else {
  $96 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($96 | 0) != 0) {
  if ((HEAP8[$__in_units >> 0] | 0) != 0) {
   $99 = HEAP32[$__g_end >> 2] | 0;
   if (($99 - $__g | 0) < 160) {
    $104 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $99 + 4;
    HEAP32[$99 >> 2] = $104;
   }
  }
 }
 $107 = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF32[$__v >> 2] = $107;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($22 | 0) == 0) {
  $121 = 0;
 } else {
  if ((HEAP32[$22 + 12 >> 2] | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $121 = 0;
   } else {
    $121 = $22;
   }
  } else {
   $121 = $22;
  }
 }
 $120 = ($121 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 51;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$120) {
     break;
    }
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 51;
    break;
   }
   if ($120 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 51) {
  if (!$120) {
   HEAP32[$agg$result >> 2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $104 = 0, $107 = 0.0, $120 = 0, $121 = 0, $136 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $39 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $81 = 0, $88 = 0, $9 = 0, $96 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 8 | 0;
 $__buf = sp + 20 | 0;
 $__a_end = sp + 192 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 4 | 0;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $5 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $5;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP8[$__decimal_point >> 0] | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $22 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $22 = 0;
    } else {
     $22 = $$pre$i$i$i4;
    }
   } else {
    $22 = $$pre$i$i$i4;
   }
  }
  $21 = ($22 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do {
   if (($23 | 0) == 0) {
    label = 14;
   } else {
    if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;
      $__a$2 = $__a$0;
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 14;
     break;
    } else {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;
      $__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($21) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $39 = HEAP8[$__buf >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) {
   $46 = ($39 & 255) >>> 1;
  } else {
   $46 = HEAP32[$7 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($46 | 0)) {
   if ($41) {
    $53 = ($39 & 255) >>> 1;
    $66 = ($39 & 255) >>> 1;
   } else {
    $47 = HEAP32[$7 >> 2] | 0;
    $53 = $47;
    $66 = $47;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $53 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $59 = 10;
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $65 = $$pre$phi33Z2D;
   } else {
    $65 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $65 + $66;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = $22 + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $22 + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0;
  } else {
   $$0$i$i = HEAPU8[$68 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0;
   $$pre$i$i$i4 = $22;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i4 = $22;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 if (($88 & 1) == 0) {
  $96 = ($88 & 255) >>> 1;
 } else {
  $96 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($96 | 0) != 0) {
  if ((HEAP8[$__in_units >> 0] | 0) != 0) {
   $99 = HEAP32[$__g_end >> 2] | 0;
   if (($99 - $__g | 0) < 160) {
    $104 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $99 + 4;
    HEAP32[$99 >> 2] = $104;
   }
  }
 }
 $107 = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $107;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($22 | 0) == 0) {
  $121 = 0;
 } else {
  if ((HEAP32[$22 + 12 >> 2] | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $121 = 0;
   } else {
    $121 = $22;
   }
  } else {
   $121 = $22;
  }
 }
 $120 = ($121 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 51;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$120) {
     break;
    }
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 51;
    break;
   }
   if ($120 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 51) {
  if (!$120) {
   HEAP32[$agg$result >> 2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $104 = 0, $107 = 0.0, $120 = 0, $121 = 0, $136 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $39 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $81 = 0, $88 = 0, $9 = 0, $96 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 8 | 0;
 $__buf = sp + 20 | 0;
 $__a_end = sp + 192 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 4 | 0;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $5 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $5;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP8[$__decimal_point >> 0] | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $22 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $22 = 0;
    } else {
     $22 = $$pre$i$i$i4;
    }
   } else {
    $22 = $$pre$i$i$i4;
   }
  }
  $21 = ($22 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do {
   if (($23 | 0) == 0) {
    label = 14;
   } else {
    if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;
      $__a$2 = $__a$0;
      break L5;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 14;
     break;
    } else {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;
      $__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($21) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $39 = HEAP8[$__buf >> 0] | 0;
  $41 = ($39 & 1) == 0;
  if ($41) {
   $46 = ($39 & 255) >>> 1;
  } else {
   $46 = HEAP32[$7 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($46 | 0)) {
   if ($41) {
    $53 = ($39 & 255) >>> 1;
    $66 = ($39 & 255) >>> 1;
   } else {
    $47 = HEAP32[$7 >> 2] | 0;
    $53 = $47;
    $66 = $47;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $53 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $59 = 10;
   } else {
    $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $65 = $$pre$phi33Z2D;
   } else {
    $65 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $65 + $66;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = $22 + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $22 + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0;
  } else {
   $$0$i$i = HEAPU8[$68 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 63]($22) | 0;
   $$pre$i$i$i4 = $22;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i4 = $22;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 if (($88 & 1) == 0) {
  $96 = ($88 & 255) >>> 1;
 } else {
  $96 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($96 | 0) != 0) {
  if ((HEAP8[$__in_units >> 0] | 0) != 0) {
   $99 = HEAP32[$__g_end >> 2] | 0;
   if (($99 - $__g | 0) < 160) {
    $104 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $99 + 4;
    HEAP32[$99 >> 2] = $104;
   }
  }
 }
 $107 = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 HEAPF64[$__v >> 3] = $107;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($22 | 0) == 0) {
  $121 = 0;
 } else {
  if ((HEAP32[$22 + 12 >> 2] | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $121 = 0;
   } else {
    $121 = $22;
   }
  } else {
   $121 = $22;
  }
 }
 $120 = ($121 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 51;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$120) {
     break;
    }
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 51;
    break;
   }
   if ($120 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 51) {
  if (!$120) {
   HEAP32[$agg$result >> 2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $10 = 0, $103 = 0, $106 = 0, $11 = 0, $110 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $2 = 0, $24 = 0, $27 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $82 = 0, $89 = 0, $9 = 0, $97 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 196 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 8) {
  $$0$i = 16;
 } else if (($2 | 0) == 0) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $8;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $135 = 1;
   $70 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$14 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $135 = 1;
    $70 = 0;
   } else {
    $135 = 0;
    $70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e >> 2] | 0;
  do {
   if (($24 | 0) == 0) {
    label = 21;
   } else {
    $27 = HEAP32[$24 + 12 >> 2] | 0;
    if (($27 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$27 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 21;
     break;
    } else {
     if ($135) {
      $136 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi34Z2D;
   } else {
    $67 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $70 + 12 | 0;
  $71 = HEAP32[$69 >> 2] | 0;
  $72 = $70 + 16 | 0;
  if (($71 | 0) == (HEAP32[$72 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i = HEAP32[$71 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$72 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] & 63]($70) | 0;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $82 + 4;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping >> 0] | 0;
 if (($89 & 1) == 0) {
  $97 = ($89 & 255) >>> 1;
 } else {
  $97 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($97 | 0) != 0) {
  $98 = HEAP32[$__g_end >> 2] | 0;
  if (($98 - $__g | 0) < 160) {
   $103 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $98 + 4;
   HEAP32[$98 >> 2] = $103;
  }
 }
 $106 = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 HEAP16[$__v >> 1] = $106;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($70 | 0) == 0) {
  $134 = 0;
  $137 = 1;
 } else {
  $110 = HEAP32[$70 + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 0;
   $137 = 1;
  } else {
   $134 = $70;
   $137 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60;
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   }
   if ($137) {
    HEAP32[$agg$result >> 2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  if (!$137) {
   HEAP32[$agg$result >> 2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $10 = 0, $103 = 0, $106 = 0, $11 = 0, $110 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $2 = 0, $24 = 0, $27 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $82 = 0, $89 = 0, $9 = 0, $97 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 196 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 0) {
  $$0$i = 0;
 } else if (($2 | 0) == 8) {
  $$0$i = 16;
 } else if (($2 | 0) == 64) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $8;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $135 = 1;
   $70 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$14 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $135 = 1;
    $70 = 0;
   } else {
    $135 = 0;
    $70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e >> 2] | 0;
  do {
   if (($24 | 0) == 0) {
    label = 21;
   } else {
    $27 = HEAP32[$24 + 12 >> 2] | 0;
    if (($27 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$27 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 21;
     break;
    } else {
     if ($135) {
      $136 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi34Z2D;
   } else {
    $67 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $70 + 12 | 0;
  $71 = HEAP32[$69 >> 2] | 0;
  $72 = $70 + 16 | 0;
  if (($71 | 0) == (HEAP32[$72 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i = HEAP32[$71 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$72 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] & 63]($70) | 0;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $82 + 4;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping >> 0] | 0;
 if (($89 & 1) == 0) {
  $97 = ($89 & 255) >>> 1;
 } else {
  $97 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($97 | 0) != 0) {
  $98 = HEAP32[$__g_end >> 2] | 0;
  if (($98 - $__g | 0) < 160) {
   $103 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $98 + 4;
   HEAP32[$98 >> 2] = $103;
  }
 }
 $106 = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 HEAP32[$__v >> 2] = $106;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($70 | 0) == 0) {
  $134 = 0;
  $137 = 1;
 } else {
  $110 = HEAP32[$70 + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 0;
   $137 = 1;
  } else {
   $134 = $70;
   $137 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60;
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   }
   if ($137) {
    HEAP32[$agg$result >> 2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  if (!$137) {
   HEAP32[$agg$result >> 2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $10 = 0, $103 = 0, $106 = 0, $11 = 0, $110 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $2 = 0, $24 = 0, $27 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $82 = 0, $89 = 0, $9 = 0, $97 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 196 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 0) {
  $$0$i = 0;
 } else if (($2 | 0) == 8) {
  $$0$i = 16;
 } else if (($2 | 0) == 64) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $8;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $135 = 1;
   $70 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$14 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $135 = 1;
    $70 = 0;
   } else {
    $135 = 0;
    $70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e >> 2] | 0;
  do {
   if (($24 | 0) == 0) {
    label = 21;
   } else {
    $27 = HEAP32[$24 + 12 >> 2] | 0;
    if (($27 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$27 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 21;
     break;
    } else {
     if ($135) {
      $136 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi34Z2D;
   } else {
    $67 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $70 + 12 | 0;
  $71 = HEAP32[$69 >> 2] | 0;
  $72 = $70 + 16 | 0;
  if (($71 | 0) == (HEAP32[$72 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i = HEAP32[$71 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$72 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] & 63]($70) | 0;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $82 + 4;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping >> 0] | 0;
 if (($89 & 1) == 0) {
  $97 = ($89 & 255) >>> 1;
 } else {
  $97 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($97 | 0) != 0) {
  $98 = HEAP32[$__g_end >> 2] | 0;
  if (($98 - $__g | 0) < 160) {
   $103 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $98 + 4;
   HEAP32[$98 >> 2] = $103;
  }
 }
 $106 = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 HEAP32[$__v >> 2] = $106;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($70 | 0) == 0) {
  $134 = 0;
  $137 = 1;
 } else {
  $110 = HEAP32[$70 + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 0;
   $137 = 1;
  } else {
   $134 = $70;
   $137 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60;
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   }
   if ($137) {
    HEAP32[$agg$result >> 2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  if (!$137) {
   HEAP32[$agg$result >> 2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $10 = 0, $103 = 0, $106 = 0, $11 = 0, $110 = 0, $122 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $2 = 0, $24 = 0, $27 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $82 = 0, $89 = 0, $9 = 0, $97 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 196 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 8) {
  $$0$i = 16;
 } else if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 0) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $8;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i5 | 0) == 0) {
   $135 = 1;
   $70 = 0;
  } else {
   $14 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($14 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0;
   } else {
    $$0$i$i$i$i3 = HEAP32[$14 >> 2] | 0;
   }
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $135 = 1;
    $70 = 0;
   } else {
    $135 = 0;
    $70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e >> 2] | 0;
  do {
   if (($24 | 0) == 0) {
    label = 21;
   } else {
    $27 = HEAP32[$24 + 12 >> 2] | 0;
    if (($27 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
    } else {
     $$0$i$i1$i$i9 = HEAP32[$27 >> 2] | 0;
    }
    if (($$0$i$i1$i$i9 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 21;
     break;
    } else {
     if ($135) {
      $136 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi34Z2D;
   } else {
    $67 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $70 + 12 | 0;
  $71 = HEAP32[$69 >> 2] | 0;
  $72 = $70 + 16 | 0;
  if (($71 | 0) == (HEAP32[$72 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i = HEAP32[$71 >> 2] | 0;
  }
  if ((__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i3$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$72 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] & 63]($70) | 0;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $82 + 4;
   $$pre$i$i$i5 = $70;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping >> 0] | 0;
 if (($89 & 1) == 0) {
  $97 = ($89 & 255) >>> 1;
 } else {
  $97 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($97 | 0) != 0) {
  $98 = HEAP32[$__g_end >> 2] | 0;
  if (($98 - $__g | 0) < 160) {
   $103 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $98 + 4;
   HEAP32[$98 >> 2] = $103;
  }
 }
 $106 = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 HEAP32[$__v >> 2] = $106;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($70 | 0) == 0) {
  $134 = 0;
  $137 = 1;
 } else {
  $110 = HEAP32[$70 + 12 >> 2] | 0;
  if (($110 | 0) == (HEAP32[$70 + 16 >> 2] | 0)) {
   $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0;
  } else {
   $$0$i$i$i$i = HEAP32[$110 >> 2] | 0;
  }
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 0;
   $137 = 1;
  } else {
   $134 = $70;
   $137 = 0;
  }
 }
 do {
  if (($$pre$i3$i$i | 0) == 0) {
   label = 60;
  } else {
   $122 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
   if (($122 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$122 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   }
   if ($137) {
    HEAP32[$agg$result >> 2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  if (!$137) {
   HEAP32[$agg$result >> 2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $125 = 0, $126 = 0, $141 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $83 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 192 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 8) {
  $$0$i = 16;
 } else if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 0) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi32Z2D = $8;
  $$pre$phi34Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi32Z2D = $__buf + 1 | 0;
  $$pre$phi34Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $24 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24 | 0) == 0;
  $25 = HEAP32[$__e >> 2] | 0;
  do {
   if (($25 | 0) == 0) {
    label = 18;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     if ($23) {
      $141 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $141 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi32Z2D;
   } else {
    $67 = HEAP32[$$pre$phi34Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $24 + 12 | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  $71 = $24 + 16 | 0;
  if (($70 | 0) == (HEAP32[$71 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
  } else {
   $$0$i$i = HEAPU8[$70 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $141;
   $__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69 >> 2] | 0;
  if (($83 | 0) == (HEAP32[$71 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 63]($24) | 0;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $83 + 1;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping >> 0] | 0;
 if (($90 & 1) == 0) {
  $98 = ($90 & 255) >>> 1;
 } else {
  $98 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($98 | 0) != 0) {
  $99 = HEAP32[$__g_end >> 2] | 0;
  if (($99 - $__g | 0) < 160) {
   $104 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $99 + 4;
   HEAP32[$99 >> 2] = $104;
  }
 }
 $107 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 $109 = $__v;
 HEAP32[$109 >> 2] = $107;
 HEAP32[$109 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($24 | 0) == 0) {
  $126 = 0;
 } else {
  if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $126 = 0;
   } else {
    $126 = $24;
   }
  } else {
   $126 = $24;
  }
 }
 $125 = ($126 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$125) {
     break;
    }
    HEAP32[$agg$result >> 2] = $126;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 54;
    break;
   }
   if ($125 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $126;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 54) {
  if (!$125) {
   HEAP32[$agg$result >> 2] = $126;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $126;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $125 = 0, $126 = 0, $141 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $83 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 192 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 8) {
  $$0$i = 16;
 } else if (($2 | 0) == 0) {
  $$0$i = 0;
 } else if (($2 | 0) == 64) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi32Z2D = $8;
  $$pre$phi34Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi32Z2D = $__buf + 1 | 0;
  $$pre$phi34Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $24 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24 | 0) == 0;
  $25 = HEAP32[$__e >> 2] | 0;
  do {
   if (($25 | 0) == 0) {
    label = 18;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     if ($23) {
      $141 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $141 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi32Z2D;
   } else {
    $67 = HEAP32[$$pre$phi34Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $24 + 12 | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  $71 = $24 + 16 | 0;
  if (($70 | 0) == (HEAP32[$71 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
  } else {
   $$0$i$i = HEAPU8[$70 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $141;
   $__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69 >> 2] | 0;
  if (($83 | 0) == (HEAP32[$71 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 63]($24) | 0;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $83 + 1;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping >> 0] | 0;
 if (($90 & 1) == 0) {
  $98 = ($90 & 255) >>> 1;
 } else {
  $98 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($98 | 0) != 0) {
  $99 = HEAP32[$__g_end >> 2] | 0;
  if (($99 - $__g | 0) < 160) {
   $104 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $99 + 4;
   HEAP32[$99 >> 2] = $104;
  }
 }
 $107 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 $109 = $__v;
 HEAP32[$109 >> 2] = $107;
 HEAP32[$109 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($24 | 0) == 0) {
  $126 = 0;
 } else {
  if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $126 = 0;
   } else {
    $126 = $24;
   }
  } else {
   $126 = $24;
  }
 }
 $125 = ($126 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$125) {
     break;
    }
    HEAP32[$agg$result >> 2] = $126;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 54;
    break;
   }
   if ($125 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $126;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 54) {
  if (!$125) {
   HEAP32[$agg$result >> 2] = $126;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $126;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $10 = 0, $104 = 0, $107 = 0, $11 = 0, $120 = 0, $121 = 0, $136 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $83 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 192 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 0) {
  $$0$i = 0;
 } else if (($2 | 0) == 8) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi32Z2D = $8;
  $$pre$phi34Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi32Z2D = $__buf + 1 | 0;
  $$pre$phi34Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $24 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24 | 0) == 0;
  $25 = HEAP32[$__e >> 2] | 0;
  do {
   if (($25 | 0) == 0) {
    label = 18;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi32Z2D;
   } else {
    $67 = HEAP32[$$pre$phi34Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $24 + 12 | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  $71 = $24 + 16 | 0;
  if (($70 | 0) == (HEAP32[$71 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
  } else {
   $$0$i$i = HEAPU8[$70 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69 >> 2] | 0;
  if (($83 | 0) == (HEAP32[$71 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 63]($24) | 0;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $83 + 1;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping >> 0] | 0;
 if (($90 & 1) == 0) {
  $98 = ($90 & 255) >>> 1;
 } else {
  $98 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($98 | 0) != 0) {
  $99 = HEAP32[$__g_end >> 2] | 0;
  if (($99 - $__g | 0) < 160) {
   $104 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $99 + 4;
   HEAP32[$99 >> 2] = $104;
  }
 }
 $107 = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 HEAP16[$__v >> 1] = $107;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($24 | 0) == 0) {
  $121 = 0;
 } else {
  if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $121 = 0;
   } else {
    $121 = $24;
   }
  } else {
   $121 = $24;
  }
 }
 $120 = ($121 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$120) {
     break;
    }
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 54;
    break;
   }
   if ($120 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 54) {
  if (!$120) {
   HEAP32[$agg$result >> 2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $10 = 0, $104 = 0, $107 = 0, $11 = 0, $120 = 0, $121 = 0, $136 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $83 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 192 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 8) {
  $$0$i = 16;
 } else if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 0) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi32Z2D = $8;
  $$pre$phi34Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi32Z2D = $__buf + 1 | 0;
  $$pre$phi34Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $24 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24 | 0) == 0;
  $25 = HEAP32[$__e >> 2] | 0;
  do {
   if (($25 | 0) == 0) {
    label = 18;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi32Z2D;
   } else {
    $67 = HEAP32[$$pre$phi34Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $24 + 12 | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  $71 = $24 + 16 | 0;
  if (($70 | 0) == (HEAP32[$71 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
  } else {
   $$0$i$i = HEAPU8[$70 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69 >> 2] | 0;
  if (($83 | 0) == (HEAP32[$71 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 63]($24) | 0;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $83 + 1;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping >> 0] | 0;
 if (($90 & 1) == 0) {
  $98 = ($90 & 255) >>> 1;
 } else {
  $98 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($98 | 0) != 0) {
  $99 = HEAP32[$__g_end >> 2] | 0;
  if (($99 - $__g | 0) < 160) {
   $104 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $99 + 4;
   HEAP32[$99 >> 2] = $104;
  }
 }
 $107 = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 HEAP32[$__v >> 2] = $107;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($24 | 0) == 0) {
  $121 = 0;
 } else {
  if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $121 = 0;
   } else {
    $121 = $24;
   }
  } else {
   $121 = $24;
  }
 }
 $120 = ($121 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$120) {
     break;
    }
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 54;
    break;
   }
   if ($120 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 54) {
  if (!$120) {
   HEAP32[$agg$result >> 2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $10 = 0, $104 = 0, $107 = 0, $11 = 0, $120 = 0, $121 = 0, $136 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $83 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 192 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 0) {
  $$0$i = 0;
 } else if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 8) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi32Z2D = $8;
  $$pre$phi34Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi32Z2D = $__buf + 1 | 0;
  $$pre$phi34Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $24 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24 | 0) == 0;
  $25 = HEAP32[$__e >> 2] | 0;
  do {
   if (($25 | 0) == 0) {
    label = 18;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi32Z2D;
   } else {
    $67 = HEAP32[$$pre$phi34Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $24 + 12 | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  $71 = $24 + 16 | 0;
  if (($70 | 0) == (HEAP32[$71 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
  } else {
   $$0$i$i = HEAPU8[$70 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69 >> 2] | 0;
  if (($83 | 0) == (HEAP32[$71 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 63]($24) | 0;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $83 + 1;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping >> 0] | 0;
 if (($90 & 1) == 0) {
  $98 = ($90 & 255) >>> 1;
 } else {
  $98 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($98 | 0) != 0) {
  $99 = HEAP32[$__g_end >> 2] | 0;
  if (($99 - $__g | 0) < 160) {
   $104 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $99 + 4;
   HEAP32[$99 >> 2] = $104;
  }
 }
 $107 = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 HEAP32[$__v >> 2] = $107;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($24 | 0) == 0) {
  $121 = 0;
 } else {
  if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $121 = 0;
   } else {
    $121 = $24;
   }
  } else {
   $121 = $24;
  }
 }
 $120 = ($121 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$120) {
     break;
    }
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 54;
    break;
   }
   if ($120 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 54) {
  if (!$120) {
   HEAP32[$agg$result >> 2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $10 = 0, $104 = 0, $107 = 0, $11 = 0, $120 = 0, $121 = 0, $136 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $83 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 4 | 0;
 $__buf = sp + 16 | 0;
 $__a_end = sp + 28 | 0;
 $__g = sp + 32 | 0;
 $__g_end = sp;
 $__dc = sp + 192 | 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 74;
 if (($2 | 0) == 64) {
  $$0$i = 8;
 } else if (($2 | 0) == 0) {
  $$0$i = 0;
 } else if (($2 | 0) == 8) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if ((HEAP8[$__buf >> 0] & 1) == 0) {
  $8 = $__buf + 1 | 0;
  $$pre$phi32Z2D = $8;
  $$pre$phi34Z2D = $__buf + 8 | 0;
  $9 = $8;
 } else {
  $6 = $__buf + 8 | 0;
  $$pre$phi32Z2D = $__buf + 1 | 0;
  $$pre$phi34Z2D = $6;
  $9 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $9;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $10 = $__buf + 4 | 0;
 $11 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $9;
 L10 : while (1) {
  if (($$pre$i$i$i4 | 0) == 0) {
   $24 = 0;
  } else {
   if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24 | 0) == 0;
  $25 = HEAP32[$__e >> 2] | 0;
  do {
   if (($25 | 0) == 0) {
    label = 18;
   } else {
    if ((HEAP32[$25 + 12 >> 2] | 0) != (HEAP32[$25 + 16 >> 2] | 0)) {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;
      $__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while (0);
  if ((label | 0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $41 = HEAP8[$__buf >> 0] | 0;
  $43 = ($41 & 1) == 0;
  if ($43) {
   $48 = ($41 & 255) >>> 1;
  } else {
   $48 = HEAP32[$10 >> 2] | 0;
  }
  if (((HEAP32[$__a_end >> 2] | 0) - $__a$0 | 0) == ($48 | 0)) {
   if ($43) {
    $55 = ($41 & 255) >>> 1;
    $68 = ($41 & 255) >>> 1;
   } else {
    $49 = HEAP32[$10 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $61 = 10;
   } else {
    $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if ((HEAP8[$__buf >> 0] & 1) == 0) {
    $67 = $$pre$phi32Z2D;
   } else {
    $67 = HEAP32[$$pre$phi34Z2D >> 2] | 0;
   }
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = $24 + 12 | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  $71 = $24 + 16 | 0;
  if (($70 | 0) == (HEAP32[$71 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0;
  } else {
   $$0$i$i = HEAPU8[$70 >> 0] | 0;
  }
  if ((__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $11, $__grouping, $__g, $__g_end, $__atoms) | 0) != 0) {
   $$pre$i2$i$i = $136;
   $__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69 >> 2] | 0;
  if (($83 | 0) == (HEAP32[$71 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 63]($24) | 0;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $83 + 1;
   $$pre$i$i$i4 = $24;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping >> 0] | 0;
 if (($90 & 1) == 0) {
  $98 = ($90 & 255) >>> 1;
 } else {
  $98 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($98 | 0) != 0) {
  $99 = HEAP32[$__g_end >> 2] | 0;
  if (($99 - $__g | 0) < 160) {
   $104 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $99 + 4;
   HEAP32[$99 >> 2] = $104;
  }
 }
 $107 = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 HEAP32[$__v >> 2] = $107;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (($24 | 0) == 0) {
  $121 = 0;
 } else {
  if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $121 = 0;
   } else {
    $121 = $24;
   }
  } else {
   $121 = $24;
  }
 }
 $120 = ($121 | 0) == 0;
 do {
  if (($$pre$i2$i$i | 0) == 0) {
   label = 54;
  } else {
   if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) {
    if (!$120) {
     break;
    }
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 54;
    break;
   }
   if ($120 ^ ($$pre$i2$i$i | 0) == 0) {
    HEAP32[$agg$result >> 2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 54) {
  if (!$120) {
   HEAP32[$agg$result >> 2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $108 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $126 = 0, $127 = 0, $136 = 0, $145 = 0, $152 = 0, $163 = 0, $173 = 0, $2 = 0, $22 = 0, $3 = 0, $35 = 0, $37 = 0, $4 = 0, $47 = 0, $49 = 0, $58 = 0, $6 = 0, $64 = 0, $70 = 0, $72 = 0, $73 = 0, $76 = 0, $78 = 0, $80 = 0, $9 = 0, $93 = 0, $98 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $newp$0 = 0, $storemerge = 0, $storemerge21 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[14352 >> 2] | 0;
 if ($p >>> 0 < $4 >>> 0) {
  _abort();
 }
 $6 = $1 & 3;
 if (!(($6 | 0) != 1 & $p >>> 0 < $3 >>> 0)) {
  _abort();
 }
 $9 = $p + ($2 | 4) | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 & 1 | 0) == 0) {
  _abort();
 }
 if (($6 | 0) == 0) {
  if ($nb >>> 0 < 256) {
   $newp$0 = 0;
   STACKTOP = sp;
   return $newp$0 | 0;
  }
  if (!($2 >>> 0 < ($nb + 4 | 0) >>> 0)) {
   if (!(($2 - $nb | 0) >>> 0 > HEAP32[14816 >> 2] << 1 >>> 0)) {
    $newp$0 = $p;
    STACKTOP = sp;
    return $newp$0 | 0;
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;
  return $newp$0 | 0;
 }
 if (!($2 >>> 0 < $nb >>> 0)) {
  $22 = $2 - $nb | 0;
  if (!($22 >>> 0 > 15)) {
   $newp$0 = $p;
   STACKTOP = sp;
   return $newp$0 | 0;
  }
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $22 | 3;
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 1;
  _dispose_chunk($p + $nb | 0, $22);
  $newp$0 = $p;
  STACKTOP = sp;
  return $newp$0 | 0;
 }
 if (($3 | 0) == (HEAP32[14360 >> 2] | 0)) {
  $35 = (HEAP32[14348 >> 2] | 0) + $2 | 0;
  if (!($35 >>> 0 > $nb >>> 0)) {
   $newp$0 = 0;
   STACKTOP = sp;
   return $newp$0 | 0;
  }
  $37 = $35 - $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $37 | 1;
  HEAP32[14360 >> 2] = $p + $nb;
  HEAP32[14348 >> 2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;
  return $newp$0 | 0;
 }
 if (($3 | 0) == (HEAP32[14356 >> 2] | 0)) {
  $47 = (HEAP32[14344 >> 2] | 0) + $2 | 0;
  if ($47 >>> 0 < $nb >>> 0) {
   $newp$0 = 0;
   STACKTOP = sp;
   return $newp$0 | 0;
  }
  $49 = $47 - $nb | 0;
  if ($49 >>> 0 > 15) {
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$p + ($nb + 4) >> 2] = $49 | 1;
   HEAP32[$p + $47 >> 2] = $49;
   $58 = $p + ($47 + 4) | 0;
   HEAP32[$58 >> 2] = HEAP32[$58 >> 2] & -2;
   $storemerge = $p + $nb | 0;
   $storemerge21 = $49;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $47 | 2;
   $64 = $p + ($47 + 4) | 0;
   HEAP32[$64 >> 2] = HEAP32[$64 >> 2] | 1;
   $storemerge = 0;
   $storemerge21 = 0;
  }
  HEAP32[14344 >> 2] = $storemerge21;
  HEAP32[14356 >> 2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;
  return $newp$0 | 0;
 }
 if (($10 & 2 | 0) != 0) {
  $newp$0 = 0;
  STACKTOP = sp;
  return $newp$0 | 0;
 }
 $70 = ($10 & -8) + $2 | 0;
 if ($70 >>> 0 < $nb >>> 0) {
  $newp$0 = 0;
  STACKTOP = sp;
  return $newp$0 | 0;
 }
 $72 = $70 - $nb | 0;
 $73 = $10 >>> 3;
 do {
  if ($10 >>> 0 < 256) {
   $76 = HEAP32[$p + ($2 + 8) >> 2] | 0;
   $78 = HEAP32[$p + ($2 + 12) >> 2] | 0;
   $80 = 14376 + ($73 << 1 << 2) | 0;
   if (($76 | 0) != ($80 | 0)) {
    if ($76 >>> 0 < $4 >>> 0) {
     _abort();
    }
    if ((HEAP32[$76 + 12 >> 2] | 0) != ($3 | 0)) {
     _abort();
    }
   }
   if (($78 | 0) == ($76 | 0)) {
    HEAP32[3584] = HEAP32[3584] & ~(1 << $73);
    break;
   }
   if (($78 | 0) == ($80 | 0)) {
    $$pre$phiZ2D = $78 + 8 | 0;
   } else {
    if ($78 >>> 0 < $4 >>> 0) {
     _abort();
    }
    $93 = $78 + 8 | 0;
    if ((HEAP32[$93 >> 2] | 0) == ($3 | 0)) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
    }
   }
   HEAP32[$76 + 12 >> 2] = $78;
   HEAP32[$$pre$phiZ2D >> 2] = $76;
  } else {
   $98 = HEAP32[$p + ($2 + 24) >> 2] | 0;
   $100 = HEAP32[$p + ($2 + 12) >> 2] | 0;
   do {
    if (($100 | 0) == ($3 | 0)) {
     $111 = $p + ($2 + 20) | 0;
     $112 = HEAP32[$111 >> 2] | 0;
     if (($112 | 0) == 0) {
      $114 = $p + ($2 + 16) | 0;
      $115 = HEAP32[$114 >> 2] | 0;
      if (($115 | 0) == 0) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;
       $RP$0 = $114;
      }
     } else {
      $R$0 = $112;
      $RP$0 = $111;
     }
     while (1) {
      $117 = $R$0 + 20 | 0;
      $118 = HEAP32[$117 >> 2] | 0;
      if (($118 | 0) != 0) {
       $R$0 = $118;
       $RP$0 = $117;
       continue;
      }
      $120 = $R$0 + 16 | 0;
      $121 = HEAP32[$120 >> 2] | 0;
      if (($121 | 0) == 0) {
       break;
      } else {
       $R$0 = $121;
       $RP$0 = $120;
      }
     }
     if ($RP$0 >>> 0 < $4 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP$0 >> 2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $103 = HEAP32[$p + ($2 + 8) >> 2] | 0;
     if ($103 >>> 0 < $4 >>> 0) {
      _abort();
     }
     $105 = $103 + 12 | 0;
     if ((HEAP32[$105 >> 2] | 0) != ($3 | 0)) {
      _abort();
     }
     $108 = $100 + 8 | 0;
     if ((HEAP32[$108 >> 2] | 0) == ($3 | 0)) {
      HEAP32[$105 >> 2] = $100;
      HEAP32[$108 >> 2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if (($98 | 0) != 0) {
    $126 = HEAP32[$p + ($2 + 28) >> 2] | 0;
    $127 = 14640 + ($126 << 2) | 0;
    if (($3 | 0) == (HEAP32[$127 >> 2] | 0)) {
     HEAP32[$127 >> 2] = $R$1;
     if (($R$1 | 0) == 0) {
      HEAP32[14340 >> 2] = HEAP32[14340 >> 2] & ~(1 << $126);
      break;
     }
    } else {
     if ($98 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     }
     $136 = $98 + 16 | 0;
     if ((HEAP32[$136 >> 2] | 0) == ($3 | 0)) {
      HEAP32[$136 >> 2] = $R$1;
     } else {
      HEAP32[$98 + 20 >> 2] = $R$1;
     }
     if (($R$1 | 0) == 0) {
      break;
     }
    }
    if ($R$1 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
     _abort();
    }
    HEAP32[$R$1 + 24 >> 2] = $98;
    $145 = HEAP32[$p + ($2 + 16) >> 2] | 0;
    do {
     if (($145 | 0) != 0) {
      if ($145 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[$R$1 + 16 >> 2] = $145;
       HEAP32[$145 + 24 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $152 = HEAP32[$p + ($2 + 20) >> 2] | 0;
    if (($152 | 0) != 0) {
     if ($152 >>> 0 < (HEAP32[14352 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R$1 + 20 >> 2] = $152;
      HEAP32[$152 + 24 >> 2] = $R$1;
      break;
     }
    }
   }
  }
 } while (0);
 if ($72 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $70 | HEAP32[$0 >> 2] & 1 | 2;
  $163 = $p + ($70 | 4) | 0;
  HEAP32[$163 >> 2] = HEAP32[$163 >> 2] | 1;
  $newp$0 = $p;
  STACKTOP = sp;
  return $newp$0 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $72 | 3;
  $173 = $p + ($70 | 4) | 0;
  HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1;
  _dispose_chunk($p + $nb | 0, $72);
  $newp$0 = $p;
  STACKTOP = sp;
  return $newp$0 | 0;
 }
 return 0;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i10 = 0, $0 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $108 = 0, $118 = 0, $120 = 0, $127 = 0, $134 = 0, $135 = 0, $136 = 0, $143 = 0, $145 = 0, $146 = 0, $148 = 0, $150 = 0, $159 = 0, $17 = 0, $19 = 0, $20 = 0, $26 = 0, $30 = 0, $37 = 0, $39 = 0, $43 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $65 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $85 = 0, $87 = 0, $90 = 0, $92 = 0, $94 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__p$i$i$i$i1 = sp;
 $__grouping = sp + 12 | 0;
 $0 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5144;
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $__p$i$i$i$i1, 124);
 }
 $6 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $10 >> 2 >>> 0 > $6 >>> 0)) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $17 = HEAP32[$10 + ($6 << 2) >> 2] | 0;
 if (($17 | 0) == 0) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $20 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1326] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5304;
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5304, $__p$i$i$i$i1, 124);
 }
 $26 = (HEAP32[5308 >> 2] | 0) + -1 | 0;
 $30 = HEAP32[$20 + 8 >> 2] | 0;
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $30 >> 2 >>> 0 > $26 >>> 0)) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 $37 = HEAP32[$30 + ($26 << 2) >> 2] | 0;
 if (($37 | 0) == 0) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$37 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $37);
 $43 = HEAP8[$__grouping >> 0] | 0;
 if (($43 & 1) == 0) {
  $51 = ($43 & 255) >>> 1;
 } else {
  $51 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($51 | 0) == 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 48 >> 2] & 7]($17, $__nb, $__ne, $__ob) | 0;
  $58 = $__ob + ($__ne - $__nb << 2) | 0;
  HEAP32[$__oe >> 2] = $58;
  $159 = $58;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $59 = HEAP8[$__nb >> 0] | 0;
  if ($59 << 24 >> 24 == 43 | $59 << 24 >> 24 == 45) {
   $63 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, $59) | 0;
   $65 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $65 + 4;
   HEAP32[$65 >> 2] = $63;
   $__nf$0 = $__nb + 1 | 0;
  } else {
   $__nf$0 = $__nb;
  }
  if (($__ne - $__nf$0 | 0) > 1) {
   if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
    $73 = $__nf$0 + 1 | 0;
    $74 = HEAP8[$73 >> 0] | 0;
    if ($74 << 24 >> 24 == 88 | $74 << 24 >> 24 == 120) {
     $78 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, 48) | 0;
     $79 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $79 + 4;
     HEAP32[$79 >> 2] = $78;
     $85 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, HEAP8[$73 >> 0] | 0) | 0;
     $87 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $87 + 4;
     HEAP32[$87 >> 2] = $85;
     $__nf$1 = $__nf$0 + 2 | 0;
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
  } else {
   $__nf$1 = $__nf$0;
  }
  if (($__nf$1 | 0) != ($__ne | 0)) {
   $90 = $__ne + -1 | 0;
   if ($90 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i = $__nf$1;
    $94 = $90;
    do {
     $92 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$94 >> 0] | 0;
     HEAP8[$94 >> 0] = $92;
     $$012$i$i = $$012$i$i + 1 | 0;
     $94 = $94 + -1 | 0;
    } while ($$012$i$i >>> 0 < $94 >>> 0);
   }
  }
  $101 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 16 >> 2] & 63]($37) | 0;
  if ($__nf$1 >>> 0 < $__ne >>> 0) {
   $103 = $__grouping + 1 | 0;
   $104 = $__grouping + 4 | 0;
   $105 = $__grouping + 8 | 0;
   $__dc$012 = 0;
   $__dg$013 = 0;
   $__p$014 = $__nf$1;
   while (1) {
    $108 = (HEAP8[$__grouping >> 0] & 1) == 0;
    if ((HEAP8[($108 ? $103 : HEAP32[$105 >> 2] | 0) + $__dg$013 >> 0] | 0) == 0) {
     $__dc$1 = $__dc$012;
     $__dg$1 = $__dg$013;
    } else {
     if (($__dc$012 | 0) == (HEAP8[($108 ? $103 : HEAP32[$105 >> 2] | 0) + $__dg$013 >> 0] | 0)) {
      $118 = HEAP32[$__oe >> 2] | 0;
      HEAP32[$__oe >> 2] = $118 + 4;
      HEAP32[$118 >> 2] = $101;
      $120 = HEAP8[$__grouping >> 0] | 0;
      if (($120 & 1) == 0) {
       $127 = ($120 & 255) >>> 1;
      } else {
       $127 = HEAP32[$104 >> 2] | 0;
      }
      $__dc$1 = 0;
      $__dg$1 = ($__dg$013 >>> 0 < ($127 + -1 | 0) >>> 0 & 1) + $__dg$013 | 0;
     } else {
      $__dc$1 = $__dc$012;
      $__dg$1 = $__dg$013;
     }
    }
    $134 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 44 >> 2] & 15]($17, HEAP8[$__p$014 >> 0] | 0) | 0;
    $135 = HEAP32[$__oe >> 2] | 0;
    $136 = $135 + 4 | 0;
    HEAP32[$__oe >> 2] = $136;
    HEAP32[$135 >> 2] = $134;
    $__p$014 = $__p$014 + 1 | 0;
    if (!($__p$014 >>> 0 < $__ne >>> 0)) {
     $145 = $136;
     break;
    } else {
     $__dc$012 = $__dc$1 + 1 | 0;
     $__dg$013 = $__dg$1;
    }
   }
  } else {
   $145 = HEAP32[$__oe >> 2] | 0;
  }
  $143 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  if (($143 | 0) == ($145 | 0)) {
   $159 = $145;
  } else {
   $146 = $145 + -4 | 0;
   if ($146 >>> 0 > $143 >>> 0) {
    $$012$i$i10 = $143;
    $150 = $146;
    do {
     $148 = HEAP32[$$012$i$i10 >> 2] | 0;
     HEAP32[$$012$i$i10 >> 2] = HEAP32[$150 >> 2];
     HEAP32[$150 >> 2] = $148;
     $$012$i$i10 = $$012$i$i10 + 4 | 0;
     $150 = $150 + -4 | 0;
    } while ($$012$i$i10 >>> 0 < $150 >>> 0);
    $159 = $145;
   } else {
    $159 = $145;
   }
  }
 }
 if (($__np | 0) == ($__ne | 0)) {
  $storemerge = $159;
  HEAP32[$__op >> 2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;
  return;
 }
 $storemerge = $__ob + ($__np - $__nb << 2) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $33 = 0, $34 = 0, $41 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $65 = 0, $69 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 272 | 0;
 $__nb = sp + 264 | 0;
 $__o = sp + 36 | 0;
 $__op = sp + 268 | 0;
 $__oe = sp + 24 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 32 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $7 = $__fmt + 1 | 0;
 $8 = $__iob + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if (($9 & 2048 | 0) == 0) {
  $$0$i = $7;
 } else {
  HEAP8[$7 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($9 & 1024 | 0) == 0) {
  $$1$i = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$1$i = $$0$i + 1 | 0;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 do {
  if (($16 | 0) == 260) {
   HEAP8[$$1$i >> 0] = 76;
   $scevgep14 = $$1$i + 1 | 0;
   if (($17 & 1 | 0) == 0) {
    HEAP8[$scevgep14 >> 0] = 97;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   } else {
    HEAP8[$scevgep14 >> 0] = 65;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   }
  } else {
   HEAP8[$$1$i >> 0] = 46;
   HEAP8[$$1$i + 1 >> 0] = 42;
   HEAP8[$$1$i + 2 >> 0] = 76;
   $scevgep = $$1$i + 3 | 0;
   if (($16 | 0) == 256) {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$scevgep >> 0] = 101;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep >> 0] = 69;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else if (($16 | 0) == 4) {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$scevgep >> 0] = 102;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep >> 0] = 70;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$scevgep >> 0] = 103;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep >> 0] = 71;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   }
  }
 } while (0);
 HEAP32[$__nb >> 2] = $__nar;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $33 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $33;
   ___cxa_guard_release(5048);
  }
 }
 $34 = HEAP32[1260] | 0;
 if ($specify_precision$0$off0$ph$i15) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $34, $__fmt, $$byval_copy) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $34, $__fmt, $$byval_copy) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $41 = (HEAP8[5048] | 0) == 0;
  if ($specify_precision$0$off0$ph$i15) {
   if ($41) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $44 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $44;
     ___cxa_guard_release(5048);
    }
   }
   $45 = HEAP32[1260] | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr8 = $$byval_copy + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $45, $__fmt, $$byval_copy) | 0;
  } else {
   if ($41) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $51 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $51;
     ___cxa_guard_release(5048);
    }
   }
   $52 = HEAP32[1260] | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $52, $__fmt, $$byval_copy) | 0;
  }
  $54 = HEAP32[$__nb >> 2] | 0;
  if (($54 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $57 = $54;
   $80 = $54;
   $__nc$2 = $__nc$1;
  }
 } else {
  $57 = HEAP32[$__nb >> 2] | 0;
  $80 = 0;
  $__nc$2 = $__nc$0;
 }
 $56 = $57 + $__nc$2 | 0;
 $59 = HEAP32[$8 >> 2] & 176;
 do {
  if (($59 | 0) == 32) {
   $$0$i7 = $56;
  } else if (($59 | 0) == 16) {
   $60 = HEAP8[$57 >> 0] | 0;
   if ($60 << 24 >> 24 == 43 | $60 << 24 >> 24 == 45) {
    $$0$i7 = $57 + 1 | 0;
    break;
   }
   if (($__nc$2 | 0) > 1 & $60 << 24 >> 24 == 48) {
    $65 = HEAP8[$57 + 1 >> 0] | 0;
    if ($65 << 24 >> 24 == 88 | $65 << 24 >> 24 == 120) {
     $$0$i7 = $57 + 2 | 0;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
  } else {
   label = 44;
  }
 } while (0);
 if ((label | 0) == 44) {
  $$0$i7 = $57;
 }
 if (($57 | 0) == ($__nar | 0)) {
  $71 = $__nar;
  $78 = 0;
  $__ob$0 = $__o;
 } else {
  $69 = _malloc($__nc$2 << 3) | 0;
  if (($69 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $71 = $57;
   $78 = $69;
   $__ob$0 = $69;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($71, $$0$i7, $56, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2];
 $74 = HEAP32[$__op >> 2] | 0;
 $75 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $$byval_copy, $__ob$0, $74, $75, $__iob, $__fl);
 $76 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $76;
 HEAP32[$agg$result >> 2] = $76;
 if (($78 | 0) != 0) {
  _free($78);
 }
 if (($80 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($80);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $33 = 0, $34 = 0, $41 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $65 = 0, $69 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $scevgep = 0, $scevgep16 = 0, $specify_precision$0$off0$ph$i17 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 44 | 0;
 $__nb = sp + 36 | 0;
 $__o = sp + 74 | 0;
 $__op = sp + 40 | 0;
 $__oe = sp + 24 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 32 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $7 = $__fmt + 1 | 0;
 $8 = $__iob + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if (($9 & 2048 | 0) == 0) {
  $$0$i = $7;
 } else {
  HEAP8[$7 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($9 & 1024 | 0) == 0) {
  $$1$i = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$1$i = $$0$i + 1 | 0;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 do {
  if (($16 | 0) == 260) {
   HEAP8[$$1$i >> 0] = 76;
   $scevgep16 = $$1$i + 1 | 0;
   if (($17 & 1 | 0) == 0) {
    HEAP8[$scevgep16 >> 0] = 97;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   } else {
    HEAP8[$scevgep16 >> 0] = 65;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   }
  } else {
   HEAP8[$$1$i >> 0] = 46;
   HEAP8[$$1$i + 1 >> 0] = 42;
   HEAP8[$$1$i + 2 >> 0] = 76;
   $scevgep = $$1$i + 3 | 0;
   if (($16 | 0) == 256) {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$scevgep >> 0] = 101;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep >> 0] = 69;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else if (($16 | 0) == 4) {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$scevgep >> 0] = 102;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep >> 0] = 70;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$scevgep >> 0] = 103;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep >> 0] = 71;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   }
  }
 } while (0);
 HEAP32[$__nb >> 2] = $__nar;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $33 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $33;
   ___cxa_guard_release(5048);
  }
 }
 $34 = HEAP32[1260] | 0;
 if ($specify_precision$0$off0$ph$i17) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $34, $__fmt, $$byval_copy) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $34, $__fmt, $$byval_copy) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $41 = (HEAP8[5048] | 0) == 0;
  if ($specify_precision$0$off0$ph$i17) {
   if ($41) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $44 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $44;
     ___cxa_guard_release(5048);
    }
   }
   $45 = HEAP32[1260] | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr8 = $$byval_copy + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $45, $__fmt, $$byval_copy) | 0;
  } else {
   if ($41) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $51 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $51;
     ___cxa_guard_release(5048);
    }
   }
   $52 = HEAP32[1260] | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $52, $__fmt, $$byval_copy) | 0;
  }
  $54 = HEAP32[$__nb >> 2] | 0;
  if (($54 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $57 = $54;
   $80 = $54;
   $__nc$2 = $__nc$1;
  }
 } else {
  $57 = HEAP32[$__nb >> 2] | 0;
  $80 = 0;
  $__nc$2 = $__nc$0;
 }
 $56 = $57 + $__nc$2 | 0;
 $59 = HEAP32[$8 >> 2] & 176;
 do {
  if (($59 | 0) == 32) {
   $$0$i7 = $56;
  } else if (($59 | 0) == 16) {
   $60 = HEAP8[$57 >> 0] | 0;
   if ($60 << 24 >> 24 == 43 | $60 << 24 >> 24 == 45) {
    $$0$i7 = $57 + 1 | 0;
    break;
   }
   if (($__nc$2 | 0) > 1 & $60 << 24 >> 24 == 48) {
    $65 = HEAP8[$57 + 1 >> 0] | 0;
    if ($65 << 24 >> 24 == 88 | $65 << 24 >> 24 == 120) {
     $$0$i7 = $57 + 2 | 0;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
  } else {
   label = 44;
  }
 } while (0);
 if ((label | 0) == 44) {
  $$0$i7 = $57;
 }
 if (($57 | 0) == ($__nar | 0)) {
  $71 = $__nar;
  $78 = 0;
  $__ob$0 = $__o;
 } else {
  $69 = _malloc($__nc$2 << 1) | 0;
  if (($69 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $71 = $57;
   $78 = $69;
   $__ob$0 = $69;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($71, $$0$i7, $56, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2];
 $74 = HEAP32[$__op >> 2] | 0;
 $75 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $$byval_copy, $__ob$0, $74, $75, $__iob, $__fl);
 $76 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $76;
 HEAP32[$agg$result >> 2] = $76;
 if (($78 | 0) != 0) {
  _free($78);
 }
 if (($80 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($80);
 STACKTOP = sp;
 return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $0 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $123 = 0, $13 = 0, $135 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $60 = 0, $63 = 0, $74 = 0, $76 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $__r$0 = 0, $__r$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 do {
  if (($0 | 0) == 0) {
   $147 = 1;
  } else {
   $3 = HEAP32[$0 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0;
   } else {
    $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $147 = 1;
    break;
   } else {
    $147 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 do {
  if (($13 | 0) == 0) {
   label = 14;
  } else {
   $16 = HEAP32[$13 + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$01 = 0;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $28 = HEAP32[$__b >> 2] | 0;
 $30 = HEAP32[$28 + 12 >> 2] | 0;
 if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
  $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0;
 } else {
  $$0$i$i = HEAP32[$30 >> 2] | 0;
 }
 if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i) | 0)) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$01 = 0;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $49 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24;
 $50 = HEAP32[$__b >> 2] | 0;
 $51 = $50 + 12 | 0;
 $52 = HEAP32[$51 >> 2] | 0;
 if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 40 >> 2] & 63]($50) | 0;
  $$0$in = $__n;
  $$pre$i3$i$i10 = $148;
  $74 = $148;
  $__r$0$in = $49;
 } else {
  HEAP32[$51 >> 2] = $52 + 4;
  $$0$in = $__n;
  $$pre$i3$i$i10 = $148;
  $74 = $148;
  $__r$0$in = $49;
 }
 while (1) {
  $__r$0 = $__r$0$in + -48 | 0;
  $$0 = $$0$in + -1 | 0;
  $60 = HEAP32[$__b >> 2] | 0;
  do {
   if (($60 | 0) == 0) {
    $86 = 1;
   } else {
    $63 = HEAP32[$60 + 12 >> 2] | 0;
    if (($63 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
     $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 63]($60) | 0;
    } else {
     $$0$i$i$i$i2 = HEAP32[$63 >> 2] | 0;
    }
    if (($$0$i$i$i$i2 | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $86 = 1;
     break;
    } else {
     $86 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  do {
   if (($74 | 0) == 0) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;
    $149 = 0;
    $87 = 1;
   } else {
    $76 = HEAP32[$74 + 12 >> 2] | 0;
    if (($76 | 0) == (HEAP32[$74 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$74 >> 2] | 0) + 36 >> 2] & 63]($74) | 0;
    } else {
     $$0$i$i1$i$i8 = HEAP32[$76 >> 2] | 0;
    }
    if (($$0$i$i1$i$i8 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i3$i$i25 = 0;
     $149 = 0;
     $87 = 1;
     break;
    } else {
     $$pre$i3$i$i25 = $$pre$i3$i$i10;
     $149 = $$pre$i3$i$i10;
     $87 = ($$pre$i3$i$i10 | 0) == 0;
     break;
    }
   }
  } while (0);
  $89 = HEAP32[$__b >> 2] | 0;
  if (!(($86 ^ $87) & ($$0 | 0) > 0)) {
   break;
  }
  $91 = HEAP32[$89 + 12 >> 2] | 0;
  if (($91 | 0) == (HEAP32[$89 + 16 >> 2] | 0)) {
   $$0$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 36 >> 2] & 63]($89) | 0;
  } else {
   $$0$i$i14 = HEAP32[$91 >> 2] | 0;
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i14) | 0)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $110 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i14, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
  $111 = HEAP32[$__b >> 2] | 0;
  $112 = $111 + 12 | 0;
  $113 = HEAP32[$112 >> 2] | 0;
  if (($113 | 0) == (HEAP32[$111 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$111 >> 2] | 0) + 40 >> 2] & 63]($111) | 0;
   $$0$in = $$0;
   $$pre$i3$i$i10 = $$pre$i3$i$i25;
   $74 = $149;
   $__r$0$in = $110;
   continue;
  } else {
   HEAP32[$112 >> 2] = $113 + 4;
   $$0$in = $$0;
   $$pre$i3$i$i10 = $$pre$i3$i$i25;
   $74 = $149;
   $__r$0$in = $110;
   continue;
  }
 }
 if ((label | 0) == 63) {
  STACKTOP = sp;
  return $$01 | 0;
 }
 do {
  if (($89 | 0) == 0) {
   $150 = 1;
  } else {
   $123 = HEAP32[$89 + 12 >> 2] | 0;
   if (($123 | 0) == (HEAP32[$89 + 16 >> 2] | 0)) {
    $$0$i$i$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 36 >> 2] & 63]($89) | 0;
   } else {
    $$0$i$i$i$i17 = HEAP32[$123 >> 2] | 0;
   }
   if (($$0$i$i$i$i17 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $150 = 1;
    break;
   } else {
    $150 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if (($$pre$i3$i$i25 | 0) == 0) {
   label = 60;
  } else {
   $135 = HEAP32[$$pre$i3$i$i25 + 12 >> 2] | 0;
   if (($135 | 0) == (HEAP32[$$pre$i3$i$i25 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i25 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i25) | 0;
   } else {
    $$0$i$i1$i$i23 = HEAP32[$135 >> 2] | 0;
   }
   if (($$0$i$i1$i$i23 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$01 = $__r$0;
    STACKTOP = sp;
    return $$01 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  if (!$150) {
   $$01 = $__r$0;
   STACKTOP = sp;
   return $$01 | 0;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $$01 = $__r$0;
 STACKTOP = sp;
 return $$01 | 0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $3 = 0, $33 = 0, $34 = 0, $41 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $67 = 0, $7 = 0, $71 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $specify_precision$0$off0$ph$i10 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 272 | 0;
 $__nb = sp + 264 | 0;
 $__o = sp + 36 | 0;
 $__op = sp + 268 | 0;
 $__oe = sp + 24 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 32 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $7 = $__fmt + 1 | 0;
 $8 = $__iob + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if (($9 & 2048 | 0) == 0) {
  $$0$i = $7;
 } else {
  HEAP8[$7 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($9 & 1024 | 0) == 0) {
  $$1$i = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$1$i = $$0$i + 1 | 0;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 do {
  if (($16 | 0) == 260) {
   if (($17 & 1 | 0) == 0) {
    HEAP8[$$1$i >> 0] = 97;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   } else {
    HEAP8[$$1$i >> 0] = 65;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   }
  } else {
   HEAP8[$$1$i >> 0] = 46;
   $20 = $$1$i + 2 | 0;
   HEAP8[$$1$i + 1 >> 0] = 42;
   if (($16 | 0) == 256) {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$20 >> 0] = 101;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20 >> 0] = 69;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else if (($16 | 0) == 4) {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$20 >> 0] = 102;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20 >> 0] = 70;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$20 >> 0] = 103;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20 >> 0] = 71;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   }
  }
 } while (0);
 HEAP32[$__nb >> 2] = $__nar;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $33 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $33;
   ___cxa_guard_release(5048);
  }
 }
 $34 = HEAP32[1260] | 0;
 if ($specify_precision$0$off0$ph$i10) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $34, $__fmt, $$byval_copy) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $34, $__fmt, $$byval_copy) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $41 = (HEAP8[5048] | 0) == 0;
  if ($specify_precision$0$off0$ph$i10) {
   if ($41) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $44 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $44;
     ___cxa_guard_release(5048);
    }
   }
   $45 = HEAP32[1260] | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr8 = $$byval_copy + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $45, $__fmt, $$byval_copy) | 0;
  } else {
   if ($41) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $51 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $51;
     ___cxa_guard_release(5048);
    }
   }
   $52 = HEAP32[1260] | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr12 = $$byval_copy + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $52, $__fmt, $$byval_copy) | 0;
  }
  $56 = HEAP32[$__nb >> 2] | 0;
  if (($56 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $59 = $56;
   $82 = $56;
   $__nc$2 = $__nc$1;
  }
 } else {
  $59 = HEAP32[$__nb >> 2] | 0;
  $82 = 0;
  $__nc$2 = $__nc$0;
 }
 $58 = $59 + $__nc$2 | 0;
 $61 = HEAP32[$8 >> 2] & 176;
 do {
  if (($61 | 0) == 16) {
   $62 = HEAP8[$59 >> 0] | 0;
   if ($62 << 24 >> 24 == 43 | $62 << 24 >> 24 == 45) {
    $$0$i7 = $59 + 1 | 0;
    break;
   }
   if (($__nc$2 | 0) > 1 & $62 << 24 >> 24 == 48) {
    $67 = HEAP8[$59 + 1 >> 0] | 0;
    if ($67 << 24 >> 24 == 88 | $67 << 24 >> 24 == 120) {
     $$0$i7 = $59 + 2 | 0;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
  } else if (($61 | 0) == 32) {
   $$0$i7 = $58;
  } else {
   label = 44;
  }
 } while (0);
 if ((label | 0) == 44) {
  $$0$i7 = $59;
 }
 if (($59 | 0) == ($__nar | 0)) {
  $73 = $__nar;
  $80 = 0;
  $__ob$0 = $__o;
 } else {
  $71 = _malloc($__nc$2 << 3) | 0;
  if (($71 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $73 = $59;
   $80 = $71;
   $__ob$0 = $71;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($73, $$0$i7, $58, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2];
 $76 = HEAP32[$__op >> 2] | 0;
 $77 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $$byval_copy, $__ob$0, $76, $77, $__iob, $__fl);
 $78 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $78;
 HEAP32[$agg$result >> 2] = $78;
 if (($80 | 0) != 0) {
  _free($80);
 }
 if (($82 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($82);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $3 = 0, $33 = 0, $34 = 0, $41 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $67 = 0, $7 = 0, $71 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $specify_precision$0$off0$ph$i12 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 44 | 0;
 $__nb = sp + 36 | 0;
 $__o = sp + 74 | 0;
 $__op = sp + 40 | 0;
 $__oe = sp + 24 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 32 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $7 = $__fmt + 1 | 0;
 $8 = $__iob + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if (($9 & 2048 | 0) == 0) {
  $$0$i = $7;
 } else {
  HEAP8[$7 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($9 & 1024 | 0) == 0) {
  $$1$i = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$1$i = $$0$i + 1 | 0;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 do {
  if (($16 | 0) == 260) {
   if (($17 & 1 | 0) == 0) {
    HEAP8[$$1$i >> 0] = 97;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   } else {
    HEAP8[$$1$i >> 0] = 65;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   }
  } else {
   HEAP8[$$1$i >> 0] = 46;
   $20 = $$1$i + 2 | 0;
   HEAP8[$$1$i + 1 >> 0] = 42;
   if (($16 | 0) == 256) {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$20 >> 0] = 101;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20 >> 0] = 69;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else if (($16 | 0) == 4) {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$20 >> 0] = 102;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20 >> 0] = 70;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else {
    if (($17 & 1 | 0) == 0) {
     HEAP8[$20 >> 0] = 103;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20 >> 0] = 71;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   }
  }
 } while (0);
 HEAP32[$__nb >> 2] = $__nar;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $33 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $33;
   ___cxa_guard_release(5048);
  }
 }
 $34 = HEAP32[1260] | 0;
 if ($specify_precision$0$off0$ph$i12) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $34, $__fmt, $$byval_copy) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $34, $__fmt, $$byval_copy) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $41 = (HEAP8[5048] | 0) == 0;
  if ($specify_precision$0$off0$ph$i12) {
   if ($41) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $44 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $44;
     ___cxa_guard_release(5048);
    }
   }
   $45 = HEAP32[1260] | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr8 = $$byval_copy + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $45, $__fmt, $$byval_copy) | 0;
  } else {
   if ($41) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $51 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $51;
     ___cxa_guard_release(5048);
    }
   }
   $52 = HEAP32[1260] | 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr12 = $$byval_copy + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr12 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr12 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $52, $__fmt, $$byval_copy) | 0;
  }
  $56 = HEAP32[$__nb >> 2] | 0;
  if (($56 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $59 = $56;
   $82 = $56;
   $__nc$2 = $__nc$1;
  }
 } else {
  $59 = HEAP32[$__nb >> 2] | 0;
  $82 = 0;
  $__nc$2 = $__nc$0;
 }
 $58 = $59 + $__nc$2 | 0;
 $61 = HEAP32[$8 >> 2] & 176;
 do {
  if (($61 | 0) == 32) {
   $$0$i7 = $58;
  } else if (($61 | 0) == 16) {
   $62 = HEAP8[$59 >> 0] | 0;
   if ($62 << 24 >> 24 == 43 | $62 << 24 >> 24 == 45) {
    $$0$i7 = $59 + 1 | 0;
    break;
   }
   if (($__nc$2 | 0) > 1 & $62 << 24 >> 24 == 48) {
    $67 = HEAP8[$59 + 1 >> 0] | 0;
    if ($67 << 24 >> 24 == 88 | $67 << 24 >> 24 == 120) {
     $$0$i7 = $59 + 2 | 0;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
  } else {
   label = 44;
  }
 } while (0);
 if ((label | 0) == 44) {
  $$0$i7 = $59;
 }
 if (($59 | 0) == ($__nar | 0)) {
  $73 = $__nar;
  $80 = 0;
  $__ob$0 = $__o;
 } else {
  $71 = _malloc($__nc$2 << 1) | 0;
  if (($71 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $73 = $59;
   $80 = $71;
   $__ob$0 = $71;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($73, $$0$i7, $58, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2];
 $76 = HEAP32[$__op >> 2] | 0;
 $77 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $$byval_copy, $__ob$0, $76, $77, $__iob, $__fl);
 $78 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $78;
 HEAP32[$agg$result >> 2] = $78;
 if (($80 | 0) != 0) {
  _free($80);
 }
 if (($82 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($82);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i10 = 0, $0 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $108 = 0, $118 = 0, $120 = 0, $127 = 0, $134 = 0, $135 = 0, $143 = 0, $144 = 0, $146 = 0, $148 = 0, $150 = 0, $17 = 0, $19 = 0, $20 = 0, $26 = 0, $30 = 0, $37 = 0, $39 = 0, $43 = 0, $51 = 0, $59 = 0, $6 = 0, $63 = 0, $65 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $85 = 0, $87 = 0, $90 = 0, $92 = 0, $94 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__p$i$i$i$i1 = sp;
 $__grouping = sp + 12 | 0;
 $0 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5152;
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $__p$i$i$i$i1, 124);
 }
 $6 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $10 >> 2 >>> 0 > $6 >>> 0)) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $17 = HEAP32[$10 + ($6 << 2) >> 2] | 0;
 if (($17 | 0) == 0) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $20 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1324] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i1 >> 2] = 5296;
  HEAP32[$__p$i$i$i$i1 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5296, $__p$i$i$i$i1, 124);
 }
 $26 = (HEAP32[5300 >> 2] | 0) + -1 | 0;
 $30 = HEAP32[$20 + 8 >> 2] | 0;
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $30 >> 2 >>> 0 > $26 >>> 0)) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 $37 = HEAP32[$30 + ($26 << 2) >> 2] | 0;
 if (($37 | 0) == 0) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$37 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $37);
 $43 = HEAP8[$__grouping >> 0] | 0;
 if (($43 & 1) == 0) {
  $51 = ($43 & 255) >>> 1;
 } else {
  $51 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($51 | 0) == 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] & 7]($17, $__nb, $__ne, $__ob) | 0;
  HEAP32[$__oe >> 2] = $__ob + ($__ne - $__nb);
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $59 = HEAP8[$__nb >> 0] | 0;
  if ($59 << 24 >> 24 == 43 | $59 << 24 >> 24 == 45) {
   $63 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, $59) | 0;
   $65 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $65 + 1;
   HEAP8[$65 >> 0] = $63;
   $__nf$0 = $__nb + 1 | 0;
  } else {
   $__nf$0 = $__nb;
  }
  if (($__ne - $__nf$0 | 0) > 1) {
   if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
    $73 = $__nf$0 + 1 | 0;
    $74 = HEAP8[$73 >> 0] | 0;
    if ($74 << 24 >> 24 == 88 | $74 << 24 >> 24 == 120) {
     $78 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, 48) | 0;
     $79 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $79 + 1;
     HEAP8[$79 >> 0] = $78;
     $85 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, HEAP8[$73 >> 0] | 0) | 0;
     $87 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $87 + 1;
     HEAP8[$87 >> 0] = $85;
     $__nf$1 = $__nf$0 + 2 | 0;
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
  } else {
   $__nf$1 = $__nf$0;
  }
  if (($__nf$1 | 0) != ($__ne | 0)) {
   $90 = $__ne + -1 | 0;
   if ($90 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i = $__nf$1;
    $94 = $90;
    do {
     $92 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$94 >> 0] | 0;
     HEAP8[$94 >> 0] = $92;
     $$012$i$i = $$012$i$i + 1 | 0;
     $94 = $94 + -1 | 0;
    } while ($$012$i$i >>> 0 < $94 >>> 0);
   }
  }
  $101 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 16 >> 2] & 63]($37) | 0;
  if ($__nf$1 >>> 0 < $__ne >>> 0) {
   $103 = $__grouping + 1 | 0;
   $104 = $__grouping + 4 | 0;
   $105 = $__grouping + 8 | 0;
   $__dc$013 = 0;
   $__dg$014 = 0;
   $__p$015 = $__nf$1;
   while (1) {
    $108 = (HEAP8[$__grouping >> 0] & 1) == 0;
    if ((HEAP8[($108 ? $103 : HEAP32[$105 >> 2] | 0) + $__dg$014 >> 0] | 0) == 0) {
     $__dc$1 = $__dc$013;
     $__dg$1 = $__dg$014;
    } else {
     if (($__dc$013 | 0) == (HEAP8[($108 ? $103 : HEAP32[$105 >> 2] | 0) + $__dg$014 >> 0] | 0)) {
      $118 = HEAP32[$__oe >> 2] | 0;
      HEAP32[$__oe >> 2] = $118 + 1;
      HEAP8[$118 >> 0] = $101;
      $120 = HEAP8[$__grouping >> 0] | 0;
      if (($120 & 1) == 0) {
       $127 = ($120 & 255) >>> 1;
      } else {
       $127 = HEAP32[$104 >> 2] | 0;
      }
      $__dc$1 = 0;
      $__dg$1 = ($__dg$014 >>> 0 < ($127 + -1 | 0) >>> 0 & 1) + $__dg$014 | 0;
     } else {
      $__dc$1 = $__dc$013;
      $__dg$1 = $__dg$014;
     }
    }
    $134 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 15]($17, HEAP8[$__p$015 >> 0] | 0) | 0;
    $135 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $135 + 1;
    HEAP8[$135 >> 0] = $134;
    $__p$015 = $__p$015 + 1 | 0;
    if (!($__p$015 >>> 0 < $__ne >>> 0)) {
     break;
    } else {
     $__dc$013 = $__dc$1 + 1 | 0;
     $__dg$014 = $__dg$1;
    }
   }
  }
  $143 = $__ob + ($__nf$1 - $__nb) | 0;
  $144 = HEAP32[$__oe >> 2] | 0;
  if (($143 | 0) != ($144 | 0)) {
   $146 = $144 + -1 | 0;
   if ($146 >>> 0 > $143 >>> 0) {
    $$012$i$i10 = $143;
    $150 = $146;
    do {
     $148 = HEAP8[$$012$i$i10 >> 0] | 0;
     HEAP8[$$012$i$i10 >> 0] = HEAP8[$150 >> 0] | 0;
     HEAP8[$150 >> 0] = $148;
     $$012$i$i10 = $$012$i$i10 + 1 | 0;
     $150 = $150 + -1 | 0;
    } while ($$012$i$i10 >>> 0 < $150 >>> 0);
   }
  }
 }
 if (($__np | 0) == ($__ne | 0)) {
  $storemerge = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__op >> 2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;
  return;
 } else {
  $storemerge = $__ob + ($__np - $__nb) | 0;
  HEAP32[$__op >> 2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $106 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $141 = 0, $142 = 0, $156 = 0, $28 = 0, $30 = 0, $40 = 0, $42 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $65 = 0, $77 = 0, $78 = 0, $80 = 0, $92 = 0, $94 = 0, $96 = 0, $__r$0 = 0, $__r$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 do {
  if (($0 | 0) == 0) {
   $13 = 0;
  } else {
   if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $13 = 0;
     break;
    } else {
     $13 = HEAP32[$__b >> 2] | 0;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while (0);
 $12 = ($13 | 0) == 0;
 $14 = HEAP32[$__e >> 2] | 0;
 do {
  if (($14 | 0) == 0) {
   label = 11;
  } else {
   if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label | 0) == 12) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$01 = 0;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $28 = HEAP32[$__b >> 2] | 0;
 $30 = HEAP32[$28 + 12 >> 2] | 0;
 if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
  $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0;
 } else {
  $$0$i$i = HEAPU8[$30 >> 0] | 0;
 }
 $40 = $$0$i$i & 255;
 if ($40 << 24 >> 24 > -1) {
  $42 = $__ct + 8 | 0;
  if (!((HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) == 0)) {
   $54 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $40, 0) | 0) << 24 >> 24;
   $55 = HEAP32[$__b >> 2] | 0;
   $56 = $55 + 12 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (($57 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 40 >> 2] & 63]($55) | 0;
    $$0$in = $__n;
    $$pre$i2$i$i7 = $156;
    $80 = $156;
    $__r$0$in = $54;
   } else {
    HEAP32[$56 >> 2] = $57 + 1;
    $$0$in = $__n;
    $$pre$i2$i$i7 = $156;
    $80 = $156;
    $__r$0$in = $54;
   }
   while (1) {
    $__r$0 = $__r$0$in + -48 | 0;
    $$0 = $$0$in + -1 | 0;
    $65 = HEAP32[$__b >> 2] | 0;
    do {
     if (($65 | 0) == 0) {
      $78 = 0;
     } else {
      if ((HEAP32[$65 + 12 >> 2] | 0) == (HEAP32[$65 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] & 63]($65) | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $78 = 0;
        break;
       } else {
        $78 = HEAP32[$__b >> 2] | 0;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while (0);
    $77 = ($78 | 0) == 0;
    if (($80 | 0) == 0) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;
     $92 = 0;
    } else {
     if ((HEAP32[$80 + 12 >> 2] | 0) == (HEAP32[$80 + 16 >> 2] | 0)) {
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 63]($80) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i2$i$i20 = 0;
       $92 = 0;
      } else {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;
       $92 = $$pre$i2$i$i7;
      }
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;
      $92 = $80;
     }
    }
    $94 = HEAP32[$__b >> 2] | 0;
    if (!(($77 ^ ($92 | 0) == 0) & ($$0 | 0) > 0)) {
     label = 40;
     break;
    }
    $96 = HEAP32[$94 + 12 >> 2] | 0;
    if (($96 | 0) == (HEAP32[$94 + 16 >> 2] | 0)) {
     $$0$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$94 >> 2] | 0) + 36 >> 2] & 63]($94) | 0;
    } else {
     $$0$i$i10 = HEAPU8[$96 >> 0] | 0;
    }
    $106 = $$0$i$i10 & 255;
    if (!($106 << 24 >> 24 > -1)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    if ((HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i10 << 24 >> 24 << 1) >> 1] & 2048) == 0) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $119 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $106, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
    $120 = HEAP32[$__b >> 2] | 0;
    $121 = $120 + 12 | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    if (($122 | 0) == (HEAP32[$120 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$120 >> 2] | 0) + 40 >> 2] & 63]($120) | 0;
     $$0$in = $$0;
     $$pre$i2$i$i7 = $$pre$i2$i$i20;
     $80 = $92;
     $__r$0$in = $119;
     continue;
    } else {
     HEAP32[$121 >> 2] = $122 + 1;
     $$0$in = $$0;
     $$pre$i2$i$i7 = $$pre$i2$i$i20;
     $80 = $92;
     $__r$0$in = $119;
     continue;
    }
   }
   if ((label | 0) == 40) {
    do {
     if (($94 | 0) == 0) {
      $142 = 0;
     } else {
      if ((HEAP32[$94 + 12 >> 2] | 0) == (HEAP32[$94 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$94 >> 2] | 0) + 36 >> 2] & 63]($94) | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $142 = 0;
        break;
       } else {
        $142 = HEAP32[$__b >> 2] | 0;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while (0);
    $141 = ($142 | 0) == 0;
    do {
     if (($$pre$i2$i$i20 | 0) == 0) {
      label = 50;
     } else {
      if ((HEAP32[$$pre$i2$i$i20 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i20 + 16 >> 2] | 0)) {
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i20 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i20) | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$01 = $__r$0;
       STACKTOP = sp;
       return $$01 | 0;
      }
     }
    } while (0);
    if ((label | 0) == 50) {
     if (!$141) {
      $$01 = $__r$0;
      STACKTOP = sp;
      return $$01 | 0;
     }
    }
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    $$01 = $__r$0;
    STACKTOP = sp;
    return $$01 | 0;
   } else if ((label | 0) == 52) {
    STACKTOP = sp;
    return $$01 | 0;
   }
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
 $$01 = 0;
 STACKTOP = sp;
 return $$01 | 0;
}
function __ZNK12HOGExtractor13getDescriptorEiiiiPfii($this, $x, $y, $region_width, $region_height, $descriptor, $n_cells_x, $n_cells_y) {
 $this = $this | 0;
 $x = $x | 0;
 $y = $y | 0;
 $region_width = $region_width | 0;
 $region_height = $region_height | 0;
 $descriptor = $descriptor | 0;
 $n_cells_x = $n_cells_x | 0;
 $n_cells_y = $n_cells_y | 0;
 var $$0$i$i$i = 0, $$pre40 = 0, $$pre41 = 0, $11 = 0, $123 = 0.0, $126 = 0, $129 = 0, $13 = 0, $137 = 0.0, $17 = 0, $19 = 0, $2 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0.0, $52 = 0, $57 = 0, $6 = 0, $64 = 0.0, $7 = 0, $70 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $80 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $99 = 0, $bin$021$us = 0, $i$032 = 0, $i$06$i = 0, $i$06$i2$us = 0, $i2$027$us = 0, $j$023$us = 0, $n_val$026$us = 0, $n_val$122$us = 0, $n_val$2$lcssa$us = 0, $n_val$220$us = 0, $ptrA$02$i = 0, $ptrA$02$i6$us = 0, $ptrB$04$i = 0, $ptrB$04$i4$us = 0, $ptrC$05$i = 0, $ptrC$05$i3$us = 0, $ptrD$03$i = 0, $ptrD$03$i5$us = 0, $smax38 = 0, $sum_el$0$lcssa = 0, $sum_el$033 = 0, sp = 0;
 sp = STACKTOP;
 $2 = +($region_width | 0) / +($n_cells_x | 0);
 $5 = +($region_height | 0) / +($n_cells_y | 0);
 $6 = $this + 84 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if (($7 | 0) == 0) {
  $27 = 0;
  $52 = 0;
 } else {
  if ($7 >>> 0 > 1073741823) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  }
  $11 = __Znwj($7 << 2) | 0;
  $$0$i$i$i = $7;
  $13 = $11;
  while (1) {
   if (($13 | 0) != 0) {
    HEAP32[$13 >> 2] = 0;
   }
   $$0$i$i$i = $$0$i$i$i + -1 | 0;
   if (($$0$i$i$i | 0) == 0) {
    break;
   } else {
    $13 = $13 + 4 | 0;
   }
  }
  $27 = HEAP32[$6 >> 2] | 0;
  $52 = $11;
 }
 $17 = $region_width + $x | 0;
 $19 = $this + 76 | 0;
 $21 = (HEAP32[$19 >> 2] | 0) + 1 | 0;
 $22 = $this + 36 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = Math_imul($21, $y) | 0;
 $25 = Math_imul($21, $region_height + $y | 0) | 0;
 $26 = ($27 | 0) > 0;
 if ($26) {
  $i$06$i = 0;
  $ptrA$02$i = $23 + ((Math_imul($24 + $x | 0, $27) | 0) << 2) | 0;
  $ptrB$04$i = $23 + ((Math_imul($24 + $17 | 0, $27) | 0) << 2) | 0;
  $ptrC$05$i = $23 + ((Math_imul($25 + $x | 0, $27) | 0) << 2) | 0;
  $ptrD$03$i = $23 + ((Math_imul($25 + $17 | 0, $27) | 0) << 2) | 0;
  while (1) {
   HEAP32[$52 + ($i$06$i << 2) >> 2] = (HEAP32[$ptrD$03$i >> 2] | 0) + (HEAP32[$ptrA$02$i >> 2] | 0) - (HEAP32[$ptrB$04$i >> 2] | 0) - (HEAP32[$ptrC$05$i >> 2] | 0);
   $i$06$i = $i$06$i + 1 | 0;
   if (($i$06$i | 0) >= ($27 | 0)) {
    break;
   } else {
    $ptrA$02$i = $ptrA$02$i + 4 | 0;
    $ptrB$04$i = $ptrB$04$i + 4 | 0;
    $ptrC$05$i = $ptrC$05$i + 4 | 0;
    $ptrD$03$i = $ptrD$03$i + 4 | 0;
   }
  }
  if ($26) {
   $i$032 = 0;
   $sum_el$033 = 0;
   while (1) {
    $57 = (HEAP32[$52 + ($i$032 << 2) >> 2] | 0) + $sum_el$033 | 0;
    $i$032 = $i$032 + 1 | 0;
    if (($i$032 | 0) >= ($27 | 0)) {
     $sum_el$0$lcssa = $57;
     break;
    } else {
     $sum_el$033 = $57;
    }
   }
  } else {
   $sum_el$0$lcssa = 0;
  }
 } else {
  $sum_el$0$lcssa = 0;
 }
 if (($n_cells_x | 0) == 1 & ($n_cells_y | 0) == 1) {
  $64 = +(($sum_el$0$lcssa | 0) / (Math_imul($region_height, $region_width) | 0) | 0 | 0);
  HEAPF32[$descriptor >> 2] = $64;
  if (($27 | 0) > 1) {
   _memset($descriptor + 4 | 0, 0, (($27 | 0) > 2 ? ($27 << 2) + -4 | 0 : 4) | 0) | 0;
  }
 }
 $70 = +($sum_el$0$lcssa | 0) + 1.0e-4;
 if (($n_cells_x | 0) > 0) {
  $73 = +($x | 0);
  $74 = +($y | 0);
  $75 = $this + 72 | 0;
  $76 = $this + 60 | 0;
  if (($n_cells_y | 0) > 0) {
   $i2$027$us = 0;
   $n_val$026$us = 0;
   while (1) {
    $137 = $73 + $2 * +($i2$027$us | 0);
    $89 = ~~$137;
    $91 = ~~($2 + $137);
    $99 = HEAP32[$22 >> 2] | 0;
    $$pre40 = HEAP32[$6 >> 2] | 0;
    $$pre41 = HEAP32[$19 >> 2] | 0;
    $j$023$us = 0;
    $n_val$122$us = $n_val$026$us;
    while (1) {
     $80 = $74 + $5 * +($j$023$us | 0);
     $84 = $$pre41 + 1 | 0;
     $85 = Math_imul($84, ~~$80) | 0;
     $86 = Math_imul($84, ~~($5 + $80)) | 0;
     $87 = ($$pre40 | 0) > 0;
     if ($87) {
      $i$06$i2$us = 0;
      $ptrA$02$i6$us = $99 + ((Math_imul($85 + $89 | 0, $$pre40) | 0) << 2) | 0;
      $ptrB$04$i4$us = $99 + ((Math_imul($85 + $91 | 0, $$pre40) | 0) << 2) | 0;
      $ptrC$05$i3$us = $99 + ((Math_imul($86 + $89 | 0, $$pre40) | 0) << 2) | 0;
      $ptrD$03$i5$us = $99 + ((Math_imul($86 + $91 | 0, $$pre40) | 0) << 2) | 0;
      while (1) {
       HEAP32[$52 + ($i$06$i2$us << 2) >> 2] = (HEAP32[$ptrD$03$i5$us >> 2] | 0) + (HEAP32[$ptrA$02$i6$us >> 2] | 0) - (HEAP32[$ptrB$04$i4$us >> 2] | 0) - (HEAP32[$ptrC$05$i3$us >> 2] | 0);
       $i$06$i2$us = $i$06$i2$us + 1 | 0;
       if (($i$06$i2$us | 0) >= ($$pre40 | 0)) {
        break;
       } else {
        $ptrA$02$i6$us = $ptrA$02$i6$us + 4 | 0;
        $ptrB$04$i4$us = $ptrB$04$i4$us + 4 | 0;
        $ptrC$05$i3$us = $ptrC$05$i3$us + 4 | 0;
        $ptrD$03$i5$us = $ptrD$03$i5$us + 4 | 0;
       }
      }
      if ($87) {
       $123 = +(HEAP32[$75 >> 2] | 0);
       $126 = HEAP32[$76 >> 2] | 0;
       $smax38 = ($$pre40 | 0) > 1 ? $$pre40 : 1;
       $bin$021$us = 0;
       $n_val$220$us = $n_val$122$us;
       while (1) {
        HEAPF32[$descriptor + ($n_val$220$us << 2) >> 2] = +HEAPF32[$126 + (~~(+(HEAP32[$52 + ($bin$021$us << 2) >> 2] | 0) / $70 * $123) << 2) >> 2];
        $129 = $bin$021$us + 1 | 0;
        if (($129 | 0) >= ($$pre40 | 0)) {
         break;
        }
        $bin$021$us = $129;
        $n_val$220$us = $n_val$220$us + 1 | 0;
       }
       $n_val$2$lcssa$us = $n_val$122$us + $smax38 | 0;
      } else {
       $n_val$2$lcssa$us = $n_val$122$us;
      }
     } else {
      $n_val$2$lcssa$us = $n_val$122$us;
     }
     $j$023$us = $j$023$us + 1 | 0;
     if (($j$023$us | 0) == ($n_cells_y | 0)) {
      break;
     } else {
      $n_val$122$us = $n_val$2$lcssa$us;
     }
    }
    $i2$027$us = $i2$027$us + 1 | 0;
    if (($i2$027$us | 0) == ($n_cells_x | 0)) {
     break;
    } else {
     $n_val$026$us = $n_val$2$lcssa$us;
    }
   }
  }
 }
 if (($52 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv($52);
 STACKTOP = sp;
 return;
}
function __ZN14HaarClassifier8responseERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $$0 = 0.0, $102 = 0, $123 = 0, $13 = 0, $138 = 0, $139 = 0, $148 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $164 = 0.0, $18 = 0, $23 = 0, $24 = 0, $6 = 0, $76 = 0, $77 = 0, $res$0 = 0, $sq_value$0 = 0, $totalH$0 = 0, $totalW$0 = 0, sp = 0;
 sp = STACKTOP;
 $6 = ~~(+($startX | 0) + +(HEAP32[$this + 60 >> 2] | 0) * $scale);
 $13 = ~~(+($startY | 0) + +(HEAP32[$this + 64 >> 2] | 0) * $scale);
 $18 = ~~(+(HEAP32[$this + 68 >> 2] | 0) * $scale);
 $23 = ~~(+(HEAP32[$this + 72 >> 2] | 0) * $scale);
 $24 = $this + 28 | 0;
 do {
  switch (HEAP32[$24 >> 2] | 0) {
  case 8:
   {
    $res$0 = (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $6, $13, $18, $23) | 0) - (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $18 + $6 | 0, $13 + $18 | 0, $18, $23) | 0) | 0;
    $totalH$0 = $23;
    $totalW$0 = $18 << 1;
    break;
   }
  case 7:
   {
    $res$0 = (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $6, $23 + $13 | 0, $18, $23) | 0) - (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $23 + $6 | 0, $13, $18, $23) | 0) | 0;
    $totalH$0 = $23 << 1;
    $totalW$0 = $18;
    break;
   }
  case 1:
   {
    $res$0 = (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $13, $18, $23) | 0) - (__ZNK11SimpleImage12getRegionSumEiiii($img, $18 + $6 | 0, $13, $18, $23) | 0) | 0;
    $totalH$0 = $23;
    $totalW$0 = $18 << 1;
    break;
   }
  case 5:
   {
    $res$0 = (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $13, $18, $23) | 0) - (__ZNK11SimpleImage12getRegionSumEiiii($img, $18 + $6 | 0, $13, $18 << 1, $23) | 0) + (__ZNK11SimpleImage12getRegionSumEiiii($img, ($18 * 3 | 0) + $6 | 0, $13, $18, $23) | 0) | 0;
    $totalH$0 = $23;
    $totalW$0 = $18 << 2;
    break;
   }
  case 11:
   {
    $123 = $18 * 3 | 0;
    $res$0 = (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $6, $13, $18, $23) | 0) - (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $18 + $6 | 0, $13 + $18 | 0, $18 << 1, $23) | 0) + (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $123 + $6 | 0, $123 + $13 | 0, $18, $23) | 0) | 0;
    $totalH$0 = $23;
    $totalW$0 = $18 << 2;
    break;
   }
  case 9:
   {
    $102 = $18 << 1;
    $res$0 = (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $6, $13, $18, $23) | 0) - ((__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $18 + $6 | 0, $13 + $18 | 0, $18, $23) | 0) << 1) + (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $102 + $6 | 0, $102 + $13 | 0, $18, $23) | 0) | 0;
    $totalH$0 = $23;
    $totalW$0 = $18 * 3 | 0;
    break;
   }
  case 3:
   {
    $res$0 = (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $13, $18, $23) | 0) - ((__ZNK11SimpleImage12getRegionSumEiiii($img, $18 + $6 | 0, $13, $18, $23) | 0) << 1) + (__ZNK11SimpleImage12getRegionSumEiiii($img, ($18 << 1) + $6 | 0, $13, $18, $23) | 0) | 0;
    $totalH$0 = $23;
    $totalW$0 = $18 * 3 | 0;
    break;
   }
  case 6:
   {
    $76 = $18 * 3 | 0;
    $77 = $23 * 3 | 0;
    $res$0 = (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $13, $76, $77) | 0) + (Math_imul(__ZNK11SimpleImage12getRegionSumEiiii($img, $18 + $6 | 0, $23 + $13 | 0, $18, $23) | 0, -9) | 0) | 0;
    $totalH$0 = $77;
    $totalW$0 = $76;
    break;
   }
  case 0:
   {
    $res$0 = (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $13, $18, $23) | 0) - (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $23 + $13 | 0, $18, $23) | 0) | 0;
    $totalH$0 = $23 << 1;
    $totalW$0 = $18;
    break;
   }
  case 12:
   {
    $res$0 = (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $6, ($23 * 3 | 0) + $13 | 0, $18, $23) | 0) - (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $23 + $6 | 0, $23 + $13 | 0, $18, $23 << 1) | 0) | 0;
    $totalH$0 = $23 << 2;
    $totalW$0 = $18;
    break;
   }
  case 13:
   {
    $138 = $18 * 3 | 0;
    $139 = $23 * 3 | 0;
    $res$0 = (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $6, $13, $138, $139) | 0) + (Math_imul(__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $18 + $6 + $23 | 0, $13 + $18 + $23 | 0, $18, $23) | 0, -9) | 0) | 0;
    $totalH$0 = $139;
    $totalW$0 = $138;
    break;
   }
  case 2:
   {
    $res$0 = (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $13, $18, $23) | 0) - ((__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $23 + $13 | 0, $18, $23) | 0) << 1) + (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, ($23 << 1) + $13 | 0, $18, $23) | 0) | 0;
    $totalH$0 = $23 * 3 | 0;
    $totalW$0 = $18;
    break;
   }
  case 10:
   {
    $res$0 = (__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $6, ($23 << 1) + $13 | 0, $18, $23) | 0) - ((__ZNK11SimpleImage19getRotatedRegionSumEiiii($img, $23 + $6 | 0, $23 + $13 | 0, $18, $23) | 0) << 1) | 0;
    $totalH$0 = $23 * 3 | 0;
    $totalW$0 = $18;
    break;
   }
  case 4:
   {
    $res$0 = (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $13, $18, $23) | 0) - (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $23 + $13 | 0, $18, $23 << 1) | 0) + (__ZNK11SimpleImage12getRegionSumEiiii($img, $6, ($23 * 3 | 0) + $13 | 0, $18, $23) | 0) | 0;
    $totalH$0 = $23 << 2;
    $totalW$0 = $18;
    break;
   }
  default:
   {
    $res$0 = 0;
    $totalH$0 = 0;
    $totalW$0 = 0;
   }
  }
 } while (0);
 $148 = Math_imul($totalW$0, $totalH$0) | 0;
 $150 = +(__ZNK11SimpleImage12getRegionSumEiiii($img, $6, $13, $totalW$0, $totalH$0) | 0);
 $151 = +($148 | 0);
 $152 = $150 / $151;
 if (((HEAP32[$24 >> 2] | 0) + -7 | 0) >>> 0 < 7) {
  $sq_value$0 = __ZNK11SimpleImage21getSqRotatedRegionSumEiiii($img, $6, $13, $totalW$0, $totalH$0) | 0;
 } else {
  $sq_value$0 = __ZNK11SimpleImage14getSqRegionSumEiiii($img, $6, $13, $totalW$0, $totalH$0) | 0;
 }
 $164 = +Math_sqrt(+(($151 * $152 * $152 + +($sq_value$0 | 0) - $150 * $152 * 2.0) / $151));
 if ($164 == 0.0) {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $$0 = +(Math_imul(HEAP32[$this + 4 >> 2] | 0, $res$0) | 0) / $164 / ($scale * $scale);
 STACKTOP = sp;
 return +$$0;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $13 = 0, $15 = 0, $21 = 0, $25 = 0, $32 = 0, $34 = 0, $35 = 0, $44 = 0, $45 = 0, $49 = 0, $56 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $75 = 0, $8 = 0, $83 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $97 = 0, $98 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 $$byval_copy = sp;
 $__buf = sp + 888 | 0;
 $__bb = sp + 872 | 0;
 $__digits = sp + 472 | 0;
 $__loc = sp + 464 | 0;
 $__pat = sp + 460 | 0;
 $__dp = sp + 456 | 0;
 $__ts = sp + 452 | 0;
 $__grp = sp + 876 | 0;
 $__sym = sp + 432 | 0;
 $__sn = sp + 420 | 0;
 $__fd = sp + 416 | 0;
 $__mbuf = sp + 16 | 0;
 $__mi = sp + 12 | 0;
 $__me = sp + 444 | 0;
 $0 = sp + 448 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[tempDoublePtr >> 3] = $__units;
 HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $1 = _snprintf($__buf, 100, 4904, $$byval_copy) | 0;
 if ($1 >>> 0 > 99) {
  if ((HEAP8[5048] | 0) == 0) {
   if ((___cxa_guard_acquire(5048) | 0) != 0) {
    $7 = _newlocale(2147483647, 5056, 0) | 0;
    HEAP32[1260] = $7;
    ___cxa_guard_release(5048);
   }
  }
  $8 = HEAP32[1260] | 0;
  HEAPF64[tempDoublePtr >> 3] = $__units;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $9 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $8, 4904, $$byval_copy) | 0;
  $10 = HEAP32[$__bb >> 2] | 0;
  if (($10 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  }
  $13 = _malloc($9 << 2) | 0;
  if (($13 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $103 = $13;
   $105 = $10;
   $__db$0 = $13;
   $__n$0 = $9;
  }
 } else {
  $103 = 0;
  $105 = 0;
  $__db$0 = $__digits;
  $__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $15 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5144;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy, 124);
 }
 $21 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $25 = HEAP32[$15 + 8 >> 2] | 0;
 if (!((HEAP32[$15 + 12 >> 2] | 0) - $25 >> 2 >>> 0 > $21 >>> 0)) {
  $34 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw($34 | 0, 13864, 113);
 }
 $32 = HEAP32[$25 + ($21 << 2) >> 2] | 0;
 if (($32 | 0) == 0) {
  $34 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw($34 | 0, 13864, 113);
 }
 $35 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$32 >> 2] | 0) + 48 >> 2] & 7]($32, $35, $35 + $__n$0 | 0, $__db$0) | 0;
 if (($__n$0 | 0) == 0) {
  $44 = 0;
 } else {
  $44 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 }
 HEAP32[$__pat >> 2] = 0;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $44, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $45 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($45 | 0)) {
  $49 = HEAP8[$__sn >> 0] | 0;
  if (($49 & 1) == 0) {
   $65 = ($49 & 255) >>> 1;
  } else {
   $65 = HEAP32[$__sn + 4 >> 2] | 0;
  }
  $56 = HEAP8[$__sym >> 0] | 0;
  if (($56 & 1) == 0) {
   $67 = ($56 & 255) >>> 1;
  } else {
   $67 = HEAP32[$__sym + 4 >> 2] | 0;
  }
  $$pn = $65 + ($__n$0 - $45 << 1 | 1) + $67 | 0;
 } else {
  $68 = HEAP8[$__sn >> 0] | 0;
  if (($68 & 1) == 0) {
   $83 = ($68 & 255) >>> 1;
  } else {
   $83 = HEAP32[$__sn + 4 >> 2] | 0;
  }
  $75 = HEAP8[$__sym >> 0] | 0;
  if (($75 & 1) == 0) {
   $85 = ($75 & 255) >>> 1;
  } else {
   $85 = HEAP32[$__sym + 4 >> 2] | 0;
  }
  $$pn = $83 + 2 + $85 | 0;
 }
 $86 = $$pn + $45 | 0;
 if ($86 >>> 0 > 100) {
  $89 = _malloc($86 << 2) | 0;
  if (($89 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $100 = $89;
   $__mb$0 = $89;
  }
 } else {
  $100 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $32, $44, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $45);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $97 = HEAP32[$__mi >> 2] | 0;
 $98 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $97, $98, $__iob, $__fl);
 if (($100 | 0) != 0) {
  _free($100);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 if (($103 | 0) != 0) {
  _free($103);
 }
 if (($105 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($105);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $103 = 0, $12 = 0, $14 = 0, $20 = 0, $24 = 0, $31 = 0, $33 = 0, $34 = 0, $43 = 0, $44 = 0, $48 = 0, $55 = 0, $64 = 0, $66 = 0, $67 = 0, $7 = 0, $74 = 0, $8 = 0, $82 = 0, $84 = 0, $85 = 0, $87 = 0, $9 = 0, $95 = 0, $96 = 0, $98 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 $$byval_copy = sp;
 $__buf = sp + 276 | 0;
 $__bb = sp + 52 | 0;
 $__digits = sp + 176 | 0;
 $__loc = sp + 60 | 0;
 $__pat = sp + 56 | 0;
 $__dp = sp + 376 | 0;
 $__ts = sp + 377 | 0;
 $__grp = sp + 64 | 0;
 $__sym = sp + 32 | 0;
 $__sn = sp + 20 | 0;
 $__fd = sp + 16 | 0;
 $__mbuf = sp + 76 | 0;
 $__mi = sp + 12 | 0;
 $__me = sp + 44 | 0;
 $0 = sp + 48 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[tempDoublePtr >> 3] = $__units;
 HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $1 = _snprintf($__buf, 100, 4904, $$byval_copy) | 0;
 if ($1 >>> 0 > 99) {
  if ((HEAP8[5048] | 0) == 0) {
   if ((___cxa_guard_acquire(5048) | 0) != 0) {
    $7 = _newlocale(2147483647, 5056, 0) | 0;
    HEAP32[1260] = $7;
    ___cxa_guard_release(5048);
   }
  }
  $8 = HEAP32[1260] | 0;
  HEAPF64[tempDoublePtr >> 3] = $__units;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $9 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $8, 4904, $$byval_copy) | 0;
  $10 = HEAP32[$__bb >> 2] | 0;
  if (($10 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  }
  $12 = _malloc($9) | 0;
  if (($12 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $101 = $12;
   $103 = $10;
   $__db$0 = $12;
   $__n$0 = $9;
  }
 } else {
  $101 = 0;
  $103 = 0;
  $__db$0 = $__digits;
  $__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $14 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5152;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy, 124);
 }
 $20 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $24 = HEAP32[$14 + 8 >> 2] | 0;
 if (!((HEAP32[$14 + 12 >> 2] | 0) - $24 >> 2 >>> 0 > $20 >>> 0)) {
  $33 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($33);
  ___cxa_throw($33 | 0, 13864, 113);
 }
 $31 = HEAP32[$24 + ($20 << 2) >> 2] | 0;
 if (($31 | 0) == 0) {
  $33 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($33);
  ___cxa_throw($33 | 0, 13864, 113);
 }
 $34 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$31 >> 2] | 0) + 32 >> 2] & 7]($31, $34, $34 + $__n$0 | 0, $__db$0) | 0;
 if (($__n$0 | 0) == 0) {
  $43 = 0;
 } else {
  $43 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 }
 HEAP32[$__pat >> 2] = 0;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $43, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $44 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($44 | 0)) {
  $48 = HEAP8[$__sn >> 0] | 0;
  if (($48 & 1) == 0) {
   $64 = ($48 & 255) >>> 1;
  } else {
   $64 = HEAP32[$__sn + 4 >> 2] | 0;
  }
  $55 = HEAP8[$__sym >> 0] | 0;
  if (($55 & 1) == 0) {
   $66 = ($55 & 255) >>> 1;
  } else {
   $66 = HEAP32[$__sym + 4 >> 2] | 0;
  }
  $$pn = $64 + ($__n$0 - $44 << 1 | 1) + $66 | 0;
 } else {
  $67 = HEAP8[$__sn >> 0] | 0;
  if (($67 & 1) == 0) {
   $82 = ($67 & 255) >>> 1;
  } else {
   $82 = HEAP32[$__sn + 4 >> 2] | 0;
  }
  $74 = HEAP8[$__sym >> 0] | 0;
  if (($74 & 1) == 0) {
   $84 = ($74 & 255) >>> 1;
  } else {
   $84 = HEAP32[$__sym + 4 >> 2] | 0;
  }
  $$pn = $82 + 2 + $84 | 0;
 }
 $85 = $$pn + $44 | 0;
 if ($85 >>> 0 > 100) {
  $87 = _malloc($85) | 0;
  if (($87 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $98 = $87;
   $__mb$0 = $87;
  }
 } else {
  $98 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $31, $43, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $44);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $95 = HEAP32[$__mi >> 2] | 0;
 $96 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $95, $96, $__iob, $__fl);
 if (($98 | 0) != 0) {
  _free($98);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 if (($101 | 0) != 0) {
  _free($101);
 }
 if (($103 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free($103);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $11 = 0, $112 = 0, $113 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $29 = 0, $33 = 0, $34 = 0, $40 = 0, $41 = 0, $43 = 0, $48 = 0, $50 = 0, $56 = 0, $58 = 0, $65 = 0, $7 = 0, $74 = 0, $76 = 0, $77 = 0, $84 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $$byval_copy = sp;
 $__loc = sp + 464 | 0;
 $__pat = sp + 460 | 0;
 $__dp = sp + 456 | 0;
 $__ts = sp + 452 | 0;
 $__grp = sp + 440 | 0;
 $__sym = sp + 468 | 0;
 $__sn = sp + 420 | 0;
 $__fd = sp + 416 | 0;
 $__mbuf = sp + 16 | 0;
 $__mi = sp + 12 | 0;
 $__me = sp + 432 | 0;
 $0 = sp + 436 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $1 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5144;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy, 124);
 }
 $7 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $11 = HEAP32[$1 + 8 >> 2] | 0;
 if (!((HEAP32[$1 + 12 >> 2] | 0) - $11 >> 2 >>> 0 > $7 >>> 0)) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 $18 = HEAP32[$11 + ($7 << 2) >> 2] | 0;
 if (($18 | 0) == 0) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 $21 = HEAP8[$__digits >> 0] | 0;
 $23 = ($21 & 1) == 0;
 if ($23) {
  $29 = ($21 & 255) >>> 1;
 } else {
  $29 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 if (($29 | 0) == 0) {
  $40 = 0;
 } else {
  if ($23) {
   $34 = $__digits + 4 | 0;
  } else {
   $34 = HEAP32[$__digits + 8 >> 2] | 0;
  }
  $33 = HEAP32[$34 >> 2] | 0;
  $40 = ($33 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] & 15]($18, 45) | 0);
 }
 HEAP32[$__pat >> 2] = 0;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $40, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $41 = HEAP8[$__digits >> 0] | 0;
 $43 = ($41 & 1) == 0;
 if ($43) {
  $50 = ($41 & 255) >>> 1;
 } else {
  $50 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 $48 = HEAP32[$__fd >> 2] | 0;
 if (($50 | 0) > ($48 | 0)) {
  if ($43) {
   $56 = ($41 & 255) >>> 1;
  } else {
   $56 = HEAP32[$__digits + 4 >> 2] | 0;
  }
  $58 = HEAP8[$__sn >> 0] | 0;
  if (($58 & 1) == 0) {
   $74 = ($58 & 255) >>> 1;
  } else {
   $74 = HEAP32[$__sn + 4 >> 2] | 0;
  }
  $65 = HEAP8[$__sym >> 0] | 0;
  if (($65 & 1) == 0) {
   $76 = ($65 & 255) >>> 1;
  } else {
   $76 = HEAP32[$__sym + 4 >> 2] | 0;
  }
  $$pn = $74 + ($56 - $48 << 1 | 1) + $76 | 0;
 } else {
  $77 = HEAP8[$__sn >> 0] | 0;
  if (($77 & 1) == 0) {
   $92 = ($77 & 255) >>> 1;
  } else {
   $92 = HEAP32[$__sn + 4 >> 2] | 0;
  }
  $84 = HEAP8[$__sym >> 0] | 0;
  if (($84 & 1) == 0) {
   $94 = ($84 & 255) >>> 1;
  } else {
   $94 = HEAP32[$__sym + 4 >> 2] | 0;
  }
  $$pn = $92 + 2 + $94 | 0;
 }
 $95 = $$pn + $48 | 0;
 if ($95 >>> 0 > 100) {
  $98 = _malloc($95 << 2) | 0;
  if (($98 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $120 = $98;
   $__mb$0 = $98;
  }
 } else {
  $120 = 0;
  $__mb$0 = $__mbuf;
 }
 if (($41 & 1) == 0) {
  $112 = $__digits + 4 | 0;
  $113 = ($41 & 255) >>> 1;
 } else {
  $112 = HEAP32[$__digits + 8 >> 2] | 0;
  $113 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $112, $112 + ($113 << 2) | 0, $18, $40, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $48);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $117 = HEAP32[$__mi >> 2] | 0;
 $118 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $117, $118, $__iob, $__fl);
 if (($120 | 0) == 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
  $121 = HEAP32[$__loc >> 2] | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($121) | 0;
  STACKTOP = sp;
  return;
 }
 _free($120);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $121 = HEAP32[$__loc >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($121) | 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $11 = 0, $111 = 0, $112 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $29 = 0, $33 = 0, $34 = 0, $40 = 0, $41 = 0, $43 = 0, $48 = 0, $50 = 0, $56 = 0, $58 = 0, $65 = 0, $7 = 0, $74 = 0, $76 = 0, $77 = 0, $84 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp;
 $__loc = sp + 52 | 0;
 $__pat = sp + 56 | 0;
 $__dp = sp + 172 | 0;
 $__ts = sp + 173 | 0;
 $__grp = sp + 40 | 0;
 $__sym = sp + 60 | 0;
 $__sn = sp + 20 | 0;
 $__fd = sp + 16 | 0;
 $__mbuf = sp + 72 | 0;
 $__mi = sp + 12 | 0;
 $__me = sp + 32 | 0;
 $0 = sp + 36 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $1 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5152;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy, 124);
 }
 $7 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $11 = HEAP32[$1 + 8 >> 2] | 0;
 if (!((HEAP32[$1 + 12 >> 2] | 0) - $11 >> 2 >>> 0 > $7 >>> 0)) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 $18 = HEAP32[$11 + ($7 << 2) >> 2] | 0;
 if (($18 | 0) == 0) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 $21 = HEAP8[$__digits >> 0] | 0;
 $23 = ($21 & 1) == 0;
 if ($23) {
  $29 = ($21 & 255) >>> 1;
 } else {
  $29 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 if (($29 | 0) == 0) {
  $40 = 0;
 } else {
  if ($23) {
   $34 = $__digits + 1 | 0;
  } else {
   $34 = HEAP32[$__digits + 8 >> 2] | 0;
  }
  $33 = HEAP8[$34 >> 0] | 0;
  $40 = $33 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] & 15]($18, 45) | 0) << 24 >> 24;
 }
 HEAP32[$__pat >> 2] = 0;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $40, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $41 = HEAP8[$__digits >> 0] | 0;
 $43 = ($41 & 1) == 0;
 if ($43) {
  $50 = ($41 & 255) >>> 1;
 } else {
  $50 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 $48 = HEAP32[$__fd >> 2] | 0;
 if (($50 | 0) > ($48 | 0)) {
  if ($43) {
   $56 = ($41 & 255) >>> 1;
  } else {
   $56 = HEAP32[$__digits + 4 >> 2] | 0;
  }
  $58 = HEAP8[$__sn >> 0] | 0;
  if (($58 & 1) == 0) {
   $74 = ($58 & 255) >>> 1;
  } else {
   $74 = HEAP32[$__sn + 4 >> 2] | 0;
  }
  $65 = HEAP8[$__sym >> 0] | 0;
  if (($65 & 1) == 0) {
   $76 = ($65 & 255) >>> 1;
  } else {
   $76 = HEAP32[$__sym + 4 >> 2] | 0;
  }
  $$pn = $74 + ($56 - $48 << 1 | 1) + $76 | 0;
 } else {
  $77 = HEAP8[$__sn >> 0] | 0;
  if (($77 & 1) == 0) {
   $92 = ($77 & 255) >>> 1;
  } else {
   $92 = HEAP32[$__sn + 4 >> 2] | 0;
  }
  $84 = HEAP8[$__sym >> 0] | 0;
  if (($84 & 1) == 0) {
   $94 = ($84 & 255) >>> 1;
  } else {
   $94 = HEAP32[$__sym + 4 >> 2] | 0;
  }
  $$pn = $92 + 2 + $94 | 0;
 }
 $95 = $$pn + $48 | 0;
 if ($95 >>> 0 > 100) {
  $97 = _malloc($95) | 0;
  if (($97 | 0) == 0) {
   __ZSt17__throw_bad_allocv();
  } else {
   $119 = $97;
   $__mb$0 = $97;
  }
 } else {
  $119 = 0;
  $__mb$0 = $__mbuf;
 }
 if (($41 & 1) == 0) {
  $111 = $__digits + 1 | 0;
  $112 = ($41 & 255) >>> 1;
 } else {
  $111 = HEAP32[$__digits + 8 >> 2] | 0;
  $112 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $111, $111 + $112 | 0, $18, $40, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $48);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $116 = HEAP32[$__mi >> 2] | 0;
 $117 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $116, $117, $__iob, $__fl);
 if (($119 | 0) == 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
  $120 = HEAP32[$__loc >> 2] | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($120) | 0;
  STACKTOP = sp;
  return;
 }
 _free($119);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $120 = HEAP32[$__loc >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($120) | 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $40 = 0, $44 = 0, $46 = 0, $59 = 0, $73 = 0, $79 = 0, $81 = 0, $83 = 0, $95 = 0, $98 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($mode & 4 | 0) == 0) {
  $frm_nxt$1$ph = $frm;
 } else {
  if (($frm_end - $frm | 0) > 2) {
   if ((HEAP8[$frm >> 0] | 0) == -17) {
    if ((HEAP8[$frm + 1 >> 0] | 0) == -69) {
     $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 L7 : do {
  if ($frm_nxt$1$ph >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;
   $nchar16_t$014 = 0;
   L9 : while (1) {
    $18 = HEAP8[$frm_nxt$115 >> 0] | 0;
    $19 = $18 & 255;
    if ($19 >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    do {
     if ($18 << 24 >> 24 > -1) {
      $frm_nxt$2 = $frm_nxt$115 + 1 | 0;
      $nchar16_t$1 = $nchar16_t$014;
     } else {
      if (($18 & 255) < 194) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      if (($18 & 255) < 224) {
       if (($17 - $frm_nxt$115 | 0) < 2) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $30 = HEAPU8[$frm_nxt$115 + 1 >> 0] | 0;
       if (($30 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       if (($30 & 63 | $19 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$115 + 2 | 0;
       $nchar16_t$1 = $nchar16_t$014;
       break;
      }
      if (($18 & 255) < 240) {
       $40 = $frm_nxt$115;
       if (($17 - $40 | 0) < 3) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $44 = HEAP8[$frm_nxt$115 + 1 >> 0] | 0;
       $46 = HEAP8[$frm_nxt$115 + 2 >> 0] | 0;
       if (($19 | 0) == 237) {
        if (!(($44 & -32) << 24 >> 24 == -128)) {
         label = 23;
         break L9;
        }
       } else if (($19 | 0) == 224) {
        if (!(($44 & -32) << 24 >> 24 == -96)) {
         label = 21;
         break L9;
        }
       } else {
        if (!(($44 & -64) << 24 >> 24 == -128)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46 & 255;
       if (($59 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       if ((($44 & 255) << 6 & 4032 | $19 << 12 & 61440 | $59 & 63) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$115 + 3 | 0;
       $nchar16_t$1 = $nchar16_t$014;
       break;
      }
      if (!(($18 & 255) < 245)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      if (($17 - $73 | 0) < 4) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      if (($mx - $nchar16_t$014 | 0) >>> 0 < 2) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $79 = HEAP8[$frm_nxt$115 + 1 >> 0] | 0;
      $81 = HEAP8[$frm_nxt$115 + 2 >> 0] | 0;
      $83 = HEAP8[$frm_nxt$115 + 3 >> 0] | 0;
      if (($19 | 0) == 244) {
       if (!(($79 & -16) << 24 >> 24 == -128)) {
        label = 36;
        break L9;
       }
      } else if (($19 | 0) == 240) {
       if (!(($79 + 112 << 24 >> 24 & 255) < 48)) {
        label = 34;
        break L9;
       }
      } else {
       if (!(($79 & -64) << 24 >> 24 == -128)) {
        label = 38;
        break L9;
       }
      }
      $95 = $81 & 255;
      if (($95 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $98 = $83 & 255;
      if (($98 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      if ((($79 & 255) << 12 & 258048 | $19 << 18 & 1835008 | $95 << 6 & 4032 | $98 & 63) >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$115 + 4 | 0;
      $nchar16_t$1 = $nchar16_t$014 + 1 | 0;
     }
    } while (0);
    $nchar16_t$014 = $nchar16_t$1 + 1 | 0;
    if (!($frm_nxt$2 >>> 0 < $frm_end >>> 0 & $nchar16_t$014 >>> 0 < $mx >>> 0)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    } else {
     $frm_nxt$115 = $frm_nxt$2;
    }
   }
   if ((label | 0) == 21) {
    $$0 = $40 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 23) {
    $$0 = $40 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 25) {
    $$0 = $40 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 34) {
    $$0 = $73 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 36) {
    $$0 = $73 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 38) {
    $$0 = $73 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while (0);
 $$0 = $frm_nxt$1$lcssa - $frm | 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $38 = 0, $44 = 0, $45 = 0, $46 = 0, $57 = 0, $62 = 0, $64 = 0, $65 = 0, $68 = 0, $78 = 0, $81 = 0, $9 = 0, $95 = 0, $98 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 $$byval_copy = sp;
 $__wbuf = sp + 72 | 0;
 $__wb = sp + 64 | 0;
 $__wn = sp + 60 | 0;
 $__loc = sp + 56 | 0;
 $__neg = sp + 572 | 0;
 $0 = sp + 12 | 0;
 $__atoms = sp + 16 | 0;
 $__nbuf = sp + 472 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $1 = $__wb + 4 | 0;
 HEAP32[$1 >> 2] = 125;
 $2 = $__wbuf + 400 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $3 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5144;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy, 124);
 }
 $9 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $13 = HEAP32[$3 + 8 >> 2] | 0;
 if (!((HEAP32[$3 + 12 >> 2] | 0) - $13 >> 2 >>> 0 > $9 >>> 0)) {
  $22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw($22 | 0, 13864, 113);
 }
 $20 = HEAP32[$13 + ($9 << 2) >> 2] | 0;
 if (($20 | 0) == 0) {
  $22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw($22 | 0, 13864, 113);
 }
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 $25 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $25, $__err, $__neg, $20, $__wb, $__wn, $2) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$20 >> 2] | 0) + 48 >> 2] & 7]($20, 4848, 4858 | 0, $__atoms) | 0;
  $30 = HEAP32[$__wn >> 2] | 0;
  $31 = HEAP32[$__wb >> 2] | 0;
  $34 = $30 - $31 | 0;
  if (($34 | 0) > 392) {
   $38 = _malloc(($34 >> 2) + 2 | 0) | 0;
   if (($38 | 0) == 0) {
    __ZSt17__throw_bad_allocv();
   } else {
    $64 = $38;
    $__nc$0 = $38;
   }
  } else {
   $64 = 0;
   $__nc$0 = $__nbuf;
  }
  if ((HEAP8[$__neg >> 0] | 0) == 0) {
   $__nc$1 = $__nc$0;
  } else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  if ($31 >>> 0 < $30 >>> 0) {
   $44 = $__atoms + 40 | 0;
   $45 = $__atoms;
   $__nc$210 = $__nc$1;
   $__w$011 = $31;
   while (1) {
    $46 = HEAP32[$__w$011 >> 2] | 0;
    $$01$i = $__atoms;
    while (1) {
     if ((HEAP32[$$01$i >> 2] | 0) == ($46 | 0)) {
      $$0$lcssa$i = $$01$i;
      break;
     }
     $$01$i = $$01$i + 4 | 0;
     if (($$01$i | 0) == ($44 | 0)) {
      $$0$lcssa$i = $44;
      break;
     }
    }
    HEAP8[$__nc$210 >> 0] = HEAP8[4848 + ($$0$lcssa$i - $45 >> 2) >> 0] | 0;
    $__w$011 = $__w$011 + 4 | 0;
    $57 = $__nc$210 + 1 | 0;
    if (!($__w$011 >>> 0 < (HEAP32[$__wn >> 2] | 0) >>> 0)) {
     $__nc$2$lcssa = $57;
     break;
    } else {
     $__nc$210 = $57;
    }
   }
  } else {
   $__nc$2$lcssa = $__nc$1;
  }
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$$byval_copy >> 2] = $__v;
  if ((_sscanf($__nbuf, 4784, $$byval_copy) | 0) != 1) {
   $62 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc($62, 4792);
   ___cxa_throw($62 | 0, 13768, 110);
  }
  if (($64 | 0) != 0) {
   _free($64);
  }
 }
 $65 = HEAP32[$__b >> 2] | 0;
 do {
  if (($65 | 0) == 0) {
   $98 = 1;
  } else {
   $68 = HEAP32[$65 + 12 >> 2] | 0;
   if (($68 | 0) == (HEAP32[$65 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] & 63]($65) | 0;
   } else {
    $$0$i$i$i$i = HEAP32[$68 >> 2] | 0;
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $98 = 1;
    break;
   } else {
    $98 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$__e >> 2] | 0;
 do {
  if (($78 | 0) == 0) {
   label = 35;
  } else {
   $81 = HEAP32[$78 + 12 >> 2] | 0;
   if (($81 | 0) == (HEAP32[$78 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$78 >> 2] | 0) + 36 >> 2] & 63]($78) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$81 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 35;
    break;
   } else {
    if ($98) {
     break;
    } else {
     label = 37;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 35) {
  if ($98) {
   label = 37;
  }
 }
 if ((label | 0) == 37) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $95 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if (($95 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 255]($95);
 STACKTOP = sp;
 return;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre5 = 0, $103 = 0, $106 = 0, $127 = 0, $132 = 0, $135 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $35 = 0, $41 = 0, $50 = 0, $52 = 0, $59 = 0, $68 = 0, $78 = 0, $80 = 0, $82 = 0, $88 = 0, $91 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre5 = HEAP32[$frm_nxt >> 2] | 0;
 if (($mode & 4 | 0) == 0) {
  $16 = $$pre5;
 } else {
  if (($frm_end - $$pre5 | 0) > 2) {
   if ((HEAP8[$$pre5 >> 0] | 0) == -17) {
    if ((HEAP8[$$pre5 + 1 >> 0] | 0) == -69) {
     if ((HEAP8[$$pre5 + 2 >> 0] | 0) == -65) {
      $14 = $$pre5 + 3 | 0;
      HEAP32[$frm_nxt >> 2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 L8 : do {
  if ($16 >>> 0 < $frm_end >>> 0) {
   $17 = $frm_end;
   $18 = $to_end;
   $20 = HEAP32[$to_nxt >> 2] | 0;
   $22 = $16;
   L10 : while (1) {
    if (!($20 >>> 0 < $to_end >>> 0)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22 >> 0] | 0;
    $23 = $21 & 255;
    if ($23 >>> 0 > $Maxcode >>> 0) {
     $$0 = 2;
     label = 41;
     break;
    }
    do {
     if ($21 << 24 >> 24 > -1) {
      HEAP16[$20 >> 1] = $21 & 255;
      HEAP32[$frm_nxt >> 2] = $22 + 1;
     } else {
      if (($21 & 255) < 194) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      if (($21 & 255) < 224) {
       if (($17 - $22 | 0) < 2) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $35 = HEAPU8[$22 + 1 >> 0] | 0;
       if (($35 & 192 | 0) != 128) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $41 = $35 & 63 | $23 << 6 & 1984;
       if ($41 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       HEAP16[$20 >> 1] = $41;
       HEAP32[$frm_nxt >> 2] = $22 + 2;
       break;
      }
      if (($21 & 255) < 240) {
       if (($17 - $22 | 0) < 3) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $50 = HEAP8[$22 + 1 >> 0] | 0;
       $52 = HEAP8[$22 + 2 >> 0] | 0;
       if (($23 | 0) == 237) {
        if (!(($50 & -32) << 24 >> 24 == -128)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if (($23 | 0) == 224) {
        if (!(($50 & -32) << 24 >> 24 == -96)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        if (!(($50 & -64) << 24 >> 24 == -128)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52 & 255;
       if (($59 & 192 | 0) != 128) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $68 = ($50 & 255) << 6 & 4032 | $23 << 12 | $59 & 63;
       if (($68 & 65535) >>> 0 > $Maxcode >>> 0) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       HEAP16[$20 >> 1] = $68;
       HEAP32[$frm_nxt >> 2] = $22 + 3;
       break;
      }
      if (!(($21 & 255) < 245)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      if (($17 - $22 | 0) < 4) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $78 = HEAP8[$22 + 1 >> 0] | 0;
      $80 = HEAP8[$22 + 2 >> 0] | 0;
      $82 = HEAP8[$22 + 3 >> 0] | 0;
      if (($23 | 0) == 240) {
       if (!(($78 + 112 << 24 >> 24 & 255) < 48)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if (($23 | 0) == 244) {
       if (!(($78 & -16) << 24 >> 24 == -128)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       if (!(($78 & -64) << 24 >> 24 == -128)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80 & 255;
      if (($88 & 192 | 0) != 128) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82 & 255;
      if (($91 & 192 | 0) != 128) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      if (($18 - $20 | 0) < 4) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $99 = $78 & 255;
      $103 = $88 << 6;
      $106 = $91 & 63;
      if (($99 << 12 & 258048 | $97 << 18 | $103 & 4032 | $106) >>> 0 > $Maxcode >>> 0) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      HEAP16[$20 >> 1] = $99 << 2 & 60 | $88 >>> 4 & 3 | (($99 >>> 4 & 3 | $97 << 2) << 6) + 16320 | 55296;
      $127 = $20 + 2 | 0;
      HEAP32[$to_nxt >> 2] = $127;
      HEAP16[$127 >> 1] = $106 | $103 & 960 | 56320;
      HEAP32[$frm_nxt >> 2] = (HEAP32[$frm_nxt >> 2] | 0) + 4;
     }
    } while (0);
    $20 = (HEAP32[$to_nxt >> 2] | 0) + 2 | 0;
    HEAP32[$to_nxt >> 2] = $20;
    $132 = HEAP32[$frm_nxt >> 2] | 0;
    if (!($132 >>> 0 < $frm_end >>> 0)) {
     $135 = $132;
     break L8;
    } else {
     $22 = $132;
    }
   }
   if ((label | 0) == 41) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   $135 = $16;
  }
 } while (0);
 $$0 = $135 >>> 0 < $frm_end >>> 0 & 1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $0 = 0, $13 = 0, $14 = 0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $43 = 0, $47 = 0, $48 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $8 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $tmp = sp + 8 | 0;
 $0 = ($frm | 0) == ($frm_end | 0);
 L1 : do {
  if ($0) {
   HEAP32[$to_nxt >> 2] = $to;
   HEAP32[$frm_nxt >> 2] = $frm;
   $73 = $frm;
  } else {
   $fend$052 = $frm;
   while (1) {
    if ((HEAP32[$fend$052 >> 2] | 0) == 0) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $fend$052 = $fend$052 + 4 | 0;
    if (($fend$052 | 0) == ($frm_end | 0)) {
     $fend$0$lcssa = $frm_end;
     break;
    }
   }
   HEAP32[$to_nxt >> 2] = $to;
   HEAP32[$frm_nxt >> 2] = $frm;
   if ($0 | ($to | 0) == ($to_end | 0)) {
    $73 = $frm;
   } else {
    $6 = $to_end;
    $7 = $this + 8 | 0;
    $$0148 = $frm;
    $$0247 = $to;
    $fend$149 = $fend$0$lcssa;
    while (1) {
     $8 = $st;
     $13 = HEAP32[$8 + 4 >> 2] | 0;
     $14 = $save_state;
     HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$14 + 4 >> 2] = $13;
     $25 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
     $26 = _wcsnrtombs($$0247, $frm_nxt, $fend$149 - $$0148 >> 2, $6 - $$0247 | 0, $st) | 0;
     if (($25 | 0) != 0) {
      _uselocale($25 | 0) | 0;
     }
     if (($26 | 0) == -1) {
      label = 10;
      break;
     } else if (($26 | 0) == 0) {
      $$0 = 1;
      label = 33;
      break;
     }
     $43 = (HEAP32[$to_nxt >> 2] | 0) + $26 | 0;
     HEAP32[$to_nxt >> 2] = $43;
     if (($43 | 0) == ($to_end | 0)) {
      label = 31;
      break;
     }
     if (($fend$149 | 0) == ($frm_end | 0)) {
      $70 = HEAP32[$frm_nxt >> 2] | 0;
      $72 = $43;
      $fend$3 = $frm_end;
     } else {
      $47 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
      $48 = _wcrtomb($tmp, 0, $st) | 0;
      if (($47 | 0) != 0) {
       _uselocale($47 | 0) | 0;
      }
      if (($48 | 0) == -1) {
       $$0 = 2;
       label = 33;
       break;
      }
      $51 = HEAP32[$to_nxt >> 2] | 0;
      if ($48 >>> 0 > ($6 - $51 | 0) >>> 0) {
       $$0 = 1;
       label = 33;
       break;
      }
      L22 : do {
       if (($48 | 0) != 0) {
        $58 = $51;
        $n$011 = $48;
        $p$012 = $tmp;
        while (1) {
         $56 = HEAP8[$p$012 >> 0] | 0;
         HEAP32[$to_nxt >> 2] = $58 + 1;
         HEAP8[$58 >> 0] = $56;
         $59 = $n$011 + -1 | 0;
         if (($59 | 0) == 0) {
          break L22;
         }
         $58 = HEAP32[$to_nxt >> 2] | 0;
         $n$011 = $59;
         $p$012 = $p$012 + 1 | 0;
        }
       }
      } while (0);
      $63 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
      HEAP32[$frm_nxt >> 2] = $63;
      L27 : do {
       if (($63 | 0) == ($frm_end | 0)) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $63;
        while (1) {
         if ((HEAP32[$fend$215 >> 2] | 0) == 0) {
          $fend$2$lcssa = $fend$215;
          break L27;
         }
         $fend$215 = $fend$215 + 4 | 0;
         if (($fend$215 | 0) == ($frm_end | 0)) {
          $fend$2$lcssa = $frm_end;
          break;
         }
        }
       }
      } while (0);
      $70 = $63;
      $72 = HEAP32[$to_nxt >> 2] | 0;
      $fend$3 = $fend$2$lcssa;
     }
     if (($70 | 0) == ($frm_end | 0) | ($72 | 0) == ($to_end | 0)) {
      $73 = $70;
      break L1;
     } else {
      $$0148 = $70;
      $$0247 = $72;
      $fend$149 = $fend$3;
     }
    }
    if ((label | 0) == 10) {
     HEAP32[$to_nxt >> 2] = $$0247;
     L36 : do {
      if (($$0148 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;
       $33 = $$0247;
       while (1) {
        $30 = HEAP32[$$19 >> 2] | 0;
        $32 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
        $34 = _wcrtomb($33, $30, $save_state) | 0;
        if (($32 | 0) != 0) {
         _uselocale($32 | 0) | 0;
        }
        if (($34 | 0) == -1) {
         $$1$lcssa = $$19;
         break L36;
        }
        $33 = (HEAP32[$to_nxt >> 2] | 0) + $34 | 0;
        HEAP32[$to_nxt >> 2] = $33;
        $39 = $$19 + 4 | 0;
        if (($39 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
         $$1$lcssa = $39;
         break;
        } else {
         $$19 = $39;
        }
       }
      }
     } while (0);
     HEAP32[$frm_nxt >> 2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;
     return $$0 | 0;
    } else if ((label | 0) == 31) {
     $73 = HEAP32[$frm_nxt >> 2] | 0;
     break;
    } else if ((label | 0) == 33) {
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
  }
 } while (0);
 $$0 = ($73 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $43 = 0, $44 = 0, $45 = 0, $55 = 0, $60 = 0, $62 = 0, $63 = 0, $75 = 0, $76 = 0, $77 = 0, $9 = 0, $92 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$211 = 0, $__neg = 0, $__w$012 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $$byval_copy = sp;
 $__wbuf = sp + 32 | 0;
 $__wb = sp + 24 | 0;
 $__wn = sp + 16 | 0;
 $__loc = sp + 12 | 0;
 $__neg = sp + 244 | 0;
 $0 = sp + 20 | 0;
 $__atoms = sp + 132 | 0;
 $__nbuf = sp + 144 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $1 = $__wb + 4 | 0;
 HEAP32[$1 >> 2] = 125;
 $2 = $__wbuf + 100 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $3 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5152;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy, 124);
 }
 $9 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $13 = HEAP32[$3 + 8 >> 2] | 0;
 if (!((HEAP32[$3 + 12 >> 2] | 0) - $13 >> 2 >>> 0 > $9 >>> 0)) {
  $22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw($22 | 0, 13864, 113);
 }
 $20 = HEAP32[$13 + ($9 << 2) >> 2] | 0;
 if (($20 | 0) == 0) {
  $22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw($22 | 0, 13864, 113);
 }
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 $25 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $25, $__err, $__neg, $20, $__wb, $__wn, $2) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$20 >> 2] | 0) + 32 >> 2] & 7]($20, 4768, 4778 | 0, $__atoms) | 0;
  $30 = HEAP32[$__wn >> 2] | 0;
  $31 = HEAP32[$__wb >> 2] | 0;
  $34 = $30 - $31 | 0;
  if (($34 | 0) > 98) {
   $37 = _malloc($34 + 2 | 0) | 0;
   if (($37 | 0) == 0) {
    __ZSt17__throw_bad_allocv();
   } else {
    $62 = $37;
    $__nc$0 = $37;
   }
  } else {
   $62 = 0;
   $__nc$0 = $__nbuf;
  }
  if ((HEAP8[$__neg >> 0] | 0) == 0) {
   $__nc$1 = $__nc$0;
  } else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  if ($31 >>> 0 < $30 >>> 0) {
   $43 = $__atoms + 10 | 0;
   $44 = $__atoms;
   $__nc$211 = $__nc$1;
   $__w$012 = $31;
   while (1) {
    $45 = HEAP8[$__w$012 >> 0] | 0;
    $$01$i = $__atoms;
    while (1) {
     if ((HEAP8[$$01$i >> 0] | 0) == $45 << 24 >> 24) {
      $$0$lcssa$i = $$01$i;
      break;
     }
     $$01$i = $$01$i + 1 | 0;
     if (($$01$i | 0) == ($43 | 0)) {
      $$0$lcssa$i = $43;
      break;
     }
    }
    HEAP8[$__nc$211 >> 0] = HEAP8[4768 + ($$0$lcssa$i - $44) >> 0] | 0;
    $__w$012 = $__w$012 + 1 | 0;
    $55 = $__nc$211 + 1 | 0;
    if (!($__w$012 >>> 0 < (HEAP32[$__wn >> 2] | 0) >>> 0)) {
     $__nc$2$lcssa = $55;
     break;
    } else {
     $__nc$211 = $55;
    }
   }
  } else {
   $__nc$2$lcssa = $__nc$1;
  }
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$$byval_copy >> 2] = $__v;
  if ((_sscanf($__nbuf, 4784, $$byval_copy) | 0) != 1) {
   $60 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc($60, 4792);
   ___cxa_throw($60 | 0, 13768, 110);
  }
  if (($62 | 0) != 0) {
   _free($62);
  }
 }
 $63 = HEAP32[$__b >> 2] | 0;
 if (($63 | 0) == 0) {
  $76 = 0;
 } else {
  if ((HEAP32[$63 + 12 >> 2] | 0) == (HEAP32[$63 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 36 >> 2] & 63]($63) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $76 = 0;
   } else {
    $76 = $63;
   }
  } else {
   $76 = $63;
  }
 }
 $75 = ($76 | 0) == 0;
 $77 = HEAP32[$__e >> 2] | 0;
 do {
  if (($77 | 0) == 0) {
   label = 31;
  } else {
   if ((HEAP32[$77 + 12 >> 2] | 0) != (HEAP32[$77 + 16 >> 2] | 0)) {
    if ($75) {
     break;
    } else {
     label = 33;
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 63]($77) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 31;
    break;
   } else {
    if ($75) {
     break;
    } else {
     label = 33;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 31) {
  if ($75) {
   label = 33;
  }
 }
 if ((label | 0) == 33) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg$result >> 2] = $76;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $92 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if (($92 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 255]($92);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre113 = 0, $0 = 0, $13 = 0, $14 = 0, $18 = 0, $25 = 0, $26 = 0, $33 = 0, $34 = 0, $44 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0, $fend$3 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $0 = ($frm | 0) == ($frm_end | 0);
 L1 : do {
  if ($0) {
   HEAP32[$to_nxt >> 2] = $to;
   HEAP32[$frm_nxt >> 2] = $frm;
   $65 = $frm;
  } else {
   $fend$059 = $frm;
   while (1) {
    if ((HEAP8[$fend$059 >> 0] | 0) == 0) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $fend$059 = $fend$059 + 1 | 0;
    if (($fend$059 | 0) == ($frm_end | 0)) {
     $fend$0$lcssa = $frm_end;
     break;
    }
   }
   HEAP32[$to_nxt >> 2] = $to;
   HEAP32[$frm_nxt >> 2] = $frm;
   if ($0 | ($to | 0) == ($to_end | 0)) {
    $65 = $frm;
   } else {
    $6 = $to_end;
    $7 = $this + 8 | 0;
    $$0155 = $frm;
    $$0254 = $to;
    $fend$156 = $fend$0$lcssa;
    while (1) {
     $8 = $st;
     $13 = HEAP32[$8 + 4 >> 2] | 0;
     $14 = $save_state;
     HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$14 + 4 >> 2] = $13;
     $18 = $fend$156;
     $25 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
     $26 = _mbsnrtowcs($$0254, $frm_nxt, $18 - $$0155 | 0, $6 - $$0254 >> 2, $st) | 0;
     if (($25 | 0) != 0) {
      _uselocale($25 | 0) | 0;
     }
     if (($26 | 0) == 0) {
      $$0 = 2;
      label = 32;
      break;
     } else if (($26 | 0) == -1) {
      label = 10;
      break;
     }
     $44 = (HEAP32[$to_nxt >> 2] | 0) + ($26 << 2) | 0;
     HEAP32[$to_nxt >> 2] = $44;
     if (($44 | 0) == ($to_end | 0)) {
      label = 30;
      break;
     }
     $$pre113 = HEAP32[$frm_nxt >> 2] | 0;
     if (($fend$156 | 0) == ($frm_end | 0)) {
      $62 = $$pre113;
      $64 = $44;
      $fend$3 = $frm_end;
     } else {
      $48 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
      $49 = _mbrtowc($44, $$pre113, 1, $st) | 0;
      if (($48 | 0) != 0) {
       _uselocale($48 | 0) | 0;
      }
      if (($49 | 0) != 0) {
       $$0 = 2;
       label = 32;
       break;
      }
      HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
      $55 = (HEAP32[$frm_nxt >> 2] | 0) + 1 | 0;
      HEAP32[$frm_nxt >> 2] = $55;
      L21 : do {
       if (($55 | 0) == ($frm_end | 0)) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $55;
        while (1) {
         if ((HEAP8[$fend$216 >> 0] | 0) == 0) {
          $fend$2$lcssa = $fend$216;
          break L21;
         }
         $fend$216 = $fend$216 + 1 | 0;
         if (($fend$216 | 0) == ($frm_end | 0)) {
          $fend$2$lcssa = $frm_end;
          break;
         }
        }
       }
      } while (0);
      $62 = $55;
      $64 = HEAP32[$to_nxt >> 2] | 0;
      $fend$3 = $fend$2$lcssa;
     }
     if (($62 | 0) == ($frm_end | 0) | ($64 | 0) == ($to_end | 0)) {
      $65 = $62;
      break L1;
     } else {
      $$0155 = $62;
      $$0254 = $64;
      $fend$156 = $fend$3;
     }
    }
    if ((label | 0) == 10) {
     HEAP32[$to_nxt >> 2] = $$0254;
     L32 : do {
      if (($$0155 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;
       $storemerge14 = $$0254;
       while (1) {
        $33 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
        $34 = _mbrtowc($storemerge14, $$115, $18 - $$115 | 0, $save_state) | 0;
        if (($33 | 0) != 0) {
         _uselocale($33 | 0) | 0;
        }
        if (($34 | 0) == 0) {
         $$2 = $$115 + 1 | 0;
        } else if (($34 | 0) == -2) {
         label = 16;
         break;
        } else if (($34 | 0) == -1) {
         label = 15;
         break;
        } else {
         $$2 = $$115 + $34 | 0;
        }
        $storemerge14 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
        HEAP32[$to_nxt >> 2] = $storemerge14;
        if (($$2 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
         $$1$lcssa = $$2;
         break L32;
        } else {
         $$115 = $$2;
        }
       }
       if ((label | 0) == 15) {
        HEAP32[$frm_nxt >> 2] = $$115;
        $$0 = 2;
        STACKTOP = sp;
        return $$0 | 0;
       } else if ((label | 0) == 16) {
        HEAP32[$frm_nxt >> 2] = $$115;
        $$0 = 1;
        STACKTOP = sp;
        return $$0 | 0;
       }
      }
     } while (0);
     HEAP32[$frm_nxt >> 2] = $$1$lcssa;
     $$0 = ($$1$lcssa | 0) != ($frm_end | 0) & 1;
     STACKTOP = sp;
     return $$0 | 0;
    } else if ((label | 0) == 30) {
     $65 = HEAP32[$frm_nxt >> 2] | 0;
     break;
    } else if ((label | 0) == 32) {
     STACKTOP = sp;
     return $$0 | 0;
    }
   }
  }
 } while (0);
 $$0 = ($65 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $40 = 0, $44 = 0, $46 = 0, $59 = 0, $73 = 0, $77 = 0, $79 = 0, $81 = 0, $93 = 0, $96 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($mode & 4 | 0) == 0) {
  $frm_nxt$1$ph = $frm;
 } else {
  if (($frm_end - $frm | 0) > 2) {
   if ((HEAP8[$frm >> 0] | 0) == -17) {
    if ((HEAP8[$frm + 1 >> 0] | 0) == -69) {
     $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 L7 : do {
  if ($frm_nxt$1$ph >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;
   $nchar32_t$014 = 1;
   L9 : while (1) {
    $18 = HEAP8[$frm_nxt$115 >> 0] | 0;
    $19 = $18 & 255;
    do {
     if ($18 << 24 >> 24 > -1) {
      if ($19 >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$115 + 1 | 0;
     } else {
      if (($18 & 255) < 194) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      if (($18 & 255) < 224) {
       if (($17 - $frm_nxt$115 | 0) < 2) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $30 = HEAPU8[$frm_nxt$115 + 1 >> 0] | 0;
       if (($30 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       if (($30 & 63 | $19 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$115 + 2 | 0;
       break;
      }
      if (($18 & 255) < 240) {
       $40 = $frm_nxt$115;
       if (($17 - $40 | 0) < 3) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $44 = HEAP8[$frm_nxt$115 + 1 >> 0] | 0;
       $46 = HEAP8[$frm_nxt$115 + 2 >> 0] | 0;
       if (($19 | 0) == 237) {
        if (!(($44 & -32) << 24 >> 24 == -128)) {
         label = 23;
         break L9;
        }
       } else if (($19 | 0) == 224) {
        if (!(($44 & -32) << 24 >> 24 == -96)) {
         label = 21;
         break L9;
        }
       } else {
        if (!(($44 & -64) << 24 >> 24 == -128)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46 & 255;
       if (($59 & 192 | 0) != 128) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       if ((($44 & 255) << 6 & 4032 | $19 << 12 & 61440 | $59 & 63) >>> 0 > $Maxcode >>> 0) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $frm_nxt$2 = $frm_nxt$115 + 3 | 0;
       break;
      }
      if (!(($18 & 255) < 245)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      if (($17 - $73 | 0) < 4) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $77 = HEAP8[$frm_nxt$115 + 1 >> 0] | 0;
      $79 = HEAP8[$frm_nxt$115 + 2 >> 0] | 0;
      $81 = HEAP8[$frm_nxt$115 + 3 >> 0] | 0;
      if (($19 | 0) == 240) {
       if (!(($77 + 112 << 24 >> 24 & 255) < 48)) {
        label = 33;
        break L9;
       }
      } else if (($19 | 0) == 244) {
       if (!(($77 & -16) << 24 >> 24 == -128)) {
        label = 35;
        break L9;
       }
      } else {
       if (!(($77 & -64) << 24 >> 24 == -128)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79 & 255;
      if (($93 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81 & 255;
      if (($96 & 192 | 0) != 128) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      if ((($77 & 255) << 12 & 258048 | $19 << 18 & 1835008 | $93 << 6 & 4032 | $96 & 63) >>> 0 > $Maxcode >>> 0) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $frm_nxt$2 = $frm_nxt$115 + 4 | 0;
     }
    } while (0);
    if (!($frm_nxt$2 >>> 0 < $frm_end >>> 0 & $nchar32_t$014 >>> 0 < $mx >>> 0)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $frm_nxt$115 = $frm_nxt$2;
    $nchar32_t$014 = $nchar32_t$014 + 1 | 0;
   }
   if ((label | 0) == 21) {
    $$0 = $40 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 23) {
    $$0 = $40 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 25) {
    $$0 = $40 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 33) {
    $$0 = $73 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 35) {
    $$0 = $73 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 37) {
    $$0 = $73 - $frm | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while (0);
 $$0 = $frm_nxt$1$lcssa - $frm | 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $52 = 0, $55 = 0, $67 = 0, $81 = 0, $84 = 0, $9 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 $$byval_copy = sp;
 $__wbuf = sp + 40 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 24 | 0;
 $__loc = sp + 28 | 0;
 $__neg = sp + 440 | 0;
 $0 = sp + 32 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $1 = $__wb + 4 | 0;
 HEAP32[$1 >> 2] = 125;
 $2 = $__wbuf + 400 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $3 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5144;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy, 124);
 }
 $9 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $13 = HEAP32[$3 + 8 >> 2] | 0;
 if (!((HEAP32[$3 + 12 >> 2] | 0) - $13 >> 2 >>> 0 > $9 >>> 0)) {
  $22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw($22 | 0, 13864, 113);
 }
 $20 = HEAP32[$13 + ($9 << 2) >> 2] | 0;
 if (($20 | 0) == 0) {
  $22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw($22 | 0, 13864, 113);
 }
 HEAP8[$__neg >> 0] = 0;
 $23 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $23;
 $25 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $25, $__err, $__neg, $20, $__wb, $__wn, $2) | 0) {
  if ((HEAP8[$__v >> 0] & 1) == 0) {
   HEAP32[$__v + 4 >> 2] = 0;
   HEAP8[$__v >> 0] = 0;
  } else {
   HEAP32[HEAP32[$__v + 8 >> 2] >> 2] = 0;
   HEAP32[$__v + 4 >> 2] = 0;
  }
  if ((HEAP8[$__neg >> 0] | 0) != 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$20 >> 2] | 0) + 44 >> 2] & 15]($20, 45) | 0);
  }
  $43 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$20 >> 2] | 0) + 44 >> 2] & 15]($20, 48) | 0;
  $44 = HEAP32[$__wb >> 2] | 0;
  $45 = HEAP32[$__wn >> 2] | 0;
  $46 = $45 + -4 | 0;
  L19 : do {
   if ($44 >>> 0 < $46 >>> 0) {
    $__w$09 = $44;
    while (1) {
     $49 = $__w$09 + 4 | 0;
     if ((HEAP32[$__w$09 >> 2] | 0) != ($43 | 0)) {
      $__w$0$lcssa = $__w$09;
      break L19;
     }
     if ($49 >>> 0 < $46 >>> 0) {
      $__w$09 = $49;
     } else {
      $__w$0$lcssa = $49;
      break;
     }
    }
   } else {
    $__w$0$lcssa = $44;
   }
  } while (0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $45) | 0;
 }
 $52 = HEAP32[$__b >> 2] | 0;
 do {
  if (($52 | 0) == 0) {
   $84 = 1;
  } else {
   $55 = HEAP32[$52 + 12 >> 2] | 0;
   if (($55 | 0) == (HEAP32[$52 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$52 >> 2] | 0) + 36 >> 2] & 63]($52) | 0;
   } else {
    $$0$i$i$i$i = HEAP32[$55 >> 2] | 0;
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $84 = 1;
    break;
   } else {
    $84 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if (($23 | 0) == 0) {
   label = 29;
  } else {
   $67 = HEAP32[$23 + 12 >> 2] | 0;
   if (($67 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$67 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 29;
    break;
   } else {
    if ($84) {
     break;
    } else {
     label = 31;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 29) {
  if ($84) {
   label = 31;
  }
 }
 if ((label | 0) == 31) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $81 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if (($81 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 255]($81);
 STACKTOP = sp;
 return;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre5 = 0, $100 = 0, $105 = 0, $108 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $33 = 0, $39 = 0, $47 = 0, $49 = 0, $56 = 0, $66 = 0, $74 = 0, $76 = 0, $78 = 0, $84 = 0, $87 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre5 = HEAP32[$frm_nxt >> 2] | 0;
 if (($mode & 4 | 0) == 0) {
  $16 = $$pre5;
 } else {
  if (($frm_end - $$pre5 | 0) > 2) {
   if ((HEAP8[$$pre5 >> 0] | 0) == -17) {
    if ((HEAP8[$$pre5 + 1 >> 0] | 0) == -69) {
     if ((HEAP8[$$pre5 + 2 >> 0] | 0) == -65) {
      $14 = $$pre5 + 3 | 0;
      HEAP32[$frm_nxt >> 2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 L8 : do {
  if ($16 >>> 0 < $frm_end >>> 0) {
   $17 = $frm_end;
   $19 = HEAP32[$to_nxt >> 2] | 0;
   $21 = $16;
   while (1) {
    if (!($19 >>> 0 < $to_end >>> 0)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21 >> 0] | 0;
    $22 = $20 & 255;
    do {
     if ($20 << 24 >> 24 > -1) {
      if ($22 >>> 0 > $Maxcode >>> 0) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19 >> 2] = $22;
      HEAP32[$frm_nxt >> 2] = $21 + 1;
     } else {
      if (($20 & 255) < 194) {
       $$0 = 2;
       break L8;
      }
      if (($20 & 255) < 224) {
       if (($17 - $21 | 0) < 2) {
        $$0 = 1;
        break L8;
       }
       $33 = HEAPU8[$21 + 1 >> 0] | 0;
       if (($33 & 192 | 0) != 128) {
        $$0 = 2;
        break L8;
       }
       $39 = $33 & 63 | $22 << 6 & 1984;
       if ($39 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19 >> 2] = $39;
       HEAP32[$frm_nxt >> 2] = $21 + 2;
       break;
      }
      if (($20 & 255) < 240) {
       if (($17 - $21 | 0) < 3) {
        $$0 = 1;
        break L8;
       }
       $47 = HEAP8[$21 + 1 >> 0] | 0;
       $49 = HEAP8[$21 + 2 >> 0] | 0;
       if (($22 | 0) == 237) {
        if (!(($47 & -32) << 24 >> 24 == -128)) {
         $$0 = 2;
         break L8;
        }
       } else if (($22 | 0) == 224) {
        if (!(($47 & -32) << 24 >> 24 == -96)) {
         $$0 = 2;
         break L8;
        }
       } else {
        if (!(($47 & -64) << 24 >> 24 == -128)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49 & 255;
       if (($56 & 192 | 0) != 128) {
        $$0 = 2;
        break L8;
       }
       $66 = ($47 & 255) << 6 & 4032 | $22 << 12 & 61440 | $56 & 63;
       if ($66 >>> 0 > $Maxcode >>> 0) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19 >> 2] = $66;
       HEAP32[$frm_nxt >> 2] = $21 + 3;
       break;
      }
      if (!(($20 & 255) < 245)) {
       $$0 = 2;
       break L8;
      }
      if (($17 - $21 | 0) < 4) {
       $$0 = 1;
       break L8;
      }
      $74 = HEAP8[$21 + 1 >> 0] | 0;
      $76 = HEAP8[$21 + 2 >> 0] | 0;
      $78 = HEAP8[$21 + 3 >> 0] | 0;
      if (($22 | 0) == 244) {
       if (!(($74 & -16) << 24 >> 24 == -128)) {
        $$0 = 2;
        break L8;
       }
      } else if (($22 | 0) == 240) {
       if (!(($74 + 112 << 24 >> 24 & 255) < 48)) {
        $$0 = 2;
        break L8;
       }
      } else {
       if (!(($74 & -64) << 24 >> 24 == -128)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76 & 255;
      if (($84 & 192 | 0) != 128) {
       $$0 = 2;
       break L8;
      }
      $87 = $78 & 255;
      if (($87 & 192 | 0) != 128) {
       $$0 = 2;
       break L8;
      }
      $100 = ($74 & 255) << 12 & 258048 | $22 << 18 & 1835008 | $84 << 6 & 4032 | $87 & 63;
      if ($100 >>> 0 > $Maxcode >>> 0) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19 >> 2] = $100;
      HEAP32[$frm_nxt >> 2] = $21 + 4;
     }
    } while (0);
    $19 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
    HEAP32[$to_nxt >> 2] = $19;
    $105 = HEAP32[$frm_nxt >> 2] | 0;
    if (!($105 >>> 0 < $frm_end >>> 0)) {
     $108 = $105;
     label = 39;
     break;
    } else {
     $21 = $105;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while (0);
 if ((label | 0) == 39) {
  $$0 = $108 >>> 0 < $frm_end >>> 0 & 1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $52 = 0, $64 = 0, $65 = 0, $81 = 0, $9 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy = sp;
 $__wbuf = sp + 40 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 24 | 0;
 $__loc = sp + 28 | 0;
 $__neg = sp + 36 | 0;
 $0 = sp + 32 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $1 = $__wb + 4 | 0;
 HEAP32[$1 >> 2] = 125;
 $2 = $__wbuf + 100 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $3 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5152;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy, 124);
 }
 $9 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $13 = HEAP32[$3 + 8 >> 2] | 0;
 if (!((HEAP32[$3 + 12 >> 2] | 0) - $13 >> 2 >>> 0 > $9 >>> 0)) {
  $22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw($22 | 0, 13864, 113);
 }
 $20 = HEAP32[$13 + ($9 << 2) >> 2] | 0;
 if (($20 | 0) == 0) {
  $22 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw($22 | 0, 13864, 113);
 }
 HEAP8[$__neg >> 0] = 0;
 $23 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $23;
 $25 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $25, $__err, $__neg, $20, $__wb, $__wn, $2) | 0) {
  if ((HEAP8[$__v >> 0] & 1) == 0) {
   HEAP8[$__v + 1 >> 0] = 0;
   HEAP8[$__v >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__v + 8 >> 2] >> 0] = 0;
   HEAP32[$__v + 4 >> 2] = 0;
  }
  if ((HEAP8[$__neg >> 0] | 0) != 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] & 15]($20, 45) | 0);
  }
  $43 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] & 15]($20, 48) | 0;
  $44 = HEAP32[$__wb >> 2] | 0;
  $45 = HEAP32[$__wn >> 2] | 0;
  $46 = $45 + -1 | 0;
  L19 : do {
   if ($44 >>> 0 < $46 >>> 0) {
    $__w$09 = $44;
    while (1) {
     $49 = $__w$09 + 1 | 0;
     if (!((HEAP8[$__w$09 >> 0] | 0) == $43 << 24 >> 24)) {
      $__w$0$lcssa = $__w$09;
      break L19;
     }
     if ($49 >>> 0 < $46 >>> 0) {
      $__w$09 = $49;
     } else {
      $__w$0$lcssa = $49;
      break;
     }
    }
   } else {
    $__w$0$lcssa = $44;
   }
  } while (0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $45) | 0;
 }
 $52 = HEAP32[$__b >> 2] | 0;
 if (($52 | 0) == 0) {
  $65 = 0;
 } else {
  if ((HEAP32[$52 + 12 >> 2] | 0) == (HEAP32[$52 + 16 >> 2] | 0)) {
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$52 >> 2] | 0) + 36 >> 2] & 63]($52) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $65 = 0;
   } else {
    $65 = $52;
   }
  } else {
   $65 = $52;
  }
 }
 $64 = ($65 | 0) == 0;
 do {
  if (($23 | 0) == 0) {
   label = 25;
  } else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) {
    if ($64) {
     break;
    } else {
     label = 27;
     break;
    }
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 25;
    break;
   } else {
    if ($64 ^ ($23 | 0) == 0) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  if ($64) {
   label = 27;
  }
 }
 if ((label | 0) == 27) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 }
 HEAP32[$agg$result >> 2] = $65;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $81 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if (($81 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 255]($81);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $15 = 0, $2 = 0, $20 = 0, $28 = 0, $3 = 0, $35 = 0, $40 = 0, $41 = 0, $46 = 0, $51 = 0, $59 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = HEAP32[_stdin >> 2] | 0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(1312, $1, 1368);
 HEAP32[150] = 2556;
 HEAP32[608 >> 2] = 2576;
 HEAP32[604 >> 2] = 0;
 __ZNSt3__18ios_base4initEPv(608 | 0, 1312);
 HEAP32[680 >> 2] = 0;
 HEAP32[684 >> 2] = -1;
 $2 = HEAP32[_stdout >> 2] | 0;
 HEAP32[354] = 2424;
 __ZNSt3__16localeC2Ev(1420 | 0);
 HEAP32[1424 >> 2] = 0;
 HEAP32[1428 >> 2] = 0;
 HEAP32[1432 >> 2] = 0;
 HEAP32[1436 >> 2] = 0;
 HEAP32[1440 >> 2] = 0;
 HEAP32[1444 >> 2] = 0;
 HEAP32[354] = 1928;
 HEAP32[1448 >> 2] = $2;
 __ZNSt3__16localeC2ERKS0_($0, 1420 | 0);
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 5216) | 0;
 __ZNSt3__16localeD2Ev($0);
 HEAP32[1452 >> 2] = $3;
 HEAP32[1456 >> 2] = 1376;
 $8 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 HEAP8[1460 >> 0] = $8;
 HEAP32[172] = 2636;
 HEAP32[692 >> 2] = 2656;
 __ZNSt3__18ios_base4initEPv(692 | 0, 1416);
 HEAP32[764 >> 2] = 0;
 HEAP32[768 >> 2] = -1;
 $9 = HEAP32[_stderr >> 2] | 0;
 HEAP32[366] = 2424;
 __ZNSt3__16localeC2Ev(1468 | 0);
 HEAP32[1472 >> 2] = 0;
 HEAP32[1476 >> 2] = 0;
 HEAP32[1480 >> 2] = 0;
 HEAP32[1484 >> 2] = 0;
 HEAP32[1488 >> 2] = 0;
 HEAP32[1492 >> 2] = 0;
 HEAP32[366] = 1928;
 HEAP32[1496 >> 2] = $9;
 __ZNSt3__16localeC2ERKS0_($0, 1468 | 0);
 $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 5216) | 0;
 __ZNSt3__16localeD2Ev($0);
 HEAP32[1500 >> 2] = $10;
 HEAP32[1504 >> 2] = 1384;
 $15 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($10) | 0) & 1;
 HEAP8[1508 >> 0] = $15;
 HEAP32[194] = 2636;
 HEAP32[780 >> 2] = 2656;
 __ZNSt3__18ios_base4initEPv(780 | 0, 1464);
 HEAP32[852 >> 2] = 0;
 HEAP32[856 >> 2] = -1;
 $20 = HEAP32[(HEAP32[(HEAP32[194] | 0) + -12 >> 2] | 0) + 800 >> 2] | 0;
 HEAP32[216] = 2636;
 HEAP32[868 >> 2] = 2656;
 __ZNSt3__18ios_base4initEPv(868 | 0, $20);
 HEAP32[940 >> 2] = 0;
 HEAP32[944 >> 2] = -1;
 HEAP32[(HEAP32[(HEAP32[150] | 0) + -12 >> 2] | 0) + 672 >> 2] = 688;
 $28 = (HEAP32[(HEAP32[194] | 0) + -12 >> 2] | 0) + 780 | 0;
 HEAP32[$28 >> 2] = HEAP32[$28 >> 2] | 8192;
 HEAP32[(HEAP32[(HEAP32[194] | 0) + -12 >> 2] | 0) + 848 >> 2] = 688;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(1512, $1, 1392 | 0);
 HEAP32[238] = 2596;
 HEAP32[960 >> 2] = 2616;
 HEAP32[956 >> 2] = 0;
 __ZNSt3__18ios_base4initEPv(960 | 0, 1512);
 HEAP32[1032 >> 2] = 0;
 HEAP32[1036 >> 2] = -1;
 HEAP32[392] = 2488;
 __ZNSt3__16localeC2Ev(1572 | 0);
 HEAP32[1576 >> 2] = 0;
 HEAP32[1580 >> 2] = 0;
 HEAP32[1584 >> 2] = 0;
 HEAP32[1588 >> 2] = 0;
 HEAP32[1592 >> 2] = 0;
 HEAP32[1596 >> 2] = 0;
 HEAP32[392] = 1672;
 HEAP32[1600 >> 2] = $2;
 __ZNSt3__16localeC2ERKS0_($0, 1572 | 0);
 $35 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 5224) | 0;
 __ZNSt3__16localeD2Ev($0);
 HEAP32[1604 >> 2] = $35;
 HEAP32[1608 >> 2] = 1400;
 $40 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 28 >> 2] & 63]($35) | 0) & 1;
 HEAP8[1612 >> 0] = $40;
 HEAP32[260] = 2676;
 HEAP32[1044 >> 2] = 2696;
 __ZNSt3__18ios_base4initEPv(1044 | 0, 1568);
 HEAP32[1116 >> 2] = 0;
 HEAP32[1120 >> 2] = -1;
 HEAP32[404] = 2488;
 __ZNSt3__16localeC2Ev(1620 | 0);
 HEAP32[1624 >> 2] = 0;
 HEAP32[1628 >> 2] = 0;
 HEAP32[1632 >> 2] = 0;
 HEAP32[1636 >> 2] = 0;
 HEAP32[1640 >> 2] = 0;
 HEAP32[1644 >> 2] = 0;
 HEAP32[404] = 1672;
 HEAP32[1648 >> 2] = $9;
 __ZNSt3__16localeC2ERKS0_($0, 1620 | 0);
 $41 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 5224) | 0;
 __ZNSt3__16localeD2Ev($0);
 HEAP32[1652 >> 2] = $41;
 HEAP32[1656 >> 2] = 1408;
 $46 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 28 >> 2] & 63]($41) | 0) & 1;
 HEAP8[1660 >> 0] = $46;
 HEAP32[282] = 2676;
 HEAP32[1132 >> 2] = 2696;
 __ZNSt3__18ios_base4initEPv(1132 | 0, 1616);
 HEAP32[1204 >> 2] = 0;
 HEAP32[1208 >> 2] = -1;
 $51 = HEAP32[(HEAP32[(HEAP32[282] | 0) + -12 >> 2] | 0) + 1152 >> 2] | 0;
 HEAP32[304] = 2676;
 HEAP32[1220 >> 2] = 2696;
 __ZNSt3__18ios_base4initEPv(1220 | 0, $51);
 HEAP32[1292 >> 2] = 0;
 HEAP32[1296 >> 2] = -1;
 HEAP32[(HEAP32[(HEAP32[238] | 0) + -12 >> 2] | 0) + 1024 >> 2] = 1040;
 $59 = (HEAP32[(HEAP32[282] | 0) + -12 >> 2] | 0) + 1132 | 0;
 HEAP32[$59 >> 2] = HEAP32[$59 >> 2] | 8192;
 HEAP32[(HEAP32[(HEAP32[282] | 0) + -12 >> 2] | 0) + 1200 >> 2] = 1040;
 STACKTOP = sp;
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $105 = 0, $11 = 0, $110 = 0, $113 = 0, $12 = 0, $125 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $38 = 0, $41 = 0, $53 = 0, $58 = 0, $64 = 0, $66 = 0, $7 = 0, $73 = 0, $83 = 0, $87 = 0, $9 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 do {
  if (($mode & 2 | 0) != 0) {
   if (($to_end - $to | 0) < 3) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    HEAP32[$to_nxt >> 2] = $to + 1;
    HEAP8[$to >> 0] = -17;
    $7 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $7 + 1;
    HEAP8[$7 >> 0] = -69;
    $9 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $9 + 1;
    HEAP8[$9 >> 0] = -65;
    break;
   }
  }
 } while (0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt >> 2] | 0;
 if (!($12 >>> 0 < $frm_end >>> 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $14 = $to_end;
 $16 = $12;
 L10 : while (1) {
  $15 = HEAP16[$16 >> 1] | 0;
  $17 = $15 & 65535;
  if ($17 >>> 0 > $Maxcode >>> 0) {
   $$0 = 2;
   label = 26;
   break;
  }
  do {
   if (($15 & 65535) < 128) {
    $20 = HEAP32[$to_nxt >> 2] | 0;
    if (($14 - $20 | 0) < 1) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    HEAP32[$to_nxt >> 2] = $20 + 1;
    HEAP8[$20 >> 0] = $15;
   } else {
    if (($15 & 65535) < 2048) {
     $27 = HEAP32[$to_nxt >> 2] | 0;
     if (($14 - $27 | 0) < 2) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $27 + 1;
     HEAP8[$27 >> 0] = $17 >>> 6 | 192;
     $38 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $38 + 1;
     HEAP8[$38 >> 0] = $17 & 63 | 128;
     break;
    }
    if (($15 & 65535) < 55296) {
     $41 = HEAP32[$to_nxt >> 2] | 0;
     if (($14 - $41 | 0) < 3) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $41 + 1;
     HEAP8[$41 >> 0] = $17 >>> 12 | 224;
     $53 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $53 + 1;
     HEAP8[$53 >> 0] = $17 >>> 6 & 63 | 128;
     $58 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $58 + 1;
     HEAP8[$58 >> 0] = $17 & 63 | 128;
     break;
    }
    if (!(($15 & 65535) < 56320)) {
     if (($15 & 65535) < 57344) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt >> 2] | 0;
     if (($14 - $113 | 0) < 3) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $113 + 1;
     HEAP8[$113 >> 0] = $17 >>> 12 | 224;
     $125 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $125 + 1;
     HEAP8[$125 >> 0] = $17 >>> 6 & 63 | 128;
     $130 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $130 + 1;
     HEAP8[$130 >> 0] = $17 & 63 | 128;
     break;
    }
    if (($11 - $16 | 0) < 4) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = $16 + 2 | 0;
    $66 = HEAPU16[$64 >> 1] | 0;
    if (($66 & 64512 | 0) != 56320) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    if (($14 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    if ((($73 << 10) + 65536 | $17 << 10 & 64512 | $66 & 1023) >>> 0 > $Maxcode >>> 0) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt >> 2] = $64;
    $83 = ($73 >>> 6) + 1 | 0;
    $87 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $87 + 1;
    HEAP8[$87 >> 0] = $83 >>> 2 | 240;
    $96 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $96 + 1;
    HEAP8[$96 >> 0] = $17 >>> 2 & 15 | $83 << 4 & 48 | 128;
    $105 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $105 + 1;
    HEAP8[$105 >> 0] = $17 << 4 & 48 | $66 >>> 6 & 15 | 128;
    $110 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $110 + 1;
    HEAP8[$110 >> 0] = $66 & 63 | 128;
   }
  } while (0);
  $16 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0;
  HEAP32[$frm_nxt >> 2] = $16;
  if (!($16 >>> 0 < $frm_end >>> 0)) {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label | 0) == 26) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZN12HOGExtractor20updateIntegralImagesEv($this) {
 $this = $this | 0;
 var $$0$i$i$i = 0, $$0$i$i$i29 = 0, $0 = 0, $1 = 0, $10 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $24 = 0, $26 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $85 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $bin1$059 = 0, $i$053 = 0, $i2$056 = 0, $x$061 = 0, $y$069 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 80 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = $this + 76 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($1 + -1 | 0) > 0) {
  $6 = $this + 12 | 0;
  $7 = $this + 84 | 0;
  $8 = $this + 48 | 0;
  $10 = $5;
  $104 = $1;
  $y$069 = 0;
  while (1) {
   $9 = Math_imul($10, $y$069) | 0;
   if (($10 + -1 | 0) > 1) {
    $13 = HEAP32[$this >> 2] | 0;
    $14 = HEAP32[$6 >> 2] | 0;
    $15 = HEAP32[$8 >> 2] | 0;
    $x$061 = 1;
    do {
     $16 = $x$061 + $9 | 0;
     $24 = $15 + ((Math_imul(HEAP32[$7 >> 2] | 0, $16) | 0) + (HEAP32[$13 + ($16 << 2) >> 2] | 0) << 2) | 0;
     HEAP32[$24 >> 2] = HEAP32[$14 + ($16 << 2) >> 2];
     $x$061 = $x$061 + 1 | 0;
     $26 = HEAP32[$4 >> 2] | 0;
    } while (($x$061 | 0) < ($26 + -1 | 0));
    $105 = $26;
    $31 = HEAP32[$0 >> 2] | 0;
   } else {
    $105 = $10;
    $31 = $104;
   }
   $y$069 = $y$069 + 1 | 0;
   if (($y$069 | 0) >= ($31 + -1 | 0)) {
    $34 = $105;
    $35 = $31;
    break;
   } else {
    $10 = $105;
    $104 = $31;
   }
  }
 } else {
  $34 = $5;
  $35 = $1;
 }
 $33 = Math_imul($34, $35) | 0;
 if (($33 | 0) == 0) {
  $46 = $34;
  $48 = $35;
  $75 = 0;
 } else {
  if ($33 >>> 0 > 1073741823) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  }
  $39 = __Znwj($33 << 2) | 0;
  $$0$i$i$i = $33;
  $41 = $39;
  while (1) {
   if (($41 | 0) != 0) {
    HEAP32[$41 >> 2] = 0;
   }
   $$0$i$i$i = $$0$i$i$i + -1 | 0;
   if (($$0$i$i$i | 0) == 0) {
    break;
   } else {
    $41 = $41 + 4 | 0;
   }
  }
  $46 = HEAP32[$4 >> 2] | 0;
  $48 = HEAP32[$0 >> 2] | 0;
  $75 = $39;
 }
 $49 = Math_imul($48 + 1 | 0, $46 + 1 | 0) | 0;
 if (($49 | 0) == 0) {
  $78 = 0;
 } else {
  if ($49 >>> 0 > 1073741823) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  }
  $53 = __Znwj($49 << 2) | 0;
  $$0$i$i$i29 = $49;
  $55 = $53;
  while (1) {
   if (($55 | 0) != 0) {
    HEAP32[$55 >> 2] = 0;
   }
   $$0$i$i$i29 = $$0$i$i$i29 + -1 | 0;
   if (($$0$i$i$i29 | 0) == 0) {
    $78 = $53;
    break;
   } else {
    $55 = $55 + 4 | 0;
   }
  }
 }
 $59 = $this + 84 | 0;
 $60 = HEAP32[$59 >> 2] | 0;
 if (($60 | 0) > 0) {
  $62 = $this + 36 | 0;
  $63 = $this + 48 | 0;
  $65 = HEAP32[$0 >> 2] | 0;
  $66 = HEAP32[$4 >> 2] | 0;
  $70 = $60;
  $bin1$059 = 0;
  while (1) {
   $64 = Math_imul($65, $66) | 0;
   if (($64 | 0) > 0) {
    $68 = HEAP32[$63 >> 2] | 0;
    $i$053 = 0;
    do {
     $72 = $68 + ((Math_imul($70, $i$053) | 0) + $bin1$059 << 2) | 0;
     HEAP32[$75 + ($i$053 << 2) >> 2] = HEAP32[$72 >> 2];
     $i$053 = $i$053 + 1 | 0;
    } while (($i$053 | 0) < ($64 | 0));
   }
   __Z17findIntegralImagePiiiS_($75, $66, $65, $78);
   $79 = HEAP32[$4 >> 2] | 0;
   $81 = HEAP32[$0 >> 2] | 0;
   if ((Math_imul($81 + 1 | 0, $79 + 1 | 0) | 0) > 0) {
    $85 = HEAP32[$62 >> 2] | 0;
    $i2$056 = 0;
    do {
     $91 = $85 + ((Math_imul(HEAP32[$59 >> 2] | 0, $i2$056) | 0) + $bin1$059 << 2) | 0;
     HEAP32[$91 >> 2] = HEAP32[$78 + ($i2$056 << 2) >> 2];
     $i2$056 = $i2$056 + 1 | 0;
     $93 = HEAP32[$4 >> 2] | 0;
     $95 = HEAP32[$0 >> 2] | 0;
    } while (($i2$056 | 0) < (Math_imul($95 + 1 | 0, $93 + 1 | 0) | 0));
    $106 = $95;
    $107 = $93;
   } else {
    $106 = $81;
    $107 = $79;
   }
   $bin1$059 = $bin1$059 + 1 | 0;
   $70 = HEAP32[$59 >> 2] | 0;
   if (($bin1$059 | 0) >= ($70 | 0)) {
    break;
   } else {
    $65 = $106;
    $66 = $107;
   }
  }
 }
 if (($78 | 0) != 0) {
  __ZdlPv($78);
 }
 if (($75 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv($75);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$04$i = 0, $$04$i16 = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $38 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $60 = 0, $62 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $__bn$i14 = 0, $__buf$i13 = 0, $__mb$i11 = 0, $__ndflt = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $__mb$i11 = sp;
 $__buf$i13 = sp + 48 | 0;
 $__bn$i14 = sp + 8 | 0;
 $__wn$i = sp + 12 | 0;
 $__ndflt = sp + 16 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 40 | 0;
 HEAP32[$__ndflt + 0 >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 6808;
 $3 = HEAP8[$__dflt >> 0] | 0;
 if (($3 & 1) == 0) {
  $15 = $__dflt + 4 | 0;
  $16 = ($3 & 255) >>> 1;
  $22 = $__dflt + 4 | 0;
 } else {
  $7 = HEAP32[$__dflt + 8 >> 2] | 0;
  $15 = $7;
  $16 = HEAP32[$__dflt + 4 >> 2] | 0;
  $22 = $7;
 }
 $14 = $15 + ($16 << 2) | 0;
 $17 = $__mb$i11;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$17 + 4 >> 2] = 0;
 L5 : do {
  if ($22 >>> 0 < $14 >>> 0) {
   $23 = $__buf$i13 + 32 | 0;
   $$04$i16 = $22;
   $25 = 6808 | 0;
   while (1) {
    HEAP32[$__wn$i >> 2] = $$04$i16;
    $28 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[$25 + 12 >> 2] & 15]($0, $__mb$i11, $$04$i16, $14, $__wn$i, $__buf$i13, $23, $__bn$i14) | 0) == 2;
    $29 = HEAP32[$__wn$i >> 2] | 0;
    if ($28 | ($29 | 0) == ($$04$i16 | 0)) {
     break;
    }
    if ($__buf$i13 >>> 0 < (HEAP32[$__bn$i14 >> 2] | 0) >>> 0) {
     $__p$03$i20 = $__buf$i13;
     do {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$03$i20 >> 0] | 0);
      $__p$03$i20 = $__p$03$i20 + 1 | 0;
     } while ($__p$03$i20 >>> 0 < (HEAP32[$__bn$i14 >> 2] | 0) >>> 0);
     $38 = HEAP32[$__wn$i >> 2] | 0;
    } else {
     $38 = $29;
    }
    if (!($38 >>> 0 < $14 >>> 0)) {
     break L5;
    }
    $$04$i16 = $38;
    $25 = HEAP32[$0 >> 2] | 0;
   }
   __ZNSt3__121__throw_runtime_errorEPKc(6032);
  }
 } while (0);
 if ((HEAP8[$__ndflt >> 0] & 1) == 0) {
  $49 = $__ndflt + 1 | 0;
 } else {
  $49 = HEAP32[$__ndflt + 8 >> 2] | 0;
 }
 $50 = _catgets((($__c | 0) == -1 ? -1 : $__c << 1) | 0, $__set | 0, $__msgid | 0, $49 | 0) | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = 6912;
 $52 = _strlen($50 | 0) | 0;
 $53 = $50 + $52 | 0;
 $54 = $__mb$i11;
 HEAP32[$54 >> 2] = 0;
 HEAP32[$54 + 4 >> 2] = 0;
 if (($52 | 0) <= 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;
  return;
 }
 $59 = $53;
 $60 = $__buf$i13 + 128 | 0;
 $$04$i = $50;
 $62 = 6912 | 0;
 while (1) {
  HEAP32[$__wn$i >> 2] = $$04$i;
  $70 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[$62 + 16 >> 2] & 15]($1, $__mb$i11, $$04$i, ($59 - $$04$i | 0) > 32 ? $$04$i + 32 | 0 : $53, $__wn$i, $__buf$i13, $60, $__bn$i14) | 0) == 2;
  $71 = HEAP32[$__wn$i >> 2] | 0;
  if ($70 | ($71 | 0) == ($$04$i | 0)) {
   label = 20;
   break;
  }
  if ($__buf$i13 >>> 0 < (HEAP32[$__bn$i14 >> 2] | 0) >>> 0) {
   $__p$03$i = $__buf$i13;
   do {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$03$i >> 2] | 0);
    $__p$03$i = $__p$03$i + 4 | 0;
   } while ($__p$03$i >>> 0 < (HEAP32[$__bn$i14 >> 2] | 0) >>> 0);
   $80 = HEAP32[$__wn$i >> 2] | 0;
  } else {
   $80 = $71;
  }
  if (!($80 >>> 0 < $53 >>> 0)) {
   label = 25;
   break;
  }
  $$04$i = $80;
  $62 = HEAP32[$1 >> 2] | 0;
 }
 if ((label | 0) == 20) {
  __ZNSt3__121__throw_runtime_errorEPKc(6032);
 } else if ((label | 0) == 25) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $13 = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $62 = 0, $65 = 0, $73 = 0, $81 = 0, $82 = 0, $87 = 0, $89 = 0, sp = 0;
 sp = STACKTOP;
 if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) {
  if ((HEAP8[$__in_units >> 0] | 0) == 0) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (($5 & 1) == 0) {
   $13 = ($5 & 255) >>> 1;
  } else {
   $13 = HEAP32[$__grouping + 4 >> 2] | 0;
  }
  if (($13 | 0) == 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $14 = HEAP32[$__g_end >> 2] | 0;
  if (($14 - $__g | 0) >= 160) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $19 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $14 + 4;
  HEAP32[$14 >> 2] = $19;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
  $22 = HEAP8[$__grouping >> 0] | 0;
  if (($22 & 1) == 0) {
   $30 = ($22 & 255) >>> 1;
  } else {
   $30 = HEAP32[$__grouping + 4 >> 2] | 0;
  }
  if (($30 | 0) != 0) {
   if ((HEAP8[$__in_units >> 0] | 0) == 0) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $33 = HEAP32[$__g_end >> 2] | 0;
   if (($33 - $__g | 0) >= 160) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $38 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $38;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $40 = $__atoms + 32 | 0;
 $$01$i = $__atoms;
 while (1) {
  if ((HEAP8[$$01$i >> 0] | 0) == $__ct << 24 >> 24) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $$01$i = $$01$i + 1 | 0;
  if (($$01$i | 0) == ($40 | 0)) {
   $$0$lcssa$i = $40;
   break;
  }
 }
 $47 = $$0$lcssa$i - $__atoms | 0;
 if (($47 | 0) > 31) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $50 = HEAP8[3696 + $47 >> 0] | 0;
 if (($47 | 0) == 23 | ($47 | 0) == 22) {
  HEAP8[$__exp >> 0] = 80;
  $62 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $62 + 1;
  HEAP8[$62 >> 0] = $50;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($47 | 0) == 24 | ($47 | 0) == 25) {
  $51 = HEAP32[$__a_end >> 2] | 0;
  if (($51 | 0) != ($__a | 0)) {
   if ((HEAP8[$51 + -1 >> 0] & 95 | 0) != (HEAP8[$__exp >> 0] & 127 | 0)) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
  HEAP32[$__a_end >> 2] = $51 + 1;
  HEAP8[$51 >> 0] = $50;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $65 = $50 & 95;
  if (($65 | 0) == (HEAP8[$__exp >> 0] | 0)) {
   HEAP8[$__exp >> 0] = $65 | 128;
   if ((HEAP8[$__in_units >> 0] | 0) != 0) {
    HEAP8[$__in_units >> 0] = 0;
    $73 = HEAP8[$__grouping >> 0] | 0;
    if (($73 & 1) == 0) {
     $81 = ($73 & 255) >>> 1;
    } else {
     $81 = HEAP32[$__grouping + 4 >> 2] | 0;
    }
    if (($81 | 0) != 0) {
     $82 = HEAP32[$__g_end >> 2] | 0;
     if (($82 - $__g | 0) < 160) {
      $87 = HEAP32[$__dc >> 2] | 0;
      HEAP32[$__g_end >> 2] = $82 + 4;
      HEAP32[$82 >> 2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $89 + 1;
  HEAP8[$89 >> 0] = $50;
  if (($47 | 0) > 21) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $27 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $48 = 0, $5 = 0, $55 = 0, $57 = 0, $67 = 0, $70 = 0, $__lv = 0, $__names = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy2 = sp;
 $$byval_copy = sp + 64 | 0;
 $__lv = sp + 60 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 68 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $__names = sp + 24 | 0;
 $5 = sp + 48 | 0;
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  HEAP32[$__lv >> 2] = -1;
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0, $this, $$byval_copy, $$byval_copy2, $__iob, $__err, $__lv);
  $15 = HEAP32[$0 >> 2] | 0;
  HEAP32[$__b >> 2] = $15;
  $16 = HEAP32[$__lv >> 2] | 0;
  if (($16 | 0) == 0) {
   HEAP8[$__v >> 0] = 0;
  } else if (($16 | 0) == 1) {
   HEAP8[$__v >> 0] = 1;
  } else {
   HEAP8[$__v >> 0] = 1;
   HEAP32[$__err >> 2] = 4;
  }
  HEAP32[$agg$result >> 2] = $15;
  STACKTOP = sp;
  return;
 }
 __ZNKSt3__18ios_base6getlocEv($3, $__iob);
 $17 = HEAP32[$3 >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy2 >> 2] = 5144;
  HEAP32[$$byval_copy2 + 4 >> 2] = 123;
  HEAP32[$$byval_copy2 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy2, 124);
 }
 $23 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $27 = HEAP32[$17 + 8 >> 2] | 0;
 if (!((HEAP32[$17 + 12 >> 2] | 0) - $27 >> 2 >>> 0 > $23 >>> 0)) {
  $36 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw($36 | 0, 13864, 113);
 }
 $34 = HEAP32[$27 + ($23 << 2) >> 2] | 0;
 if (($34 | 0) == 0) {
  $36 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw($36 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0;
 __ZNKSt3__18ios_base6getlocEv($4, $__iob);
 $38 = HEAP32[$4 >> 2] | 0;
 if (!((HEAP32[1326] | 0) == -1)) {
  HEAP32[$$byval_copy2 >> 2] = 5304;
  HEAP32[$$byval_copy2 + 4 >> 2] = 123;
  HEAP32[$$byval_copy2 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5304, $$byval_copy2, 124);
 }
 $44 = (HEAP32[5308 >> 2] | 0) + -1 | 0;
 $48 = HEAP32[$38 + 8 >> 2] | 0;
 if (!((HEAP32[$38 + 12 >> 2] | 0) - $48 >> 2 >>> 0 > $44 >>> 0)) {
  $57 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($57);
  ___cxa_throw($57 | 0, 13864, 113);
 }
 $55 = HEAP32[$48 + ($44 << 2) >> 2] | 0;
 if (($55 | 0) == 0) {
  $57 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($57);
  ___cxa_throw($57 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$4 >> 2] | 0) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$55 >> 2] | 0) + 24 >> 2] & 63]($__names, $55);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$55 >> 2] | 0) + 28 >> 2] & 63]($__names + 12 | 0, $55);
 HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
 $67 = $__names + 24 | 0;
 HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
 $70 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $__names, $67, $34, $__err, 1) | 0) == ($__names | 0) & 1;
 HEAP8[$__v >> 0] = $70;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names + 12 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $27 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $48 = 0, $5 = 0, $55 = 0, $57 = 0, $67 = 0, $70 = 0, $__lv = 0, $__names = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy2 = sp;
 $$byval_copy = sp + 64 | 0;
 $__lv = sp + 60 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 68 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $__names = sp + 24 | 0;
 $5 = sp + 48 | 0;
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  HEAP32[$__lv >> 2] = -1;
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0, $this, $$byval_copy, $$byval_copy2, $__iob, $__err, $__lv);
  $15 = HEAP32[$0 >> 2] | 0;
  HEAP32[$__b >> 2] = $15;
  $16 = HEAP32[$__lv >> 2] | 0;
  if (($16 | 0) == 1) {
   HEAP8[$__v >> 0] = 1;
  } else if (($16 | 0) == 0) {
   HEAP8[$__v >> 0] = 0;
  } else {
   HEAP8[$__v >> 0] = 1;
   HEAP32[$__err >> 2] = 4;
  }
  HEAP32[$agg$result >> 2] = $15;
  STACKTOP = sp;
  return;
 }
 __ZNKSt3__18ios_base6getlocEv($3, $__iob);
 $17 = HEAP32[$3 >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy2 >> 2] = 5152;
  HEAP32[$$byval_copy2 + 4 >> 2] = 123;
  HEAP32[$$byval_copy2 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy2, 124);
 }
 $23 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $27 = HEAP32[$17 + 8 >> 2] | 0;
 if (!((HEAP32[$17 + 12 >> 2] | 0) - $27 >> 2 >>> 0 > $23 >>> 0)) {
  $36 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw($36 | 0, 13864, 113);
 }
 $34 = HEAP32[$27 + ($23 << 2) >> 2] | 0;
 if (($34 | 0) == 0) {
  $36 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw($36 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0;
 __ZNKSt3__18ios_base6getlocEv($4, $__iob);
 $38 = HEAP32[$4 >> 2] | 0;
 if (!((HEAP32[1324] | 0) == -1)) {
  HEAP32[$$byval_copy2 >> 2] = 5296;
  HEAP32[$$byval_copy2 + 4 >> 2] = 123;
  HEAP32[$$byval_copy2 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5296, $$byval_copy2, 124);
 }
 $44 = (HEAP32[5300 >> 2] | 0) + -1 | 0;
 $48 = HEAP32[$38 + 8 >> 2] | 0;
 if (!((HEAP32[$38 + 12 >> 2] | 0) - $48 >> 2 >>> 0 > $44 >>> 0)) {
  $57 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($57);
  ___cxa_throw($57 | 0, 13864, 113);
 }
 $55 = HEAP32[$48 + ($44 << 2) >> 2] | 0;
 if (($55 | 0) == 0) {
  $57 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($57);
  ___cxa_throw($57 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$4 >> 2] | 0) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$55 >> 2] | 0) + 24 >> 2] & 63]($__names, $55);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$55 >> 2] | 0) + 28 >> 2] & 63]($__names + 12 | 0, $55);
 HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
 $67 = $__names + 24 | 0;
 HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
 $70 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $__names, $67, $34, $__err, 1) | 0) == ($__names | 0) & 1;
 HEAP8[$__v >> 0] = $70;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names + 12 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $13 = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $64 = 0, $72 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, sp = 0;
 sp = STACKTOP;
 if (($__ct | 0) == ($__decimal_point | 0)) {
  if ((HEAP8[$__in_units >> 0] | 0) == 0) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (($5 & 1) == 0) {
   $13 = ($5 & 255) >>> 1;
  } else {
   $13 = HEAP32[$__grouping + 4 >> 2] | 0;
  }
  if (($13 | 0) == 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $14 = HEAP32[$__g_end >> 2] | 0;
  if (($14 - $__g | 0) >= 160) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $19 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $14 + 4;
  HEAP32[$14 >> 2] = $19;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__ct | 0) == ($__thousands_sep | 0)) {
  $22 = HEAP8[$__grouping >> 0] | 0;
  if (($22 & 1) == 0) {
   $30 = ($22 & 255) >>> 1;
  } else {
   $30 = HEAP32[$__grouping + 4 >> 2] | 0;
  }
  if (($30 | 0) != 0) {
   if ((HEAP8[$__in_units >> 0] | 0) == 0) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $33 = HEAP32[$__g_end >> 2] | 0;
   if (($33 - $__g | 0) >= 160) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $38 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $38;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $40 = $__atoms + 128 | 0;
 $$01$i = $__atoms;
 while (1) {
  if ((HEAP32[$$01$i >> 2] | 0) == ($__ct | 0)) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $$01$i = $$01$i + 4 | 0;
  if (($$01$i | 0) == ($40 | 0)) {
   $$0$lcssa$i = $40;
   break;
  }
 }
 $47 = $$0$lcssa$i - $__atoms | 0;
 $48 = $47 >> 2;
 if (($47 | 0) > 124) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $51 = HEAP8[3696 + $48 >> 0] | 0;
 if (($48 | 0) == 24 | ($48 | 0) == 25) {
  $52 = HEAP32[$__a_end >> 2] | 0;
  if (($52 | 0) != ($__a | 0)) {
   if ((HEAP8[$52 + -1 >> 0] & 95 | 0) != (HEAP8[$__exp >> 0] & 127 | 0)) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
  HEAP32[$__a_end >> 2] = $52 + 1;
  HEAP8[$52 >> 0] = $51;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($48 | 0) == 23 | ($48 | 0) == 22) {
  HEAP8[$__exp >> 0] = 80;
 } else {
  $64 = $51 & 95;
  if (($64 | 0) == (HEAP8[$__exp >> 0] | 0)) {
   HEAP8[$__exp >> 0] = $64 | 128;
   if ((HEAP8[$__in_units >> 0] | 0) != 0) {
    HEAP8[$__in_units >> 0] = 0;
    $72 = HEAP8[$__grouping >> 0] | 0;
    if (($72 & 1) == 0) {
     $80 = ($72 & 255) >>> 1;
    } else {
     $80 = HEAP32[$__grouping + 4 >> 2] | 0;
    }
    if (($80 | 0) != 0) {
     $81 = HEAP32[$__g_end >> 2] | 0;
     if (($81 - $__g | 0) < 160) {
      $86 = HEAP32[$__dc >> 2] | 0;
      HEAP32[$__g_end >> 2] = $81 + 4;
      HEAP32[$81 >> 2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end >> 2] | 0;
 HEAP32[$__a_end >> 2] = $88 + 1;
 HEAP8[$88 >> 0] = $51;
 if (($47 | 0) > 84) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN12HOGExtractor10initializeEii($this, $_width, $_height) {
 $this = $this | 0;
 $_width = $_width | 0;
 $_height = $_height | 0;
 var $0 = 0, $1 = 0, $13 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $92 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = sp + 4 | 0;
 $3 = sp + 8 | 0;
 $4 = $this + 76 | 0;
 HEAP32[$4 >> 2] = $_width;
 $5 = $this + 80 | 0;
 HEAP32[$5 >> 2] = $_height;
 $6 = Math_imul($_width, $_height) | 0;
 HEAP32[$0 >> 2] = 0;
 $7 = $this + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = HEAP32[$this >> 2] | 0;
 $13 = $8 - $9 >> 2;
 if ($13 >>> 0 < $6 >>> 0) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEjRKi($this, $6 - $13 | 0, $0);
  $24 = HEAP32[$5 >> 2] | 0;
  $25 = HEAP32[$4 >> 2] | 0;
 } else {
  if ($13 >>> 0 > $6 >>> 0) {
   $17 = $9 + ($6 << 2) | 0;
   if (($8 | 0) == ($17 | 0)) {
    $24 = $_height;
    $25 = $_width;
   } else {
    HEAP32[$7 >> 2] = $8 + (~(($8 + -4 + (0 - $17) | 0) >>> 2) << 2);
    $24 = $_height;
    $25 = $_width;
   }
  } else {
   $24 = $_height;
   $25 = $_width;
  }
 }
 $22 = $this + 12 | 0;
 $23 = Math_imul($24, $25) | 0;
 HEAP32[$1 >> 2] = 0;
 $26 = $this + 16 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $28 = HEAP32[$22 >> 2] | 0;
 $32 = $27 - $28 >> 2;
 if ($32 >>> 0 < $23 >>> 0) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEjRKi($22, $23 - $32 | 0, $1);
 } else {
  if ($32 >>> 0 > $23 >>> 0) {
   $36 = $28 + ($23 << 2) | 0;
   if (($27 | 0) != ($36 | 0)) {
    HEAP32[$26 >> 2] = $27 + (~(($27 + -4 + (0 - $36) | 0) >>> 2) << 2);
   }
  }
 }
 $41 = $this + 48 | 0;
 $42 = $this + 84 | 0;
 $43 = HEAP32[$42 >> 2] | 0;
 $44 = $this + 52 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 $46 = HEAP32[$41 >> 2] | 0;
 $50 = $45 - $46 >> 2;
 if ($50 >>> 0 < $43 >>> 0) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($41, $43 - $50 | 0);
  $65 = HEAP32[$42 >> 2] | 0;
 } else {
  if ($50 >>> 0 > $43 >>> 0) {
   $54 = $46 + ($43 << 2) | 0;
   if (($45 | 0) == ($54 | 0)) {
    $65 = $43;
   } else {
    HEAP32[$44 >> 2] = $45 + (~(($45 + -4 + (0 - $54) | 0) >>> 2) << 2);
    $65 = $43;
   }
  } else {
   $65 = $43;
  }
 }
 $59 = $this + 36 | 0;
 $60 = HEAP32[$4 >> 2] | 0;
 $62 = HEAP32[$5 >> 2] | 0;
 $66 = Math_imul(Math_imul($60 + 1 | 0, $65) | 0, $62 + 1 | 0) | 0;
 HEAP32[$2 >> 2] = 0;
 $67 = $this + 40 | 0;
 $68 = HEAP32[$67 >> 2] | 0;
 $69 = HEAP32[$59 >> 2] | 0;
 $73 = $68 - $69 >> 2;
 if ($73 >>> 0 < $66 >>> 0) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEjRKi($59, $66 - $73 | 0, $2);
  $83 = HEAP32[$4 >> 2] | 0;
  $84 = HEAP32[$42 >> 2] | 0;
  $86 = HEAP32[$5 >> 2] | 0;
 } else {
  if ($73 >>> 0 > $66 >>> 0) {
   $77 = $69 + ($66 << 2) | 0;
   if (($68 | 0) == ($77 | 0)) {
    $83 = $60;
    $84 = $65;
    $86 = $62;
   } else {
    HEAP32[$67 >> 2] = $68 + (~(($68 + -4 + (0 - $77) | 0) >>> 2) << 2);
    $83 = $60;
    $84 = $65;
    $86 = $62;
   }
  } else {
   $83 = $60;
   $84 = $65;
   $86 = $62;
  }
 }
 $85 = Math_imul(Math_imul($83, $84) | 0, $86) | 0;
 HEAP32[$3 >> 2] = 0;
 $87 = HEAP32[$44 >> 2] | 0;
 $88 = HEAP32[$41 >> 2] | 0;
 $92 = $87 - $88 >> 2;
 if ($92 >>> 0 < $85 >>> 0) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEjRKi($41, $85 - $92 | 0, $3);
  STACKTOP = sp;
  return;
 }
 if (!($92 >>> 0 > $85 >>> 0)) {
  STACKTOP = sp;
  return;
 }
 $96 = $88 + ($85 << 2) | 0;
 if (($87 | 0) == ($96 | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$44 >> 2] = $87 + (~(($87 + -4 + (0 - $96) | 0) >>> 2) << 2);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $13 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $46 = 0, $47 = 0, $48 = 0, $56 = 0, $59 = 0, $71 = 0, $83 = 0, $84 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 do {
  if (($0 | 0) == 0) {
   $83 = 1;
  } else {
   $3 = HEAP32[$0 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0;
   } else {
    $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
   }
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $83 = 1;
    break;
   } else {
    $83 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 do {
  if (($13 | 0) == 0) {
   label = 14;
  } else {
   $16 = HEAP32[$13 + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0;
   } else {
    $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
   }
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  STACKTOP = sp;
  return;
 }
 $28 = HEAP32[$__b >> 2] | 0;
 $30 = HEAP32[$28 + 12 >> 2] | 0;
 if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
  $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0;
 } else {
  $$0$i$i = HEAP32[$30 >> 2] | 0;
 }
 if (!((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24 == 37)) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  STACKTOP = sp;
  return;
 }
 $46 = HEAP32[$__b >> 2] | 0;
 $47 = $46 + 12 | 0;
 $48 = HEAP32[$47 >> 2] | 0;
 if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0;
 } else {
  HEAP32[$47 >> 2] = $48 + 4;
 }
 $56 = HEAP32[$__b >> 2] | 0;
 do {
  if (($56 | 0) == 0) {
   $84 = 1;
  } else {
   $59 = HEAP32[$56 + 12 >> 2] | 0;
   if (($59 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 63]($56) | 0;
   } else {
    $$0$i$i$i$i1 = HEAP32[$59 >> 2] | 0;
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $84 = 1;
    break;
   } else {
    $84 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if (($$pre$i3$i$i915 | 0) == 0) {
   label = 38;
  } else {
   $71 = HEAP32[$$pre$i3$i$i915 + 12 >> 2] | 0;
   if (($71 | 0) == (HEAP32[$$pre$i3$i$i915 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i915 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i915) | 0;
   } else {
    $$0$i$i1$i$i7 = HEAP32[$71 >> 2] | 0;
   }
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if (!$84) {
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $13 = 0, $16 = 0, $26 = 0, $28 = 0, $3 = 0, $41 = 0, $42 = 0, $43 = 0, $51 = 0, $54 = 0, $66 = 0, $78 = 0, $79 = 0, $80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do {
   if (($0 | 0) == 0) {
    $78 = 1;
   } else {
    $3 = HEAP32[$0 + 12 >> 2] | 0;
    if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0;
    } else {
     $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
    }
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $78 = 1;
     break;
    } else {
     $78 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   }
  } while (0);
  $13 = HEAP32[$__e >> 2] | 0;
  do {
   if (($13 | 0) == 0) {
    label = 15;
   } else {
    $16 = HEAP32[$13 + 12 >> 2] | 0;
    if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) {
     $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0;
    } else {
     $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
    }
    if (($$0$i$i1$i$i | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b >> 2] | 0;
  $28 = HEAP32[$26 + 12 >> 2] | 0;
  if (($28 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 63]($26) | 0;
  } else {
   $$0$i$i = HEAP32[$28 >> 2] | 0;
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i) | 0)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b >> 2] | 0;
  $42 = $41 + 12 | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 40 >> 2] & 63]($41) | 0;
   continue;
  } else {
   HEAP32[$42 >> 2] = $43 + 4;
   continue;
  }
 }
 $51 = HEAP32[$__b >> 2] | 0;
 do {
  if (($51 | 0) == 0) {
   $80 = 1;
  } else {
   $54 = HEAP32[$51 + 12 >> 2] | 0;
   if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
    $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0;
   } else {
    $$0$i$i$i$i1 = HEAP32[$54 >> 2] | 0;
   }
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $80 = 1;
    break;
   } else {
    $80 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  }
 } while (0);
 do {
  if (($$pre$i3$i$i9 | 0) == 0) {
   label = 37;
  } else {
   $66 = HEAP32[$$pre$i3$i$i9 + 12 >> 2] | 0;
   if (($66 | 0) == (HEAP32[$$pre$i3$i$i9 + 16 >> 2] | 0)) {
    $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i9 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i9) | 0;
   } else {
    $$0$i$i1$i$i7 = HEAP32[$66 >> 2] | 0;
   }
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!$80) {
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $18 = 0, $20 = 0, $26 = 0, $30 = 0, $37 = 0, $39 = 0, $44 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 188 | 0;
 $__nar = sp + 168 | 0;
 $__o = sp + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 164 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3952 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3953 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3954 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3955 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3956 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3957 >> 0] | 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $6 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $6;
   ___cxa_guard_release(5048);
  }
 }
 $7 = HEAP32[1260] | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $8 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $7, $__fmt, $$byval_copy) | 0;
 $9 = $__nar + $8 | 0;
 $12 = HEAP32[$__iob + 4 >> 2] & 176;
 do {
  if (($12 | 0) == 16) {
   $13 = HEAP8[$__nar >> 0] | 0;
   if ($13 << 24 >> 24 == 43 | $13 << 24 >> 24 == 45) {
    $$0$i = $__nar + 1 | 0;
    break;
   }
   if (($8 | 0) > 1 & $13 << 24 >> 24 == 48) {
    $18 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($18 << 24 >> 24 == 88 | $18 << 24 >> 24 == 120) {
     $$0$i = $__nar + 2 | 0;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else if (($12 | 0) == 32) {
   $$0$i = $9;
  } else {
   label = 10;
  }
 } while (0);
 if ((label | 0) == 10) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $20 = HEAP32[$0 >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5144;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy, 124);
 }
 $26 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $30 = HEAP32[$20 + 8 >> 2] | 0;
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $30 >> 2 >>> 0 > $26 >>> 0)) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 $37 = HEAP32[$30 + ($26 << 2) >> 2] | 0;
 if (($37 | 0) == 0) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$37 >> 2] | 0) + 48 >> 2] & 7]($37, $__nar, $9, $__o) | 0;
 $44 = $__o + ($8 << 2) | 0;
 if (($$0$i | 0) == ($9 | 0)) {
  $__op$0 = $44;
  $50 = HEAP32[$__s >> 2] | 0;
  HEAP32[$1 >> 2] = $50;
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $__op$0, $44, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 $__op$0 = $__o + ($$0$i - $__nar << 2) | 0;
 $50 = HEAP32[$__s >> 2] | 0;
 HEAP32[$1 >> 2] = $50;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $__op$0, $44, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $18 = 0, $20 = 0, $26 = 0, $30 = 0, $37 = 0, $39 = 0, $44 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 80 | 0;
 $__nar = sp + 60 | 0;
 $__o = sp + 20 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 16 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3952 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3953 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3954 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3955 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3956 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3957 >> 0] | 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $6 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $6;
   ___cxa_guard_release(5048);
  }
 }
 $7 = HEAP32[1260] | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $8 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $7, $__fmt, $$byval_copy) | 0;
 $9 = $__nar + $8 | 0;
 $12 = HEAP32[$__iob + 4 >> 2] & 176;
 do {
  if (($12 | 0) == 32) {
   $$0$i = $9;
  } else if (($12 | 0) == 16) {
   $13 = HEAP8[$__nar >> 0] | 0;
   if ($13 << 24 >> 24 == 43 | $13 << 24 >> 24 == 45) {
    $$0$i = $__nar + 1 | 0;
    break;
   }
   if (($8 | 0) > 1 & $13 << 24 >> 24 == 48) {
    $18 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($18 << 24 >> 24 == 88 | $18 << 24 >> 24 == 120) {
     $$0$i = $__nar + 2 | 0;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } while (0);
 if ((label | 0) == 10) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $20 = HEAP32[$0 >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5152;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy, 124);
 }
 $26 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $30 = HEAP32[$20 + 8 >> 2] | 0;
 if (!((HEAP32[$20 + 12 >> 2] | 0) - $30 >> 2 >>> 0 > $26 >>> 0)) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 $37 = HEAP32[$30 + ($26 << 2) >> 2] | 0;
 if (($37 | 0) == 0) {
  $39 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw($39 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$37 >> 2] | 0) + 32 >> 2] & 7]($37, $__nar, $9, $__o) | 0;
 $44 = $__o + $8 | 0;
 if (($$0$i | 0) == ($9 | 0)) {
  $__op$0 = $44;
  $50 = HEAP32[$__s >> 2] | 0;
  HEAP32[$1 >> 2] = $50;
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $__op$0, $44, $__iob, $__fl);
  STACKTOP = sp;
  return;
 }
 $__op$0 = $__o + ($$0$i - $__nar) | 0;
 $50 = HEAP32[$__s >> 2] | 0;
 HEAP32[$1 >> 2] = $50;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $__op$0, $44, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNSt3__16vectorI10SimpleRectNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0$i7 = 0, $$01$i = 0, $$01$i3 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $57 = 0, $59 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__first;
 $3 = ($__last - $1 | 0) / 24 | 0;
 $4 = $this + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = HEAP32[$this >> 2] | 0;
 $8 = $6;
 if (!($3 >>> 0 > (($5 - $8 | 0) / 24 | 0) >>> 0)) {
  $12 = $this + 4 | 0;
  $15 = (HEAP32[$12 >> 2] | 0) - $8 | 0;
  $16 = ($15 | 0) / 24 | 0;
  if (!($3 >>> 0 > $16 >>> 0)) {
   $27 = $__last - $1 | 0;
   _memmove($6 | 0, $__first | 0, $27 | 0) | 0;
   $29 = $6 + ((($27 | 0) / 24 | 0) * 24 | 0) | 0;
   $30 = HEAP32[$12 >> 2] | 0;
   if (($30 | 0) == ($29 | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[$12 >> 2] = $30 + (~((($30 + -24 + (0 - $29) | 0) >>> 0) / 24 | 0) * 24 | 0);
   STACKTOP = sp;
   return;
  }
  $18 = $__first + ($16 * 24 | 0) | 0;
  _memmove($6 | 0, $__first | 0, $15 | 0) | 0;
  if (($18 | 0) == ($__last | 0)) {
   STACKTOP = sp;
   return;
  }
  $$01$i3 = $18;
  $21 = HEAP32[$12 >> 2] | 0;
  do {
   if (($21 | 0) == 0) {
    $23 = 0;
   } else {
    HEAP32[$21 + 0 >> 2] = HEAP32[$$01$i3 + 0 >> 2];
    HEAP32[$21 + 4 >> 2] = HEAP32[$$01$i3 + 4 >> 2];
    HEAP32[$21 + 8 >> 2] = HEAP32[$$01$i3 + 8 >> 2];
    HEAP32[$21 + 12 >> 2] = HEAP32[$$01$i3 + 12 >> 2];
    HEAP32[$21 + 16 >> 2] = HEAP32[$$01$i3 + 16 >> 2];
    HEAP32[$21 + 20 >> 2] = HEAP32[$$01$i3 + 20 >> 2];
    $23 = HEAP32[$12 >> 2] | 0;
   }
   $21 = $23 + 24 | 0;
   HEAP32[$12 >> 2] = $21;
   $$01$i3 = $$01$i3 + 24 | 0;
  } while (($$01$i3 | 0) != ($__last | 0));
  STACKTOP = sp;
  return;
 }
 if (($6 | 0) == 0) {
  $44 = $5;
 } else {
  $36 = $this + 4 | 0;
  $37 = HEAP32[$36 >> 2] | 0;
  if (($37 | 0) != ($6 | 0)) {
   HEAP32[$36 >> 2] = $37 + (~((($37 + -24 + (0 - $8) | 0) >>> 0) / 24 | 0) * 24 | 0);
  }
  __ZdlPv($6);
  HEAP32[$4 >> 2] = 0;
  HEAP32[$36 >> 2] = 0;
  HEAP32[$this >> 2] = 0;
  $44 = 0;
 }
 if ($3 >>> 0 > 178956970) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $45 = ($44 | 0) / 24 | 0;
 if ($45 >>> 0 < 89478485) {
  $47 = $45 << 1;
  $49 = $47 >>> 0 < $3 >>> 0 ? $3 : $47;
  if ($49 >>> 0 > 178956970) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  } else {
   $$0$i7 = $49;
  }
 } else {
  $$0$i7 = 178956970;
 }
 $52 = __Znwj($$0$i7 * 24 | 0) | 0;
 $53 = $this + 4 | 0;
 HEAP32[$53 >> 2] = $52;
 HEAP32[$this >> 2] = $52;
 HEAP32[$4 >> 2] = $52 + ($$0$i7 * 24 | 0);
 if (($__first | 0) == ($__last | 0)) {
  STACKTOP = sp;
  return;
 } else {
  $$01$i = $__first;
  $57 = $52;
 }
 do {
  if (($57 | 0) == 0) {
   $59 = 0;
  } else {
   HEAP32[$57 + 0 >> 2] = HEAP32[$$01$i + 0 >> 2];
   HEAP32[$57 + 4 >> 2] = HEAP32[$$01$i + 4 >> 2];
   HEAP32[$57 + 8 >> 2] = HEAP32[$$01$i + 8 >> 2];
   HEAP32[$57 + 12 >> 2] = HEAP32[$$01$i + 12 >> 2];
   HEAP32[$57 + 16 >> 2] = HEAP32[$$01$i + 16 >> 2];
   HEAP32[$57 + 20 >> 2] = HEAP32[$$01$i + 20 >> 2];
   $59 = HEAP32[$53 >> 2] | 0;
  }
  $57 = $59 + 24 | 0;
  HEAP32[$53 >> 2] = $57;
  $$01$i = $$01$i + 24 | 0;
 } while (($$01$i | 0) != ($__last | 0));
 STACKTOP = sp;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $19 = 0, $20 = 0, $26 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $48 = 0, $58 = 0, $59 = 0, $60 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $9 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  $32 = $info + 52 | 0;
  $33 = HEAP8[$32 >> 0] | 0;
  $34 = $info + 53 | 0;
  $35 = HEAP8[$34 >> 0] | 0;
  $37 = HEAP32[$this + 12 >> 2] | 0;
  $38 = $this + ($37 << 3) + 16 | 0;
  HEAP8[$32 >> 0] = 0;
  HEAP8[$34 >> 0] = 0;
  $40 = HEAP32[$this + 20 >> 2] | 0;
  $41 = $40 >> 8;
  if (($40 & 1 | 0) == 0) {
   $offset_to_base$0$i1 = $41;
  } else {
   $offset_to_base$0$i1 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $41 >> 2] | 0;
  }
  $48 = HEAP32[$this + 16 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$48 >> 2] | 0) + 20 >> 2] & 15]($48, $info, $dst_ptr, $current_ptr + $offset_to_base$0$i1 | 0, ($40 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
  L6 : do {
   if (($37 | 0) > 1) {
    $58 = $info + 24 | 0;
    $59 = $this + 8 | 0;
    $60 = $info + 54 | 0;
    $p$0 = $this + 24 | 0;
    do {
     if ((HEAP8[$60 >> 0] | 0) != 0) {
      break L6;
     }
     if ((HEAP8[$32 >> 0] | 0) == 0) {
      if ((HEAP8[$34 >> 0] | 0) != 0) {
       if ((HEAP32[$59 >> 2] & 1 | 0) == 0) {
        break L6;
       }
      }
     } else {
      if ((HEAP32[$58 >> 2] | 0) == 1) {
       break L6;
      }
      if ((HEAP32[$59 >> 2] & 2 | 0) == 0) {
       break L6;
      }
     }
     HEAP8[$32 >> 0] = 0;
     HEAP8[$34 >> 0] = 0;
     $76 = HEAP32[$p$0 + 4 >> 2] | 0;
     $77 = $76 >> 8;
     if (($76 & 1 | 0) == 0) {
      $offset_to_base$0$i = $77;
     } else {
      $offset_to_base$0$i = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $77 >> 2] | 0;
     }
     $83 = HEAP32[$p$0 >> 2] | 0;
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$83 >> 2] | 0) + 20 >> 2] & 15]($83, $info, $dst_ptr, $current_ptr + $offset_to_base$0$i | 0, ($76 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
     $p$0 = $p$0 + 8 | 0;
    } while ($p$0 >>> 0 < $38 >>> 0);
   }
  } while (0);
  HEAP8[$32 >> 0] = $33;
  HEAP8[$34 >> 0] = $35;
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 53 >> 0] = 1;
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 52 >> 0] = 1;
 $8 = $info + 16 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if (($9 | 0) == 0) {
  HEAP32[$8 >> 2] = $dst_ptr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 if (($9 | 0) != ($dst_ptr | 0)) {
  $28 = $info + 36 | 0;
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $19 = $info + 24 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (($20 | 0) == 2) {
  HEAP32[$19 >> 2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 if (!(($26 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 54 >> 0] = 1;
 STACKTOP = sp;
 return;
}
function __ZN18CascadedClassifier8classifyERK11SimpleImageRK12HOGExtractoriifbi($this, $img, $hog, $startX, $startY, $scale, $probabilistic, $start_stage) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 $probabilistic = $probabilistic | 0;
 $start_stage = $start_stage | 0;
 var $$0 = 0, $$lcssa$i = 0.0, $0 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $36 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $63 = 0, $66 = 0, $7 = 0, $i$02$i = 0, $i$02$i1 = 0, $i$09 = 0, $i1$013 = 0, $sum$0$lcssa$i = 0.0, $sum$0$lcssa$i4 = 0.0, $sum$01$i = 0.0, $sum$01$i2 = 0.0, $sum$1$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $7 = (HEAP32[$0 >> 2] | 0) - $2 >> 4 >>> 0 > $start_stage >>> 0;
 if (!$probabilistic) {
  if ($7) {
   $51 = $2;
   $i1$013 = $start_stage;
  } else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  while (1) {
   $50 = $51 + ($i1$013 << 4) + 4 | 0;
   $53 = $51 + ($i1$013 << 4) | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($54 | 0)) {
    $sum$0$lcssa$i = 0.0;
   } else {
    $57 = $54;
    $i$02$i = 0;
    $sum$01$i = 0.0;
    while (1) {
     $58 = HEAP32[$57 + ($i$02$i << 2) >> 2] | 0;
     $63 = (FUNCTION_TABLE_iiiiiid[HEAP32[(HEAP32[$58 >> 2] | 0) + 16 >> 2] & 7]($58, $img, $hog, $startX, $startY, $scale) | 0) == 1;
     $57 = HEAP32[$53 >> 2] | 0;
     $66 = HEAP32[$57 + ($i$02$i << 2) >> 2] | 0;
     $sum$1$i = $sum$01$i + +HEAPF32[($63 ? $66 + 12 | 0 : $66 + 16 | 0) >> 2];
     $i$02$i = $i$02$i + 1 | 0;
     if (!($i$02$i >>> 0 < (HEAP32[$50 >> 2] | 0) - $57 >> 2 >>> 0)) {
      $sum$0$lcssa$i = $sum$1$i;
      break;
     } else {
      $sum$01$i = $sum$1$i;
     }
    }
   }
   $49 = $i1$013 + 1 | 0;
   if (!($sum$0$lcssa$i > +HEAPF32[$51 + ($i1$013 << 4) + 12 >> 2])) {
    break;
   }
   $51 = HEAP32[$this >> 2] | 0;
   if (!($49 >>> 0 < (HEAP32[$0 >> 2] | 0) - $51 >> 4 >>> 0)) {
    $$0 = 1;
    label = 15;
    break;
   } else {
    $i1$013 = $49;
   }
  }
  if ((label | 0) == 15) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$0 = 0 - $i1$013 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($7) {
  $17 = $2;
  $i$09 = $start_stage;
 } else {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 while (1) {
  $16 = $17 + ($i$09 << 4) + 4 | 0;
  $19 = $17 + ($i$09 << 4) | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  if ((HEAP32[$16 >> 2] | 0) == ($20 | 0)) {
   $$lcssa$i = 0.0;
   $sum$0$lcssa$i4 = 0.0;
  } else {
   $23 = $20;
   $i$02$i1 = 0;
   $sum$01$i2 = 0.0;
   do {
    $24 = HEAP32[$23 + ($i$02$i1 << 2) >> 2] | 0;
    $sum$01$i2 = $sum$01$i2 + +FUNCTION_TABLE_diiiiid[HEAP32[(HEAP32[$24 >> 2] | 0) + 8 >> 2] & 7]($24, $img, $hog, $startX, $startY, $scale);
    $i$02$i1 = $i$02$i1 + 1 | 0;
    $23 = HEAP32[$19 >> 2] | 0;
    $36 = (HEAP32[$16 >> 2] | 0) - $23 >> 2;
   } while ($i$02$i1 >>> 0 < $36 >>> 0);
   $$lcssa$i = +($36 >>> 0);
   $sum$0$lcssa$i4 = $sum$01$i2;
  }
  $15 = $i$09 + 1 | 0;
  if (!($sum$0$lcssa$i4 / $$lcssa$i > +HEAPF32[$17 + ($i$09 << 4) + 12 >> 2])) {
   break;
  }
  $17 = HEAP32[$this >> 2] | 0;
  if (!($15 >>> 0 < (HEAP32[$0 >> 2] | 0) - $17 >> 4 >>> 0)) {
   $$0 = 1;
   label = 15;
   break;
  } else {
   $i$09 = $15;
  }
 }
 if ((label | 0) == 15) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = 0 - $i$09 | 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $64 = 0, $8 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp;
 $__inxt = sp + 4 | 0;
 $0 = $this + 52 | 0;
 if ((HEAP8[$0 >> 0] | 0) != 0) {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (!$__consume) {
   $$0 = $4;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$3 >> 2] = -1;
  HEAP8[$0 >> 0] = 0;
  $$0 = $4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP32[$this + 44 >> 2] | 0;
 $8 = ($6 | 0) > 1 ? $6 : 1;
 L8 : do {
  if (($8 | 0) > 0) {
   $10 = $this + 32 | 0;
   $__i$09 = 0;
   while (1) {
    $12 = _getc(HEAP32[$10 >> 2] | 0) | 0;
    if (($12 | 0) == -1) {
     $$0 = -1;
     break;
    }
    HEAP8[$__extbuf + $__i$09 >> 0] = $12;
    $__i$09 = $__i$09 + 1 | 0;
    if (($__i$09 | 0) >= ($8 | 0)) {
     break L8;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 L15 : do {
  if ((HEAP8[$this + 53 >> 0] | 0) == 0) {
   $21 = $this + 40 | 0;
   $22 = $this + 36 | 0;
   $23 = $__1buf + 1 | 0;
   $24 = $this + 32 | 0;
   $__nread$0 = $8;
   while (1) {
    $26 = HEAP32[$21 >> 2] | 0;
    $27 = $26;
    $29 = HEAP32[$27 >> 2] | 0;
    $32 = HEAP32[$27 + 4 >> 2] | 0;
    $33 = HEAP32[$22 >> 2] | 0;
    $34 = $__extbuf + $__nread$0 | 0;
    $38 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$33 >> 2] | 0) + 16 >> 2] & 15]($33, $26, $__extbuf, $34, $__enxt, $__1buf, $23, $__inxt) | 0;
    if (($38 | 0) == 2) {
     $$0 = -1;
     label = 23;
     break;
    } else if (($38 | 0) == 3) {
     label = 14;
     break;
    } else if (($38 | 0) != 1) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21 >> 2] | 0;
    HEAP32[$40 >> 2] = $29;
    HEAP32[$40 + 4 >> 2] = $32;
    if (($__nread$0 | 0) == 8) {
     $$0 = -1;
     label = 23;
     break;
    }
    $46 = _getc(HEAP32[$24 >> 2] | 0) | 0;
    if (($46 | 0) == -1) {
     $$0 = -1;
     label = 23;
     break;
    }
    HEAP8[$34 >> 0] = $46;
    $__nread$0 = $__nread$0 + 1 | 0;
   }
   if ((label | 0) == 14) {
    HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
    $__nread$2 = $__nread$0;
    break;
   } else if ((label | 0) == 23) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
   $__nread$2 = $8;
  }
 } while (0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf >> 0] | 0;
   HEAP32[$this + 48 >> 2] = $60 & 255;
   $64 = $60;
  } else {
   $51 = $this + 32 | 0;
   $__i2$0 = $__nread$2;
   while (1) {
    if (($__i2$0 | 0) <= 0) {
     label = 21;
     break;
    }
    $__i2$0 = $__i2$0 + -1 | 0;
    if ((_ungetc(HEAPU8[$__extbuf + $__i2$0 >> 0] | 0, HEAP32[$51 >> 2] | 0) | 0) == -1) {
     $$0 = -1;
     label = 23;
     break;
    }
   }
   if ((label | 0) == 21) {
    $64 = HEAP8[$__1buf >> 0] | 0;
    break;
   } else if ((label | 0) == 23) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
 } while (0);
 $$0 = $64 & 255;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $27 = 0, $29 = 0, $46 = 0, $47 = 0, $48 = 0, $56 = 0, $68 = 0, $69 = 0, $83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__ct + 8 | 0;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  do {
   if (($1 | 0) == 0) {
    $14 = 0;
   } else {
    if ((HEAP32[$1 + 12 >> 2] | 0) == (HEAP32[$1 + 16 >> 2] | 0)) {
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 63]($1) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $14 = 0;
      break;
     } else {
      $14 = HEAP32[$__b >> 2] | 0;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while (0);
  $13 = ($14 | 0) == 0;
  $15 = HEAP32[$__e >> 2] | 0;
  do {
   if (($15 | 0) == 0) {
    label = 12;
   } else {
    if ((HEAP32[$15 + 12 >> 2] | 0) != (HEAP32[$15 + 16 >> 2] | 0)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 63]($15) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b >> 2] | 0;
  $29 = HEAP32[$27 + 12 >> 2] | 0;
  if (($29 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0;
  } else {
   $$0$i$i = HEAPU8[$29 >> 0] | 0;
  }
  if (!(($$0$i$i & 255) << 24 >> 24 > -1)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  if ((HEAP16[(HEAP32[$0 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192) == 0) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0;
  $47 = $46 + 12 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0;
   continue;
  } else {
   HEAP32[$47 >> 2] = $48 + 1;
   continue;
  }
 }
 $56 = HEAP32[$__b >> 2] | 0;
 do {
  if (($56 | 0) == 0) {
   $69 = 0;
  } else {
   if ((HEAP32[$56 + 12 >> 2] | 0) == (HEAP32[$56 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 63]($56) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $69 = 0;
     break;
    } else {
     $69 = HEAP32[$__b >> 2] | 0;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while (0);
 $68 = ($69 | 0) == 0;
 do {
  if (($$pre$i2$i$i6 | 0) == 0) {
   label = 32;
  } else {
   if ((HEAP32[$$pre$i2$i$i6 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i6 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i6) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 32) {
  if (!$68) {
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return;
}
function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$01$lcssa = 0, $$0125 = 0, $$026 = 0, $$1 = 0, $$13 = 0, $$215 = 0, $$24$lcssa = 0, $$2424 = 0, $$3 = 0, $$35 = 0, $$414 = 0, $$5 = 0, $$pn = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $46 = 0, $6 = 0, $7 = 0, $buf = 0, $ws2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 if (($s | 0) == 0) {
  $2 = HEAP32[$ws >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if (($3 | 0) == 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$026 = 0;
   $6 = $3;
   $ws2$07 = $2;
  }
  while (1) {
   if ($6 >>> 0 > 127) {
    $7 = _wcrtomb($buf, $6, 0) | 0;
    if (($7 | 0) == -1) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = $$pn + $$026 | 0;
   $ws2$07 = $ws2$07 + 4 | 0;
   $6 = HEAP32[$ws2$07 >> 2] | 0;
   if (($6 | 0) == 0) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$026 = $$13;
   }
  }
  if ((label | 0) == 26) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L14 : do {
  if ($n >>> 0 > 3) {
   $$0125 = $s;
   $$2424 = $n;
   $14 = HEAP32[$ws >> 2] | 0;
   while (1) {
    $13 = HEAP32[$14 >> 2] | 0;
    if (($13 + -1 | 0) >>> 0 > 126) {
     if (($13 | 0) == 0) {
      break;
     }
     $19 = _wcrtomb($$0125, $13, 0) | 0;
     if (($19 | 0) == -1) {
      $$0 = -1;
      label = 26;
      break;
     }
     $$1 = $$0125 + $19 | 0;
     $$35 = $$2424 - $19 | 0;
     $27 = $14;
    } else {
     HEAP8[$$0125 >> 0] = $13;
     $$1 = $$0125 + 1 | 0;
     $$35 = $$2424 + -1 | 0;
     $27 = HEAP32[$ws >> 2] | 0;
    }
    $14 = $27 + 4 | 0;
    HEAP32[$ws >> 2] = $14;
    if (!($$35 >>> 0 > 3)) {
     $$01$lcssa = $$1;
     $$24$lcssa = $$35;
     break L14;
    } else {
     $$0125 = $$1;
     $$2424 = $$35;
    }
   }
   if ((label | 0) == 26) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP8[$$0125 >> 0] = 0;
   HEAP32[$ws >> 2] = 0;
   $$0 = $n - $$2424 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$01$lcssa = $s;
   $$24$lcssa = $n;
  }
 } while (0);
 if (($$24$lcssa | 0) == 0) {
  $$0 = $n;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$215 = $$01$lcssa;
 $$414 = $$24$lcssa;
 $30 = HEAP32[$ws >> 2] | 0;
 while (1) {
  $29 = HEAP32[$30 >> 2] | 0;
  if (($29 + -1 | 0) >>> 0 > 126) {
   if (($29 | 0) == 0) {
    label = 19;
    break;
   }
   $35 = _wcrtomb($buf, $29, 0) | 0;
   if (($35 | 0) == -1) {
    $$0 = -1;
    label = 26;
    break;
   }
   if ($35 >>> 0 > $$414 >>> 0) {
    label = 22;
    break;
   }
   _wcrtomb($$215, HEAP32[$30 >> 2] | 0, 0) | 0;
   $$3 = $$215 + $35 | 0;
   $$5 = $$414 - $35 | 0;
   $46 = $30;
  } else {
   HEAP8[$$215 >> 0] = $29;
   $$3 = $$215 + 1 | 0;
   $$5 = $$414 + -1 | 0;
   $46 = HEAP32[$ws >> 2] | 0;
  }
  $30 = $46 + 4 | 0;
  HEAP32[$ws >> 2] = $30;
  if (($$5 | 0) == 0) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$215 = $$3;
   $$414 = $$5;
  }
 }
 if ((label | 0) == 19) {
  HEAP8[$$215 >> 0] = 0;
  HEAP32[$ws >> 2] = 0;
  $$0 = $n - $$414 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 22) {
  $$0 = $n - $$414 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 26) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $34 = 0, $35 = 0, $46 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $75 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0, $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $x$09 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $10 = HEAPU8[$1 >> 0] | 0;
 } else {
  $10 = ___shgetc($f) | 0;
 }
 if (($10 | 0) == 43 | ($10 | 0) == 45) {
  $11 = ($10 | 0) == 45 & 1;
  $12 = HEAP32[$0 >> 2] | 0;
  if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $12 + 1;
   $20 = HEAPU8[$12 >> 0] | 0;
  } else {
   $20 = ___shgetc($f) | 0;
  }
  if (($20 + -48 | 0) >>> 0 < 10 | ($pok | 0) == 0) {
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   if ((HEAP32[$2 >> 2] | 0) == 0) {
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $c$0 = $20;
    $neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;
  $neg$0 = 0;
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) {
  if ((HEAP32[$2 >> 2] | 0) == 0) {
   $95 = -2147483648;
   $96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;
   return $96 | 0;
  }
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $95 = -2147483648;
  $96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;
  return $96 | 0;
 } else {
  $c$18 = $c$0;
  $x$09 = 0;
 }
 while (1) {
  $34 = $c$18 + -48 + $x$09 | 0;
  $35 = HEAP32[$0 >> 2] | 0;
  if ($35 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $35 + 1;
   $c$1$be = HEAPU8[$35 >> 0] | 0;
  } else {
   $c$1$be = ___shgetc($f) | 0;
  }
  if (!(($c$1$be + -48 | 0) >>> 0 < 10 & ($34 | 0) < 214748364)) {
   break;
  }
  $c$18 = $c$1$be;
  $x$09 = $34 * 10 | 0;
 }
 $46 = (($34 | 0) < 0) << 31 >> 31;
 if (($c$1$be + -48 | 0) >>> 0 < 10) {
  $51 = $34;
  $52 = $46;
  $c$23 = $c$1$be;
  while (1) {
   $53 = ___muldi3($51 | 0, $52 | 0, 10, 0) | 0;
   $54 = tempRet0;
   $57 = _i64Add($c$23 | 0, (($c$23 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
   $59 = _i64Add($57 | 0, tempRet0 | 0, $53 | 0, $54 | 0) | 0;
   $60 = tempRet0;
   $61 = HEAP32[$0 >> 2] | 0;
   if ($61 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $61 + 1;
    $c$2$be = HEAPU8[$61 >> 0] | 0;
   } else {
    $c$2$be = ___shgetc($f) | 0;
   }
   if (($c$2$be + -48 | 0) >>> 0 < 10 & (($60 | 0) < 21474836 | ($60 | 0) == 21474836 & $59 >>> 0 < 2061584302)) {
    $51 = $59;
    $52 = $60;
    $c$23 = $c$2$be;
   } else {
    $89 = $59;
    $90 = $60;
    $c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;
  $90 = $46;
  $c$2$lcssa = $c$1$be;
 }
 if (($c$2$lcssa + -48 | 0) >>> 0 < 10) {
  do {
   $75 = HEAP32[$0 >> 2] | 0;
   if ($75 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $75 + 1;
    $c$3$be = HEAPU8[$75 >> 0] | 0;
   } else {
    $c$3$be = ___shgetc($f) | 0;
   }
  } while (($c$3$be + -48 | 0) >>> 0 < 10);
 }
 if ((HEAP32[$2 >> 2] | 0) != 0) {
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
 }
 $88 = ($neg$0 | 0) != 0;
 $91 = _i64Subtract(0, 0, $89 | 0, $90 | 0) | 0;
 $95 = $88 ? tempRet0 : $90;
 $96 = $88 ? $91 : $89;
 tempRet0 = $95;
 STACKTOP = sp;
 return $96 | 0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 116 | 0;
 $__nar = sp + 104 | 0;
 $__o = sp + 8 | 0;
 $__op = sp + 92 | 0;
 $__oe = sp + 96 | 0;
 $0 = sp + 4 | 0;
 $1 = sp + 100 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3944 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3945 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3946 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3947 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3948 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3949 >> 0] | 0;
 $2 = $__fmt + 1 | 0;
 $3 = $__iob + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 & 2048 | 0) == 0) {
  $$0$i = $2;
 } else {
  HEAP8[$2 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($4 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$13$i$ph = $$0$i + 1 | 0;
 }
 HEAP8[$$13$i$ph >> 0] = 108;
 $scevgep = $$13$i$ph + 1 | 0;
 $11 = $4 & 74;
 do {
  if (($11 | 0) == 64) {
   HEAP8[$scevgep >> 0] = 111;
  } else if (($11 | 0) == 8) {
   if (($4 & 16384 | 0) == 0) {
    HEAP8[$scevgep >> 0] = 120;
    break;
   } else {
    HEAP8[$scevgep >> 0] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep >> 0] = 117;
  }
 } while (0);
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $18 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $18;
   ___cxa_guard_release(5048);
  }
 }
 $19 = HEAP32[1260] | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $20 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $19, $__fmt, $$byval_copy) | 0;
 $21 = $__nar + $20 | 0;
 $23 = HEAP32[$3 >> 2] & 176;
 do {
  if (($23 | 0) == 32) {
   $$0$i1 = $21;
  } else if (($23 | 0) == 16) {
   $24 = HEAP8[$__nar >> 0] | 0;
   if ($24 << 24 >> 24 == 43 | $24 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0;
    break;
   }
   if (($20 | 0) > 1 & $24 << 24 >> 24 == 48) {
    $29 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($29 << 24 >> 24 == 88 | $29 << 24 >> 24 == 120) {
     $$0$i1 = $__nar + 2 | 0;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $$0$i1, $21, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $33, $34, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 116 | 0;
 $__nar = sp + 104 | 0;
 $__o = sp + 8 | 0;
 $__op = sp + 92 | 0;
 $__oe = sp + 96 | 0;
 $0 = sp + 4 | 0;
 $1 = sp + 100 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3944 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3945 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3946 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3947 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3948 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3949 >> 0] | 0;
 $2 = $__fmt + 1 | 0;
 $3 = $__iob + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 & 2048 | 0) == 0) {
  $$0$i = $2;
 } else {
  HEAP8[$2 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($4 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$13$i$ph = $$0$i + 1 | 0;
 }
 HEAP8[$$13$i$ph >> 0] = 108;
 $scevgep = $$13$i$ph + 1 | 0;
 $11 = $4 & 74;
 do {
  if (($11 | 0) == 8) {
   if (($4 & 16384 | 0) == 0) {
    HEAP8[$scevgep >> 0] = 120;
    break;
   } else {
    HEAP8[$scevgep >> 0] = 88;
    break;
   }
  } else if (($11 | 0) == 64) {
   HEAP8[$scevgep >> 0] = 111;
  } else {
   HEAP8[$scevgep >> 0] = 100;
  }
 } while (0);
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $18 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $18;
   ___cxa_guard_release(5048);
  }
 }
 $19 = HEAP32[1260] | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $20 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $19, $__fmt, $$byval_copy) | 0;
 $21 = $__nar + $20 | 0;
 $23 = HEAP32[$3 >> 2] & 176;
 do {
  if (($23 | 0) == 32) {
   $$0$i1 = $21;
  } else if (($23 | 0) == 16) {
   $24 = HEAP8[$__nar >> 0] | 0;
   if ($24 << 24 >> 24 == 43 | $24 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0;
    break;
   }
   if (($20 | 0) > 1 & $24 << 24 >> 24 == 48) {
    $29 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($29 << 24 >> 24 == 88 | $29 << 24 >> 24 == 120) {
     $$0$i1 = $__nar + 2 | 0;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $$0$i1, $21, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $33, $34, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 56 | 0;
 $__nar = sp + 44 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp + 16 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3944 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3945 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3946 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3947 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3948 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3949 >> 0] | 0;
 $2 = $__fmt + 1 | 0;
 $3 = $__iob + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 & 2048 | 0) == 0) {
  $$0$i = $2;
 } else {
  HEAP8[$2 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($4 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$13$i$ph = $$0$i + 1 | 0;
 }
 HEAP8[$$13$i$ph >> 0] = 108;
 $scevgep = $$13$i$ph + 1 | 0;
 $11 = $4 & 74;
 do {
  if (($11 | 0) == 64) {
   HEAP8[$scevgep >> 0] = 111;
  } else if (($11 | 0) == 8) {
   if (($4 & 16384 | 0) == 0) {
    HEAP8[$scevgep >> 0] = 120;
    break;
   } else {
    HEAP8[$scevgep >> 0] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep >> 0] = 117;
  }
 } while (0);
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $18 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $18;
   ___cxa_guard_release(5048);
  }
 }
 $19 = HEAP32[1260] | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $20 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $19, $__fmt, $$byval_copy) | 0;
 $21 = $__nar + $20 | 0;
 $23 = HEAP32[$3 >> 2] & 176;
 do {
  if (($23 | 0) == 16) {
   $24 = HEAP8[$__nar >> 0] | 0;
   if ($24 << 24 >> 24 == 43 | $24 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0;
    break;
   }
   if (($20 | 0) > 1 & $24 << 24 >> 24 == 48) {
    $29 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($29 << 24 >> 24 == 88 | $29 << 24 >> 24 == 120) {
     $$0$i1 = $__nar + 2 | 0;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if (($23 | 0) == 32) {
   $$0$i1 = $21;
  } else {
   label = 20;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $$0$i1, $21, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $33, $34, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 56 | 0;
 $__nar = sp + 44 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp + 16 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3944 >> 0] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3945 >> 0] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3946 >> 0] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3947 >> 0] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3948 >> 0] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3949 >> 0] | 0;
 $2 = $__fmt + 1 | 0;
 $3 = $__iob + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 & 2048 | 0) == 0) {
  $$0$i = $2;
 } else {
  HEAP8[$2 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($4 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$13$i$ph = $$0$i + 1 | 0;
 }
 HEAP8[$$13$i$ph >> 0] = 108;
 $scevgep = $$13$i$ph + 1 | 0;
 $11 = $4 & 74;
 do {
  if (($11 | 0) == 8) {
   if (($4 & 16384 | 0) == 0) {
    HEAP8[$scevgep >> 0] = 120;
    break;
   } else {
    HEAP8[$scevgep >> 0] = 88;
    break;
   }
  } else if (($11 | 0) == 64) {
   HEAP8[$scevgep >> 0] = 111;
  } else {
   HEAP8[$scevgep >> 0] = 100;
  }
 } while (0);
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $18 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $18;
   ___cxa_guard_release(5048);
  }
 }
 $19 = HEAP32[1260] | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $20 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $19, $__fmt, $$byval_copy) | 0;
 $21 = $__nar + $20 | 0;
 $23 = HEAP32[$3 >> 2] & 176;
 do {
  if (($23 | 0) == 16) {
   $24 = HEAP8[$__nar >> 0] | 0;
   if ($24 << 24 >> 24 == 43 | $24 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0;
    break;
   }
   if (($20 | 0) > 1 & $24 << 24 >> 24 == 48) {
    $29 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($29 << 24 >> 24 == 88 | $29 << 24 >> 24 == 120) {
     $$0$i1 = $__nar + 2 | 0;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if (($23 | 0) == 32) {
   $$0$i1 = $21;
  } else {
   label = 20;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $$0$i1, $21, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $33, $34, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $47 = 0, $53 = 0, $6 = 0, $62 = 0, $8 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp;
 $__enxt = sp + 4 | 0;
 $__inxt = sp + 8 | 0;
 $0 = $this + 52 | 0;
 if ((HEAP8[$0 >> 0] | 0) != 0) {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (!$__consume) {
   $$0 = $4;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$3 >> 2] = -1;
  HEAP8[$0 >> 0] = 0;
  $$0 = $4;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP32[$this + 44 >> 2] | 0;
 $8 = ($6 | 0) > 1 ? $6 : 1;
 L8 : do {
  if (($8 | 0) > 0) {
   $10 = $this + 32 | 0;
   $__i$09 = 0;
   while (1) {
    $12 = _getc(HEAP32[$10 >> 2] | 0) | 0;
    if (($12 | 0) == -1) {
     $$0 = -1;
     break;
    }
    HEAP8[$__extbuf + $__i$09 >> 0] = $12;
    $__i$09 = $__i$09 + 1 | 0;
    if (($__i$09 | 0) >= ($8 | 0)) {
     break L8;
    }
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 L15 : do {
  if ((HEAP8[$this + 53 >> 0] | 0) == 0) {
   $21 = $this + 40 | 0;
   $22 = $this + 36 | 0;
   $23 = $__1buf + 4 | 0;
   $24 = $this + 32 | 0;
   $__nread$0 = $8;
   while (1) {
    $27 = HEAP32[$21 >> 2] | 0;
    $28 = $27;
    $30 = HEAP32[$28 >> 2] | 0;
    $33 = HEAP32[$28 + 4 >> 2] | 0;
    $34 = HEAP32[$22 >> 2] | 0;
    $35 = $__extbuf + $__nread$0 | 0;
    $39 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 16 >> 2] & 15]($34, $27, $__extbuf, $35, $__enxt, $__1buf, $23, $__inxt) | 0;
    if (($39 | 0) == 2) {
     $$0 = -1;
     label = 22;
     break;
    } else if (($39 | 0) == 3) {
     label = 14;
     break;
    } else if (($39 | 0) != 1) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $41 = HEAP32[$21 >> 2] | 0;
    HEAP32[$41 >> 2] = $30;
    HEAP32[$41 + 4 >> 2] = $33;
    if (($__nread$0 | 0) == 8) {
     $$0 = -1;
     label = 22;
     break;
    }
    $47 = _getc(HEAP32[$24 >> 2] | 0) | 0;
    if (($47 | 0) == -1) {
     $$0 = -1;
     label = 22;
     break;
    }
    HEAP8[$35 >> 0] = $47;
    $__nread$0 = $__nread$0 + 1 | 0;
   }
   if ((label | 0) == 14) {
    HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0] | 0;
    $__nread$2 = $__nread$0;
    break;
   } else if ((label | 0) == 22) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0] | 0;
   $__nread$2 = $8;
  }
 } while (0);
 if ($__consume) {
  $62 = HEAP32[$__1buf >> 2] | 0;
  HEAP32[$this + 48 >> 2] = $62;
  $$0 = $62;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $53 = $this + 32 | 0;
 $__i2$0 = $__nread$2;
 while (1) {
  if (($__i2$0 | 0) <= 0) {
   break;
  }
  $__i2$0 = $__i2$0 + -1 | 0;
  if ((_ungetc(HEAP8[$__extbuf + $__i2$0 >> 0] | 0, HEAP32[$53 >> 2] | 0) | 0) == -1) {
   $$0 = -1;
   label = 22;
   break;
  }
 }
 if ((label | 0) == 22) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = HEAP32[$__1buf >> 2] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$ph = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $21 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $40 = 0, $42 = 0, $44 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $8 = 0, $__nm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 28 | 0;
 $1 = sp + 12 | 0;
 $__nm = sp + 16 | 0;
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  $10 = $__v & 1;
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result, $this, $$byval_copy, $__iob, $__fl, $10);
  STACKTOP = sp;
  return;
 }
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $11 = HEAP32[$1 >> 2] | 0;
 if (!((HEAP32[1326] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5304;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5304, $$byval_copy, 124);
 }
 $17 = (HEAP32[5308 >> 2] | 0) + -1 | 0;
 $21 = HEAP32[$11 + 8 >> 2] | 0;
 if (!((HEAP32[$11 + 12 >> 2] | 0) - $21 >> 2 >>> 0 > $17 >>> 0)) {
  $30 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($30);
  ___cxa_throw($30 | 0, 13864, 113);
 }
 $28 = HEAP32[$21 + ($17 << 2) >> 2] | 0;
 if (($28 | 0) == 0) {
  $30 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($30);
  ___cxa_throw($30 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 $32 = HEAP32[$28 >> 2] | 0;
 if ($__v) {
  FUNCTION_TABLE_vii[HEAP32[$32 + 24 >> 2] & 63]($__nm, $28);
 } else {
  FUNCTION_TABLE_vii[HEAP32[$32 + 28 >> 2] & 63]($__nm, $28);
 }
 $37 = HEAP8[$__nm >> 0] | 0;
 if (($37 & 1) == 0) {
  $42 = $__nm + 4 | 0;
  $$ph = $42;
  $$pre$phi6Z2D = $__nm + 8 | 0;
  $$pre$phiZ2D = $42;
 } else {
  $40 = $__nm + 8 | 0;
  $$ph = HEAP32[$40 >> 2] | 0;
  $$pre$phi6Z2D = $40;
  $$pre$phiZ2D = $__nm + 4 | 0;
 }
 $44 = $37;
 $54 = $$ph;
 while (1) {
  if (($44 & 1) == 0) {
   $51 = $$pre$phiZ2D;
   $52 = ($44 & 255) >>> 1;
  } else {
   $51 = HEAP32[$$pre$phi6Z2D >> 2] | 0;
   $52 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  }
  if (($54 | 0) == ($51 + ($52 << 2) | 0)) {
   break;
  }
  $55 = HEAP32[$54 >> 2] | 0;
  $56 = HEAP32[$__s >> 2] | 0;
  if (($56 | 0) != 0) {
   $58 = $56 + 24 | 0;
   $59 = HEAP32[$58 >> 2] | 0;
   if (($59 | 0) == (HEAP32[$56 + 28 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$56 >> 2] | 0) + 52 >> 2] & 15]($56, $55) | 0;
   } else {
    HEAP32[$58 >> 2] = $59 + 4;
    HEAP32[$59 >> 2] = $55;
    $$0$i$i = $55;
   }
   if (($$0$i$i | 0) == -1) {
    HEAP32[$__s >> 2] = 0;
   }
  }
  $44 = HEAP8[$__nm >> 0] | 0;
  $54 = $54 + 4 | 0;
 }
 HEAP32[$agg$result >> 2] = HEAP32[$__s >> 2];
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$ph = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $21 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $8 = 0, $__nm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 28 | 0;
 $1 = sp + 12 | 0;
 $__nm = sp + 16 | 0;
 if ((HEAP32[$__iob + 4 >> 2] & 1 | 0) == 0) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  $10 = $__v & 1;
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result, $this, $$byval_copy, $__iob, $__fl, $10);
  STACKTOP = sp;
  return;
 }
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $11 = HEAP32[$1 >> 2] | 0;
 if (!((HEAP32[1324] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5296;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5296, $$byval_copy, 124);
 }
 $17 = (HEAP32[5300 >> 2] | 0) + -1 | 0;
 $21 = HEAP32[$11 + 8 >> 2] | 0;
 if (!((HEAP32[$11 + 12 >> 2] | 0) - $21 >> 2 >>> 0 > $17 >>> 0)) {
  $30 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($30);
  ___cxa_throw($30 | 0, 13864, 113);
 }
 $28 = HEAP32[$21 + ($17 << 2) >> 2] | 0;
 if (($28 | 0) == 0) {
  $30 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($30);
  ___cxa_throw($30 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 $32 = HEAP32[$28 >> 2] | 0;
 if ($__v) {
  FUNCTION_TABLE_vii[HEAP32[$32 + 24 >> 2] & 63]($__nm, $28);
 } else {
  FUNCTION_TABLE_vii[HEAP32[$32 + 28 >> 2] & 63]($__nm, $28);
 }
 $37 = HEAP8[$__nm >> 0] | 0;
 if (($37 & 1) == 0) {
  $42 = $__nm + 1 | 0;
  $$ph = $42;
  $$pre$phi6Z2D = $42;
  $$pre$phi8Z2D = $__nm + 8 | 0;
 } else {
  $40 = $__nm + 8 | 0;
  $$ph = HEAP32[$40 >> 2] | 0;
  $$pre$phi6Z2D = $__nm + 1 | 0;
  $$pre$phi8Z2D = $40;
 }
 $43 = $__nm + 4 | 0;
 $45 = $37;
 $55 = $$ph;
 while (1) {
  if (($45 & 1) == 0) {
   $52 = $$pre$phi6Z2D;
   $53 = ($45 & 255) >>> 1;
  } else {
   $52 = HEAP32[$$pre$phi8Z2D >> 2] | 0;
   $53 = HEAP32[$43 >> 2] | 0;
  }
  if (($55 | 0) == ($52 + $53 | 0)) {
   break;
  }
  $56 = HEAP8[$55 >> 0] | 0;
  $57 = HEAP32[$__s >> 2] | 0;
  do {
   if (($57 | 0) != 0) {
    $59 = $57 + 24 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if (($60 | 0) != (HEAP32[$57 + 28 >> 2] | 0)) {
     HEAP32[$59 >> 2] = $60 + 1;
     HEAP8[$60 >> 0] = $56;
     break;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$57 >> 2] | 0) + 52 >> 2] & 15]($57, $56 & 255) | 0) == -1) {
     HEAP32[$__s >> 2] = 0;
    }
   }
  } while (0);
  $45 = HEAP8[$__nm >> 0] | 0;
  $55 = $55 + 1 | 0;
 }
 HEAP32[$agg$result >> 2] = HEAP32[$__s >> 2];
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 STACKTOP = sp;
 return;
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $27 = 0, $38 = 0, $41 = 0, $43 = 0, $53 = 0, $58 = 0, $69 = 0, $7 = 0, $75 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 do {
  if (($mode & 2 | 0) != 0) {
   if (($to_end - $to | 0) < 3) {
    $$0 = 1;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    HEAP32[$to_nxt >> 2] = $to + 1;
    HEAP8[$to >> 0] = -17;
    $7 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $7 + 1;
    HEAP8[$7 >> 0] = -69;
    $9 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $9 + 1;
    HEAP8[$9 >> 0] = -65;
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$frm_nxt >> 2] | 0;
 if (!($11 >>> 0 < $frm_end >>> 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $13 = $to_end;
 $15 = $11;
 L10 : while (1) {
  $14 = HEAP32[$15 >> 2] | 0;
  if (($14 & -2048 | 0) == 55296 | $14 >>> 0 > $Maxcode >>> 0) {
   $$0 = 2;
   label = 19;
   break;
  }
  do {
   if ($14 >>> 0 < 128) {
    $20 = HEAP32[$to_nxt >> 2] | 0;
    if (($13 - $20 | 0) < 1) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    HEAP32[$to_nxt >> 2] = $20 + 1;
    HEAP8[$20 >> 0] = $14;
   } else {
    if ($14 >>> 0 < 2048) {
     $27 = HEAP32[$to_nxt >> 2] | 0;
     if (($13 - $27 | 0) < 2) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $27 + 1;
     HEAP8[$27 >> 0] = $14 >>> 6 | 192;
     $38 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $38 + 1;
     HEAP8[$38 >> 0] = $14 & 63 | 128;
     break;
    }
    $41 = HEAP32[$to_nxt >> 2] | 0;
    $43 = $13 - $41 | 0;
    if ($14 >>> 0 < 65536) {
     if (($43 | 0) < 3) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $41 + 1;
     HEAP8[$41 >> 0] = $14 >>> 12 | 224;
     $53 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $53 + 1;
     HEAP8[$53 >> 0] = $14 >>> 6 & 63 | 128;
     $58 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $58 + 1;
     HEAP8[$58 >> 0] = $14 & 63 | 128;
     break;
    } else {
     if (($43 | 0) < 4) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     HEAP32[$to_nxt >> 2] = $41 + 1;
     HEAP8[$41 >> 0] = $14 >>> 18 | 240;
     $69 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $69 + 1;
     HEAP8[$69 >> 0] = $14 >>> 12 & 63 | 128;
     $75 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $75 + 1;
     HEAP8[$75 >> 0] = $14 >>> 6 & 63 | 128;
     $80 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $80 + 1;
     HEAP8[$80 >> 0] = $14 & 63 | 128;
     break;
    }
   }
  } while (0);
  $15 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
  HEAP32[$frm_nxt >> 2] = $15;
  if (!($15 >>> 0 < $frm_end >>> 0)) {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label | 0) == 19) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 204 | 0;
 $__o = sp + 16 | 0;
 $__op = sp + 188 | 0;
 $__oe = sp + 192 | 0;
 $2 = sp + 196 | 0;
 $3 = sp + 200 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $__fmt + 1 | 0;
 $9 = $__iob + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 & 2048 | 0) == 0) {
  $$0$i = $8;
 } else {
  HEAP8[$8 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($10 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$13$i$ph = $$0$i + 1 | 0;
 }
 $lftr$limit = $$13$i$ph + 2 | 0;
 HEAP8[$$13$i$ph >> 0] = 108;
 HEAP8[$$13$i$ph + 1 >> 0] = 108;
 $18 = $10 & 74;
 do {
  if (($18 | 0) == 64) {
   HEAP8[$lftr$limit >> 0] = 111;
  } else if (($18 | 0) == 8) {
   if (($10 & 16384 | 0) == 0) {
    HEAP8[$lftr$limit >> 0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit >> 0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit >> 0] = 117;
  }
 } while (0);
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $25 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $25;
   ___cxa_guard_release(5048);
  }
 }
 $26 = HEAP32[1260] | 0;
 $27 = $$byval_copy;
 HEAP32[$27 >> 2] = $0;
 HEAP32[$27 + 4 >> 2] = $1;
 $31 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $26, $__fmt, $$byval_copy) | 0;
 $32 = $__nar + $31 | 0;
 $34 = HEAP32[$9 >> 2] & 176;
 do {
  if (($34 | 0) == 32) {
   $$0$i1 = $32;
  } else if (($34 | 0) == 16) {
   $35 = HEAP8[$__nar >> 0] | 0;
   if ($35 << 24 >> 24 == 43 | $35 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0;
    break;
   }
   if (($31 | 0) > 1 & $35 << 24 >> 24 == 48) {
    $40 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($40 << 24 >> 24 == 88 | $40 << 24 >> 24 == 120) {
     $$0$i1 = $__nar + 2 | 0;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2, $__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $$0$i1, $32, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $44 = HEAP32[$__op >> 2] | 0;
 $45 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $44, $45, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 196 | 0;
 $__o = sp + 16 | 0;
 $__op = sp + 180 | 0;
 $__oe = sp + 184 | 0;
 $2 = sp + 188 | 0;
 $3 = sp + 192 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $__fmt + 1 | 0;
 $9 = $__iob + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 & 2048 | 0) == 0) {
  $$0$i = $8;
 } else {
  HEAP8[$8 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($10 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$13$i$ph = $$0$i + 1 | 0;
 }
 $lftr$limit = $$13$i$ph + 2 | 0;
 HEAP8[$$13$i$ph >> 0] = 108;
 HEAP8[$$13$i$ph + 1 >> 0] = 108;
 $18 = $10 & 74;
 do {
  if (($18 | 0) == 64) {
   HEAP8[$lftr$limit >> 0] = 111;
  } else if (($18 | 0) == 8) {
   if (($10 & 16384 | 0) == 0) {
    HEAP8[$lftr$limit >> 0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit >> 0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit >> 0] = 100;
  }
 } while (0);
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $25 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $25;
   ___cxa_guard_release(5048);
  }
 }
 $26 = HEAP32[1260] | 0;
 $27 = $$byval_copy;
 HEAP32[$27 >> 2] = $0;
 HEAP32[$27 + 4 >> 2] = $1;
 $31 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $26, $__fmt, $$byval_copy) | 0;
 $32 = $__nar + $31 | 0;
 $34 = HEAP32[$9 >> 2] & 176;
 do {
  if (($34 | 0) == 32) {
   $$0$i1 = $32;
  } else if (($34 | 0) == 16) {
   $35 = HEAP8[$__nar >> 0] | 0;
   if ($35 << 24 >> 24 == 43 | $35 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0;
    break;
   }
   if (($31 | 0) > 1 & $35 << 24 >> 24 == 48) {
    $40 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($40 << 24 >> 24 == 88 | $40 << 24 >> 24 == 120) {
     $$0$i1 = $__nar + 2 | 0;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2, $__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $$0$i1, $32, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $44 = HEAP32[$__op >> 2] | 0;
 $45 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $44, $45, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i2$i$i611 = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $28 = 0, $30 = 0, $48 = 0, $49 = 0, $50 = 0, $58 = 0, $70 = 0, $71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b >> 2] | 0;
 do {
  if (($0 | 0) == 0) {
   $13 = 0;
  } else {
   if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $13 = 0;
     break;
    } else {
     $13 = HEAP32[$__b >> 2] | 0;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while (0);
 $12 = ($13 | 0) == 0;
 $14 = HEAP32[$__e >> 2] | 0;
 do {
  if (($14 | 0) == 0) {
   label = 11;
  } else {
   if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label | 0) == 12) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  STACKTOP = sp;
  return;
 }
 $28 = HEAP32[$__b >> 2] | 0;
 $30 = HEAP32[$28 + 12 >> 2] | 0;
 if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) {
  $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0;
 } else {
  $$0$i$i = HEAPU8[$30 >> 0] | 0;
 }
 if (!((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $$0$i$i & 255, 0) | 0) << 24 >> 24 == 37)) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  STACKTOP = sp;
  return;
 }
 $48 = HEAP32[$__b >> 2] | 0;
 $49 = $48 + 12 | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 if (($50 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
  FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 40 >> 2] & 63]($48) | 0;
 } else {
  HEAP32[$49 >> 2] = $50 + 1;
 }
 $58 = HEAP32[$__b >> 2] | 0;
 do {
  if (($58 | 0) == 0) {
   $71 = 0;
  } else {
   if ((HEAP32[$58 + 12 >> 2] | 0) == (HEAP32[$58 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 63]($58) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $71 = 0;
     break;
    } else {
     $71 = HEAP32[$__b >> 2] | 0;
     break;
    }
   } else {
    $71 = $58;
   }
  }
 } while (0);
 $70 = ($71 | 0) == 0;
 do {
  if (($$pre$i2$i$i611 | 0) == 0) {
   label = 31;
  } else {
   if ((HEAP32[$$pre$i2$i$i611 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i611 + 16 >> 2] | 0)) {
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i611 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i611) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((label | 0) == 31) {
  if (!$70) {
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 75 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 20 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 28 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $__fmt + 1 | 0;
 $9 = $__iob + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 & 2048 | 0) == 0) {
  $$0$i = $8;
 } else {
  HEAP8[$8 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($10 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$13$i$ph = $$0$i + 1 | 0;
 }
 $lftr$limit = $$13$i$ph + 2 | 0;
 HEAP8[$$13$i$ph >> 0] = 108;
 HEAP8[$$13$i$ph + 1 >> 0] = 108;
 $18 = $10 & 74;
 do {
  if (($18 | 0) == 64) {
   HEAP8[$lftr$limit >> 0] = 111;
  } else if (($18 | 0) == 8) {
   if (($10 & 16384 | 0) == 0) {
    HEAP8[$lftr$limit >> 0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit >> 0] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit >> 0] = 117;
  }
 } while (0);
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $25 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $25;
   ___cxa_guard_release(5048);
  }
 }
 $26 = HEAP32[1260] | 0;
 $27 = $$byval_copy;
 HEAP32[$27 >> 2] = $0;
 HEAP32[$27 + 4 >> 2] = $1;
 $31 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $26, $__fmt, $$byval_copy) | 0;
 $32 = $__nar + $31 | 0;
 $34 = HEAP32[$9 >> 2] & 176;
 do {
  if (($34 | 0) == 16) {
   $35 = HEAP8[$__nar >> 0] | 0;
   if ($35 << 24 >> 24 == 43 | $35 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0;
    break;
   }
   if (($31 | 0) > 1 & $35 << 24 >> 24 == 48) {
    $40 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($40 << 24 >> 24 == 88 | $40 << 24 >> 24 == 120) {
     $$0$i1 = $__nar + 2 | 0;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if (($34 | 0) == 32) {
   $$0$i1 = $32;
  } else {
   label = 20;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2, $__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $$0$i1, $32, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $44 = HEAP32[$__op >> 2] | 0;
 $45 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $44, $45, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 74 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 20 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 28 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $__fmt + 1 | 0;
 $9 = $__iob + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 & 2048 | 0) == 0) {
  $$0$i = $8;
 } else {
  HEAP8[$8 >> 0] = 43;
  $$0$i = $__fmt + 2 | 0;
 }
 if (($10 & 512 | 0) == 0) {
  $$13$i$ph = $$0$i;
 } else {
  HEAP8[$$0$i >> 0] = 35;
  $$13$i$ph = $$0$i + 1 | 0;
 }
 $lftr$limit = $$13$i$ph + 2 | 0;
 HEAP8[$$13$i$ph >> 0] = 108;
 HEAP8[$$13$i$ph + 1 >> 0] = 108;
 $18 = $10 & 74;
 do {
  if (($18 | 0) == 8) {
   if (($10 & 16384 | 0) == 0) {
    HEAP8[$lftr$limit >> 0] = 120;
    break;
   } else {
    HEAP8[$lftr$limit >> 0] = 88;
    break;
   }
  } else if (($18 | 0) == 64) {
   HEAP8[$lftr$limit >> 0] = 111;
  } else {
   HEAP8[$lftr$limit >> 0] = 100;
  }
 } while (0);
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $25 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $25;
   ___cxa_guard_release(5048);
  }
 }
 $26 = HEAP32[1260] | 0;
 $27 = $$byval_copy;
 HEAP32[$27 >> 2] = $0;
 HEAP32[$27 + 4 >> 2] = $1;
 $31 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $26, $__fmt, $$byval_copy) | 0;
 $32 = $__nar + $31 | 0;
 $34 = HEAP32[$9 >> 2] & 176;
 do {
  if (($34 | 0) == 32) {
   $$0$i1 = $32;
  } else if (($34 | 0) == 16) {
   $35 = HEAP8[$__nar >> 0] | 0;
   if ($35 << 24 >> 24 == 43 | $35 << 24 >> 24 == 45) {
    $$0$i1 = $__nar + 1 | 0;
    break;
   }
   if (($31 | 0) > 1 & $35 << 24 >> 24 == 48) {
    $40 = HEAP8[$__nar + 1 >> 0] | 0;
    if ($40 << 24 >> 24 == 88 | $40 << 24 >> 24 == 120) {
     $$0$i1 = $__nar + 2 | 0;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while (0);
 if ((label | 0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2, $__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $$0$i1, $32, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $44 = HEAP32[$__op >> 2] | 0;
 $45 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $44, $45, $__iob, $__fl);
 STACKTOP = sp;
 return;
}
function __Z7readPGMPKcRiS1_b($name, $w, $h, $adjustToEightMultiple) {
 $name = $name | 0;
 $w = $w | 0;
 $h = $h | 0;
 $adjustToEightMultiple = $adjustToEightMultiple | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $15 = 0, $19 = 0, $22 = 0, $25 = 0, $28 = 0, $31 = 0, $33 = 0, $37 = 0, $41 = 0, $6 = 0, $8 = 0, $gray = 0, $head = 0, $i = 0, $i$0$i = 0, $i$0$i1 = 0, $j$03$us = 0, $vararg_buffer11 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544 | 0;
 $vararg_buffer11 = sp;
 $head = sp + 279 | 0;
 $i = sp + 16 | 0;
 $gray = sp + 20 | 0;
 $0 = _fopen($name | 0, 128) | 0;
 if (($0 | 0) == 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _fgets($head | 0, 255, $0 | 0) | 0;
 HEAP32[$vararg_buffer11 >> 2] = sp + 24;
 HEAP32[$vararg_buffer11 + 4 >> 2] = $w;
 HEAP32[$vararg_buffer11 + 8 >> 2] = $h;
 HEAP32[$vararg_buffer11 + 12 >> 2] = $gray;
 do {
  if ((_sscanf($head, 136, $vararg_buffer11) | 0) != 4) {
   _fgets($head | 0, 255, $0 | 0) | 0;
   if ((HEAP8[$head >> 0] | 0) == 35) {
    HEAP32[$vararg_buffer11 >> 2] = $w;
    HEAP32[$vararg_buffer11 + 4 >> 2] = $h;
    HEAP32[$vararg_buffer11 + 8 >> 2] = $gray;
    _fscanf($0 | 0, 168, $vararg_buffer11 | 0) | 0;
    break;
   } else {
    HEAP32[$vararg_buffer11 >> 2] = $w;
    HEAP32[$vararg_buffer11 + 4 >> 2] = $h;
    _sscanf($head, 152, $vararg_buffer11) | 0;
    HEAP32[$vararg_buffer11 >> 2] = $gray;
    _fscanf($0 | 0, 160, $vararg_buffer11 | 0) | 0;
    break;
   }
  }
 } while (0);
 $6 = HEAP32[$w >> 2] | 0;
 if (($6 | 0) < 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = HEAP32[$h >> 2] | 0;
 if (($8 | 0) < 1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP32[$gray >> 2] | 0) != 255) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = Math_imul($8, $6) | 0;
 $15 = __Znaj(($12 | 0) > -1 ? $12 : -1) | 0;
 _fread($i | 0, 1, 1, $0 | 0) | 0;
 _fread($15 | 0, 1, Math_imul(HEAP32[$h >> 2] | 0, HEAP32[$w >> 2] | 0) | 0, $0 | 0) | 0;
 _fclose($0 | 0) | 0;
 if (!$adjustToEightMultiple) {
  $$0 = $15;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $19 = HEAP32[$w >> 2] | 0;
 $i$0$i = 8;
 while (1) {
  if (($i$0$i | 0) < ($19 | 0)) {
   $i$0$i = $i$0$i + 8 | 0;
  } else {
   break;
  }
 }
 $22 = HEAP32[$h >> 2] | 0;
 $i$0$i1 = 8;
 while (1) {
  if (($i$0$i1 | 0) < ($22 | 0)) {
   $i$0$i1 = $i$0$i1 + 8 | 0;
  } else {
   break;
  }
 }
 $25 = Math_imul($i$0$i1, $i$0$i) | 0;
 $28 = __Znaj(($25 | 0) > -1 ? $25 : -1) | 0;
 _memset($28 | 0, 0, $25 | 0) | 0;
 HEAP32[$i >> 2] = 0;
 if (($19 | 0) > 0) {
  $31 = ($19 | 0) > 1;
  if (($22 | 0) > 0) {
   $33 = 0;
   do {
    $j$03$us = 0;
    do {
     $37 = $15 + ((Math_imul($19, $j$03$us) | 0) + $33) | 0;
     $41 = $28 + ($33 + (Math_imul($j$03$us, $i$0$i) | 0)) | 0;
     HEAP8[$41 >> 0] = HEAP8[$37 >> 0] | 0;
     $j$03$us = $j$03$us + 1 | 0;
    } while (($j$03$us | 0) < ($22 | 0));
    $33 = $33 + 1 | 0;
   } while (($33 | 0) < ($19 | 0));
  }
  HEAP32[$i >> 2] = $31 ? $19 : 1;
 }
 HEAP32[$w >> 2] = $i$0$i;
 HEAP32[$h >> 2] = $i$0$i1;
 if (($15 | 0) == 0) {
  $$0 = $28;
  STACKTOP = sp;
  return $$0 | 0;
 }
 __ZdaPv($15);
 $$0 = $28;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5496] | 0) != 0) {
  $8 = HEAP32[1372] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((___cxa_guard_acquire(5496) | 0) == 0) {
  $8 = HEAP32[1372] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((HEAP8[11736] | 0) == 0) {
  if ((___cxa_guard_acquire(11736) | 0) != 0) {
   _memset(11448, 0, 288) | 0;
   ___cxa_atexit(129, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(11736);
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11448, 11744) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11460 | 0, 11752) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11472 | 0, 11768) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11484 | 0, 11776) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11496 | 0, 11784) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11508 | 0, 11792) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11520 | 0, 11800) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11532 | 0, 11808) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11544 | 0, 11816) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11556 | 0, 11832) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11568 | 0, 11840) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11580 | 0, 11856) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11592 | 0, 11872) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11604 | 0, 11880) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11616 | 0, 11888) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11628 | 0, 11896) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11640 | 0, 11784) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11652 | 0, 11904) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11664 | 0, 11912) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11676 | 0, 11920) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11688 | 0, 11928) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11700 | 0, 11936) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11712 | 0, 11944) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11724 | 0, 11952) | 0;
 HEAP32[1372] = 11448;
 ___cxa_guard_release(5496);
 $8 = HEAP32[1372] | 0;
 STACKTOP = sp;
 return $8 | 0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5512] | 0) != 0) {
  $8 = HEAP32[1376] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((___cxa_guard_acquire(5512) | 0) == 0) {
  $8 = HEAP32[1376] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((HEAP8[10896] | 0) == 0) {
  if ((___cxa_guard_acquire(10896) | 0) != 0) {
   _memset(10608, 0, 288) | 0;
   ___cxa_atexit(130, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(10896);
  }
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10608, 10904) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10620 | 0, 10936) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10632 | 0, 10976) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10644 | 0, 11e3) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10656 | 0, 11320) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10668 | 0, 11024) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10680 | 0, 11048) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10692 | 0, 11072) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10704 | 0, 11104) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10716 | 0, 11144) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10728 | 0, 11176) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10740 | 0, 11216) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10752 | 0, 11256) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10764 | 0, 11272) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10776 | 0, 11288) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10788 | 0, 11304) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10800 | 0, 11320) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10812 | 0, 11336) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10824 | 0, 11352) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10836 | 0, 11368) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10848 | 0, 11384) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10860 | 0, 11400) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10872 | 0, 11416) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10884 | 0, 11432) | 0;
 HEAP32[1376] = 10608;
 ___cxa_guard_release(5512);
 $8 = HEAP32[1376] | 0;
 STACKTOP = sp;
 return $8 | 0;
}
function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr41 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $18 = 0, $21 = 0, $22 = 0, $30 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0, $ws$213 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $wbuf = sp + 8 | 0;
 $s = sp;
 $0 = HEAP32[$src >> 2] | 0;
 HEAP32[$s >> 2] = $0;
 $1 = ($wcs | 0) != 0;
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 L1 : do {
  if (($0 | 0) == 0 | ($wn$ | 0) == 0) {
   $$1 = $n;
   $$26 = $wn$;
   $18 = $0;
   $cnt$1 = 0;
   $ws$018 = $wcs$;
  } else {
   $$026 = $n;
   $$0423 = $wn$;
   $$pr41 = $0;
   $cnt$024 = 0;
   $ws$025 = $wcs$;
   while (1) {
    $4 = $$026 >>> 2;
    $5 = $4 >>> 0 >= $$0423 >>> 0;
    if (!($5 | $$026 >>> 0 > 131)) {
     $$1 = $$026;
     $$26 = $$0423;
     $18 = $$pr41;
     $cnt$1 = $cnt$024;
     $ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $5 ? $$0423 : $4;
    $7 = $$026 - $$04$ | 0;
    $8 = _mbsrtowcs($ws$025, $s, $$04$, $st) | 0;
    if (($8 | 0) == -1) {
     break;
    }
    if (($ws$025 | 0) == ($wbuf | 0)) {
     $$15 = $$0423;
     $ws$1 = $wbuf;
    } else {
     $$15 = $$0423 - $8 | 0;
     $ws$1 = $ws$025 + ($8 << 2) | 0;
    }
    $13 = $8 + $cnt$024 | 0;
    $14 = HEAP32[$s >> 2] | 0;
    if (($14 | 0) == 0 | ($$15 | 0) == 0) {
     $$1 = $7;
     $$26 = $$15;
     $18 = $14;
     $cnt$1 = $13;
     $ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $7;
     $$0423 = $$15;
     $$pr41 = $14;
     $cnt$024 = $13;
     $ws$025 = $ws$1;
    }
   }
   $$1 = $7;
   $$26 = 0;
   $18 = HEAP32[$s >> 2] | 0;
   $cnt$1 = -1;
   $ws$018 = $ws$025;
  }
 } while (0);
 L11 : do {
  if (($18 | 0) == 0) {
   $cnt$3 = $cnt$1;
  } else {
   if (($$26 | 0) == 0 | ($$1 | 0) == 0) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;
    $$311 = $$26;
    $21 = $18;
    $cnt$212 = $cnt$1;
    $ws$213 = $ws$018;
    while (1) {
     $22 = _mbrtowc($ws$213, $21, $$214, $st) | 0;
     if (($22 + 2 | 0) >>> 0 < 3) {
      break;
     }
     $21 = (HEAP32[$s >> 2] | 0) + $22 | 0;
     HEAP32[$s >> 2] = $21;
     $$311 = $$311 + -1 | 0;
     $30 = $cnt$212 + 1 | 0;
     if (($$311 | 0) == 0 | ($$214 | 0) == ($22 | 0)) {
      $cnt$3 = $30;
      break L11;
     } else {
      $$214 = $$214 - $22 | 0;
      $cnt$212 = $30;
      $ws$213 = $ws$213 + 4 | 0;
     }
    }
    if (($22 | 0) == 0) {
     HEAP32[$s >> 2] = 0;
     $cnt$3 = $cnt$212;
     break;
    } else if (($22 | 0) == -1) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st >> 2] = 0;
     $cnt$3 = $cnt$212;
     break;
    }
   }
  }
 } while (0);
 if (!$1) {
  STACKTOP = sp;
  return $cnt$3 | 0;
 }
 HEAP32[$src >> 2] = HEAP32[$s >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}
function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $0 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $9 = 0, $detected_faces = 0, $detector = 0, $i$0 = 0, $im = 0, $vararg_buffer11 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $vararg_buffer11 = sp;
 $detector = sp + 108 | 0;
 $detected_faces = sp + 20 | 0;
 $im = sp + 32 | 0;
 $0 = sp + 96 | 0;
 __ZN19BoostedFaceDetectorC2EPKcbb($detector, 8, 1, 0);
 HEAP32[$vararg_buffer11 >> 2] = (HEAP32[$detector + 16 >> 2] | 0) - (HEAP32[$detector + 12 >> 2] | 0) >> 4;
 __Z8myprintfPKcz(24, $vararg_buffer11) | 0;
 HEAP32[$detected_faces >> 2] = 0;
 $9 = $detected_faces + 4 | 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$detected_faces + 8 >> 2] = 0;
 HEAP32[$im >> 2] = -1;
 HEAP32[$im + 4 >> 2] = -1;
 HEAP32[$im + 8 >> 2] = 0;
 HEAP32[$im + 12 >> 2] = 1;
 dest = $im + 16 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN11SimpleImage12readFromFileEPKc8FileType($im, 48, 0) | 0;
 __ZN11SimpleImage18convertToGrayscaleEv($im) | 0;
 __ZN19BoostedFaceDetector11detectFacesER11SimpleImageiibfffi($0, $detector, $im, 24, 3, 1, 4.0, 1.2999999523162842, 2.0, 100);
 $16 = $0 + 4 | 0;
 __ZNSt3__16vectorI10SimpleRectNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($detected_faces, HEAP32[$0 >> 2] | 0, HEAP32[$16 >> 2] | 0);
 $18 = HEAP32[$0 >> 2] | 0;
 if (($18 | 0) != 0) {
  $20 = HEAP32[$16 >> 2] | 0;
  if (($20 | 0) != ($18 | 0)) {
   HEAP32[$16 >> 2] = $20 + (~((($20 + -24 + (0 - $18) | 0) >>> 0) / 24 | 0) * 24 | 0);
  }
  __ZdlPv($18);
 }
 $25 = HEAP32[$9 >> 2] | 0;
 $26 = HEAP32[$detected_faces >> 2] | 0;
 $28 = $26;
 $30 = ($25 - $28 | 0) / 24 | 0;
 HEAP32[$vararg_buffer11 >> 2] = $30;
 __Z8myprintfPKcz(64, $vararg_buffer11) | 0;
 $i$0 = 0;
 while (1) {
  if (!($i$0 >>> 0 < $30 >>> 0)) {
   break;
  }
  $32 = $i$0 + 1 | 0;
  $34 = HEAP32[$26 + ($i$0 * 24 | 0) >> 2] | 0;
  $36 = HEAP32[$26 + ($i$0 * 24 | 0) + 8 >> 2] | 0;
  $38 = HEAP32[$26 + ($i$0 * 24 | 0) + 4 >> 2] | 0;
  $40 = HEAP32[$26 + ($i$0 * 24 | 0) + 12 >> 2] | 0;
  HEAP32[$vararg_buffer11 >> 2] = $32;
  HEAP32[$vararg_buffer11 + 4 >> 2] = $34;
  HEAP32[$vararg_buffer11 + 8 >> 2] = $36;
  HEAP32[$vararg_buffer11 + 12 >> 2] = $38;
  HEAP32[$vararg_buffer11 + 16 >> 2] = $40;
  __Z8myprintfPKcz(88, $vararg_buffer11) | 0;
  $i$0 = $32;
 }
 __Z8myprintfPKcz(112, $vararg_buffer11) | 0;
 _getchar() | 0;
 __ZN11SimpleImageD2Ev($im);
 if (($26 | 0) == 0) {
  __ZN19BoostedFaceDetectorD2Ev($detector);
  STACKTOP = sp;
  return 0;
 }
 if (($25 | 0) != ($26 | 0)) {
  HEAP32[$9 >> 2] = $25 + (~((($25 + -24 + (0 - $28) | 0) >>> 0) / 24 | 0) * 24 | 0);
 }
 __ZdlPv($26);
 __ZN19BoostedFaceDetectorD2Ev($detector);
 STACKTOP = sp;
 return 0;
}
function __ZN11SimpleImage26updateRotatedIntegralImageEv($this) {
 $this = $this | 0;
 var $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $3 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $41 = 0, $43 = 0, $47 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $65 = 0, $66 = 0, $8 = 0, $9 = 0, $i$010 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 40 | 0;
 $1 = $this + 44 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 $9 = $8 + 2 | 0;
 $10 = $this + 4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 do {
  if (($2 - $3 >> 2 | 0) == (Math_imul($11 + 1 | 0, $9) | 0)) {
   $54 = $8;
   $55 = $11;
   $56 = $3;
  } else {
   $15 = $this + 52 | 0;
   $17 = Math_imul($11 + 2 | 0, $9) | 0;
   $18 = $this + 56 | 0;
   $19 = HEAP32[$18 >> 2] | 0;
   $20 = HEAP32[$15 >> 2] | 0;
   $24 = $19 - $20 >> 2;
   if ($24 >>> 0 < $17 >>> 0) {
    __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($15, $17 - $24 | 0);
    $34 = HEAP32[$this >> 2] | 0;
    $36 = HEAP32[$10 >> 2] | 0;
    $39 = HEAP32[$1 >> 2] | 0;
    $41 = HEAP32[$0 >> 2] | 0;
   } else {
    if ($24 >>> 0 > $17 >>> 0) {
     $28 = $20 + ($17 << 2) | 0;
     if (($19 | 0) == ($28 | 0)) {
      $34 = $8;
      $36 = $11;
      $39 = $2;
      $41 = $3;
     } else {
      HEAP32[$18 >> 2] = $19 + (~(($19 + -4 + (0 - $28) | 0) >>> 2) << 2);
      $34 = $8;
      $36 = $11;
      $39 = $2;
      $41 = $3;
     }
    } else {
     $34 = $8;
     $36 = $11;
     $39 = $2;
     $41 = $3;
    }
   }
   $37 = Math_imul($36 + 1 | 0, $34 + 2 | 0) | 0;
   $43 = $39 - $41 >> 2;
   if ($43 >>> 0 < $37 >>> 0) {
    __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($0, $37 - $43 | 0);
    $54 = HEAP32[$this >> 2] | 0;
    $55 = HEAP32[$10 >> 2] | 0;
    $56 = HEAP32[$0 >> 2] | 0;
    break;
   }
   if ($43 >>> 0 > $37 >>> 0) {
    $47 = $41 + ($37 << 2) | 0;
    if (($39 | 0) == ($47 | 0)) {
     $54 = $34;
     $55 = $36;
     $56 = $41;
    } else {
     HEAP32[$1 >> 2] = $39 + (~(($39 + -4 + (0 - $47) | 0) >>> 2) << 2);
     $54 = $34;
     $55 = $36;
     $56 = $41;
    }
   } else {
    $54 = $34;
    $55 = $36;
    $56 = $41;
   }
  }
 } while (0);
 $52 = $this + 8 | 0;
 __Z24findRotatedIntegralImagePhiiPi(HEAP32[$52 >> 2] | 0, $54, $55, $56);
 $57 = HEAP32[$this >> 2] | 0;
 $58 = HEAP32[$10 >> 2] | 0;
 $59 = Math_imul($58, $57) | 0;
 $61 = __Znaj($59 >>> 0 > 1073741823 ? -1 : $59 << 2) | 0;
 if (($59 | 0) > 0) {
  $$pre16 = HEAP32[$52 >> 2] | 0;
  $i$010 = 0;
  do {
   $65 = HEAPU8[$$pre16 + $i$010 >> 0] | 0;
   $66 = Math_imul($65, $65) | 0;
   HEAP32[$61 + ($i$010 << 2) >> 2] = $66;
   $i$010 = $i$010 + 1 | 0;
  } while (($i$010 | 0) < ($59 | 0));
 }
 __Z24findRotatedIntegralImagePiiiS_($61, $57, $58, HEAP32[$this + 52 >> 2] | 0);
 if (($61 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdaPv($61);
 STACKTOP = sp;
 return;
}
function __ZNSt3__16vectorIP10ClassifierNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0$i7 = 0, $$01$i = 0, $$01$i3 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $61 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__first;
 $3 = $__last - $1 >> 2;
 $4 = $this + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = HEAP32[$this >> 2] | 0;
 $8 = $6;
 if (!($3 >>> 0 > $5 - $8 >> 2 >>> 0)) {
  $12 = $this + 4 | 0;
  $15 = (HEAP32[$12 >> 2] | 0) - $8 | 0;
  $16 = $15 >> 2;
  if (!($3 >>> 0 > $16 >>> 0)) {
   $28 = $__last - $1 | 0;
   _memmove($6 | 0, $__first | 0, $28 | 0) | 0;
   $30 = $6 + ($28 >> 2 << 2) | 0;
   $31 = HEAP32[$12 >> 2] | 0;
   if (($31 | 0) == ($30 | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[$12 >> 2] = $31 + (~(($31 + -4 + (0 - $30) | 0) >>> 2) << 2);
   STACKTOP = sp;
   return;
  }
  $18 = $__first + ($16 << 2) | 0;
  _memmove($6 | 0, $__first | 0, $15 | 0) | 0;
  if (($18 | 0) == ($__last | 0)) {
   STACKTOP = sp;
   return;
  }
  $$01$i3 = $18;
  $21 = HEAP32[$12 >> 2] | 0;
  do {
   if (($21 | 0) == 0) {
    $24 = 0;
   } else {
    HEAP32[$21 >> 2] = HEAP32[$$01$i3 >> 2];
    $24 = HEAP32[$12 >> 2] | 0;
   }
   $21 = $24 + 4 | 0;
   HEAP32[$12 >> 2] = $21;
   $$01$i3 = $$01$i3 + 4 | 0;
  } while (($$01$i3 | 0) != ($__last | 0));
  STACKTOP = sp;
  return;
 }
 if (($6 | 0) == 0) {
  $45 = $5;
 } else {
  $37 = $this + 4 | 0;
  $38 = HEAP32[$37 >> 2] | 0;
  if (($38 | 0) != ($6 | 0)) {
   HEAP32[$37 >> 2] = $38 + (~(($38 + -4 + (0 - $8) | 0) >>> 2) << 2);
  }
  __ZdlPv($6);
  HEAP32[$4 >> 2] = 0;
  HEAP32[$37 >> 2] = 0;
  HEAP32[$this >> 2] = 0;
  $45 = 0;
 }
 if ($3 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $44 = $45;
 if ($44 >> 2 >>> 0 < 536870911) {
  $48 = $44 >> 1;
  $50 = $48 >>> 0 < $3 >>> 0 ? $3 : $48;
  if ($50 >>> 0 > 1073741823) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  } else {
   $$0$i7 = $50;
  }
 } else {
  $$0$i7 = 1073741823;
 }
 $53 = __Znwj($$0$i7 << 2) | 0;
 $54 = $this + 4 | 0;
 HEAP32[$54 >> 2] = $53;
 HEAP32[$this >> 2] = $53;
 HEAP32[$4 >> 2] = $53 + ($$0$i7 << 2);
 if (($__first | 0) == ($__last | 0)) {
  STACKTOP = sp;
  return;
 } else {
  $$01$i = $__first;
  $58 = $53;
 }
 do {
  if (($58 | 0) == 0) {
   $61 = 0;
  } else {
   HEAP32[$58 >> 2] = HEAP32[$$01$i >> 2];
   $61 = HEAP32[$54 >> 2] | 0;
  }
  $58 = $61 + 4 | 0;
  HEAP32[$54 >> 2] = $58;
  $$01$i = $$01$i + 4 | 0;
 } while (($$01$i | 0) != ($__last | 0));
 STACKTOP = sp;
 return;
}
function __ZN14HaarClassifier4initEv($this) {
 $this = $this | 0;
 var $105 = 0, $57 = 0, $65 = 0, $73 = 0, $81 = 0, $89 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch (HEAP32[$this + 28 >> 2] | 0) {
  case 12:
   {
    $97 = (HEAP32[$this + 72 >> 2] << 2) + (HEAP32[$this + 68 >> 2] | 0) | 0;
    HEAP32[$this + 76 >> 2] = $97;
    HEAP32[$this + 80 >> 2] = $97;
    STACKTOP = sp;
    return;
   }
  case 2:
   {
    HEAP32[$this + 76 >> 2] = HEAP32[$this + 68 >> 2];
    HEAP32[$this + 80 >> 2] = (HEAP32[$this + 72 >> 2] | 0) * 3;
    STACKTOP = sp;
    return;
   }
  case 3:
   {
    HEAP32[$this + 76 >> 2] = (HEAP32[$this + 68 >> 2] | 0) * 3;
    HEAP32[$this + 80 >> 2] = HEAP32[$this + 72 >> 2];
    STACKTOP = sp;
    return;
   }
  case 0:
   {
    HEAP32[$this + 76 >> 2] = HEAP32[$this + 68 >> 2];
    HEAP32[$this + 80 >> 2] = HEAP32[$this + 72 >> 2] << 1;
    STACKTOP = sp;
    return;
   }
  case 8:
   {
    $57 = (HEAP32[$this + 68 >> 2] << 1) + (HEAP32[$this + 72 >> 2] | 0) | 0;
    HEAP32[$this + 76 >> 2] = $57;
    HEAP32[$this + 80 >> 2] = $57;
    STACKTOP = sp;
    return;
   }
  case 4:
   {
    HEAP32[$this + 76 >> 2] = HEAP32[$this + 68 >> 2];
    HEAP32[$this + 80 >> 2] = HEAP32[$this + 72 >> 2] << 2;
    STACKTOP = sp;
    return;
   }
  case 10:
   {
    $81 = ((HEAP32[$this + 72 >> 2] | 0) * 3 | 0) + (HEAP32[$this + 68 >> 2] | 0) | 0;
    HEAP32[$this + 76 >> 2] = $81;
    HEAP32[$this + 80 >> 2] = $81;
    STACKTOP = sp;
    return;
   }
  case 9:
   {
    $73 = ((HEAP32[$this + 68 >> 2] | 0) * 3 | 0) + (HEAP32[$this + 72 >> 2] | 0) | 0;
    HEAP32[$this + 76 >> 2] = $73;
    HEAP32[$this + 80 >> 2] = $73;
    STACKTOP = sp;
    return;
   }
  case 13:
   {
    $105 = ((HEAP32[$this + 68 >> 2] | 0) + (HEAP32[$this + 72 >> 2] | 0) | 0) * 3 | 0;
    HEAP32[$this + 76 >> 2] = $105;
    HEAP32[$this + 80 >> 2] = $105;
    STACKTOP = sp;
    return;
   }
  case 6:
   {
    HEAP32[$this + 76 >> 2] = (HEAP32[$this + 68 >> 2] | 0) * 3;
    HEAP32[$this + 80 >> 2] = (HEAP32[$this + 72 >> 2] | 0) * 3;
    STACKTOP = sp;
    return;
   }
  case 11:
   {
    $89 = (HEAP32[$this + 68 >> 2] << 2) + (HEAP32[$this + 72 >> 2] | 0) | 0;
    HEAP32[$this + 76 >> 2] = $89;
    HEAP32[$this + 80 >> 2] = $89;
    STACKTOP = sp;
    return;
   }
  case 1:
   {
    HEAP32[$this + 76 >> 2] = HEAP32[$this + 68 >> 2] << 1;
    HEAP32[$this + 80 >> 2] = HEAP32[$this + 72 >> 2];
    STACKTOP = sp;
    return;
   }
  case 7:
   {
    $65 = (HEAP32[$this + 72 >> 2] << 1) + (HEAP32[$this + 68 >> 2] | 0) | 0;
    HEAP32[$this + 76 >> 2] = $65;
    HEAP32[$this + 80 >> 2] = $65;
    STACKTOP = sp;
    return;
   }
  case 5:
   {
    HEAP32[$this + 76 >> 2] = HEAP32[$this + 68 >> 2] << 2;
    HEAP32[$this + 80 >> 2] = HEAP32[$this + 72 >> 2];
    STACKTOP = sp;
    return;
   }
  default:
   {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
}
function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr41 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $17 = 0, $21 = 0, $22 = 0, $31 = 0, $4 = 0, $6 = 0, $7 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0, $s$213 = 0, $ws = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $buf = sp + 8 | 0;
 $ws = sp;
 $0 = HEAP32[$wcs >> 2] | 0;
 HEAP32[$ws >> 2] = $0;
 $1 = ($dst | 0) != 0;
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 L1 : do {
  if (($0 | 0) == 0 | ($n$ | 0) == 0) {
   $$1 = $wn;
   $$26 = $n$;
   $17 = $0;
   $cnt$1 = 0;
   $s$018 = $dst$;
  } else {
   $$026 = $wn;
   $$0423 = $n$;
   $$pr41 = $0;
   $cnt$024 = 0;
   $s$025 = $dst$;
   while (1) {
    $4 = $$026 >>> 0 >= $$0423 >>> 0;
    if (!($4 | $$026 >>> 0 > 32)) {
     $$1 = $$026;
     $$26 = $$0423;
     $17 = $$pr41;
     $cnt$1 = $cnt$024;
     $s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $4 ? $$0423 : $$026;
    $6 = $$026 - $$04$$0 | 0;
    $7 = _wcsrtombs($s$025, $ws, $$04$$0, 0) | 0;
    if (($7 | 0) == -1) {
     break;
    }
    if (($s$025 | 0) == ($buf | 0)) {
     $$15 = $$0423;
     $s$1 = $buf;
    } else {
     $$15 = $$0423 - $7 | 0;
     $s$1 = $s$025 + $7 | 0;
    }
    $12 = $7 + $cnt$024 | 0;
    $13 = HEAP32[$ws >> 2] | 0;
    if (($13 | 0) == 0 | ($$15 | 0) == 0) {
     $$1 = $6;
     $$26 = $$15;
     $17 = $13;
     $cnt$1 = $12;
     $s$018 = $s$1;
     break L1;
    } else {
     $$026 = $6;
     $$0423 = $$15;
     $$pr41 = $13;
     $cnt$024 = $12;
     $s$025 = $s$1;
    }
   }
   $$1 = $6;
   $$26 = 0;
   $17 = HEAP32[$ws >> 2] | 0;
   $cnt$1 = -1;
   $s$018 = $s$025;
  }
 } while (0);
 L11 : do {
  if (($17 | 0) == 0) {
   $cnt$3 = $cnt$1;
  } else {
   if (($$26 | 0) == 0 | ($$1 | 0) == 0) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;
    $$311 = $$26;
    $21 = $17;
    $cnt$212 = $cnt$1;
    $s$213 = $s$018;
    while (1) {
     $22 = _wcrtomb($s$213, HEAP32[$21 >> 2] | 0, 0) | 0;
     if (($22 + 1 | 0) >>> 0 < 2) {
      break;
     }
     $21 = (HEAP32[$ws >> 2] | 0) + 4 | 0;
     HEAP32[$ws >> 2] = $21;
     $$214 = $$214 + -1 | 0;
     $31 = $cnt$212 + 1 | 0;
     if (($$311 | 0) == ($22 | 0) | ($$214 | 0) == 0) {
      $cnt$3 = $31;
      break L11;
     } else {
      $$311 = $$311 - $22 | 0;
      $cnt$212 = $31;
      $s$213 = $s$213 + $22 | 0;
     }
    }
    if (($22 | 0) == 0) {
     HEAP32[$ws >> 2] = 0;
     $cnt$3 = $cnt$212;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while (0);
 if (!$1) {
  STACKTOP = sp;
  return $cnt$3 | 0;
 }
 HEAP32[$wcs >> 2] = HEAP32[$ws >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $4 = 0, $46 = 0, $49 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do {
  if ($1) {
   $4 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24;
   if (!$4) {
    if (!((HEAP8[$__atoms + 25 >> 0] | 0) == $__ct << 24 >> 24)) {
     break;
    }
   }
   HEAP32[$__a_end >> 2] = $__a + 1;
   HEAP8[$__a >> 0] = $4 ? 43 : 45;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $10 = HEAP8[$__grouping >> 0] | 0;
 if (($10 & 1) == 0) {
  $18 = ($10 & 255) >>> 1;
 } else {
  $18 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($18 | 0) != 0 ? $__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 : 0) {
  $20 = HEAP32[$__g_end >> 2] | 0;
  if (($20 - $__g | 0) >= 160) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $25 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $20 + 4;
  HEAP32[$20 >> 2] = $25;
  HEAP32[$__dc >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $27 = $__atoms + 26 | 0;
 $$01$i = $__atoms;
 while (1) {
  if ((HEAP8[$$01$i >> 0] | 0) == $__ct << 24 >> 24) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $$01$i = $$01$i + 1 | 0;
  if (($$01$i | 0) == ($27 | 0)) {
   $$0$lcssa$i = $27;
   break;
  }
 }
 $34 = $$0$lcssa$i - $__atoms | 0;
 if (($34 | 0) > 23) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__base | 0) == 10 | ($__base | 0) == 8) {
  if (($34 | 0) >= ($__base | 0)) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if (($__base | 0) == 16) {
  if (($34 | 0) >= 22) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (($0 - $__a | 0) >= 3) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$__dc >> 2] = 0;
   $46 = HEAP8[3696 + $34 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $46;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $49 = HEAP8[3696 + $34 >> 0] | 0;
 HEAP32[$__a_end >> 2] = $0 + 1;
 HEAP8[$0 >> 0] = $49;
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $35 = 0, $4 = 0, $47 = 0, $50 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do {
  if ($1) {
   $4 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
   if (!$4) {
    if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
     break;
    }
   }
   HEAP32[$__a_end >> 2] = $__a + 1;
   HEAP8[$__a >> 0] = $4 ? 43 : 45;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 $10 = HEAP8[$__grouping >> 0] | 0;
 if (($10 & 1) == 0) {
  $18 = ($10 & 255) >>> 1;
 } else {
  $18 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($18 | 0) != 0 & ($__ct | 0) == ($__thousands_sep | 0)) {
  $20 = HEAP32[$__g_end >> 2] | 0;
  if (($20 - $__g | 0) >= 160) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $25 = HEAP32[$__dc >> 2] | 0;
  HEAP32[$__g_end >> 2] = $20 + 4;
  HEAP32[$20 >> 2] = $25;
  HEAP32[$__dc >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $27 = $__atoms + 104 | 0;
 $$01$i = $__atoms;
 while (1) {
  if ((HEAP32[$$01$i >> 2] | 0) == ($__ct | 0)) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $$01$i = $$01$i + 4 | 0;
  if (($$01$i | 0) == ($27 | 0)) {
   $$0$lcssa$i = $27;
   break;
  }
 }
 $34 = $$0$lcssa$i - $__atoms | 0;
 $35 = $34 >> 2;
 if (($34 | 0) > 92) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__base | 0) == 16) {
  if (($34 | 0) >= 88) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (($0 - $__a | 0) >= 3) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
    $$0 = -1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$__dc >> 2] = 0;
   $47 = HEAP8[3696 + $35 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $47;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if (($__base | 0) == 10 | ($__base | 0) == 8) {
  if (($35 | 0) >= ($__base | 0)) {
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $50 = HEAP8[3696 + $35 >> 0] | 0;
 HEAP32[$__a_end >> 2] = $0 + 1;
 HEAP8[$0 >> 0] = $50;
 HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $4 = ($n | 0) == 0;
 L1 : do {
  if (($src & 3 | 0) == 0 | $4) {
   $$0$lcssa = $n;
   $$lcssa = $4;
   $s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c & 255;
   $$013 = $n;
   $s$014 = $src;
   while (1) {
    if ((HEAP8[$s$014 >> 0] | 0) == $5 << 24 >> 24) {
     $$0$lcssa34 = $$013;
     $s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = $s$014 + 1 | 0;
    $9 = $$013 + -1 | 0;
    $13 = ($9 | 0) == 0;
    if (($8 & 3 | 0) == 0 | $13) {
     $$0$lcssa = $9;
     $$lcssa = $13;
     $s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;
     $s$014 = $8;
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$3 = 0;
   $s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;
   $s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $15 = $c & 255;
   if ((HEAP8[$s$0$lcssa33 >> 0] | 0) == $15 << 24 >> 24) {
    $$3 = $$0$lcssa34;
    $s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009) | 0;
    L11 : do {
     if ($$0$lcssa34 >>> 0 > 3) {
      $$17 = $$0$lcssa34;
      $w$08 = $s$0$lcssa33;
      while (1) {
       $20 = HEAP32[$w$08 >> 2] ^ $17;
       if ((($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) != 0) {
        $$1$lcssa = $$17;
        $w$0$lcssa = $w$08;
        break L11;
       }
       $26 = $w$08 + 4 | 0;
       $27 = $$17 + -4 | 0;
       if ($27 >>> 0 > 3) {
        $$17 = $27;
        $w$08 = $26;
       } else {
        $$1$lcssa = $27;
        $w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;
      $w$0$lcssa = $s$0$lcssa33;
     }
    } while (0);
    if (($$1$lcssa | 0) == 0) {
     $$3 = 0;
     $s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;
     $s$15 = $w$0$lcssa;
     while (1) {
      if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
       $$3 = $$24;
       $s$2 = $s$15;
       break L8;
      }
      $32 = $s$15 + 1 | 0;
      $$24 = $$24 + -1 | 0;
      if (($$24 | 0) == 0) {
       $$3 = 0;
       $s$2 = $32;
       break;
      } else {
       $s$15 = $32;
      }
     }
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return (($$3 | 0) != 0 ? $s$2 : 0) | 0;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $44 = 0, $6 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $6 = $info + 28 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$6 >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
  $44 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 3]($44, $info, $current_ptr, $path_below, $use_strcmp);
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
  $14 = $info + 20 | 0;
  if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
   HEAP32[$info + 32 >> 2] = $path_below;
   $20 = $info + 44 | 0;
   if ((HEAP32[$20 >> 2] | 0) == 4) {
    STACKTOP = sp;
    return;
   }
   $23 = $info + 52 | 0;
   HEAP8[$23 >> 0] = 0;
   $24 = $info + 53 | 0;
   HEAP8[$24 >> 0] = 0;
   $26 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 15]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
   if ((HEAP8[$24 >> 0] | 0) == 0) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    if ((HEAP8[$23 >> 0] | 0) == 0) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label | 0) == 13) {
     HEAP32[$14 >> 2] = $current_ptr;
     $33 = $info + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
      if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
       HEAP8[$info + 54 >> 0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label | 0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20 >> 2] = 4;
     STACKTOP = sp;
     return;
    }
   } while (0);
   HEAP32[$20 >> 2] = 3;
   STACKTOP = sp;
   return;
  }
 }
 if (($path_below | 0) != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 STACKTOP = sp;
 return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEjRKi($this, $__n, $__u) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__u = $__u | 0;
 var $$0$i = 0, $$0$i19 = 0, $$0$i3 = 0, $$012$i$i = 0, $$03$i$i = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $53 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $4 = $2;
 if (!($1 - $4 >> 2 >>> 0 < $__n >>> 0)) {
  $8 = $this + 4 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $12 = $9 - $4 >> 2;
  $13 = $12 >>> 0 < $__n >>> 0;
  $14 = $13 ? $12 : $__n;
  if (($14 | 0) != 0) {
   $$012$i$i = $14;
   $$03$i$i = $2;
   while (1) {
    HEAP32[$$03$i$i >> 2] = HEAP32[$__u >> 2];
    $$012$i$i = $$012$i$i + -1 | 0;
    if (($$012$i$i | 0) == 0) {
     break;
    } else {
     $$03$i$i = $$03$i$i + 4 | 0;
    }
   }
  }
  if (!$13) {
   $27 = $2 + ($__n << 2) | 0;
   if (($9 | 0) == ($27 | 0)) {
    STACKTOP = sp;
    return;
   }
   HEAP32[$8 >> 2] = $9 + (~(($9 + -4 + (0 - $27) | 0) >>> 2) << 2);
   STACKTOP = sp;
   return;
  }
  $20 = $__n - $12 | 0;
  $$0$i3 = $20;
  $22 = $9;
  while (1) {
   if (($22 | 0) != 0) {
    HEAP32[$22 >> 2] = HEAP32[$__u >> 2];
   }
   $$0$i3 = $$0$i3 + -1 | 0;
   if (($$0$i3 | 0) == 0) {
    break;
   } else {
    $22 = $22 + 4 | 0;
   }
  }
  HEAP32[$8 >> 2] = $9 + ($20 << 2);
  STACKTOP = sp;
  return;
 }
 if (($2 | 0) == 0) {
  $41 = $1;
 } else {
  $33 = $this + 4 | 0;
  $34 = HEAP32[$33 >> 2] | 0;
  if (($34 | 0) != ($2 | 0)) {
   HEAP32[$33 >> 2] = $34 + (~(($34 + -4 + (0 - $4) | 0) >>> 2) << 2);
  }
  __ZdlPv($2);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$33 >> 2] = 0;
  HEAP32[$this >> 2] = 0;
  $41 = 0;
 }
 if ($__n >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $40 = $41;
 if ($40 >> 2 >>> 0 < 536870911) {
  $44 = $40 >> 1;
  $46 = $44 >>> 0 < $__n >>> 0 ? $__n : $44;
  if ($46 >>> 0 > 1073741823) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  } else {
   $$0$i19 = $46;
  }
 } else {
  $$0$i19 = 1073741823;
 }
 $49 = __Znwj($$0$i19 << 2) | 0;
 $50 = $this + 4 | 0;
 HEAP32[$50 >> 2] = $49;
 HEAP32[$this >> 2] = $49;
 HEAP32[$0 >> 2] = $49 + ($$0$i19 << 2);
 $$0$i = $__n;
 $53 = $49;
 while (1) {
  if (($53 | 0) != 0) {
   HEAP32[$53 >> 2] = HEAP32[$__u >> 2];
  }
  $$0$i = $$0$i + -1 | 0;
  if (($$0$i | 0) == 0) {
   break;
  } else {
   $53 = $53 + 4 | 0;
  }
 }
 HEAP32[$50 >> 2] = $49 + ($__n << 2);
 STACKTOP = sp;
 return;
}
function __ZN11SimpleImage19updateIntegralImageEv($this) {
 $this = $this | 0;
 var $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $18 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $39 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $7 = 0, $8 = 0, $i$010 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 16 | 0;
 $1 = $this + 20 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $7 = $2 - $3 >> 2;
 $8 = HEAP32[$this >> 2] | 0;
 $10 = $this + 4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $13 = Math_imul($11 + 1 | 0, $8 + 1 | 0) | 0;
 do {
  if (($7 | 0) == ($13 | 0)) {
   $47 = $8;
   $48 = $11;
  } else {
   if ($7 >>> 0 < $13 >>> 0) {
    __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($0, $13 - $7 | 0);
    $25 = HEAP32[$this >> 2] | 0;
    $27 = HEAP32[$10 >> 2] | 0;
   } else {
    if ($7 >>> 0 > $13 >>> 0) {
     $18 = $3 + ($13 << 2) | 0;
     if (($2 | 0) == ($18 | 0)) {
      $25 = $8;
      $27 = $11;
     } else {
      HEAP32[$1 >> 2] = $2 + (~(($2 + -4 + (0 - $18) | 0) >>> 2) << 2);
      $25 = $8;
      $27 = $11;
     }
    } else {
     $25 = $8;
     $27 = $11;
    }
   }
   $23 = $this + 28 | 0;
   $28 = Math_imul($27 + 1 | 0, $25 + 1 | 0) | 0;
   $29 = $this + 32 | 0;
   $30 = HEAP32[$29 >> 2] | 0;
   $31 = HEAP32[$23 >> 2] | 0;
   $35 = $30 - $31 >> 2;
   if ($35 >>> 0 < $28 >>> 0) {
    __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($23, $28 - $35 | 0);
    $47 = HEAP32[$this >> 2] | 0;
    $48 = HEAP32[$10 >> 2] | 0;
    break;
   }
   if ($35 >>> 0 > $28 >>> 0) {
    $39 = $31 + ($28 << 2) | 0;
    if (($30 | 0) == ($39 | 0)) {
     $47 = $25;
     $48 = $27;
    } else {
     HEAP32[$29 >> 2] = $30 + (~(($30 + -4 + (0 - $39) | 0) >>> 2) << 2);
     $47 = $25;
     $48 = $27;
    }
   } else {
    $47 = $25;
    $48 = $27;
   }
  }
 } while (0);
 $44 = $this + 8 | 0;
 __Z17findIntegralImagePhiiPi(HEAP32[$44 >> 2] | 0, $47, $48, HEAP32[$0 >> 2] | 0);
 $49 = HEAP32[$this >> 2] | 0;
 $50 = HEAP32[$10 >> 2] | 0;
 $51 = Math_imul($50, $49) | 0;
 $53 = __Znaj($51 >>> 0 > 1073741823 ? -1 : $51 << 2) | 0;
 if (($51 | 0) > 0) {
  $$pre15 = HEAP32[$44 >> 2] | 0;
  $i$010 = 0;
  do {
   $57 = HEAPU8[$$pre15 + $i$010 >> 0] | 0;
   $58 = Math_imul($57, $57) | 0;
   HEAP32[$53 + ($i$010 << 2) >> 2] = $58;
   $i$010 = $i$010 + 1 | 0;
  } while (($i$010 | 0) < ($51 | 0));
 }
 __Z17findIntegralImagePiiiS_($53, $49, $50, HEAP32[$this + 28 >> 2] | 0);
 if (($53 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdaPv($53);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $10 = 0, $17 = 0, $19 = 0, $23 = 0, $29 = 0, $33 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $6 = 0, $__loc = 0, $__p$i$i$i$i3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i$i$i$i3 = sp;
 $__loc = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $0 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5144;
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $__p$i$i$i$i3, 124);
 }
 $6 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $10 >> 2 >>> 0 > $6 >>> 0)) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $17 = HEAP32[$10 + ($6 << 2) >> 2] | 0;
 if (($17 | 0) == 0) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 48 >> 2] & 7]($17, 3696, 3728 | 0, $__atoms) | 0;
 $23 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1326] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5304;
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5304, $__p$i$i$i$i3, 124);
 }
 $29 = (HEAP32[5308 >> 2] | 0) + -1 | 0;
 $33 = HEAP32[$23 + 8 >> 2] | 0;
 if (!((HEAP32[$23 + 12 >> 2] | 0) - $33 >> 2 >>> 0 > $29 >>> 0)) {
  $42 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw($42 | 0, 13864, 113);
 }
 $40 = HEAP32[$33 + ($29 << 2) >> 2] | 0;
 if (($40 | 0) == 0) {
  $42 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw($42 | 0, 13864, 113);
 } else {
  $46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 63]($40) | 0;
  HEAP32[$__decimal_point >> 2] = $46;
  $50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 16 >> 2] & 63]($40) | 0;
  HEAP32[$__thousands_sep >> 2] = $50;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$40 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $40);
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $10 = 0, $17 = 0, $19 = 0, $23 = 0, $29 = 0, $33 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $6 = 0, $__loc = 0, $__p$i$i$i$i3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i$i$i$i3 = sp;
 $__loc = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $0 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5152;
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $__p$i$i$i$i3, 124);
 }
 $6 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $10 >> 2 >>> 0 > $6 >>> 0)) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $17 = HEAP32[$10 + ($6 << 2) >> 2] | 0;
 if (($17 | 0) == 0) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] & 7]($17, 3696, 3728 | 0, $__atoms) | 0;
 $23 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1324] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5296;
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5296, $__p$i$i$i$i3, 124);
 }
 $29 = (HEAP32[5300 >> 2] | 0) + -1 | 0;
 $33 = HEAP32[$23 + 8 >> 2] | 0;
 if (!((HEAP32[$23 + 12 >> 2] | 0) - $33 >> 2 >>> 0 > $29 >>> 0)) {
  $42 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw($42 | 0, 13864, 113);
 }
 $40 = HEAP32[$33 + ($29 << 2) >> 2] | 0;
 if (($40 | 0) == 0) {
  $42 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw($42 | 0, 13864, 113);
 } else {
  $46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 63]($40) | 0;
  HEAP8[$__decimal_point >> 0] = $46;
  $50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 16 >> 2] & 63]($40) | 0;
  HEAP8[$__thousands_sep >> 0] = $50;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$40 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $40);
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$012$i$i = 0, $$lcssa6 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $37 = 0, $46 = 0, $49 = 0, $8 = 0, $__ig$011 = 0, $__r$012 = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping >> 0] | 0;
 if (($0 & 1) == 0) {
  $8 = ($0 & 255) >>> 1;
 } else {
  $8 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 if (($8 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (($__g | 0) == ($__g_end | 0)) {
  $19 = $0;
 } else {
  $10 = $__g_end + -4 | 0;
  if ($10 >>> 0 > $__g >>> 0) {
   $$012$i$i = $__g;
   $14 = $10;
   do {
    $12 = HEAP32[$$012$i$i >> 2] | 0;
    HEAP32[$$012$i$i >> 2] = HEAP32[$14 >> 2];
    HEAP32[$14 >> 2] = $12;
    $$012$i$i = $$012$i$i + 4 | 0;
    $14 = $14 + -4 | 0;
   } while ($$012$i$i >>> 0 < $14 >>> 0);
   $19 = HEAP8[$__grouping >> 0] | 0;
  } else {
   $19 = $0;
  }
 }
 if (($19 & 1) == 0) {
  $31 = $__grouping + 1 | 0;
  $34 = ($19 & 255) >>> 1;
 } else {
  $31 = HEAP32[$__grouping + 8 >> 2] | 0;
  $34 = HEAP32[$__grouping + 4 >> 2] | 0;
 }
 $28 = $__g_end + -4 | 0;
 $30 = HEAP8[$31 >> 0] | 0;
 $or$cond210 = $30 << 24 >> 24 < 1 | $30 << 24 >> 24 == 127;
 L18 : do {
  if ($28 >>> 0 > $__g >>> 0) {
   $35 = $31 + $34 | 0;
   $37 = $30;
   $__ig$011 = $31;
   $__r$012 = $__g;
   $or$cond213 = $or$cond210;
   while (1) {
    if (!$or$cond213) {
     if (($37 << 24 >> 24 | 0) != (HEAP32[$__r$012 >> 2] | 0)) {
      break;
     }
    }
    $__ig$011 = ($35 - $__ig$011 | 0) > 1 ? $__ig$011 + 1 | 0 : $__ig$011;
    $__r$012 = $__r$012 + 4 | 0;
    $46 = HEAP8[$__ig$011 >> 0] | 0;
    $or$cond2 = $46 << 24 >> 24 < 1 | $46 << 24 >> 24 == 127;
    if (!($__r$012 >>> 0 < $28 >>> 0)) {
     $$lcssa6 = $46;
     $or$cond2$lcssa = $or$cond2;
     break L18;
    } else {
     $37 = $46;
     $or$cond213 = $or$cond2;
    }
   }
   HEAP32[$__err >> 2] = 4;
   STACKTOP = sp;
   return;
  } else {
   $$lcssa6 = $30;
   $or$cond2$lcssa = $or$cond210;
  }
 } while (0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;
  return;
 }
 $49 = HEAP32[$28 >> 2] | 0;
 if (!($$lcssa6 << 24 >> 24 >>> 0 < $49 >>> 0 | ($49 | 0) == 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$__err >> 2] = 4;
 STACKTOP = sp;
 return;
}
function __ZN23HOGRegressionClassifier14getProbabilityERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $$0$i$i$i = 0, $$0$i$i$i3 = 0, $1 = 0, $11 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $62 = 0.0, $64 = 0.0, $9 = 0, $i$047 = 0, $prob_estimates = 0, sp = 0, $i$047$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $prob_estimates = sp;
 $1 = HEAP32[$this + 44 >> 2] | 0;
 $4 = HEAP32[$this + 48 >> 2] | 0;
 $5 = Math_imul($1 << 3, $4) | 0;
 if (($5 | 0) == 0) {
  $39 = 0;
 } else {
  if ($5 >>> 0 > 1073741823) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  }
  $9 = __Znwj($5 << 2) | 0;
  $$0$i$i$i = $5;
  $11 = $9;
  while (1) {
   if (($11 | 0) != 0) {
    HEAPF32[$11 >> 2] = 0.0;
   }
   $$0$i$i$i = $$0$i$i$i + -1 | 0;
   if (($$0$i$i$i | 0) == 0) {
    $39 = $9;
    break;
   } else {
    $11 = $11 + 4 | 0;
   }
  }
 }
 __ZNK12HOGExtractor13getDescriptorEiiiiPfii($hog, ~~(+($startX | 0) + +(HEAP32[$this + 28 >> 2] | 0) * $scale), ~~(+($startY | 0) + +(HEAP32[$this + 32 >> 2] | 0) * $scale), ~~(+(HEAP32[$this + 36 >> 2] | 0) * $scale), ~~(+(HEAP32[$this + 40 >> 2] | 0) * $scale), $39, $1, $4);
 $40 = $5 | 1;
 if ($40 >>> 0 > 268435455) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $43 = __Znwj($40 << 4) | 0;
 $$0$i$i$i3 = $40;
 $45 = $43;
 while (1) {
  if (($45 | 0) == 0) {
   $47 = 0;
  } else {
   HEAP32[$45 + 0 >> 2] = 0;
   HEAP32[$45 + 4 >> 2] = 0;
   HEAP32[$45 + 8 >> 2] = 0;
   HEAP32[$45 + 12 >> 2] = 0;
   $47 = $45;
  }
  $$0$i$i$i3 = $$0$i$i$i3 + -1 | 0;
  if (($$0$i$i$i3 | 0) == 0) {
   break;
  } else {
   $45 = $47 + 16 | 0;
  }
 }
 if (($5 | 0) > 0) {
  $52 = (Math_imul($1, $4) | 0) << 3;
  $i$047 = 0;
  do {
   $i$047$looptemp = $i$047;
   $i$047 = $i$047 + 1 | 0;
   HEAP32[$43 + ($i$047$looptemp << 4) >> 2] = $i$047;
   HEAPF64[$43 + ($i$047$looptemp << 4) + 8 >> 3] = +HEAPF32[$39 + ($i$047$looptemp << 2) >> 2];
  } while (($i$047 | 0) != ($52 | 0));
 }
 HEAP32[$43 + ($5 << 4) >> 2] = -1;
 +_predict_probability(HEAP32[$this + 24 >> 2] | 0, $43, $prob_estimates);
 $62 = +HEAPF64[$prob_estimates >> 3];
 if (($43 | 0) != 0) {
  __ZdlPv($43);
 }
 $64 = $62;
 if (($39 | 0) == 0) {
  STACKTOP = sp;
  return +$64;
 }
 __ZdlPv($39);
 STACKTOP = sp;
 return +$64;
}
function __Z24findRotatedIntegralImagePhiiPi($img, $xres, $yres, $iimage) {
 $img = $img | 0;
 $xres = $xres | 0;
 $yres = $yres | 0;
 $iimage = $iimage | 0;
 var $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $25 = 0, $30 = 0, $31 = 0, $36 = 0, $44 = 0, $7 = 0, $8 = 0, $x2$08 = 0, $x4$02$us = 0, $y$014 = 0, $y1$012 = 0, $y3$0$in5$us = 0, $y3$0$in5$us$phi = 0, $y3$0$us = 0, $y3$04 = 0, $y3$06$us = 0, sp = 0, $x4$02$us$looptemp = 0;
 sp = STACKTOP;
 $0 = $xres + 2 | 0;
 $1 = $xres + 1 | 0;
 if (($1 | 0) >= 0) {
  _memset($iimage | 0, 0, ($xres << 2) + 8 | 0) | 0;
 }
 if (($yres | 0) >= 0) {
  $y$014 = 0;
  while (1) {
   $8 = Math_imul($y$014, $0) | 0;
   HEAP32[$iimage + ($8 << 2) >> 2] = 0;
   HEAP32[$iimage + ($8 + 1 << 2) >> 2] = 0;
   if (($y$014 | 0) == ($yres | 0)) {
    break;
   } else {
    $y$014 = $y$014 + 1 | 0;
   }
  }
  if (($yres | 0) > 0) {
   $7 = ($xres | 0) > 0;
   $y1$012 = 1;
   while (1) {
    if ($7) {
     $13 = $y1$012 + -1 | 0;
     $14 = Math_imul($13, $0) | 0;
     $15 = Math_imul($y1$012, $0) | 0;
     $16 = Math_imul($13, $xres) | 0;
     $x2$08 = 2;
     do {
      $36 = $x2$08 + -1 | 0;
      $44 = $x2$08 + -2 | 0;
      HEAP32[$iimage + ($x2$08 + $15 << 2) >> 2] = (HEAP32[$iimage + ($36 + $15 << 2) >> 2] | 0) + (HEAP32[$iimage + ($36 + $14 << 2) >> 2] | 0) + (HEAPU8[$img + ($44 + $16) >> 0] | 0) - (HEAP32[$iimage + ($44 + $14 << 2) >> 2] | 0);
      $x2$08 = $x2$08 + 1 | 0;
     } while (($x2$08 | 0) < ($0 | 0));
    }
    if (($y1$012 | 0) == ($yres | 0)) {
     break;
    } else {
     $y1$012 = $y1$012 + 1 | 0;
    }
   }
  }
 }
 $y3$04 = $yres + -1 | 0;
 if (($y3$04 | 0) > 0 & ($xres | 0) > 0) {
  $y3$0$in5$us = $yres;
  $y3$06$us = $y3$04;
 } else {
  STACKTOP = sp;
  return;
 }
 while (1) {
  $21 = Math_imul($y3$0$in5$us, $0) | 0;
  $30 = Math_imul($y3$06$us, $0) | 0;
  $25 = $30 + -2 | 0;
  $x4$02$us = $1;
  do {
   $x4$02$us$looptemp = $x4$02$us;
   $x4$02$us = $x4$02$us + -1 | 0;
   $31 = $iimage + ($x4$02$us$looptemp + $30 << 2) | 0;
   HEAP32[$31 >> 2] = (HEAP32[$iimage + ($x4$02$us + $21 << 2) >> 2] | 0) - (HEAP32[$iimage + ($25 + $x4$02$us$looptemp << 2) >> 2] | 0) + (HEAP32[$31 >> 2] | 0);
  } while (($x4$02$us | 0) > 1);
  $y3$0$us = $y3$06$us + -1 | 0;
  if (($y3$0$us | 0) > 0) {
   $y3$0$in5$us$phi = $y3$06$us;
   $y3$06$us = $y3$0$us;
   $y3$0$in5$us = $y3$0$in5$us$phi;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}
function __Z24findRotatedIntegralImagePiiiS_($img, $xres, $yres, $iimage) {
 $img = $img | 0;
 $xres = $xres | 0;
 $yres = $yres | 0;
 $iimage = $iimage | 0;
 var $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $27 = 0, $42 = 0, $43 = 0, $44 = 0, $54 = 0, $7 = 0, $8 = 0, $x2$08 = 0, $x4$02 = 0, $y$014 = 0, $y1$012 = 0, $y3$0 = 0, $y3$0$in5 = 0, $y3$0$in5$phi = 0, $y3$04 = 0, $y3$06 = 0, sp = 0, $x4$02$looptemp = 0;
 sp = STACKTOP;
 $0 = $xres + 2 | 0;
 $1 = $xres + 1 | 0;
 if (($1 | 0) >= 0) {
  _memset($iimage | 0, 0, ($xres << 2) + 8 | 0) | 0;
 }
 if (($yres | 0) >= 0) {
  $y$014 = 0;
  while (1) {
   $8 = Math_imul($y$014, $0) | 0;
   HEAP32[$iimage + ($8 << 2) >> 2] = 0;
   HEAP32[$iimage + ($8 + 1 << 2) >> 2] = 0;
   if (($y$014 | 0) == ($yres | 0)) {
    break;
   } else {
    $y$014 = $y$014 + 1 | 0;
   }
  }
  if (($yres | 0) > 0) {
   $7 = ($xres | 0) > 0;
   $y1$012 = 1;
   while (1) {
    if ($7) {
     $13 = $y1$012 + -1 | 0;
     $14 = Math_imul($13, $0) | 0;
     $15 = Math_imul($y1$012, $0) | 0;
     $16 = Math_imul($13, $xres) | 0;
     $x2$08 = 2;
     do {
      $19 = $x2$08 + -1 | 0;
      $27 = $x2$08 + -2 | 0;
      HEAP32[$iimage + ($x2$08 + $15 << 2) >> 2] = (HEAP32[$iimage + ($19 + $15 << 2) >> 2] | 0) + (HEAP32[$iimage + ($19 + $14 << 2) >> 2] | 0) + (HEAP32[$img + ($27 + $16 << 2) >> 2] | 0) - (HEAP32[$iimage + ($27 + $14 << 2) >> 2] | 0);
      $x2$08 = $x2$08 + 1 | 0;
     } while (($x2$08 | 0) < ($0 | 0));
    }
    if (($y1$012 | 0) == ($yres | 0)) {
     break;
    } else {
     $y1$012 = $y1$012 + 1 | 0;
    }
   }
  }
 }
 $y3$04 = $yres + -1 | 0;
 if (($y3$04 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $18 = ($xres | 0) > 0;
 $y3$0$in5 = $yres;
 $y3$06 = $y3$04;
 while (1) {
  if ($18) {
   $42 = Math_imul($y3$0$in5, $0) | 0;
   $43 = Math_imul($y3$06, $0) | 0;
   $44 = $43 + -2 | 0;
   $x4$02 = $1;
   do {
    $x4$02$looptemp = $x4$02;
    $x4$02 = $x4$02 + -1 | 0;
    $54 = $iimage + ($x4$02$looptemp + $43 << 2) | 0;
    HEAP32[$54 >> 2] = (HEAP32[$iimage + ($x4$02 + $42 << 2) >> 2] | 0) - (HEAP32[$iimage + ($44 + $x4$02$looptemp << 2) >> 2] | 0) + (HEAP32[$54 >> 2] | 0);
   } while (($x4$02 | 0) > 1);
  }
  $y3$0 = $y3$06 + -1 | 0;
  if (($y3$0 | 0) > 0) {
   $y3$0$in5$phi = $y3$06;
   $y3$06 = $y3$0;
   $y3$0$in5 = $y3$0$in5$phi;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}
function _predict_values($model_, $x, $dec_values) {
 $model_ = $model_ | 0;
 $x = $x | 0;
 $dec_values = $dec_values | 0;
 var $$0 = 0.0, $14 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $27 = 0, $36 = 0.0, $39 = 0, $6 = 0, $8 = 0, $9 = 0, $dec_max_idx$0$lcssa = 0, $dec_max_idx$02 = 0, $dec_max_idx$1 = 0, $i$14 = 0, $i$21 = 0, $lx$07 = 0, $n$0 = 0, $nr_w$016 = 0, $nr_w$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $n$0 = (+HEAPF64[$model_ + 64 >> 3] >= 0.0 & 1) + (HEAP32[$model_ + 52 >> 2] | 0) | 0;
 $6 = HEAP32[$model_ + 56 >> 2] | 0;
 $8 = HEAP32[$model_ + 48 >> 2] | 0;
 $9 = ($8 | 0) == 2;
 if ($9) {
  $nr_w$017 = (HEAP32[$model_ >> 2] | 0) == 4 ? 2 : 1;
  label = 4;
 } else {
  if (($8 | 0) > 0) {
   $nr_w$017 = $8;
   label = 4;
  } else {
   $18 = 1;
   $nr_w$016 = $8;
  }
 }
 if ((label | 0) == 4) {
  _memset($dec_values | 0, 0, $nr_w$017 << 3 | 0) | 0;
  $18 = 0;
  $nr_w$016 = $nr_w$017;
 }
 $14 = HEAP32[$x >> 2] | 0;
 if (!(($14 | 0) == -1)) {
  $17 = $14;
  $lx$07 = $x;
  do {
   if (!(($17 | 0) > ($n$0 | 0) | $18)) {
    $20 = Math_imul($17 + -1 | 0, $nr_w$016) | 0;
    $21 = $lx$07 + 8 | 0;
    $i$14 = 0;
    do {
     $27 = $dec_values + ($i$14 << 3) | 0;
     HEAPF64[$27 >> 3] = +HEAPF64[$27 >> 3] + +HEAPF64[$6 + ($i$14 + $20 << 3) >> 3] * +HEAPF64[$21 >> 3];
     $i$14 = $i$14 + 1 | 0;
    } while (($i$14 | 0) != ($nr_w$016 | 0));
   }
   $lx$07 = $lx$07 + 16 | 0;
   $17 = HEAP32[$lx$07 >> 2] | 0;
  } while (!(($17 | 0) == -1));
 }
 if ($9) {
  $36 = +HEAPF64[$dec_values >> 3];
  if (((HEAP32[$model_ >> 2] | 0) + -11 | 0) >>> 0 < 3) {
   $$0 = $36;
   STACKTOP = sp;
   return +$$0;
  }
  $39 = HEAP32[$model_ + 60 >> 2] | 0;
  $$0 = +(HEAP32[($36 > 0.0 ? $39 : $39 + 4 | 0) >> 2] | 0);
  STACKTOP = sp;
  return +$$0;
 } else {
  if (($8 | 0) > 1) {
   $dec_max_idx$02 = 0;
   $i$21 = 1;
   while (1) {
    $dec_max_idx$1 = +HEAPF64[$dec_values + ($i$21 << 3) >> 3] > +HEAPF64[$dec_values + ($dec_max_idx$02 << 3) >> 3] ? $i$21 : $dec_max_idx$02;
    $i$21 = $i$21 + 1 | 0;
    if (($i$21 | 0) == ($8 | 0)) {
     $dec_max_idx$0$lcssa = $dec_max_idx$1;
     break;
    } else {
     $dec_max_idx$02 = $dec_max_idx$1;
    }
   }
  } else {
   $dec_max_idx$0$lcssa = 0;
  }
  $$0 = +(HEAP32[(HEAP32[$model_ + 60 >> 2] | 0) + ($dec_max_idx$0$lcssa << 2) >> 2] | 0);
  STACKTOP = sp;
  return +$$0;
 }
 return 0.0;
}
function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $27 = 0, $4 = 0, $6 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $4 = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $10 = $info + 16 | 0;
 $11 = $info + 20 | 0;
 $12 = $info + 24 | 0;
 $13 = $info + 28 | 0;
 $14 = $info + 32 | 0;
 $15 = $info + 40 | 0;
 $16 = ($6 | 0) == ($dst_type | 0);
 dest = $10 + 0 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$10 + 36 >> 1] = 0;
 HEAP8[$10 + 38 >> 0] = 0;
 if ($16) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] & 15]($6, $info, $4, $4, 1, 0);
  $dst_ptr$0 = (HEAP32[$12 >> 2] | 0) == 1 ? $4 : 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 }
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 3]($6, $info, $4, 1, 0);
 $27 = HEAP32[$info + 36 >> 2] | 0;
 if (($27 | 0) == 1) {
  if ((HEAP32[$12 >> 2] | 0) != 1) {
   if ((HEAP32[$15 >> 2] | 0) != 0) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;
    return $dst_ptr$0 | 0;
   }
   if ((HEAP32[$13 >> 2] | 0) != 1) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;
    return $dst_ptr$0 | 0;
   }
   if ((HEAP32[$14 >> 2] | 0) != 1) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;
    return $dst_ptr$0 | 0;
   }
  }
  $dst_ptr$0 = HEAP32[$10 >> 2] | 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 } else if (($27 | 0) == 0) {
  if ((HEAP32[$15 >> 2] | 0) != 1) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;
   return $dst_ptr$0 | 0;
  }
  if ((HEAP32[$13 >> 2] | 0) != 1) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;
   return $dst_ptr$0 | 0;
  }
  $dst_ptr$0 = (HEAP32[$14 >> 2] | 0) == 1 ? HEAP32[$11 >> 2] | 0 : 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;
  return $dst_ptr$0 | 0;
 }
 return 0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $10 = 0, $17 = 0, $19 = 0, $23 = 0, $29 = 0, $33 = 0, $40 = 0, $42 = 0, $46 = 0, $6 = 0, $__loc = 0, $__p$i$i$i$i3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i$i$i$i3 = sp;
 $__loc = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $0 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5144;
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $__p$i$i$i$i3, 124);
 }
 $6 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $10 >> 2 >>> 0 > $6 >>> 0)) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $17 = HEAP32[$10 + ($6 << 2) >> 2] | 0;
 if (($17 | 0) == 0) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 48 >> 2] & 7]($17, 3696, 3722 | 0, $__atoms) | 0;
 $23 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1326] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5304;
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5304, $__p$i$i$i$i3, 124);
 }
 $29 = (HEAP32[5308 >> 2] | 0) + -1 | 0;
 $33 = HEAP32[$23 + 8 >> 2] | 0;
 if (!((HEAP32[$23 + 12 >> 2] | 0) - $33 >> 2 >>> 0 > $29 >>> 0)) {
  $42 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw($42 | 0, 13864, 113);
 }
 $40 = HEAP32[$33 + ($29 << 2) >> 2] | 0;
 if (($40 | 0) == 0) {
  $42 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw($42 | 0, 13864, 113);
 } else {
  $46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 16 >> 2] & 63]($40) | 0;
  HEAP32[$__thousands_sep >> 2] = $46;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$40 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $40);
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $10 = 0, $17 = 0, $19 = 0, $23 = 0, $29 = 0, $33 = 0, $40 = 0, $42 = 0, $46 = 0, $6 = 0, $__loc = 0, $__p$i$i$i$i3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i$i$i$i3 = sp;
 $__loc = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $0 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5152;
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $__p$i$i$i$i3, 124);
 }
 $6 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $10 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $10 >> 2 >>> 0 > $6 >>> 0)) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 $17 = HEAP32[$10 + ($6 << 2) >> 2] | 0;
 if (($17 | 0) == 0) {
  $19 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw($19 | 0, 13864, 113);
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] & 7]($17, 3696, 3722 | 0, $__atoms) | 0;
 $23 = HEAP32[$__loc >> 2] | 0;
 if (!((HEAP32[1324] | 0) == -1)) {
  HEAP32[$__p$i$i$i$i3 >> 2] = 5296;
  HEAP32[$__p$i$i$i$i3 + 4 >> 2] = 123;
  HEAP32[$__p$i$i$i$i3 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5296, $__p$i$i$i$i3, 124);
 }
 $29 = (HEAP32[5300 >> 2] | 0) + -1 | 0;
 $33 = HEAP32[$23 + 8 >> 2] | 0;
 if (!((HEAP32[$23 + 12 >> 2] | 0) - $33 >> 2 >>> 0 > $29 >>> 0)) {
  $42 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw($42 | 0, 13864, 113);
 }
 $40 = HEAP32[$33 + ($29 << 2) >> 2] | 0;
 if (($40 | 0) == 0) {
  $42 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw($42 | 0, 13864, 113);
 } else {
  $46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 16 >> 2] & 63]($40) | 0;
  HEAP8[$__thousands_sep >> 0] = $46;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$40 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $40);
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $12 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $29 = 0, $3 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $9 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  $3 = $info + 16 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == 0) {
   HEAP32[$3 >> 2] = $adjustedPtr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   STACKTOP = sp;
   return;
  }
  if (($4 | 0) != ($adjustedPtr | 0)) {
   $12 = $info + 36 | 0;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   STACKTOP = sp;
   return;
  }
  $9 = $info + 24 | 0;
  if ((HEAP32[$9 >> 2] | 0) != 2) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$9 >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 $18 = HEAP32[$this + 12 >> 2] | 0;
 $19 = $this + ($18 << 3) + 16 | 0;
 $21 = HEAP32[$this + 20 >> 2] | 0;
 $22 = $21 >> 8;
 if (($21 & 1 | 0) == 0) {
  $offset_to_base$0$i1 = $22;
 } else {
  $offset_to_base$0$i1 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $22 >> 2] | 0;
 }
 $29 = HEAP32[$this + 16 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$29 >> 2] | 0) + 28 >> 2] & 7]($29, $info, $adjustedPtr + $offset_to_base$0$i1 | 0, ($21 & 2 | 0) != 0 ? $path_below : 2);
 if (($18 | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 $39 = $info + 54 | 0;
 $p$0 = $this + 24 | 0;
 while (1) {
  $41 = HEAP32[$p$0 + 4 >> 2] | 0;
  $42 = $41 >> 8;
  if (($41 & 1 | 0) == 0) {
   $offset_to_base$0$i = $42;
  } else {
   $offset_to_base$0$i = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $42 >> 2] | 0;
  }
  $48 = HEAP32[$p$0 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$48 >> 2] | 0) + 28 >> 2] & 7]($48, $info, $adjustedPtr + $offset_to_base$0$i | 0, ($41 & 2 | 0) != 0 ? $path_below : 2);
  if ((HEAP8[$39 >> 0] | 0) != 0) {
   label = 16;
   break;
  }
  $p$0 = $p$0 + 8 | 0;
  if (!($p$0 >>> 0 < $19 >>> 0)) {
   label = 16;
   break;
  }
 }
 if ((label | 0) == 16) {
  STACKTOP = sp;
  return;
 }
}
function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $11 = 0, $14 = 0, $2 = 0, $21 = 0, $23 = 0, $32 = 0, $43 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $wc;
 $$01 = ($st | 0) == 0 ? 13024 : $st;
 $2 = HEAP32[$$01 >> 2] | 0;
 L1 : do {
  if (($src | 0) == 0) {
   if (($2 | 0) == 0) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   if (($wc | 0) == 0) {
    HEAP32[$0 >> 2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   if (($n | 0) == 0) {
    $$0 = -2;
    STACKTOP = sp;
    return $$0 | 0;
   }
   do {
    if (($2 | 0) == 0) {
     $8 = HEAP8[$src >> 0] | 0;
     $9 = $8 & 255;
     if ($8 << 24 >> 24 > -1) {
      HEAP32[$11 >> 2] = $9;
      $$0 = $8 << 24 >> 24 != 0 & 1;
      STACKTOP = sp;
      return $$0 | 0;
     } else {
      $14 = $9 + -194 | 0;
      if ($14 >>> 0 > 50) {
       break L1;
      }
      $$02 = $n + -1 | 0;
      $c$0 = HEAP32[12808 + ($14 << 2) >> 2] | 0;
      $s$0 = $src + 1 | 0;
      break;
     }
    } else {
     $$02 = $n;
     $c$0 = $2;
     $s$0 = $src;
    }
   } while (0);
   L17 : do {
    if (($$02 | 0) == 0) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0 >> 0] | 0;
     $23 = ($21 & 255) >>> 3;
     if (($23 + -16 | $23 + ($c$0 >> 26)) >>> 0 > 7) {
      break L1;
     } else {
      $$1 = $$02;
      $32 = $21;
      $c$1 = $c$0;
      $s$1 = $s$0;
     }
     while (1) {
      $s$1 = $s$1 + 1 | 0;
      $c$1 = ($32 & 255) + -128 | $c$1 << 6;
      $$1 = $$1 + -1 | 0;
      if (($c$1 | 0) >= 0) {
       break;
      }
      if (($$1 | 0) == 0) {
       $c$2 = $c$1;
       break L17;
      }
      $32 = HEAP8[$s$1 >> 0] | 0;
      if ((($32 & 255) + -128 | 0) >>> 0 > 63) {
       break L1;
      }
     }
     HEAP32[$$01 >> 2] = 0;
     HEAP32[$11 >> 2] = $c$1;
     $$0 = $n - $$1 | 0;
     STACKTOP = sp;
     return $$0 | 0;
    }
   } while (0);
   HEAP32[$$01 >> 2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$$01 >> 2] = 0;
 $43 = ___errno_location() | 0;
 HEAP32[$43 >> 2] = 84;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i569 = 0, $$0$i57 = 0, $0 = 0, $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $5 = 0, $50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = $3;
 if (!($4 - $5 >> 2 >>> 0 < $__n >>> 0)) {
  $$0$i = $__n;
  $10 = $3;
  do {
   if (($10 | 0) == 0) {
    $12 = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    $12 = HEAP32[$2 >> 2] | 0;
   }
   $10 = $12 + 4 | 0;
   HEAP32[$2 >> 2] = $10;
   $$0$i = $$0$i + -1 | 0;
  } while (($$0$i | 0) != 0);
  STACKTOP = sp;
  return;
 }
 $15 = $this + 16 | 0;
 $17 = HEAP32[$this >> 2] | 0;
 $19 = $5 - $17 >> 2;
 $20 = $19 + $__n | 0;
 if ($20 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $22 = $4 - $17 | 0;
 if ($22 >> 2 >>> 0 < 536870911) {
  $25 = $22 >> 1;
  $27 = $25 >>> 0 < $20 >>> 0 ? $20 : $25;
  if (($27 | 0) == 0) {
   $$0$i57 = 0;
   $36 = 0;
  } else {
   $29 = $this + 128 | 0;
   if ((HEAP8[$29 >> 0] | 0) == 0 & $27 >>> 0 < 29) {
    HEAP8[$29 >> 0] = 1;
    $$0$i57 = $27;
    $36 = $15;
   } else {
    $$0$i569 = $27;
    label = 11;
   }
  }
 } else {
  $$0$i569 = 1073741823;
  label = 11;
 }
 if ((label | 0) == 11) {
  $$0$i57 = $$0$i569;
  $36 = __Znwj($$0$i569 << 2) | 0;
 }
 $$0$i2 = $__n;
 $38 = $36 + ($19 << 2) | 0;
 do {
  if (($38 | 0) == 0) {
   $40 = 0;
  } else {
   HEAP32[$38 >> 2] = 0;
   $40 = $38;
  }
  $38 = $40 + 4 | 0;
  $$0$i2 = $$0$i2 + -1 | 0;
 } while (($$0$i2 | 0) != 0);
 $44 = HEAP32[$this >> 2] | 0;
 $48 = (HEAP32[$2 >> 2] | 0) - $44 | 0;
 $50 = $36 + ($19 - ($48 >> 2) << 2) | 0;
 _memcpy($50 | 0, $44 | 0, $48 | 0) | 0;
 HEAP32[$this >> 2] = $50;
 HEAP32[$2 >> 2] = $38;
 HEAP32[$0 >> 2] = $36 + ($$0$i57 << 2);
 if (($44 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (($15 | 0) == ($44 | 0)) {
  HEAP8[$this + 128 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  __ZdlPv($44);
  STACKTOP = sp;
  return;
 }
}
function __ZN12HOGExtractor24createEdgeOrientationMapER11SimpleImage($this, $image) {
 $this = $this | 0;
 $image = $image | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $3 = 0, $32 = 0.0, $34 = 0, $44 = 0.0, $48 = 0.0, $50 = 0.0, $60 = 0, $65 = 0, $74 = 0, $76 = 0, $77 = 0, $angle$1 = 0.0, $mag$01 = 0, $phitmp = 0, $x$02 = 0, $y$03 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $2 = HEAP32[$image + 8 >> 2] | 0;
 $3 = $this + 12 | 0;
 $10 = (HEAP32[$this + 16 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) >> 2;
 HEAP32[$0 >> 2] = 0;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEjRKi($3, $10, $0);
 $11 = $this + 80 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (($12 + -1 | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 $15 = $this + 76 | 0;
 $16 = $this + 24 | 0;
 $18 = HEAP32[$15 >> 2] | 0;
 $76 = $12;
 $y$03 = 1;
 while (1) {
  $17 = Math_imul($18, $y$03) | 0;
  if (($18 + -1 | 0) > 1) {
   $34 = $18;
   $x$02 = 1;
   do {
    $21 = $x$02 + $17 | 0;
    $32 = +((HEAPU8[$2 + ($21 + 1) >> 0] | 0) - (HEAPU8[$2 + ($21 + -1) >> 0] | 0) | 0) * .5;
    $44 = +((HEAPU8[$2 + ($21 + $34) >> 0] | 0) - (HEAPU8[$2 + ($21 - $34) >> 0] | 0) | 0) * .5;
    $48 = +Math_sqrt(+($32 * $32 + $44 * $44));
    if (!($48 >= 0.0)) {
     $angle$1 = 0.0;
     $mag$01 = 0;
    } else {
     $50 = +Math_atan2(+$32, +$44);
     $phitmp = ~~$48;
     if ($50 < 0.0) {
      $angle$1 = $50 + 3.141592653589793;
      $mag$01 = $phitmp;
     } else {
      $angle$1 = $50;
      $mag$01 = $phitmp;
     }
    }
    $60 = (Math_imul($34, $y$03) | 0) + $x$02 | 0;
    HEAP32[(HEAP32[$this >> 2] | 0) + ($60 << 2) >> 2] = HEAP32[(HEAP32[$16 >> 2] | 0) + (~~($angle$1 / 3.141592653589793 * 1799.0) << 2) >> 2];
    $65 = (Math_imul(HEAP32[$15 >> 2] | 0, $y$03) | 0) + $x$02 | 0;
    HEAP32[(HEAP32[$3 >> 2] | 0) + ($65 << 2) >> 2] = $mag$01;
    $x$02 = $x$02 + 1 | 0;
    $34 = HEAP32[$15 >> 2] | 0;
   } while (($x$02 | 0) < ($34 + -1 | 0));
   $74 = HEAP32[$11 >> 2] | 0;
   $77 = $34;
  } else {
   $74 = $76;
   $77 = $18;
  }
  $y$03 = $y$03 + 1 | 0;
  if (($y$03 | 0) >= ($74 + -1 | 0)) {
   break;
  } else {
   $18 = $77;
   $76 = $74;
  }
 }
 STACKTOP = sp;
 return;
}
function __ZNSt3__16vectorI16StrongClassifierNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$0$i20 = 0, $$0$i21 = 0, $$02$i$i = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $6 = 0, $7 = 0, $9 = 0, label = 0, sp = 0, $32$looptemp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $4 = $2;
 $6 = $1 - $4 >> 4;
 $7 = $6 + 1 | 0;
 if ($7 >>> 0 > 268435455) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $9 = $this + 8 | 0;
 $12 = (HEAP32[$9 >> 2] | 0) - $4 | 0;
 if ($12 >> 4 >>> 0 < 134217727) {
  $15 = $12 >> 3;
  $17 = $15 >>> 0 < $7 >>> 0 ? $7 : $15;
  if (($17 | 0) == 0) {
   $$0$i21 = 0;
   $22 = 0;
  } else {
   $$0$i20 = $17;
   label = 5;
  }
 } else {
  $$0$i20 = 268435455;
  label = 5;
 }
 if ((label | 0) == 5) {
  $$0$i21 = $$0$i20;
  $22 = __Znwj($$0$i20 << 4) | 0;
 }
 $21 = $22 + ($6 << 4) | 0;
 $23 = $22 + ($$0$i21 << 4) | 0;
 if (($21 | 0) == 0) {
  $29 = $1;
  $30 = $2;
 } else {
  HEAP32[$21 >> 2] = 0;
  HEAP32[$22 + ($6 << 4) + 4 >> 2] = 0;
  HEAP32[$22 + ($6 << 4) + 8 >> 2] = 0;
  __ZN16StrongClassifieraSERKS_($21, $__x) | 0;
  $29 = HEAP32[$0 >> 2] | 0;
  $30 = HEAP32[$this >> 2] | 0;
 }
 $27 = $22 + ($7 << 4) | 0;
 if (($29 | 0) == ($30 | 0)) {
  $37 = $21;
  $40 = $29;
  $43 = $29;
 } else {
  $$02$i$i = $29;
  $32 = $21;
  do {
   $32$looptemp = $32;
   $32 = $32 + -16 | 0;
   $$02$i$i = $$02$i$i + -16 | 0;
   HEAP32[$32 >> 2] = 0;
   HEAP32[$32$looptemp + -12 >> 2] = 0;
   HEAP32[$32$looptemp + -8 >> 2] = 0;
   __ZN16StrongClassifieraSERKS_($32, $$02$i$i) | 0;
  } while (($$02$i$i | 0) != ($30 | 0));
  $37 = $32;
  $40 = HEAP32[$this >> 2] | 0;
  $43 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$this >> 2] = $37;
 HEAP32[$0 >> 2] = $27;
 HEAP32[$9 >> 2] = $23;
 $39 = $43;
 while (1) {
  if (($39 | 0) == ($40 | 0)) {
   break;
  }
  $41 = $39 + -16 | 0;
  __ZN16StrongClassifierD2Ev($41);
  $39 = $41;
 }
 if (($40 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv($40);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$01$i = 0, $$01$i7 = 0, $0 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $37 = 0, $4 = 0, $__ndflt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__ndflt = sp;
 HEAP32[$__ndflt + 0 >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 $0 = HEAP8[$__dflt >> 0] | 0;
 if (($0 & 1) == 0) {
  $12 = $__dflt + 1 | 0;
  $13 = ($0 & 255) >>> 1;
  $15 = $__dflt + 1 | 0;
 } else {
  $4 = HEAP32[$__dflt + 8 >> 2] | 0;
  $12 = $4;
  $13 = HEAP32[$__dflt + 4 >> 2] | 0;
  $15 = $4;
 }
 $11 = $12 + $13 | 0;
 if ($15 >>> 0 < $11 >>> 0) {
  $$01$i7 = $15;
  do {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$$01$i7 >> 0] | 0);
   $$01$i7 = $$01$i7 + 1 | 0;
  } while (($$01$i7 | 0) != ($11 | 0));
  $25 = ($__c | 0) == -1 ? -1 : $__c << 1;
  if ((HEAP8[$__ndflt >> 0] & 1) == 0) {
   $37 = $25;
   label = 9;
  } else {
   $29 = $25;
   $30 = HEAP32[$__ndflt + 8 >> 2] | 0;
  }
 } else {
  $37 = ($__c | 0) == -1 ? -1 : $__c << 1;
  label = 9;
 }
 if ((label | 0) == 9) {
  $29 = $37;
  $30 = $__ndflt + 1 | 0;
 }
 $31 = _catgets($29 | 0, $__set | 0, $__msgid | 0, $30 | 0) | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $32 = _strlen($31 | 0) | 0;
 $33 = $31 + $32 | 0;
 if (($32 | 0) > 0) {
  $$01$i = $31;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;
  return;
 }
 do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$$01$i >> 0] | 0);
  $$01$i = $$01$i + 1 | 0;
 } while (($$01$i | 0) != ($33 | 0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $33 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $2 = HEAP32[$1 >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5144;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy, 124);
 }
 $8 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $12 = HEAP32[$2 + 8 >> 2] | 0;
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $12 >> 2 >>> 0 > $8 >>> 0)) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 $19 = HEAP32[$12 + ($8 << 2) >> 2] | 0;
 if (($19 | 0) == 0) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 $23 = HEAP32[$__e >> 2] | 0;
 $24 = $this + 8 | 0;
 $28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 4 >> 2] & 63]($24) | 0;
 HEAP32[$0 >> 2] = $23;
 $29 = $28 + 288 | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $33 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $28, $29, $19, $__err, 0) | 0) - $28 | 0;
 if (($33 | 0) >= 288) {
  $38 = HEAP32[$__b >> 2] | 0;
  HEAP32[$agg$result >> 2] = $38;
  STACKTOP = sp;
  return;
 }
 HEAP32[$__tm + 16 >> 2] = (($33 | 0) / 12 | 0 | 0) % 12 | 0;
 $38 = HEAP32[$__b >> 2] | 0;
 HEAP32[$agg$result >> 2] = $38;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $33 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $2 = HEAP32[$1 >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5152;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy, 124);
 }
 $8 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $12 = HEAP32[$2 + 8 >> 2] | 0;
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $12 >> 2 >>> 0 > $8 >>> 0)) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 $19 = HEAP32[$12 + ($8 << 2) >> 2] | 0;
 if (($19 | 0) == 0) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 $23 = HEAP32[$__e >> 2] | 0;
 $24 = $this + 8 | 0;
 $28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 4 >> 2] & 63]($24) | 0;
 HEAP32[$0 >> 2] = $23;
 $29 = $28 + 288 | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $33 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $28, $29, $19, $__err, 0) | 0) - $28 | 0;
 if (($33 | 0) >= 288) {
  $38 = HEAP32[$__b >> 2] | 0;
  HEAP32[$agg$result >> 2] = $38;
  STACKTOP = sp;
  return;
 }
 HEAP32[$__tm + 16 >> 2] = (($33 | 0) / 12 | 0 | 0) % 12 | 0;
 $38 = HEAP32[$__b >> 2] | 0;
 HEAP32[$agg$result >> 2] = $38;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $37 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $2 = HEAP32[$1 >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5144;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy, 124);
 }
 $8 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $12 = HEAP32[$2 + 8 >> 2] | 0;
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $12 >> 2 >>> 0 > $8 >>> 0)) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 $19 = HEAP32[$12 + ($8 << 2) >> 2] | 0;
 if (($19 | 0) == 0) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 $23 = HEAP32[$__e >> 2] | 0;
 $24 = $this + 8 | 0;
 $27 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$24 >> 2] >> 2] & 63]($24) | 0;
 HEAP32[$0 >> 2] = $23;
 $28 = $27 + 168 | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $32 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $27, $28, $19, $__err, 0) | 0) - $27 | 0;
 if (($32 | 0) >= 168) {
  $37 = HEAP32[$__b >> 2] | 0;
  HEAP32[$agg$result >> 2] = $37;
  STACKTOP = sp;
  return;
 }
 HEAP32[$__tm + 24 >> 2] = (($32 | 0) / 12 | 0 | 0) % 7 | 0;
 $37 = HEAP32[$__b >> 2] | 0;
 HEAP32[$agg$result >> 2] = $37;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $37 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $2 = HEAP32[$1 >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5152;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy, 124);
 }
 $8 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $12 = HEAP32[$2 + 8 >> 2] | 0;
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $12 >> 2 >>> 0 > $8 >>> 0)) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 $19 = HEAP32[$12 + ($8 << 2) >> 2] | 0;
 if (($19 | 0) == 0) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 $23 = HEAP32[$__e >> 2] | 0;
 $24 = $this + 8 | 0;
 $27 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$24 >> 2] >> 2] & 63]($24) | 0;
 HEAP32[$0 >> 2] = $23;
 $28 = $27 + 168 | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $32 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $27, $28, $19, $__err, 0) | 0) - $27 | 0;
 if (($32 | 0) >= 168) {
  $37 = HEAP32[$__b >> 2] | 0;
  HEAP32[$agg$result >> 2] = $37;
  STACKTOP = sp;
  return;
 }
 HEAP32[$__tm + 24 >> 2] = (($32 | 0) / 12 | 0 | 0) % 7 | 0;
 $37 = HEAP32[$__b >> 2] | 0;
 HEAP32[$agg$result >> 2] = $37;
 STACKTOP = sp;
 return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11724 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11712 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11700 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11688 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11676 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11664 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11652 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11640 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11628 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11616 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11604 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11592 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11580 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11568 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11556 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11544 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11532 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11520 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11508 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11496 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11484 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11472 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11460 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11448);
 STACKTOP = sp;
 return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10884 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10872 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10860 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10848 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10836 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10824 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10812 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10800 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10788 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10776 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10764 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10752 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10740 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10728 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10716 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10704 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10692 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10680 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10668 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10656 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10644 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10632 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10620 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10608);
 STACKTOP = sp;
 return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10572 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10560 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10548 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10536 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10524 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10512 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10500 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10488 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10476 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10464 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10452 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10440 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10428 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10416 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10404 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10392 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10380 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10368 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10356 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10344 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10332 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10320 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10308 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10296);
 STACKTOP = sp;
 return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10244 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10232 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10220 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10208 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10196 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10184 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10172 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10160 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10148 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10136 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10124 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10112 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10100 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10088 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10076 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10064 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10052 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10040 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10028 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10016 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10004 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9992 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9980 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9968);
 STACKTOP = sp;
 return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $agg$result = $agg$result | 0;
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 if (($0 | 0) == 0) {
  HEAP32[$agg$result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $5 = $2 - $3 >> 2;
 $6 = $__iob + 12 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $__ns$0 = ($7 | 0) > ($5 | 0) ? $7 - $5 | 0 : 0;
 $10 = $__op;
 $11 = $10 - $3 | 0;
 $12 = $11 >> 2;
 if (($11 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $12) | 0) != ($12 | 0)) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 }
 do {
  if (($__ns$0 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns$0, $__fl);
   if ((HEAP8[$__sp >> 0] & 1) == 0) {
    $29 = $__sp + 4 | 0;
   } else {
    $29 = HEAP32[$__sp + 8 >> 2] | 0;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $29, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;
   return;
  }
 } while (0);
 $32 = $2 - $10 | 0;
 $33 = $32 >> 2;
 if (($32 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $33) | 0) != ($33 | 0)) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$6 >> 2] = 0;
 HEAP32[$agg$result >> 2] = $0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $27 = 0, $31 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp;
 $__e = sp + 4 | 0;
 $0 = ($__c | 0) == -1;
 L1 : do {
  if (!$0) {
   HEAP8[$__1buf >> 0] = $__c;
   if ((HEAP8[$this + 44 >> 0] | 0) != 0) {
    if ((_fwrite($__1buf | 0, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$__extbe >> 2] = $__extbuf;
   $9 = $__1buf + 1 | 0;
   $10 = $this + 36 | 0;
   $11 = $this + 40 | 0;
   $12 = $__extbuf + 8 | 0;
   $13 = $__extbuf;
   $14 = $this + 32 | 0;
   $pbase$0 = $__1buf;
   while (1) {
    $15 = HEAP32[$10 >> 2] | 0;
    $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 15]($15, HEAP32[$11 >> 2] | 0, $pbase$0, $9, $__e, $__extbuf, $12, $__extbe) | 0;
    if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
     $$0 = -1;
     label = 12;
     break;
    }
    if (($20 | 0) == 3) {
     label = 7;
     break;
    }
    $27 = ($20 | 0) == 1;
    if (!($20 >>> 0 < 2)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $31 = (HEAP32[$__extbe >> 2] | 0) - $13 | 0;
    if ((_fwrite($__extbuf | 0, 1, $31 | 0, HEAP32[$14 >> 2] | 0) | 0) != ($31 | 0)) {
     $$0 = -1;
     label = 12;
     break;
    }
    if ($27) {
     $pbase$0 = $27 ? HEAP32[$__e >> 2] | 0 : $pbase$0;
    } else {
     break L1;
    }
   }
   if ((label | 0) == 7) {
    if ((_fwrite($pbase$0 | 0, 1, 1, HEAP32[$14 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 12) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
 } while (0);
 $$0 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $26 = 0, $30 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp;
 $__extbe = sp + 4 | 0;
 $__e = sp + 8 | 0;
 $0 = ($__c | 0) == -1;
 L1 : do {
  if (!$0) {
   HEAP32[$__1buf >> 2] = $__c;
   if ((HEAP8[$this + 44 >> 0] | 0) != 0) {
    if ((_fwrite($__1buf | 0, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$__extbe >> 2] = $__extbuf;
   $8 = $__1buf + 4 | 0;
   $9 = $this + 36 | 0;
   $10 = $this + 40 | 0;
   $11 = $__extbuf + 8 | 0;
   $12 = $__extbuf;
   $13 = $this + 32 | 0;
   $pbase$0 = $__1buf;
   while (1) {
    $14 = HEAP32[$9 >> 2] | 0;
    $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] & 15]($14, HEAP32[$10 >> 2] | 0, $pbase$0, $8, $__e, $__extbuf, $11, $__extbe) | 0;
    if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
     $$0 = -1;
     label = 12;
     break;
    }
    if (($19 | 0) == 3) {
     label = 7;
     break;
    }
    $26 = ($19 | 0) == 1;
    if (!($19 >>> 0 < 2)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $30 = (HEAP32[$__extbe >> 2] | 0) - $12 | 0;
    if ((_fwrite($__extbuf | 0, 1, $30 | 0, HEAP32[$13 >> 2] | 0) | 0) != ($30 | 0)) {
     $$0 = -1;
     label = 12;
     break;
    }
    if ($26) {
     $pbase$0 = $26 ? HEAP32[$__e >> 2] | 0 : $pbase$0;
    } else {
     break L1;
    }
   }
   if ((label | 0) == 7) {
    if ((_fwrite($pbase$0 | 0, 1, 1, HEAP32[$13 >> 2] | 0) | 0) == 1) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;
    return $$0 | 0;
   } else if ((label | 0) == 12) {
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
 } while (0);
 $$0 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5480] | 0) != 0) {
  $8 = HEAP32[1368] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((___cxa_guard_acquire(5480) | 0) == 0) {
  $8 = HEAP32[1368] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((HEAP8[12128] | 0) == 0) {
  if ((___cxa_guard_acquire(12128) | 0) != 0) {
   _memset(11960, 0, 168) | 0;
   ___cxa_atexit(128, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(12128);
  }
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11960, 12136) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11972 | 0, 12168) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11984 | 0, 12200) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11996 | 0, 12232) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12008 | 0, 12272) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12020 | 0, 12312) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12032 | 0, 12344) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12044 | 0, 12384) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12056 | 0, 12400) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12068 | 0, 12416) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12080 | 0, 12432) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12092 | 0, 12448) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12104 | 0, 12464) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12116 | 0, 12480) | 0;
 HEAP32[1368] = 11960;
 ___cxa_guard_release(5480);
 $8 = HEAP32[1368] | 0;
 STACKTOP = sp;
 return $8 | 0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5464] | 0) != 0) {
  $8 = HEAP32[1364] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((___cxa_guard_acquire(5464) | 0) == 0) {
  $8 = HEAP32[1364] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((HEAP8[12664] | 0) == 0) {
  if ((___cxa_guard_acquire(12664) | 0) != 0) {
   _memset(12496, 0, 168) | 0;
   ___cxa_atexit(127, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(12664);
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12496, 12672) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12508 | 0, 12680) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12520 | 0, 12688) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12532 | 0, 12696) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12544 | 0, 12712) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12556 | 0, 12728) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12568 | 0, 12736) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12580 | 0, 12752) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12592 | 0, 12760) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12604 | 0, 12768) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12616 | 0, 12776) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12628 | 0, 12784) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12640 | 0, 12792) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12652 | 0, 12800) | 0;
 HEAP32[1364] = 12496;
 ___cxa_guard_release(5464);
 $8 = HEAP32[1364] | 0;
 STACKTOP = sp;
 return $8 | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $1 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $28 = 0, $4 = 0, $43 = 0, $8 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__res_arg >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 $1 = HEAP8[$this >> 0] | 0;
 if (($1 & 1) == 0) {
  $22 = 10;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $22 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (($8 & 1) == 0) {
  $15 = ($8 & 255) >>> 1;
 } else {
  $15 = HEAP32[$this + 4 >> 2] | 0;
 }
 $16 = $15 >>> 0 > $__res_arg >>> 0 ? $15 : $__res_arg;
 if ($16 >>> 0 < 11) {
  $21 = 10;
 } else {
  $21 = ($16 + 16 & -16) + -1 | 0;
 }
 if (($21 | 0) == ($22 | 0)) {
  STACKTOP = sp;
  return;
 }
 do {
  if (($21 | 0) == 10) {
   $__new_data$1 = $this + 1 | 0;
   $__now_long$0$off0 = 0;
   $__p$0 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off0 = 1;
  } else {
   $28 = $21 + 1 | 0;
   if ($21 >>> 0 > $22 >>> 0) {
    $__new_data$0 = __Znwj($28) | 0;
   } else {
    $__new_data$0 = __Znwj($28) | 0;
   }
   if (($8 & 1) == 0) {
    $__new_data$1 = $__new_data$0;
    $__now_long$0$off0 = 1;
    $__p$0 = $this + 1 | 0;
    $__was_long$0$off0 = 0;
    break;
   } else {
    $__new_data$1 = $__new_data$0;
    $__now_long$0$off0 = 1;
    $__p$0 = HEAP32[$this + 8 >> 2] | 0;
    $__was_long$0$off0 = 1;
    break;
   }
  }
 } while (0);
 if (($8 & 1) == 0) {
  $43 = ($8 & 255) >>> 1;
 } else {
  $43 = HEAP32[$this + 4 >> 2] | 0;
 }
 _memcpy($__new_data$1 | 0, $__p$0 | 0, $43 + 1 | 0) | 0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  HEAP32[$this >> 2] = $21 + 1 | 1;
  HEAP32[$this + 4 >> 2] = $15;
  HEAP32[$this + 8 >> 2] = $__new_data$1;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$this >> 0] = $15 << 1;
  STACKTOP = sp;
  return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $34 = 0, $8 = 0, $__t$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $2 = HEAP32[$1 >> 2] | 0;
 if (!((HEAP32[1286] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5144;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5144, $$byval_copy, 124);
 }
 $8 = (HEAP32[5148 >> 2] | 0) + -1 | 0;
 $12 = HEAP32[$2 + 8 >> 2] | 0;
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $12 >> 2 >>> 0 > $8 >>> 0)) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 $19 = HEAP32[$12 + ($8 << 2) >> 2] | 0;
 if (($19 | 0) == 0) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 $23 = $__tm + 20 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $25 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $19, 4) | 0;
 if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
  $34 = HEAP32[$__b >> 2] | 0;
  HEAP32[$agg$result >> 2] = $34;
  STACKTOP = sp;
  return;
 }
 if (($25 | 0) < 69) {
  $__t$0$i = $25 + 2e3 | 0;
 } else {
  $__t$0$i = ($25 + -69 | 0) >>> 0 < 31 ? $25 + 1900 | 0 : $25;
 }
 HEAP32[$23 >> 2] = $__t$0$i + -1900;
 $34 = HEAP32[$__b >> 2] | 0;
 HEAP32[$agg$result >> 2] = $34;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $34 = 0, $8 = 0, $__t$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $2 = HEAP32[$1 >> 2] | 0;
 if (!((HEAP32[1288] | 0) == -1)) {
  HEAP32[$$byval_copy >> 2] = 5152;
  HEAP32[$$byval_copy + 4 >> 2] = 123;
  HEAP32[$$byval_copy + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5152, $$byval_copy, 124);
 }
 $8 = (HEAP32[5156 >> 2] | 0) + -1 | 0;
 $12 = HEAP32[$2 + 8 >> 2] | 0;
 if (!((HEAP32[$2 + 12 >> 2] | 0) - $12 >> 2 >>> 0 > $8 >>> 0)) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 $19 = HEAP32[$12 + ($8 << 2) >> 2] | 0;
 if (($19 | 0) == 0) {
  $21 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw($21 | 0, 13864, 113);
 }
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 $23 = $__tm + 20 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $25 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $19, 4) | 0;
 if ((HEAP32[$__err >> 2] & 4 | 0) != 0) {
  $34 = HEAP32[$__b >> 2] | 0;
  HEAP32[$agg$result >> 2] = $34;
  STACKTOP = sp;
  return;
 }
 if (($25 | 0) < 69) {
  $__t$0$i = $25 + 2e3 | 0;
 } else {
  $__t$0$i = ($25 + -69 | 0) >>> 0 < 31 ? $25 + 1900 | 0 : $25;
 }
 HEAP32[$23 >> 2] = $__t$0$i + -1900;
 $34 = HEAP32[$__b >> 2] | 0;
 HEAP32[$agg$result >> 2] = $34;
 STACKTOP = sp;
 return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $agg$result = $agg$result | 0;
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $10 = 0, $2 = 0, $27 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 if (($0 | 0) == 0) {
  HEAP32[$agg$result >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = $2 - $3 | 0;
 $5 = $__iob + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $__ns$0 = ($6 | 0) > ($4 | 0) ? $6 - $4 | 0 : 0;
 $9 = $__op;
 $10 = $9 - $3 | 0;
 if (($10 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $10) | 0) != ($10 | 0)) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 }
 do {
  if (($__ns$0 | 0) > 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp, $__ns$0, $__fl);
   if ((HEAP8[$__sp >> 0] & 1) == 0) {
    $27 = $__sp + 1 | 0;
   } else {
    $27 = HEAP32[$__sp + 8 >> 2] | 0;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $27, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   STACKTOP = sp;
   return;
  }
 } while (0);
 $30 = $2 - $9 | 0;
 if (($30 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $30) | 0) != ($30 | 0)) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$5 >> 2] = 0;
 HEAP32[$agg$result >> 2] = $0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ((HEAP8[$this >> 0] & 1) == 0) {
  $20 = $this + 4 | 0;
 } else {
  $20 = HEAP32[$this + 8 >> 2] | 0;
 }
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 2) {
   $17 = 2;
  } else {
   $17 = $12 + 4 & -4;
  }
 } else {
  $17 = 1073741807;
 }
 $18 = __Znwj($17 << 2) | 0;
 if (($__n_copy | 0) != 0) {
  _wmemcpy($18, $20, $__n_copy) | 0;
 }
 if (($__n_add | 0) != 0) {
  _wmemcpy($18 + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add) | 0;
 }
 $23 = $__old_sz - $__n_del | 0;
 if (($23 | 0) != ($__n_copy | 0)) {
  _wmemcpy($18 + ($__n_add + $__n_copy << 2) | 0, $20 + ($__n_del + $__n_copy << 2) | 0, $23 - $__n_copy | 0) | 0;
 }
 if (($__old_cap | 0) == 1) {
  $29 = $this + 8 | 0;
  HEAP32[$29 >> 2] = $18;
  $30 = $17 | 1;
  HEAP32[$this >> 2] = $30;
  $31 = $23 + $__n_add | 0;
  $32 = $this + 4 | 0;
  HEAP32[$32 >> 2] = $31;
  $33 = $18 + ($31 << 2) | 0;
  HEAP32[$33 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 __ZdlPv($20);
 $29 = $this + 8 | 0;
 HEAP32[$29 >> 2] = $18;
 $30 = $17 | 1;
 HEAP32[$this >> 2] = $30;
 $31 = $23 + $__n_add | 0;
 $32 = $this + 4 | 0;
 HEAP32[$32 >> 2] = $31;
 $33 = $18 + ($31 << 2) | 0;
 HEAP32[$33 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $$sink = 0, $1 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $29 = 0, $4 = 0, $44 = 0, $8 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__res_arg >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 $1 = HEAP8[$this >> 0] | 0;
 if (($1 & 1) == 0) {
  $22 = 1;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $22 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (($8 & 1) == 0) {
  $15 = ($8 & 255) >>> 1;
 } else {
  $15 = HEAP32[$this + 4 >> 2] | 0;
 }
 $16 = $15 >>> 0 > $__res_arg >>> 0 ? $15 : $__res_arg;
 if ($16 >>> 0 < 2) {
  $21 = 1;
 } else {
  $21 = ($16 + 4 & -4) + -1 | 0;
 }
 if (($21 | 0) == ($22 | 0)) {
  STACKTOP = sp;
  return;
 }
 do {
  if (($21 | 0) == 1) {
   $__new_data$1 = $this + 4 | 0;
   $__now_long$0$off0 = 0;
   $__p$0 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off0 = 1;
  } else {
   $29 = ($21 << 2) + 4 | 0;
   if ($21 >>> 0 > $22 >>> 0) {
    $$sink = __Znwj($29) | 0;
   } else {
    $$sink = __Znwj($29) | 0;
   }
   if (($8 & 1) == 0) {
    $__new_data$1 = $$sink;
    $__now_long$0$off0 = 1;
    $__p$0 = $this + 4 | 0;
    $__was_long$0$off0 = 0;
    break;
   } else {
    $__new_data$1 = $$sink;
    $__now_long$0$off0 = 1;
    $__p$0 = HEAP32[$this + 8 >> 2] | 0;
    $__was_long$0$off0 = 1;
    break;
   }
  }
 } while (0);
 if (($8 & 1) == 0) {
  $44 = ($8 & 255) >>> 1;
 } else {
  $44 = HEAP32[$this + 4 >> 2] | 0;
 }
 _wmemcpy($__new_data$1, $__p$0, $44 + 1 | 0) | 0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  HEAP32[$this >> 2] = $21 + 1 | 1;
  HEAP32[$this + 4 >> 2] = $15;
  HEAP32[$this + 8 >> 2] = $__new_data$1;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$this >> 0] = $15 << 1;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ((HEAP8[$this >> 0] & 1) == 0) {
  $19 = $this + 1 | 0;
 } else {
  $19 = HEAP32[$this + 8 >> 2] | 0;
 }
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 11) {
   $16 = 11;
  } else {
   $16 = $12 + 16 & -16;
  }
 } else {
  $16 = -17;
 }
 $17 = __Znwj($16) | 0;
 if (($__n_copy | 0) != 0) {
  _memcpy($17 | 0, $19 | 0, $__n_copy | 0) | 0;
 }
 if (($__n_add | 0) != 0) {
  _memcpy($17 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0;
 }
 $22 = $__old_sz - $__n_del | 0;
 if (($22 | 0) != ($__n_copy | 0)) {
  _memcpy($17 + ($__n_add + $__n_copy) | 0, $19 + ($__n_del + $__n_copy) | 0, $22 - $__n_copy | 0) | 0;
 }
 if (($__old_cap | 0) == 10) {
  $28 = $this + 8 | 0;
  HEAP32[$28 >> 2] = $17;
  $29 = $16 | 1;
  HEAP32[$this >> 2] = $29;
  $30 = $22 + $__n_add | 0;
  $31 = $this + 4 | 0;
  HEAP32[$31 >> 2] = $30;
  $32 = $17 + $30 | 0;
  HEAP8[$32 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 __ZdlPv($19);
 $28 = $this + 8 | 0;
 HEAP32[$28 >> 2] = $17;
 $29 = $16 | 1;
 HEAP32[$this >> 2] = $29;
 $30 = $22 + $__n_add | 0;
 $31 = $this + 4 | 0;
 HEAP32[$31 >> 2] = $30;
 $32 = $17 + $30 | 0;
 HEAP8[$32 >> 0] = 0;
 STACKTOP = sp;
 return;
}
function __ZN18CascadedClassifier4loadEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var $$lcssa15$i = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i$019$i = 0, $i$039 = 0, $nElements = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $nElements = sp + 16 | 0;
 $temp = sp;
 _fread($nElements | 0, 4, 1, $fil | 0) | 0;
 $0 = HEAP32[$nElements >> 2] | 0;
 if (($0 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $2 = $this + 4 | 0;
 $3 = $this + 8 | 0;
 $4 = $temp + 4 | 0;
 $i$039 = 0;
 do {
  HEAP32[$temp + 0 >> 2] = 0;
  HEAP32[$temp + 4 >> 2] = 0;
  HEAP32[$temp + 8 >> 2] = 0;
  HEAP32[$temp + 12 >> 2] = 0;
  __ZN16StrongClassifier4loadEP8_IO_FILE($temp, $fil);
  $5 = HEAP32[$2 >> 2] | 0;
  if (($5 | 0) == (HEAP32[$3 >> 2] | 0)) {
   __ZNSt3__16vectorI16StrongClassifierNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this, $temp);
  } else {
   if (($5 | 0) == 0) {
    $12 = 0;
   } else {
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    __ZN16StrongClassifieraSERKS_($5, $temp) | 0;
    $12 = HEAP32[$2 >> 2] | 0;
   }
   HEAP32[$2 >> 2] = $12 + 16;
  }
  $13 = HEAP32[$4 >> 2] | 0;
  $14 = HEAP32[$temp >> 2] | 0;
  $15 = $14;
  if (($13 | 0) == ($14 | 0)) {
   $$lcssa15$i = $13;
  } else {
   $i$019$i = 0;
   do {
    $18 = HEAP32[$14 + ($i$019$i << 2) >> 2] | 0;
    if (($18 | 0) != 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2] & 255]($18);
    }
    $i$019$i = $i$019$i + 1 | 0;
   } while ($i$019$i >>> 0 < $13 - $15 >> 2 >>> 0);
   $$lcssa15$i = $14;
  }
  if (($$lcssa15$i | 0) != 0) {
   if (($13 | 0) != ($$lcssa15$i | 0)) {
    HEAP32[$4 >> 2] = $13 + (~(($13 + -4 + (0 - $15) | 0) >>> 2) << 2);
   }
   __ZdlPv($$lcssa15$i);
  }
  $i$039 = $i$039 + 1 | 0;
 } while (($i$039 | 0) < ($0 | 0));
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$01$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $8 = 0, $9 = 0, $__nar = 0, $fmt$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $fmt$i = sp + 100 | 0;
 $__nar = sp;
 HEAP8[$fmt$i >> 0] = 37;
 $2 = $fmt$i + 1 | 0;
 HEAP8[$2 >> 0] = $__fmt;
 $3 = $fmt$i + 2 | 0;
 HEAP8[$3 >> 0] = $__mod;
 HEAP8[$fmt$i + 3 >> 0] = 0;
 if (!($__mod << 24 >> 24 == 0)) {
  HEAP8[$2 >> 0] = $__mod;
  HEAP8[$3 >> 0] = $__fmt;
 }
 $8 = _strftime_l($__nar | 0, 100, $fmt$i | 0, $__tm | 0, HEAP32[$this + 8 >> 2] | 0) | 0;
 $9 = $__nar + $8 | 0;
 $10 = HEAP32[$__s >> 2] | 0;
 if (($8 | 0) == 0) {
  $30 = $10;
  HEAP32[$agg$result >> 2] = $30;
  STACKTOP = sp;
  return;
 } else {
  $$01$i$i = $__nar;
  $14 = $10;
  $27 = $10;
 }
 while (1) {
  $12 = HEAP8[$$01$i$i >> 0] | 0;
  do {
   if (($14 | 0) == 0) {
    $31 = $27;
    $32 = 0;
   } else {
    $15 = $14 + 24 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    if (($16 | 0) == (HEAP32[$14 + 28 >> 2] | 0)) {
     $26 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$14 >> 2] | 0) + 52 >> 2] & 15]($14, $12 & 255) | 0) == -1;
     $31 = $26 ? 0 : $27;
     $32 = $26 ? 0 : $14;
     break;
    } else {
     HEAP32[$15 >> 2] = $16 + 1;
     HEAP8[$16 >> 0] = $12;
     $31 = $27;
     $32 = $14;
     break;
    }
   }
  } while (0);
  $$01$i$i = $$01$i$i + 1 | 0;
  if (($$01$i$i | 0) == ($9 | 0)) {
   $30 = $31;
   break;
  } else {
   $14 = $32;
   $27 = $31;
  }
 }
 HEAP32[$agg$result >> 2] = $30;
 STACKTOP = sp;
 return;
}
function __ZN14HaarClassifierC2ERKS_($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $15 = 0, $18 = 0, $20 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 HEAP32[$this + 4 >> 2] = HEAP32[$s + 4 >> 2];
 HEAPF32[$this + 8 >> 2] = +HEAPF32[$s + 8 >> 2];
 HEAPF32[$this + 12 >> 2] = +HEAPF32[$s + 12 >> 2];
 HEAPF32[$this + 16 >> 2] = +HEAPF32[$s + 16 >> 2];
 HEAP32[$this + 20 >> 2] = HEAP32[$s + 20 >> 2];
 $15 = $s + 24 | 0;
 if ((HEAP32[$15 >> 2] | 0) == 0) {
  HEAP32[$this + 24 >> 2] = 0;
 } else {
  $18 = _malloc(72) | 0;
  HEAP32[$this + 24 >> 2] = $18;
  $20 = HEAP32[$15 >> 2] | 0;
  dest = $18 + 0 | 0;
  src = $20 + 0 | 0;
  stop = dest + 72 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $23 = HEAP32[$18 + 48 >> 2] << 2;
  $24 = _malloc($23) | 0;
  HEAP32[$18 + 60 >> 2] = $24;
  $28 = HEAP32[$18 + 52 >> 2] << 3;
  $29 = _malloc($28) | 0;
  HEAP32[$18 + 56 >> 2] = $29;
  _memcpy($24 | 0, HEAP32[$20 + 60 >> 2] | 0, $23 | 0) | 0;
  _memcpy($29 | 0, HEAP32[$20 + 56 >> 2] | 0, $28 | 0) | 0;
 }
 HEAP32[$this >> 2] = 240;
 HEAP32[$this + 28 >> 2] = HEAP32[$s + 28 >> 2];
 HEAP32[$this + 32 >> 2] = HEAP32[$s + 32 >> 2];
 HEAPF32[$this + 36 >> 2] = +HEAPF32[$s + 36 >> 2];
 HEAPF32[$this + 40 >> 2] = +HEAPF32[$s + 40 >> 2];
 HEAPF32[$this + 44 >> 2] = +HEAPF32[$s + 44 >> 2];
 __ZNSt3__16vectorIfNS_9allocatorIfEEEC2ERKS3_($this + 48 | 0, $s + 48 | 0);
 HEAP32[$this + 60 >> 2] = HEAP32[$s + 60 >> 2];
 HEAP32[$this + 64 >> 2] = HEAP32[$s + 64 >> 2];
 HEAP32[$this + 68 >> 2] = HEAP32[$s + 68 >> 2];
 HEAP32[$this + 72 >> 2] = HEAP32[$s + 72 >> 2];
 HEAP32[$this + 76 >> 2] = HEAP32[$s + 76 >> 2];
 HEAP32[$this + 80 >> 2] = HEAP32[$s + 80 >> 2];
 STACKTOP = sp;
 return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEjRKi($this, $__n, $__x) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__x = $__x | 0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i57 = 0, $$0$i58 = 0, $0 = 0, $10 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = $3;
 if (!($4 - $5 >> 2 >>> 0 < $__n >>> 0)) {
  $$0$i = $__n;
  $10 = $3;
  while (1) {
   if (($10 | 0) != 0) {
    HEAP32[$10 >> 2] = HEAP32[$__x >> 2];
   }
   $$0$i = $$0$i + -1 | 0;
   if (($$0$i | 0) == 0) {
    break;
   } else {
    $10 = $10 + 4 | 0;
   }
  }
  HEAP32[$2 >> 2] = $3 + ($__n << 2);
  STACKTOP = sp;
  return;
 }
 $15 = HEAP32[$this >> 2] | 0;
 $16 = $15;
 $17 = $5 - $16 | 0;
 $18 = $17 >> 2;
 $19 = $18 + $__n | 0;
 if ($19 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $21 = $4 - $16 | 0;
 if ($21 >> 2 >>> 0 < 536870911) {
  $24 = $21 >> 1;
  $26 = $24 >>> 0 < $19 >>> 0 ? $19 : $24;
  if (($26 | 0) == 0) {
   $$0$i58 = 0;
   $31 = 0;
  } else {
   $$0$i57 = $26;
   label = 10;
  }
 } else {
  $$0$i57 = 1073741823;
  label = 10;
 }
 if ((label | 0) == 10) {
  $$0$i58 = $$0$i57;
  $31 = __Znwj($$0$i57 << 2) | 0;
 }
 $$0$i2 = $__n;
 $33 = $31 + ($18 << 2) | 0;
 while (1) {
  if (($33 | 0) != 0) {
   HEAP32[$33 >> 2] = HEAP32[$__x >> 2];
  }
  $$0$i2 = $$0$i2 + -1 | 0;
  if (($$0$i2 | 0) == 0) {
   break;
  } else {
   $33 = $33 + 4 | 0;
  }
 }
 _memcpy($31 | 0, $15 | 0, $17 | 0) | 0;
 HEAP32[$this >> 2] = $31;
 HEAP32[$2 >> 2] = $31 + ($19 << 2);
 HEAP32[$0 >> 2] = $31 + ($$0$i58 << 2);
 if (($15 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv($15);
 STACKTOP = sp;
 return;
}
function __ZN12HOGExtractorC2Ei($this, $_n_bins) {
 $this = $this | 0;
 $_n_bins = $_n_bins | 0;
 var $$pre = 0, $$pre59 = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0.0, $6 = 0, $7 = 0, $9 = 0, $i$058 = 0, $i1$057 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = $this + 24 | 0;
 $1 = $this + 60 | 0;
 $2 = $this + 64 | 0;
 $3 = $this + 84 | 0;
 dest = $this + 0 | 0;
 stop = dest + 72 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = $_n_bins;
 HEAP32[$this + 76 >> 2] = -1;
 HEAP32[$this + 80 >> 2] = -1;
 $6 = 1800 / ($_n_bins | 0) | 0;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($0, 1800);
 $$pre = HEAP32[$0 >> 2] | 0;
 $i$058 = 0;
 do {
  $7 = ($i$058 | 0) / ($6 | 0) | 0;
  $9 = (HEAP32[$3 >> 2] | 0) + -1 | 0;
  HEAP32[$$pre + ($i$058 << 2) >> 2] = ($9 | 0) < ($7 | 0) ? $9 : $7;
  $i$058 = $i$058 + 1 | 0;
 } while (($i$058 | 0) != 1800);
 $14 = $this + 72 | 0;
 HEAP32[$14 >> 2] = 1e4;
 $15 = HEAP32[$2 >> 2] | 0;
 $16 = HEAP32[$1 >> 2] | 0;
 $20 = $15 - $16 >> 2;
 if ($20 >>> 0 < 1e4) {
  __ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEj($1, 1e4 - $20 | 0);
  $$pre59 = HEAP32[$14 >> 2] | 0;
  if (($$pre59 | 0) > 0) {
   $33 = $$pre59;
  } else {
   STACKTOP = sp;
   return;
  }
 } else {
  if ($20 >>> 0 > 1e4) {
   $25 = $16 + 4e4 | 0;
   if (($15 | 0) == ($25 | 0)) {
    $33 = 1e4;
   } else {
    HEAP32[$2 >> 2] = $15 + (~(($15 + -4 + (0 - $25) | 0) >>> 2) << 2);
    $33 = 1e4;
   }
  } else {
   $33 = 1e4;
  }
 }
 $30 = HEAP32[$1 >> 2] | 0;
 $i1$057 = 0;
 do {
  $35 = +Math_sqrt(+(+($i1$057 | 0) / +($33 | 0)));
  HEAPF32[$30 + ($i1$057 << 2) >> 2] = $35;
  $i1$057 = $i1$057 + 1 | 0;
 } while (($i1$057 | 0) < ($33 | 0));
 STACKTOP = sp;
 return;
}
function __ZN10Classifier4loadEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var $13 = 0, $2 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $38 = 0, $40 = 0, $45 = 0, $model_exists = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $model_exists = sp + 4 | 0;
 _fread($this + 4 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 8 | 0, 4, 1, $fil | 0) | 0;
 $2 = $this + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) != 0) {
  _free(HEAP32[$3 + 60 >> 2] | 0);
  _free(HEAP32[(HEAP32[$2 >> 2] | 0) + 56 >> 2] | 0);
  _free(HEAP32[$2 >> 2] | 0);
 }
 HEAP32[$vararg_buffer >> 2] = $model_exists;
 _fscanf($fil | 0, 552, $vararg_buffer | 0) | 0;
 if ((HEAP8[$model_exists >> 0] | 0) == 49) {
  $13 = _malloc(72) | 0;
  HEAP32[$2 >> 2] = $13;
  _fread($13 + 16 | 0, 8, 1, $fil | 0) | 0;
  _fread((HEAP32[$2 >> 2] | 0) + 8 | 0, 8, 1, $fil | 0) | 0;
  _fread((HEAP32[$2 >> 2] | 0) + 24 | 0, 4, 1, $fil | 0) | 0;
  _fread((HEAP32[$2 >> 2] | 0) + 40 | 0, 8, 1, $fil | 0) | 0;
  _fread(HEAP32[$2 >> 2] | 0, 4, 1, $fil | 0) | 0;
  _fread((HEAP32[$2 >> 2] | 0) + 64 | 0, 8, 1, $fil | 0) | 0;
  _fread((HEAP32[$2 >> 2] | 0) + 48 | 0, 4, 1, $fil | 0) | 0;
  _fread((HEAP32[$2 >> 2] | 0) + 52 | 0, 4, 1, $fil | 0) | 0;
  $28 = HEAP32[$2 >> 2] | 0;
  $32 = _malloc(HEAP32[$28 + 48 >> 2] << 2) | 0;
  HEAP32[$28 + 60 >> 2] = $32;
  $34 = HEAP32[$2 >> 2] | 0;
  $38 = _malloc(HEAP32[$34 + 52 >> 2] << 3) | 0;
  HEAP32[$34 + 56 >> 2] = $38;
  $40 = HEAP32[$2 >> 2] | 0;
  _fread(HEAP32[$40 + 60 >> 2] | 0, 4, HEAP32[$40 + 48 >> 2] | 0, $fil | 0) | 0;
  $45 = HEAP32[$2 >> 2] | 0;
  _fread(HEAP32[$45 + 56 >> 2] | 0, 8, HEAP32[$45 + 52 >> 2] | 0, $fil | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$2 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
}
function __Z8myprintfPKcz($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $$0$i = 0, $$pre$phiZ2D = 0, $$pre1$pre$phiZZ2D = 0, $0 = 0, $12 = 0, $13 = 0, $15 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $4 = 0, $5 = 0, $9 = 0, $__p$0$i$i$i = 0, $arg = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $arg = sp + 16 | 0;
 $0 = sp;
 HEAP32[$arg >> 2] = $varargs;
 if ((HEAP8[184] & 1) == 0) {
  HEAP32[$0 + 0 >> 2] = HEAP32[184 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[188 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[192 >> 2];
  $$pre$phiZ2D = $0;
  $21 = HEAP8[$0 >> 0] | 0;
 } else {
  $4 = HEAP32[192 >> 2] | 0;
  $5 = HEAP32[188 >> 2] | 0;
  if ($5 >>> 0 > 4294967279) {
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  }
  if ($5 >>> 0 < 11) {
   $9 = $5 << 1 & 255;
   HEAP8[$0 >> 0] = $9;
   $$pre1$pre$phiZZ2D = $0;
   $35 = $9;
   $__p$0$i$i$i = $0 + 1 | 0;
  } else {
   $12 = $5 + 16 & -16;
   $13 = __Znwj($12) | 0;
   HEAP32[$0 + 8 >> 2] = $13;
   $15 = $12 | 1;
   HEAP32[$0 >> 2] = $15;
   HEAP32[$0 + 4 >> 2] = $5;
   $$pre1$pre$phiZZ2D = $0;
   $35 = $15 & 255;
   $__p$0$i$i$i = $13;
  }
  _memcpy($__p$0$i$i$i | 0, $4 | 0, $5 | 0) | 0;
  HEAP8[$__p$0$i$i$i + $5 >> 0] = 0;
  $$pre$phiZ2D = $$pre1$pre$phiZZ2D;
  $21 = $35;
 }
 _vfprintf(HEAP32[_stdout >> 2] | 0, $format | 0, $arg | 0) | 0;
 if (($21 & 1) == 0) {
  $26 = $0 + 1 | 0;
 } else {
  $26 = HEAP32[$0 + 8 >> 2] | 0;
 }
 $27 = _fopen($26 | 0, 200) | 0;
 if (($27 | 0) == 0) {
  $$0$i = -1;
 } else {
  $29 = _vfprintf($27 | 0, $format | 0, $arg | 0) | 0;
  _fclose($27 | 0) | 0;
  $$0$i = $29;
 }
 if ((HEAP8[$$pre$phiZ2D >> 0] & 1) == 0) {
  STACKTOP = sp;
  return $$0$i | 0;
 }
 __ZdlPv(HEAP32[$0 + 8 >> 2] | 0);
 STACKTOP = sp;
 return $$0$i | 0;
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i57 = 0, $$0$i58 = 0, $0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $32 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = $3;
 if (!($4 - $5 >> 2 >>> 0 < $__n >>> 0)) {
  $$0$i = $__n;
  $10 = $3;
  while (1) {
   if (($10 | 0) != 0) {
    HEAPF32[$10 >> 2] = 0.0;
   }
   $$0$i = $$0$i + -1 | 0;
   if (($$0$i | 0) == 0) {
    break;
   } else {
    $10 = $10 + 4 | 0;
   }
  }
  HEAP32[$2 >> 2] = $3 + ($__n << 2);
  STACKTOP = sp;
  return;
 }
 $14 = HEAP32[$this >> 2] | 0;
 $15 = $14;
 $16 = $5 - $15 | 0;
 $17 = $16 >> 2;
 $18 = $17 + $__n | 0;
 if ($18 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $20 = $4 - $15 | 0;
 if ($20 >> 2 >>> 0 < 536870911) {
  $23 = $20 >> 1;
  $25 = $23 >>> 0 < $18 >>> 0 ? $18 : $23;
  if (($25 | 0) == 0) {
   $$0$i58 = 0;
   $30 = 0;
  } else {
   $$0$i57 = $25;
   label = 10;
  }
 } else {
  $$0$i57 = 1073741823;
  label = 10;
 }
 if ((label | 0) == 10) {
  $$0$i58 = $$0$i57;
  $30 = __Znwj($$0$i57 << 2) | 0;
 }
 $$0$i2 = $__n;
 $32 = $30 + ($17 << 2) | 0;
 while (1) {
  if (($32 | 0) != 0) {
   HEAPF32[$32 >> 2] = 0.0;
  }
  $$0$i2 = $$0$i2 + -1 | 0;
  if (($$0$i2 | 0) == 0) {
   break;
  } else {
   $32 = $32 + 4 | 0;
  }
 }
 _memcpy($30 | 0, $14 | 0, $16 | 0) | 0;
 HEAP32[$this >> 2] = $30;
 HEAP32[$2 >> 2] = $30 + ($18 << 2);
 HEAP32[$0 >> 2] = $30 + ($$0$i58 << 2);
 if (($14 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv($14);
 STACKTOP = sp;
 return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i57 = 0, $$0$i58 = 0, $0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $32 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = $3;
 if (!($4 - $5 >> 2 >>> 0 < $__n >>> 0)) {
  $$0$i = $__n;
  $10 = $3;
  while (1) {
   if (($10 | 0) != 0) {
    HEAP32[$10 >> 2] = 0;
   }
   $$0$i = $$0$i + -1 | 0;
   if (($$0$i | 0) == 0) {
    break;
   } else {
    $10 = $10 + 4 | 0;
   }
  }
  HEAP32[$2 >> 2] = $3 + ($__n << 2);
  STACKTOP = sp;
  return;
 }
 $14 = HEAP32[$this >> 2] | 0;
 $15 = $14;
 $16 = $5 - $15 | 0;
 $17 = $16 >> 2;
 $18 = $17 + $__n | 0;
 if ($18 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $20 = $4 - $15 | 0;
 if ($20 >> 2 >>> 0 < 536870911) {
  $23 = $20 >> 1;
  $25 = $23 >>> 0 < $18 >>> 0 ? $18 : $23;
  if (($25 | 0) == 0) {
   $$0$i58 = 0;
   $30 = 0;
  } else {
   $$0$i57 = $25;
   label = 10;
  }
 } else {
  $$0$i57 = 1073741823;
  label = 10;
 }
 if ((label | 0) == 10) {
  $$0$i58 = $$0$i57;
  $30 = __Znwj($$0$i57 << 2) | 0;
 }
 $$0$i2 = $__n;
 $32 = $30 + ($17 << 2) | 0;
 while (1) {
  if (($32 | 0) != 0) {
   HEAP32[$32 >> 2] = 0;
  }
  $$0$i2 = $$0$i2 + -1 | 0;
  if (($$0$i2 | 0) == 0) {
   break;
  } else {
   $32 = $32 + 4 | 0;
  }
 }
 _memcpy($30 | 0, $14 | 0, $16 | 0) | 0;
 HEAP32[$this >> 2] = $30;
 HEAP32[$2 >> 2] = $30 + ($18 << 2);
 HEAP32[$0 >> 2] = $30 + ($$0$i58 << 2);
 if (($14 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv($14);
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $13 = 0, $16 = 0, $17 = 0, $22 = 0, $27 = 0, $28 = 0, $33 = 0, $38 = 0, $45 = 0, $8 = 0, $__p$0$lcssa = 0, $__p$02 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (($1 & 1) == 0) {
  $16 = 1;
  $17 = ($1 & 255) >>> 1;
  $45 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $16 = ($8 & -2) + -1 | 0;
  $17 = HEAP32[$this + 4 >> 2] | 0;
  $45 = $8 & 255;
 }
 $13 = $__last - $0 >> 2;
 if (($13 | 0) == 0) {
  STACKTOP = sp;
  return $this | 0;
 }
 if (($16 - $17 | 0) >>> 0 < $13 >>> 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $16, $17 + $13 - $16 | 0, $17, $17, 0, 0);
  $22 = HEAP8[$this >> 0] | 0;
 } else {
  $22 = $45;
 }
 if (($22 & 1) == 0) {
  $28 = $this + 4 | 0;
 } else {
  $28 = HEAP32[$this + 8 >> 2] | 0;
 }
 $27 = $28 + ($17 << 2) | 0;
 if (($__first | 0) == ($__last | 0)) {
  $__p$0$lcssa = $27;
 } else {
  $33 = $17 + (($__last + -4 + (0 - $0) | 0) >>> 2) + 1 | 0;
  $$01 = $__first;
  $__p$02 = $27;
  while (1) {
   HEAP32[$__p$02 >> 2] = HEAP32[$$01 >> 2];
   $$01 = $$01 + 4 | 0;
   if (($$01 | 0) == ($__last | 0)) {
    break;
   } else {
    $__p$02 = $__p$02 + 4 | 0;
   }
  }
  $__p$0$lcssa = $28 + ($33 << 2) | 0;
 }
 HEAP32[$__p$0$lcssa >> 2] = 0;
 $38 = $17 + $13 | 0;
 if ((HEAP8[$this >> 0] & 1) == 0) {
  HEAP8[$this >> 0] = $38 << 1;
  STACKTOP = sp;
  return $this | 0;
 } else {
  HEAP32[$this + 4 >> 2] = $38;
  STACKTOP = sp;
  return $this | 0;
 }
 return 0;
}
function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $31 = 0, $36 = 0, $39 = 0, $4 = 0, $44 = 0, $48 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $wc;
 if (($src | 0) == 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do {
  if (($n | 0) != 0) {
   if (($wc | 0) == 0) {
    HEAP32[$0 >> 2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src >> 0] | 0;
   $5 = $4 & 255;
   if ($4 << 24 >> 24 > -1) {
    HEAP32[$7 >> 2] = $5;
    $$0 = $4 << 24 >> 24 != 0 & 1;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $10 = $5 + -194 | 0;
   if (!($10 >>> 0 > 50)) {
    $12 = $src + 1 | 0;
    $14 = HEAP32[12808 + ($10 << 2) >> 2] | 0;
    if ($n >>> 0 < 4) {
     if (($14 & -2147483648 >>> (($n * 6 | 0) + -6 | 0) | 0) != 0) {
      break;
     }
    }
    $22 = HEAPU8[$12 >> 0] | 0;
    $23 = $22 >>> 3;
    if (!(($23 + -16 | $23 + ($14 >> 26)) >>> 0 > 7)) {
     $31 = $22 + -128 | $14 << 6;
     if (($31 | 0) >= 0) {
      HEAP32[$7 >> 2] = $31;
      $$0 = 2;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $36 = (HEAPU8[$src + 2 >> 0] | 0) + -128 | 0;
     if (!($36 >>> 0 > 63)) {
      $39 = $36 | $31 << 6;
      if (($39 | 0) >= 0) {
       HEAP32[$7 >> 2] = $39;
       $$0 = 3;
       STACKTOP = sp;
       return $$0 | 0;
      }
      $44 = (HEAPU8[$src + 3 >> 0] | 0) + -128 | 0;
      if (!($44 >>> 0 > 63)) {
       HEAP32[$7 >> 2] = $44 | $39 << 6;
       $$0 = 4;
       STACKTOP = sp;
       return $$0 | 0;
      }
     }
    }
   }
  }
 } while (0);
 $48 = ___errno_location() | 0;
 HEAP32[$48 >> 2] = 84;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN12HOGExtractorD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $19 = 0, $21 = 0, $22 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $47 = 0, $48 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 60 >> 2] | 0;
 if (($1 | 0) != 0) {
  $3 = $this + 64 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = $4 + (~(($4 + -4 + (0 - $1) | 0) >>> 2) << 2);
  }
  __ZdlPv($1);
 }
 $10 = HEAP32[$this + 48 >> 2] | 0;
 if (($10 | 0) != 0) {
  $12 = $this + 52 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if (($13 | 0) != ($10 | 0)) {
   HEAP32[$12 >> 2] = $13 + (~(($13 + -4 + (0 - $10) | 0) >>> 2) << 2);
  }
  __ZdlPv($10);
 }
 $19 = HEAP32[$this + 36 >> 2] | 0;
 if (($19 | 0) != 0) {
  $21 = $this + 40 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  if (($22 | 0) != ($19 | 0)) {
   HEAP32[$21 >> 2] = $22 + (~(($22 + -4 + (0 - $19) | 0) >>> 2) << 2);
  }
  __ZdlPv($19);
 }
 $28 = HEAP32[$this + 24 >> 2] | 0;
 if (($28 | 0) != 0) {
  $30 = $this + 28 | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  if (($31 | 0) != ($28 | 0)) {
   HEAP32[$30 >> 2] = $31 + (~(($31 + -4 + (0 - $28) | 0) >>> 2) << 2);
  }
  __ZdlPv($28);
 }
 $37 = HEAP32[$this + 12 >> 2] | 0;
 if (($37 | 0) != 0) {
  $39 = $this + 16 | 0;
  $40 = HEAP32[$39 >> 2] | 0;
  if (($40 | 0) != ($37 | 0)) {
   HEAP32[$39 >> 2] = $40 + (~(($40 + -4 + (0 - $37) | 0) >>> 2) << 2);
  }
  __ZdlPv($37);
 }
 $45 = HEAP32[$this >> 2] | 0;
 if (($45 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $47 = $this + 4 | 0;
 $48 = HEAP32[$47 >> 2] | 0;
 if (($48 | 0) != ($45 | 0)) {
  HEAP32[$47 >> 2] = $48 + (~(($48 + -4 + (0 - $45) | 0) >>> 2) << 2);
 }
 __ZdlPv($45);
 STACKTOP = sp;
 return;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $19 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp;
 $__ci = sp + 4 | 0;
 $__inxt = sp + 8 | 0;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 if (($__c | 0) == -1) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;
   return $$01 | 0;
  }
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$01 = $5;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $8 = $this + 48 | 0;
 L8 : do {
  if ($3) {
   HEAP32[$__ci >> 2] = HEAP32[$8 >> 2];
   $11 = HEAP32[$this + 36 >> 2] | 0;
   $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] & 15]($11, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0;
   if (($19 | 0) == 1 | ($19 | 0) == 2) {
    $$01 = -1;
    STACKTOP = sp;
    return $$01 | 0;
   } else if (($19 | 0) == 3) {
    HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
    HEAP32[$__enxt >> 2] = $__extbuf + 1;
   }
   $23 = $this + 32 | 0;
   while (1) {
    $24 = HEAP32[$__enxt >> 2] | 0;
    if (!($24 >>> 0 > $__extbuf >>> 0)) {
     break L8;
    }
    $26 = $24 + -1 | 0;
    HEAP32[$__enxt >> 2] = $26;
    if ((_ungetc(HEAP8[$26 >> 0] | 0, HEAP32[$23 >> 2] | 0) | 0) == -1) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;
   return $$01 | 0;
  }
 } while (0);
 HEAP32[$8 >> 2] = $__c;
 HEAP8[$1 >> 0] = 1;
 $$01 = $__c;
 STACKTOP = sp;
 return $$01 | 0;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $1 = 0, $12 = 0, $20 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp;
 $__ci = sp + 8 | 0;
 $__inxt = sp + 4 | 0;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 if (($__c | 0) == -1) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;
   return $$01 | 0;
  }
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$01 = $5;
  STACKTOP = sp;
  return $$01 | 0;
 }
 $8 = $this + 48 | 0;
 L8 : do {
  if ($3) {
   HEAP8[$__ci >> 0] = HEAP32[$8 >> 2];
   $12 = HEAP32[$this + 36 >> 2] | 0;
   $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 15]($12, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0;
   if (($20 | 0) == 1 | ($20 | 0) == 2) {
    $$01 = -1;
    STACKTOP = sp;
    return $$01 | 0;
   } else if (($20 | 0) == 3) {
    HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
    HEAP32[$__enxt >> 2] = $__extbuf + 1;
   }
   $24 = $this + 32 | 0;
   while (1) {
    $25 = HEAP32[$__enxt >> 2] | 0;
    if (!($25 >>> 0 > $__extbuf >>> 0)) {
     break L8;
    }
    $27 = $25 + -1 | 0;
    HEAP32[$__enxt >> 2] = $27;
    if ((_ungetc(HEAP8[$27 >> 0] | 0, HEAP32[$24 >> 2] | 0) | 0) == -1) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;
   return $$01 | 0;
  }
 } while (0);
 HEAP32[$8 >> 2] = $__c;
 HEAP8[$1 >> 0] = 1;
 $$01 = $__c;
 STACKTOP = sp;
 return $$01 | 0;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $19 = 0, $20 = 0, $26 = 0, $28 = 0, $33 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  $33 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$33 >> 2] | 0) + 20 >> 2] & 15]($33, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 53 >> 0] = 1;
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 52 >> 0] = 1;
 $8 = $info + 16 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if (($9 | 0) == 0) {
  HEAP32[$8 >> 2] = $dst_ptr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 if (($9 | 0) != ($dst_ptr | 0)) {
  $28 = $info + 36 | 0;
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $19 = $info + 24 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (($20 | 0) == 2) {
  HEAP32[$19 >> 2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 if (!(($26 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 54 >> 0] = 1;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i$i$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $__nar = sp + 8 | 0;
 $__ne = sp;
 HEAP32[$__ne >> 2] = $__nar + 400;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $4 = HEAP32[$__ne >> 2] | 0;
 $5 = HEAP32[$__s >> 2] | 0;
 if (($__nar | 0) == ($4 | 0)) {
  $24 = $5;
  HEAP32[$agg$result >> 2] = $24;
  STACKTOP = sp;
  return;
 } else {
  $$01$i$i = $__nar;
  $21 = $5;
  $9 = $5;
 }
 while (1) {
  $7 = HEAP32[$$01$i$i >> 2] | 0;
  if (($9 | 0) == 0) {
   $25 = $21;
   $26 = 0;
  } else {
   $10 = $9 + 24 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$9 + 28 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$9 >> 2] | 0) + 52 >> 2] & 15]($9, $7) | 0;
   } else {
    HEAP32[$10 >> 2] = $11 + 4;
    HEAP32[$11 >> 2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i | 0) == -1;
   $25 = $20 ? 0 : $21;
   $26 = $20 ? 0 : $9;
  }
  $$01$i$i = $$01$i$i + 4 | 0;
  if (($$01$i$i | 0) == ($4 | 0)) {
   $24 = $25;
   break;
  } else {
   $21 = $25;
   $9 = $26;
  }
 }
 HEAP32[$agg$result >> 2] = $24;
 STACKTOP = sp;
 return;
}
function __ZN14HaarClassifier4loadEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $23 = 0, $i$01 = 0, $n_probs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $n_probs = sp;
 __ZN10Classifier4loadEP8_IO_FILE($this, $fil);
 _fread($this + 28 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 60 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 64 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 68 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 72 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 76 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 80 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 32 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 36 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 40 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 44 | 0, 4, 1, $fil | 0) | 0;
 _fread($n_probs | 0, 4, 1, $fil | 0) | 0;
 $11 = $this + 48 | 0;
 $12 = HEAP32[$n_probs >> 2] | 0;
 $13 = $this + 52 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = HEAP32[$11 >> 2] | 0;
 $19 = $14 - $15 >> 2;
 if ($19 >>> 0 < $12 >>> 0) {
  __ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEj($11, $12 - $19 | 0);
 } else {
  if ($19 >>> 0 > $12 >>> 0) {
   $23 = $15 + ($12 << 2) | 0;
   if (($14 | 0) != ($23 | 0)) {
    HEAP32[$13 >> 2] = $14 + (~(($14 + -4 + (0 - $23) | 0) >>> 2) << 2);
   }
  }
 }
 if (($12 | 0) > 0) {
  $i$01 = 0;
 } else {
  __ZN14HaarClassifier4initEv($this);
  STACKTOP = sp;
  return;
 }
 do {
  _fread((HEAP32[$11 >> 2] | 0) + ($i$01 << 2) | 0, 4, 1, $fil | 0) | 0;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < ($12 | 0));
 __ZN14HaarClassifier4initEv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $33 = 0, $40 = 0, $8 = 0, $__p$02 = 0, $scevgep3 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (($1 & 1) == 0) {
  $15 = 10;
  $16 = ($1 & 255) >>> 1;
  $40 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $15 = ($8 & -2) + -1 | 0;
  $16 = HEAP32[$this + 4 >> 2] | 0;
  $40 = $8 & 255;
 }
 $12 = $__last - $0 | 0;
 if (($__last | 0) == ($__first | 0)) {
  STACKTOP = sp;
  return $this | 0;
 }
 if (($15 - $16 | 0) >>> 0 < $12 >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $15, $16 + $12 - $15 | 0, $16, $16, 0, 0);
  $21 = HEAP8[$this >> 0] | 0;
 } else {
  $21 = $40;
 }
 if (($21 & 1) == 0) {
  $27 = $this + 1 | 0;
 } else {
  $27 = HEAP32[$this + 8 >> 2] | 0;
 }
 $scevgep3 = $__last + ($16 - $0) | 0;
 $$01 = $__first;
 $__p$02 = $27 + $16 | 0;
 while (1) {
  HEAP8[$__p$02 >> 0] = HEAP8[$$01 >> 0] | 0;
  $$01 = $$01 + 1 | 0;
  if (($$01 | 0) == ($__last | 0)) {
   break;
  } else {
   $__p$02 = $__p$02 + 1 | 0;
  }
 }
 HEAP8[$27 + $scevgep3 >> 0] = 0;
 $33 = $16 + $12 | 0;
 if ((HEAP8[$this >> 0] & 1) == 0) {
  HEAP8[$this >> 0] = $33 << 1;
  STACKTOP = sp;
  return $this | 0;
 } else {
  HEAP32[$this + 4 >> 2] = $33;
  STACKTOP = sp;
  return $this | 0;
 }
 return 0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $7 = 0, $9 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = ___errno_location() | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $7 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $7;
   ___cxa_guard_release(5048);
  }
 }
 $9 = _strtoll_l($__a, $__p2, $__base, HEAP32[1260] | 0) | 0;
 $10 = tempRet0;
 $11 = HEAP32[$1 >> 2] | 0;
 if (($11 | 0) == 0) {
  HEAP32[$1 >> 2] = $2;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do {
  if (($11 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   if (($10 | 0) > 0 | ($10 | 0) == 0 & $9 >>> 0 > 0) {
    $$0 = 2147483647;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   if (($10 | 0) < -1 | ($10 | 0) == -1 & $9 >>> 0 < 2147483648) {
    HEAP32[$__err >> 2] = 4;
    break;
   }
   if (($10 | 0) > 0 | ($10 | 0) == 0 & $9 >>> 0 > 2147483647) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$0 = $9;
    STACKTOP = sp;
    return $$0 | 0;
   }
  }
 } while (0);
 $$0 = -2147483648;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $ec, $what_arg) {
 $agg$result = $agg$result | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $1 = 0, $11 = 0, $13 = 0, $17 = 0, $18 = 0, $28 = 0, $29 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = HEAP32[$ec >> 2] | 0;
 if (($1 | 0) != 0) {
  $3 = HEAP8[$what_arg >> 0] | 0;
  if (($3 & 1) == 0) {
   $11 = ($3 & 255) >>> 1;
  } else {
   $11 = HEAP32[$what_arg + 4 >> 2] | 0;
  }
  if (($11 | 0) == 0) {
   $17 = $1;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg, 2176, 2) | 0;
   $17 = HEAP32[$ec >> 2] | 0;
  }
  $13 = HEAP32[$ec + 4 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 3]($0, $13, $17);
  $18 = HEAP8[$0 >> 0] | 0;
  if (($18 & 1) == 0) {
   $28 = $0 + 1 | 0;
   $29 = ($18 & 255) >>> 1;
  } else {
   $28 = HEAP32[$0 + 8 >> 2] | 0;
   $29 = HEAP32[$0 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg, $28, $29) | 0;
  if (!((HEAP8[$0 >> 0] & 1) == 0)) {
   __ZdlPv(HEAP32[$0 + 8 >> 2] | 0);
  }
 }
 HEAP32[$agg$result + 0 >> 2] = HEAP32[$what_arg + 0 >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$what_arg + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$what_arg + 8 >> 2];
 HEAP32[$what_arg + 0 >> 2] = 0;
 HEAP32[$what_arg + 4 >> 2] = 0;
 HEAP32[$what_arg + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $27 = 0, $28 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ((HEAP8[$this >> 0] & 1) == 0) {
  $20 = $this + 4 | 0;
 } else {
  $20 = HEAP32[$this + 8 >> 2] | 0;
 }
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 2) {
   $17 = 2;
  } else {
   $17 = $12 + 4 & -4;
  }
 } else {
  $17 = 1073741807;
 }
 $18 = __Znwj($17 << 2) | 0;
 if (($__n_copy | 0) != 0) {
  _wmemcpy($18, $20, $__n_copy) | 0;
 }
 $21 = $__old_sz - $__n_del | 0;
 if (($21 | 0) != ($__n_copy | 0)) {
  _wmemcpy($18 + ($__n_add + $__n_copy << 2) | 0, $20 + ($__n_del + $__n_copy << 2) | 0, $21 - $__n_copy | 0) | 0;
 }
 if (($__old_cap | 0) == 1) {
  $27 = $this + 8 | 0;
  HEAP32[$27 >> 2] = $18;
  $28 = $17 | 1;
  HEAP32[$this >> 2] = $28;
  STACKTOP = sp;
  return;
 }
 __ZdlPv($20);
 $27 = $this + 8 | 0;
 HEAP32[$27 >> 2] = $18;
 $28 = $17 | 1;
 HEAP32[$this >> 2] = $28;
 STACKTOP = sp;
 return;
}
function __ZN23HOGRegressionClassifierC2ERKS_($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $15 = 0, $18 = 0, $20 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 HEAP32[$this + 4 >> 2] = HEAP32[$s + 4 >> 2];
 HEAPF32[$this + 8 >> 2] = +HEAPF32[$s + 8 >> 2];
 HEAPF32[$this + 12 >> 2] = +HEAPF32[$s + 12 >> 2];
 HEAPF32[$this + 16 >> 2] = +HEAPF32[$s + 16 >> 2];
 HEAP32[$this + 20 >> 2] = HEAP32[$s + 20 >> 2];
 $15 = $s + 24 | 0;
 if ((HEAP32[$15 >> 2] | 0) == 0) {
  HEAP32[$this + 24 >> 2] = 0;
 } else {
  $18 = _malloc(72) | 0;
  HEAP32[$this + 24 >> 2] = $18;
  $20 = HEAP32[$15 >> 2] | 0;
  dest = $18 + 0 | 0;
  src = $20 + 0 | 0;
  stop = dest + 72 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $23 = HEAP32[$18 + 48 >> 2] << 2;
  $24 = _malloc($23) | 0;
  HEAP32[$18 + 60 >> 2] = $24;
  $28 = HEAP32[$18 + 52 >> 2] << 3;
  $29 = _malloc($28) | 0;
  HEAP32[$18 + 56 >> 2] = $29;
  _memcpy($24 | 0, HEAP32[$20 + 60 >> 2] | 0, $23 | 0) | 0;
  _memcpy($29 | 0, HEAP32[$20 + 56 >> 2] | 0, $28 | 0) | 0;
 }
 HEAP32[$this >> 2] = 360;
 HEAP32[$this + 28 >> 2] = HEAP32[$s + 28 >> 2];
 HEAP32[$this + 32 >> 2] = HEAP32[$s + 32 >> 2];
 HEAP32[$this + 36 >> 2] = HEAP32[$s + 36 >> 2];
 HEAP32[$this + 40 >> 2] = HEAP32[$s + 40 >> 2];
 HEAP32[$this + 44 >> 2] = HEAP32[$s + 44 >> 2];
 HEAP32[$this + 48 >> 2] = HEAP32[$s + 48 >> 2];
 STACKTOP = sp;
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $11 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $30 = 0, $34 = 0, $6 = 0, $8 = 0, $thrown_object = 0, $vararg_buffer10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer10 = sp;
 $thrown_object = sp + 12 | 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if (($0 | 0) == 0) {
  _abort_message(13200, $vararg_buffer10);
 }
 $2 = HEAP32[$0 >> 2] | 0;
 if (($2 | 0) == 0) {
  _abort_message(13200, $vararg_buffer10);
 }
 $6 = $2 + 48 | 0;
 $8 = HEAP32[$6 >> 2] | 0;
 $11 = HEAP32[$6 + 4 >> 2] | 0;
 if (!(($8 & -256 | 0) == 1126902528 & ($11 | 0) == 1129074247)) {
  HEAP32[$vararg_buffer10 >> 2] = HEAP32[3260];
  _abort_message(13160, $vararg_buffer10);
 }
 if (($8 | 0) == 1126902529 & ($11 | 0) == 1129074247) {
  $21 = HEAP32[$2 + 44 >> 2] | 0;
 } else {
  $21 = $2 + 80 | 0;
 }
 HEAP32[$thrown_object >> 2] = $21;
 $22 = HEAP32[$2 >> 2] | 0;
 $24 = HEAP32[$22 + 4 >> 2] | 0;
 if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[3398] | 0) + 16 >> 2] & 31](13592, $22, $thrown_object) | 0) {
  $29 = HEAP32[$thrown_object >> 2] | 0;
  $30 = HEAP32[3260] | 0;
  $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] & 63]($29) | 0;
  HEAP32[$vararg_buffer10 >> 2] = $30;
  HEAP32[$vararg_buffer10 + 4 >> 2] = $24;
  HEAP32[$vararg_buffer10 + 8 >> 2] = $34;
  _abort_message(13064, $vararg_buffer10);
 } else {
  HEAP32[$vararg_buffer10 >> 2] = HEAP32[3260];
  HEAP32[$vararg_buffer10 + 4 >> 2] = $24;
  _abort_message(13112, $vararg_buffer10);
 }
}
function _MUSL_vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type + 0 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $f + 48 | 0;
 if ((HEAP32[$2 >> 2] | 0) == 0) {
  $6 = $f + 44 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $internal_buf;
  $8 = $f + 28 | 0;
  HEAP32[$8 >> 2] = $internal_buf;
  $9 = $f + 20 | 0;
  HEAP32[$9 >> 2] = $internal_buf;
  HEAP32[$2 >> 2] = 80;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $internal_buf + 80;
  $12 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  if (($7 | 0) == 0) {
   $ret$1 = $12;
  } else {
   FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
   $$ = (HEAP32[$9 >> 2] | 0) == 0 ? -1 : $12;
   HEAP32[$6 >> 2] = $7;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$9 >> 2] = 0;
   $ret$1 = $$;
  }
 } else {
  $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
 }
 $$0 = $ret$1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ((HEAP8[$this >> 0] & 1) == 0) {
  $19 = $this + 1 | 0;
 } else {
  $19 = HEAP32[$this + 8 >> 2] | 0;
 }
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 11) {
   $16 = 11;
  } else {
   $16 = $12 + 16 & -16;
  }
 } else {
  $16 = -17;
 }
 $17 = __Znwj($16) | 0;
 if (($__n_copy | 0) != 0) {
  _memcpy($17 | 0, $19 | 0, $__n_copy | 0) | 0;
 }
 $20 = $__old_sz - $__n_del | 0;
 if (($20 | 0) != ($__n_copy | 0)) {
  _memcpy($17 + ($__n_add + $__n_copy) | 0, $19 + ($__n_del + $__n_copy) | 0, $20 - $__n_copy | 0) | 0;
 }
 if (($__old_cap | 0) == 10) {
  $26 = $this + 8 | 0;
  HEAP32[$26 >> 2] = $17;
  $27 = $16 | 1;
  HEAP32[$this >> 2] = $27;
  STACKTOP = sp;
  return;
 }
 __ZdlPv($19);
 $26 = $this + 8 | 0;
 HEAP32[$26 >> 2] = $17;
 $27 = $16 | 1;
 HEAP32[$this >> 2] = $27;
 STACKTOP = sp;
 return;
}
function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $19 = 0, $29 = 0, $5 = 0, $6 = 0, $8 = 0, $i$0 = 0, $i$1 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do {
  if (($1 | 0) == 0) {
   if ((___towrite($f) | 0) == 0) {
    $8 = HEAP32[$0 >> 2] | 0;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else {
   $8 = $1;
  }
 } while (0);
 $5 = $f + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($8 - $6 | 0) >>> 0 < $l >>> 0) {
  $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $l) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 L11 : do {
  if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
   $i$0 = $l;
   while (1) {
    if (($i$0 | 0) == 0) {
     $$01 = $l;
     $$02 = $s;
     $29 = $6;
     $i$1 = 0;
     break L11;
    }
    $19 = $i$0 + -1 | 0;
    if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $i$0) | 0) >>> 0 < $i$0 >>> 0) {
    $$0 = $i$0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $$01 = $l - $i$0 | 0;
    $$02 = $s + $i$0 | 0;
    $29 = HEAP32[$5 >> 2] | 0;
    $i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;
   $$02 = $s;
   $29 = $6;
   $i$1 = 0;
  }
 } while (0);
 _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$01;
 $$0 = $i$1 + $$01 | 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function _predict_probability($model_, $x, $prob_estimates) {
 $model_ = $model_ | 0;
 $x = $x | 0;
 $prob_estimates = $prob_estimates | 0;
 var $$ = 0, $$0 = 0.0, $0 = 0, $11 = 0.0, $13 = 0, $2 = 0, $21 = 0, $3 = 0, $4 = 0.0, $6 = 0, $i$07 = 0, $i$14 = 0, $i$22 = 0, $sum$05 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$model_ >> 2] | 0;
 if (!(($0 | 0) == 6 | ($0 | 0) == 7 | ($0 | 0) == 0)) {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $2 = HEAP32[$model_ + 48 >> 2] | 0;
 $3 = ($2 | 0) == 2;
 $$ = $3 ? 1 : $2;
 $4 = +_predict_values($model_, $x, $prob_estimates);
 if (($$ | 0) > 0) {
  $i$07 = 0;
  do {
   $6 = $prob_estimates + ($i$07 << 3) | 0;
   $11 = 1.0 / (+Math_exp(+-+HEAPF64[$6 >> 3]) + 1.0);
   HEAPF64[$6 >> 3] = $11;
   $i$07 = $i$07 + 1 | 0;
  } while (($i$07 | 0) != ($$ | 0));
 }
 if ($3) {
  HEAPF64[$prob_estimates + 8 >> 3] = 1.0 - +HEAPF64[$prob_estimates >> 3];
  $$0 = $4;
  STACKTOP = sp;
  return +$$0;
 }
 $13 = ($2 | 0) > 0;
 if ($13) {
  $i$14 = 0;
  $sum$05 = 0.0;
 } else {
  $$0 = $4;
  STACKTOP = sp;
  return +$$0;
 }
 do {
  $sum$05 = $sum$05 + +HEAPF64[$prob_estimates + ($i$14 << 3) >> 3];
  $i$14 = $i$14 + 1 | 0;
 } while (($i$14 | 0) != ($2 | 0));
 if ($13) {
  $i$22 = 0;
 } else {
  $$0 = $4;
  STACKTOP = sp;
  return +$$0;
 }
 do {
  $21 = $prob_estimates + ($i$22 << 3) | 0;
  HEAPF64[$21 >> 3] = +HEAPF64[$21 >> 3] / $sum$05;
  $i$22 = $i$22 + 1 | 0;
 } while (($i$22 | 0) != ($2 | 0));
 $$0 = $4;
 STACKTOP = sp;
 return +$$0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 1;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if ((HEAP8[$this >> 0] & 1) == 0) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 4 | 0;
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0;
  $__p$0 = $$pn + ($__sz$0 << 2) | 0;
  HEAP32[$__p$0 >> 2] = $__c;
  $22 = $$pn + ($__p$0$sum$pre$phiZZZ2D << 2) | 0;
  HEAP32[$22 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  HEAP32[$this + 4 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = $$pn + ($__sz$0 << 2) | 0;
  HEAP32[$__p$0 >> 2] = $__c;
  $22 = $$pn + ($__p$0$sum$pre$phiZZZ2D << 2) | 0;
  HEAP32[$22 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
}
function __Z17findIntegralImagePiiiS_($img, $xres, $yres, $iimage) {
 $img = $img | 0;
 $xres = $xres | 0;
 $yres = $yres | 0;
 $iimage = $iimage | 0;
 var $0 = 0, $11 = 0, $12 = 0, $16 = 0, $6 = 0, $iimage$pn = 0, $iiym1$03 = 0, $x1$02 = 0, $y$09 = 0, $y$15 = 0, sp = 0, $iimage$pn$looptemp = 0;
 sp = STACKTOP;
 $0 = $xres + 1 | 0;
 if (($xres | 0) >= 0) {
  _memset($iimage | 0, 0, ($xres << 2) + 4 | 0) | 0;
 }
 if (($yres | 0) < 0) {
  STACKTOP = sp;
  return;
 } else {
  $y$09 = 0;
 }
 while (1) {
  $6 = $iimage + ((Math_imul($y$09, $0) | 0) << 2) | 0;
  HEAP32[$6 >> 2] = 0;
  if (($y$09 | 0) == ($yres | 0)) {
   break;
  } else {
   $y$09 = $y$09 + 1 | 0;
  }
 }
 if (($yres | 0) < 1 | ($xres | 0) < 1) {
  STACKTOP = sp;
  return;
 } else {
  $iimage$pn = $iimage;
  $iiym1$03 = $iimage;
  $y$15 = 1;
 }
 while (1) {
  $iimage$pn$looptemp = $iimage$pn;
  $iimage$pn = $iimage$pn + ($0 << 2) | 0;
  $11 = Math_imul($y$15 + -1 | 0, $xres) | 0;
  $16 = HEAP32[$iimage$pn >> 2] | 0;
  $x1$02 = 1;
  do {
   $12 = $x1$02 + -1 | 0;
   $16 = (HEAP32[$iiym1$03 + ($x1$02 << 2) >> 2] | 0) + $16 - (HEAP32[$iiym1$03 + ($12 << 2) >> 2] | 0) + (HEAP32[$img + ($12 + $11 << 2) >> 2] | 0) | 0;
   HEAP32[$iimage$pn$looptemp + ($0 + $x1$02 << 2) >> 2] = $16;
   $x1$02 = $x1$02 + 1 | 0;
  } while (($x1$02 | 0) != ($0 | 0));
  if (($y$15 | 0) == ($yres | 0)) {
   break;
  } else {
   $iiym1$03 = $iiym1$03 + ($0 << 2) | 0;
   $y$15 = $y$15 + 1 | 0;
  }
 }
 STACKTOP = sp;
 return;
}
function __Z17findIntegralImagePhiiPi($img, $xres, $yres, $iimage) {
 $img = $img | 0;
 $xres = $xres | 0;
 $yres = $yres | 0;
 $iimage = $iimage | 0;
 var $0 = 0, $11 = 0, $12 = 0, $16 = 0, $6 = 0, $iimage$pn = 0, $iiym1$03 = 0, $x1$02 = 0, $y$09 = 0, $y$15 = 0, sp = 0, $iimage$pn$looptemp = 0;
 sp = STACKTOP;
 $0 = $xres + 1 | 0;
 if (($xres | 0) >= 0) {
  _memset($iimage | 0, 0, ($xres << 2) + 4 | 0) | 0;
 }
 if (($yres | 0) < 0) {
  STACKTOP = sp;
  return;
 } else {
  $y$09 = 0;
 }
 while (1) {
  $6 = $iimage + ((Math_imul($y$09, $0) | 0) << 2) | 0;
  HEAP32[$6 >> 2] = 0;
  if (($y$09 | 0) == ($yres | 0)) {
   break;
  } else {
   $y$09 = $y$09 + 1 | 0;
  }
 }
 if (($yres | 0) < 1 | ($xres | 0) < 1) {
  STACKTOP = sp;
  return;
 } else {
  $iimage$pn = $iimage;
  $iiym1$03 = $iimage;
  $y$15 = 1;
 }
 while (1) {
  $iimage$pn$looptemp = $iimage$pn;
  $iimage$pn = $iimage$pn + ($0 << 2) | 0;
  $11 = Math_imul($y$15 + -1 | 0, $xres) | 0;
  $16 = HEAP32[$iimage$pn >> 2] | 0;
  $x1$02 = 1;
  do {
   $12 = $x1$02 + -1 | 0;
   $16 = (HEAP32[$iiym1$03 + ($x1$02 << 2) >> 2] | 0) + $16 - (HEAP32[$iiym1$03 + ($12 << 2) >> 2] | 0) + (HEAPU8[$img + ($12 + $11) >> 0] | 0) | 0;
   HEAP32[$iimage$pn$looptemp + ($0 + $x1$02 << 2) >> 2] = $16;
   $x1$02 = $x1$02 + 1 | 0;
  } while (($x1$02 | 0) != ($0 | 0));
  if (($y$15 | 0) == ($yres | 0)) {
   break;
  } else {
   $iiym1$03 = $iiym1$03 + ($0 << 2) | 0;
   $y$15 = $y$15 + 1 | 0;
  }
 }
 STACKTOP = sp;
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $19 = 0, $20 = 0, $26 = 0, $28 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 53 >> 0] = 1;
 if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 52 >> 0] = 1;
 $8 = $info + 16 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if (($9 | 0) == 0) {
  HEAP32[$8 >> 2] = $dst_ptr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 if (($9 | 0) != ($dst_ptr | 0)) {
  $28 = $info + 36 | 0;
  HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + 1;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $19 = $info + 24 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (($20 | 0) == 2) {
  HEAP32[$19 >> 2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 if (!(($26 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$info + 54 >> 0] = 1;
 STACKTOP = sp;
 return;
}
function __ZN14HaarClassifierC2Eiiiiiiii($this, $type, $x, $y, $width, $height, $sign, $threshold, $n_folds) {
 $this = $this | 0;
 $type = $type | 0;
 $x = $x | 0;
 $y = $y | 0;
 $width = $width | 0;
 $height = $height | 0;
 $sign = $sign | 0;
 $threshold = $threshold | 0;
 $n_folds = $n_folds | 0;
 var $16 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$this + 12 >> 2] = 0.0;
 HEAPF32[$this + 16 >> 2] = 0.0;
 HEAP32[$this + 24 >> 2] = 0;
 HEAP32[$this >> 2] = 240;
 $5 = $this + 48 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$this + 52 >> 2] = 0;
 HEAP32[$this + 56 >> 2] = 0;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = $sign;
 HEAPF32[$this + 8 >> 2] = +($threshold | 0);
 HEAP32[$this + 28 >> 2] = $type;
 HEAP32[$this + 60 >> 2] = $x;
 HEAP32[$this + 64 >> 2] = $y;
 HEAP32[$this + 68 >> 2] = $width;
 HEAP32[$this + 72 >> 2] = $height;
 HEAP32[$this + 32 >> 2] = $n_folds;
 $16 = $n_folds + 1 | 0;
 if (($16 | 0) == 0) {
  $18 = $this + 44 | 0;
  HEAPF32[$18 >> 2] = 0.0;
  $19 = $this + 40 | 0;
  HEAPF32[$19 >> 2] = 0.0;
  $20 = $this + 36 | 0;
  HEAPF32[$20 >> 2] = 0.0;
  __ZN14HaarClassifier4initEv($this);
  STACKTOP = sp;
  return;
 }
 __ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEj($5, $16);
 $18 = $this + 44 | 0;
 HEAPF32[$18 >> 2] = 0.0;
 $19 = $this + 40 | 0;
 HEAPF32[$19 >> 2] = 0.0;
 $20 = $this + 36 | 0;
 HEAPF32[$20 >> 2] = 0.0;
 __ZN14HaarClassifier4initEv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if ((HEAP8[$this >> 0] & 1) == 0) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 1 | 0;
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0;
  $__p$0 = $$pn + $__sz$0 | 0;
  HEAP8[$__p$0 >> 0] = $__c;
  $22 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0;
  HEAP8[$22 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  HEAP32[$this + 4 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = $$pn + $__sz$0 | 0;
  HEAP8[$__p$0 >> 0] = $__c;
  $22 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0;
  HEAP8[$22 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $$02$i$i$i = 0, $0 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $uglygep$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $2 = $__hi - $0 | 0;
 $3 = $2 >> 2;
 if ($3 >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 }
 if ($3 >>> 0 < 2) {
  HEAP8[$agg$result >> 0] = $2 >>> 1;
  $__p$0$ph$i$i$i = $agg$result + 4 | 0;
 } else {
  $10 = $3 + 4 & -4;
  $12 = __Znwj($10 << 2) | 0;
  HEAP32[$agg$result + 8 >> 2] = $12;
  HEAP32[$agg$result >> 2] = $10 | 1;
  HEAP32[$agg$result + 4 >> 2] = $3;
  $__p$0$ph$i$i$i = $12;
 }
 if (($__lo | 0) == ($__hi | 0)) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP32[$__p$0$lcssa$i$i$i >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $uglygep$i$i$i = $__hi + -4 + (0 - $0) | 0;
 $$02$i$i$i = $__lo;
 $__p$01$i$i$i = $__p$0$ph$i$i$i;
 while (1) {
  HEAP32[$__p$01$i$i$i >> 2] = HEAP32[$$02$i$i$i >> 2];
  $$02$i$i$i = $$02$i$i$i + 4 | 0;
  if (($$02$i$i$i | 0) == ($__hi | 0)) {
   break;
  } else {
   $__p$01$i$i$i = $__p$01$i$i$i + 4 | 0;
  }
 }
 $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i + (($uglygep$i$i$i >>> 2) + 1 << 2) | 0;
 HEAP32[$__p$0$lcssa$i$i$i >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __Z26rectangleIntersectionRatioRK10SimpleRectS1_($r1, $r2) {
 $r1 = $r1 | 0;
 $r2 = $r2 | 0;
 var $$0 = 0.0, $$2 = 0.0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $41 = 0.0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$r1 >> 2] | 0;
 $2 = HEAP32[$r2 + 4 >> 2] | 0;
 if (($0 | 0) > ($2 | 0)) {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $5 = HEAP32[$r1 + 12 >> 2] | 0;
 $7 = HEAP32[$r2 + 8 >> 2] | 0;
 if (($5 | 0) < ($7 | 0)) {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $10 = HEAP32[$r1 + 4 >> 2] | 0;
 $11 = HEAP32[$r2 >> 2] | 0;
 if (($10 | 0) < ($11 | 0)) {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $14 = HEAP32[$r1 + 8 >> 2] | 0;
 $16 = HEAP32[$r2 + 12 >> 2] | 0;
 if (($14 | 0) > ($16 | 0)) {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $19 = Math_imul($5 - $14 | 0, $10 - $0 | 0) | 0;
 $22 = Math_imul($16 - $7 | 0, $2 - $11 | 0) | 0;
 $32 = +(Math_imul((($5 | 0) < ($16 | 0) ? $5 : $16) - (($14 | 0) > ($7 | 0) ? $14 : $7) | 0, (($10 | 0) < ($2 | 0) ? $10 : $2) - (($0 | 0) > ($11 | 0) ? $0 : $11) | 0) | 0);
 $33 = +($19 | 0);
 $34 = $32 / $33;
 $35 = $33 / $32;
 $$2 = $34 < $35 ? $34 : $35;
 $37 = +($22 | 0);
 $38 = $32 / $37;
 $39 = $37 / $32;
 $41 = $38 < $39 ? $38 : $39;
 $$0 = $$2 < $41 ? $$2 : $41;
 STACKTOP = sp;
 return +$$0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $7 = 0, $9 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $23 = 0;
  $24 = 0;
  tempRet0 = $23;
  STACKTOP = sp;
  return $24 | 0;
 }
 $1 = ___errno_location() | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $7 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $7;
   ___cxa_guard_release(5048);
  }
 }
 $9 = _strtoll_l($__a, $__p2, $__base, HEAP32[1260] | 0) | 0;
 $10 = tempRet0;
 $11 = HEAP32[$1 >> 2] | 0;
 if (($11 | 0) == 0) {
  HEAP32[$1 >> 2] = $2;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $23 = 0;
  $24 = 0;
  tempRet0 = $23;
  STACKTOP = sp;
  return $24 | 0;
 }
 if (($11 | 0) == 34) {
  HEAP32[$__err >> 2] = 4;
  $20 = ($10 | 0) > 0 | ($10 | 0) == 0 & $9 >>> 0 > 0;
  tempRet0 = $20 ? 2147483647 : -2147483648;
  STACKTOP = sp;
  return ($20 ? -1 : 0) | 0;
 } else {
  $23 = $10;
  $24 = $9;
  tempRet0 = $23;
  STACKTOP = sp;
  return $24 | 0;
 }
 return 0;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $ec, $what_arg) {
 $this = $this | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $26 = 0, $31 = 0, $32 = 0, $9 = 0, $__p$0$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 $2 = _strlen($what_arg | 0) | 0;
 if ($2 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ($2 >>> 0 < 11) {
  HEAP8[$1 >> 0] = $2 << 1;
  $__p$0$i$i$i = $1 + 1 | 0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwj($9) | 0;
  HEAP32[$1 + 8 >> 2] = $10;
  HEAP32[$1 >> 2] = $9 | 1;
  HEAP32[$1 + 4 >> 2] = $2;
  $__p$0$i$i$i = $10;
 }
 _memcpy($__p$0$i$i$i | 0, $what_arg | 0, $2 | 0) | 0;
 HEAP8[$__p$0$i$i$i + $2 >> 0] = 0;
 __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $ec, $1);
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $0);
 if (!((HEAP8[$0 >> 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$0 + 8 >> 2] | 0);
 }
 if (!((HEAP8[$1 >> 0] & 1) == 0)) {
  __ZdlPv(HEAP32[$1 + 8 >> 2] | 0);
 }
 HEAP32[$this >> 2] = 2192;
 $26 = $ec;
 $31 = HEAP32[$26 + 4 >> 2] | 0;
 $32 = $this + 8 | 0;
 HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$32 + 4 >> 2] = $31;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 $2 = $this + 8 | 0;
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 63]($2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 $9 = HEAP8[$6 >> 0] | 0;
 if (($9 & 1) == 0) {
  $21 = $6 + 4 | 0;
  $22 = ($9 & 255) >>> 1;
  $23 = $6 + 4 | 0;
 } else {
  $13 = HEAP32[$6 + 8 >> 2] | 0;
  $21 = $13;
  $22 = HEAP32[$6 + 4 >> 2] | 0;
  $23 = $13;
 }
 $20 = $21 + ($22 << 2) | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $23, $20);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 $2 = $this + 8 | 0;
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 63]($2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 $9 = HEAP8[$6 >> 0] | 0;
 if (($9 & 1) == 0) {
  $21 = $6 + 1 | 0;
  $22 = ($9 & 255) >>> 1;
  $23 = $6 + 1 | 0;
 } else {
  $13 = HEAP32[$6 + 8 >> 2] | 0;
  $21 = $13;
  $22 = HEAP32[$6 + 4 >> 2] | 0;
  $23 = $13;
 }
 $20 = $21 + $22 | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $23, $20);
 STACKTOP = sp;
 return;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $9 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$__a >> 0] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = ___errno_location() | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $9 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $9;
   ___cxa_guard_release(5048);
  }
 }
 $11 = _strtoull_l($__a, $__p2, $__base, HEAP32[1260] | 0) | 0;
 $12 = tempRet0;
 $13 = HEAP32[$3 >> 2] | 0;
 if (($13 | 0) == 0) {
  HEAP32[$3 >> 2] = $4;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($13 | 0) == 34 | ($12 >>> 0 > 0 | ($12 | 0) == 0 & $11 >>> 0 > 65535)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = $11 & 65535;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $9 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$__a >> 0] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = ___errno_location() | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $9 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $9;
   ___cxa_guard_release(5048);
  }
 }
 $11 = _strtoull_l($__a, $__p2, $__base, HEAP32[1260] | 0) | 0;
 $12 = tempRet0;
 $13 = HEAP32[$3 >> 2] | 0;
 if (($13 | 0) == 0) {
  HEAP32[$3 >> 2] = $4;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($13 | 0) == 34 | ($12 >>> 0 > 0 | ($12 | 0) == 0 & $11 >>> 0 > 4294967295)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = $11;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $9 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((HEAP8[$__a >> 0] | 0) == 45) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = ___errno_location() | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $9 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $9;
   ___cxa_guard_release(5048);
  }
 }
 $11 = _strtoull_l($__a, $__p2, $__base, HEAP32[1260] | 0) | 0;
 $12 = tempRet0;
 $13 = HEAP32[$3 >> 2] | 0;
 if (($13 | 0) == 0) {
  HEAP32[$3 >> 2] = $4;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($13 | 0) == 34 | ($12 >>> 0 > 0 | ($12 | 0) == 0 & $11 >>> 0 > 4294967295)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = $11;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) == ($this | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) != ($current_ptr | 0)) {
   STACKTOP = sp;
   return;
  }
  $6 = $info + 28 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$6 >> 2] = $path_below;
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
  $14 = $info + 20 | 0;
  if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
   HEAP32[$info + 32 >> 2] = $path_below;
   HEAP32[$14 >> 2] = $current_ptr;
   $20 = $info + 40 | 0;
   HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
   if ((HEAP32[$info + 36 >> 2] | 0) == 1) {
    if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
     HEAP8[$info + 54 >> 0] = 1;
    }
   }
   HEAP32[$info + 44 >> 2] = 4;
   STACKTOP = sp;
   return;
  }
 }
 if (($path_below | 0) != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$info + 32 >> 2] = 1;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $$02$i$i$i = 0, $0 = 0, $10 = 0, $2 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $2 = $__hi - $0 | 0;
 if ($2 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 }
 if ($2 >>> 0 < 11) {
  HEAP8[$agg$result >> 0] = $2 << 1;
  $__p$0$ph$i$i$i = $agg$result + 1 | 0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwj($9) | 0;
  HEAP32[$agg$result + 8 >> 2] = $10;
  HEAP32[$agg$result >> 2] = $9 | 1;
  HEAP32[$agg$result + 4 >> 2] = $2;
  $__p$0$ph$i$i$i = $10;
 }
 if (($__lo | 0) == ($__hi | 0)) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP8[$__p$0$lcssa$i$i$i >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  $$02$i$i$i = $__lo;
  $__p$01$i$i$i = $__p$0$ph$i$i$i;
 }
 while (1) {
  HEAP8[$__p$01$i$i$i >> 0] = HEAP8[$$02$i$i$i >> 0] | 0;
  $$02$i$i$i = $$02$i$i$i + 1 | 0;
  if (($$02$i$i$i | 0) == ($__hi | 0)) {
   break;
  } else {
   $__p$01$i$i$i = $__p$01$i$i$i + 1 | 0;
  }
 }
 $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i + ($__hi + (0 - $0)) | 0;
 HEAP8[$__p$0$lcssa$i$i$i >> 0] = 0;
 STACKTOP = sp;
 return;
}
function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $3 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f + 0 | 0;
 src = 15744 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) {
  if (($n | 0) == 0) {
   $$01 = $b;
   $$02 = 1;
  } else {
   $3 = ___errno_location() | 0;
   HEAP32[$3 >> 2] = 75;
   $$0 = -1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  $$01 = $s;
  $$02 = $n;
 }
 $5 = -2 - $$01 | 0;
 $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
 HEAP32[$f + 48 >> 2] = $$$02;
 $8 = $f + 20 | 0;
 HEAP32[$8 >> 2] = $$01;
 HEAP32[$f + 44 >> 2] = $$01;
 $10 = $$01 + $$$02 | 0;
 $11 = $f + 16 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$f + 28 >> 2] = $10;
 $13 = _MUSL_vfprintf($f, $fmt, $ap) | 0;
 if (($$$02 | 0) == 0) {
  $$0 = $13;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = HEAP32[$8 >> 2] | 0;
 HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
 $$0 = $13;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($mx | 0) == 0 | ($frm | 0) == ($frm_end | 0)) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;
  return $nbytes$0$lcssa | 0;
 }
 $2 = $frm_end;
 $3 = $this + 8 | 0;
 $$016 = $frm;
 $nbytes$07 = 0;
 $nwchar_t$08 = 0;
 while (1) {
  $7 = _uselocale(HEAP32[$3 >> 2] | 0) | 0;
  $8 = _mbrlen($$016, $2 - $$016 | 0, $st) | 0;
  if (($7 | 0) != 0) {
   _uselocale($7 | 0) | 0;
  }
  if (($8 | 0) == 0) {
   $$1 = $$016 + 1 | 0;
   $$pn = 1;
  } else if (($8 | 0) == -2 | ($8 | 0) == -1) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 9;
   break;
  } else {
   $$1 = $$016 + $8 | 0;
   $$pn = $8;
  }
  $nbytes$1 = $$pn + $nbytes$07 | 0;
  $nwchar_t$08 = $nwchar_t$08 + 1 | 0;
  if ($nwchar_t$08 >>> 0 >= $mx >>> 0 | ($$1 | 0) == ($frm_end | 0)) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 9;
   break;
  } else {
   $$016 = $$1;
   $nbytes$07 = $nbytes$1;
  }
 }
 if ((label | 0) == 9) {
  STACKTOP = sp;
  return $nbytes$0$lcssa | 0;
 }
 return 0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $11 = 0, $13 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $9 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do {
  if (($__a | 0) == ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $18 = 0;
   $19 = 0;
  } else {
   if ((HEAP8[$__a >> 0] | 0) == 45) {
    HEAP32[$__err >> 2] = 4;
    $18 = 0;
    $19 = 0;
    break;
   }
   $3 = ___errno_location() | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = 0;
   if ((HEAP8[5048] | 0) == 0) {
    if ((___cxa_guard_acquire(5048) | 0) != 0) {
     $9 = _newlocale(2147483647, 5056, 0) | 0;
     HEAP32[1260] = $9;
     ___cxa_guard_release(5048);
    }
   }
   $11 = _strtoull_l($__a, $__p2, $__base, HEAP32[1260] | 0) | 0;
   $13 = HEAP32[$3 >> 2] | 0;
   if (($13 | 0) == 0) {
    HEAP32[$3 >> 2] = $4;
   }
   if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $18 = 0;
    $19 = 0;
    break;
   }
   if (($13 | 0) == 34) {
    HEAP32[$__err >> 2] = 4;
    $18 = -1;
    $19 = -1;
   } else {
    $18 = tempRet0;
    $19 = $11;
   }
  }
 } while (0);
 tempRet0 = $18;
 STACKTOP = sp;
 return $19 | 0;
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$this >> 2] = 2488;
 $1 = $this + 4 | 0;
 __ZNSt3__16localeC2Ev($1);
 $2 = $this + 8 | 0;
 HEAP32[$2 + 0 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$this >> 2] = 1784;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = -1;
 HEAP8[$this + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_($0, $1);
 $7 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 5224) | 0;
 $8 = $this + 36 | 0;
 HEAP32[$8 >> 2] = $7;
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] & 63]($7) | 0;
 $13 = $this + 44 | 0;
 HEAP32[$13 >> 2] = $12;
 $14 = HEAP32[$8 >> 2] | 0;
 $20 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 28 >> 2] & 63]($14) | 0) & 1;
 HEAP8[$this + 53 >> 0] = $20;
 if ((HEAP32[$13 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(1880);
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$this >> 2] = 2424;
 $1 = $this + 4 | 0;
 __ZNSt3__16localeC2Ev($1);
 $2 = $this + 8 | 0;
 HEAP32[$2 + 0 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$this >> 2] = 2040;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = -1;
 HEAP8[$this + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_($0, $1);
 $7 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 5216) | 0;
 $8 = $this + 36 | 0;
 HEAP32[$8 >> 2] = $7;
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] & 63]($7) | 0;
 $13 = $this + 44 | 0;
 HEAP32[$13 >> 2] = $12;
 $14 = HEAP32[$8 >> 2] | 0;
 $20 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 28 >> 2] & 63]($14) | 0) & 1;
 HEAP8[$this + 53 >> 0] = $20;
 if ((HEAP32[$13 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(1880);
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;
  return;
 }
}
function __ZN11SimpleImage10freeMemoryEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $30 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) != 0) {
  __ZdaPv($1);
 }
 $4 = HEAP32[$this + 28 >> 2] | 0;
 $5 = $this + 32 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($6 | 0) != ($4 | 0)) {
  HEAP32[$5 >> 2] = $6 + (~(($6 + -4 + (0 - $4) | 0) >>> 2) << 2);
 }
 $12 = HEAP32[$this + 16 >> 2] | 0;
 $13 = $this + 20 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if (($14 | 0) != ($12 | 0)) {
  HEAP32[$13 >> 2] = $14 + (~(($14 + -4 + (0 - $12) | 0) >>> 2) << 2);
 }
 $20 = HEAP32[$this + 40 >> 2] | 0;
 $21 = $this + 44 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 if (($22 | 0) != ($20 | 0)) {
  HEAP32[$21 >> 2] = $22 + (~(($22 + -4 + (0 - $20) | 0) >>> 2) << 2);
 }
 $28 = HEAP32[$this + 52 >> 2] | 0;
 $29 = $this + 56 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (($30 | 0) == ($28 | 0)) {
  HEAP32[$0 >> 2] = 0;
  $35 = $this + 12 | 0;
  HEAP32[$35 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 HEAP32[$29 >> 2] = $30 + (~(($30 + -4 + (0 - $28) | 0) >>> 2) << 2);
 HEAP32[$0 >> 2] = 0;
 $35 = $this + 12 | 0;
 HEAP32[$35 >> 2] = 1;
 STACKTOP = sp;
 return;
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $0 = 0, $1 = 0, $13 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = $this + 8 | 0;
 $1 = $this + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 $7 = $2 - $3 >> 2;
 do {
  if ($7 >>> 0 > $id >>> 0) {
   $19 = $3;
  } else {
   $9 = $id + 1 | 0;
   if ($7 >>> 0 < $9 >>> 0) {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0, $9 - $7 | 0);
    $19 = HEAP32[$0 >> 2] | 0;
    break;
   }
   if ($7 >>> 0 > $9 >>> 0) {
    $13 = $3 + ($9 << 2) | 0;
    if (($2 | 0) == ($13 | 0)) {
     $19 = $3;
    } else {
     HEAP32[$1 >> 2] = $2 + (~(($2 + -4 + (0 - $13) | 0) >>> 2) << 2);
     $19 = $3;
    }
   } else {
    $19 = $3;
   }
  }
 } while (0);
 $20 = HEAP32[$19 + ($id << 2) >> 2] | 0;
 if (($20 | 0) == 0) {
  $23 = $19;
  $22 = $23 + ($id << 2) | 0;
  HEAP32[$22 >> 2] = $f;
  STACKTOP = sp;
  return;
 }
 __ZNSt3__114__shared_count16__release_sharedEv($20) | 0;
 $23 = HEAP32[$0 >> 2] | 0;
 $22 = $23 + ($id << 2) | 0;
 HEAP32[$22 >> 2] = $f;
 STACKTOP = sp;
 return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12652 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12640 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12628 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12616 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12604 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12592 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12580 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12568 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12556 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12544 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12532 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12520 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12508 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12496);
 STACKTOP = sp;
 return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12116 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12104 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12092 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12080 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12068 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12056 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12044 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12032 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12020 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12008 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11996 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11984 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11972 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11960);
 STACKTOP = sp;
 return;
}
function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $27 = 0, $32 = 0, $6 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  label = 3;
 } else {
  if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) {
   label = 3;
  }
 }
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) >= 0) {
   $9 = HEAP32[$0 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (($9 | 0) == 0) {
    label = 8;
   } else {
    $12 = HEAP32[$f + 4 >> 2] | 0;
    $19 = $9 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0;
    if (($$pre - $12 | 0) > ($19 | 0)) {
     HEAP32[$f + 100 >> 2] = $12 + $19;
    } else {
     label = 8;
    }
   }
   if ((label | 0) == 8) {
    HEAP32[$f + 100 >> 2] = $$pre;
   }
   $$pre3 = HEAP32[$f + 4 >> 2] | 0;
   if (($$pre | 0) != 0) {
    $27 = $f + 108 | 0;
    HEAP32[$27 >> 2] = $$pre + 1 - $$pre3 + (HEAP32[$27 >> 2] | 0);
   }
   $32 = $$pre3 + -1 | 0;
   if ((HEAPU8[$32 >> 0] | 0 | 0) == ($6 | 0)) {
    $$0 = $6;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP8[$32 >> 0] = $6;
   $$0 = $6;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 HEAP32[$f + 100 >> 2] = 0;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $11 = 0, $13 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $3 = 0, $6 = 0, $7 = 0, $i$02 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 5072;
 $0 = $this + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($1 | 0) != ($3 | 0)) {
  $28 = $1;
  $6 = $3;
  $i$02 = 0;
  while (1) {
   $7 = HEAP32[$6 + ($i$02 << 2) >> 2] | 0;
   if (($7 | 0) == 0) {
    $11 = $28;
    $13 = $6;
   } else {
    __ZNSt3__114__shared_count16__release_sharedEv($7) | 0;
    $11 = HEAP32[$0 >> 2] | 0;
    $13 = HEAP32[$2 >> 2] | 0;
   }
   $i$02 = $i$02 + 1 | 0;
   if (!($i$02 >>> 0 < $11 - $13 >> 2 >>> 0)) {
    break;
   } else {
    $28 = $11;
    $6 = $13;
   }
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 144 | 0);
 $18 = HEAP32[$2 >> 2] | 0;
 if (($18 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $20 = HEAP32[$0 >> 2] | 0;
 if (($20 | 0) != ($18 | 0)) {
  HEAP32[$0 >> 2] = $20 + (~(($20 + -4 + (0 - $18) | 0) >>> 2) << 2);
 }
 if (($this + 24 | 0) == ($18 | 0)) {
  HEAP8[$this + 136 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  __ZdlPv($18);
  STACKTOP = sp;
  return;
 }
}
function __ZN11SimpleImageD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $19 = 0, $21 = 0, $22 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 __ZN11SimpleImage10freeMemoryEv($this);
 $1 = HEAP32[$this + 52 >> 2] | 0;
 if (($1 | 0) != 0) {
  $3 = $this + 56 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = $4 + (~(($4 + -4 + (0 - $1) | 0) >>> 2) << 2);
  }
  __ZdlPv($1);
 }
 $10 = HEAP32[$this + 40 >> 2] | 0;
 if (($10 | 0) != 0) {
  $12 = $this + 44 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if (($13 | 0) != ($10 | 0)) {
   HEAP32[$12 >> 2] = $13 + (~(($13 + -4 + (0 - $10) | 0) >>> 2) << 2);
  }
  __ZdlPv($10);
 }
 $19 = HEAP32[$this + 28 >> 2] | 0;
 if (($19 | 0) != 0) {
  $21 = $this + 32 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  if (($22 | 0) != ($19 | 0)) {
   HEAP32[$21 >> 2] = $22 + (~(($22 + -4 + (0 - $19) | 0) >>> 2) << 2);
  }
  __ZdlPv($19);
 }
 $28 = HEAP32[$this + 16 >> 2] | 0;
 if (($28 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $30 = $this + 20 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 if (($31 | 0) != ($28 | 0)) {
  HEAP32[$30 >> 2] = $31 + (~(($31 + -4 + (0 - $28) | 0) >>> 2) << 2);
 }
 __ZdlPv($28);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $1 = 0, $13 = 0, $15 = 0, $16 = 0, $5 = 0, $__nar = 0, $__nb = 0, $fmt$i = 0, $mb = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $fmt$i = sp + 112 | 0;
 $__nar = sp + 12 | 0;
 $mb = sp;
 $__nb = sp + 8 | 0;
 HEAP8[$fmt$i >> 0] = 37;
 $0 = $fmt$i + 1 | 0;
 HEAP8[$0 >> 0] = $__fmt;
 $1 = $fmt$i + 2 | 0;
 HEAP8[$1 >> 0] = $__mod;
 HEAP8[$fmt$i + 3 >> 0] = 0;
 if (!($__mod << 24 >> 24 == 0)) {
  HEAP8[$0 >> 0] = $__mod;
  HEAP8[$1 >> 0] = $__fmt;
 }
 _strftime_l($__nar | 0, 100, $fmt$i | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0;
 $5 = $mb;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$__nb >> 2] = $__nar;
 $13 = (HEAP32[$__we >> 2] | 0) - $__wb >> 2;
 $15 = _uselocale(HEAP32[$this >> 2] | 0) | 0;
 $16 = _mbsrtowcs($__wb, $__nb, $13, $mb) | 0;
 if (($15 | 0) != 0) {
  _uselocale($15 | 0) | 0;
 }
 if (($16 | 0) == -1) {
  __ZNSt3__121__throw_runtime_errorEPKc(6032);
 } else {
  HEAP32[$__we >> 2] = $__wb + ($16 << 2);
  STACKTOP = sp;
  return;
 }
}
function __ZN14HaarClassifier4saveEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var $13 = 0, $19 = 0, $i$01 = 0, $n_probs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $n_probs = sp;
 __ZN10Classifier4saveEP8_IO_FILE($this, $fil);
 _fwrite($this + 28 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 60 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 64 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 68 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 72 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 76 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 80 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 32 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 36 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 40 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 44 | 0, 4, 1, $fil | 0) | 0;
 $13 = $this + 48 | 0;
 HEAP32[$n_probs >> 2] = (HEAP32[$this + 52 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) >> 2;
 _fwrite($n_probs | 0, 4, 1, $fil | 0) | 0;
 $19 = HEAP32[$n_probs >> 2] | 0;
 if (($19 | 0) > 0) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;
  return;
 }
 do {
  _fwrite((HEAP32[$13 >> 2] | 0) + ($i$01 << 2) | 0, 4, 1, $fil | 0) | 0;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) < ($19 | 0));
 STACKTOP = sp;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$1 = 0, $2 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (($this | 0) == ($thrown_type | 0)) {
  $$1 = 1;
  STACKTOP = sp;
  return $$1 | 0;
 }
 if (($thrown_type | 0) == 0) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $2 = ___dynamic_cast($thrown_type, 13920, 13976, 0) | 0;
 if (($2 | 0) == 0) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 dest = $info + 0 | 0;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$info >> 2] = $2;
 HEAP32[$info + 8 >> 2] = $this;
 HEAP32[$info + 12 >> 2] = -1;
 HEAP32[$info + 48 >> 2] = 1;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 7]($2, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
 if ((HEAP32[$info + 24 >> 2] | 0) != 1) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
 $$1 = 1;
 STACKTOP = sp;
 return $$1 | 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmp = sp;
 HEAP32[$to_nxt >> 2] = $to;
 $2 = _uselocale(HEAP32[$this + 8 >> 2] | 0) | 0;
 $3 = _wcrtomb($tmp, 0, $st) | 0;
 if (($2 | 0) != 0) {
  _uselocale($2 | 0) | 0;
 }
 if (($3 | 0) == 0 | ($3 | 0) == -1) {
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = $3 + -1 | 0;
 $6 = HEAP32[$to_nxt >> 2] | 0;
 if ($5 >>> 0 > ($to_end - $6 | 0) >>> 0) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($5 | 0) == 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $14 = $6;
  $n$02 = $5;
  $p$03 = $tmp;
 }
 while (1) {
  $12 = HEAP8[$p$03 >> 0] | 0;
  HEAP32[$to_nxt >> 2] = $14 + 1;
  HEAP8[$14 >> 0] = $12;
  $15 = $n$02 + -1 | 0;
  if (($15 | 0) == 0) {
   $$0 = 0;
   break;
  }
  $14 = HEAP32[$to_nxt >> 2] | 0;
  $n$02 = $15;
  $p$03 = $p$03 + 1 | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $14 = 0, $15 = 0, $24 = 0, $25 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (($0 & 1) == 0) {
  $14 = 10;
  $7 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $14 = ($3 & -2) + -1 | 0;
  $7 = $3 & 255;
 }
 if (($7 & 1) == 0) {
  $15 = ($7 & 255) >>> 1;
 } else {
  $15 = HEAP32[$this + 4 >> 2] | 0;
 }
 if (($14 - $15 | 0) >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $14, $__n - $14 + $15 | 0, $15, $15, 0, $__n, $__s);
  STACKTOP = sp;
  return $this | 0;
 }
 if (($__n | 0) == 0) {
  STACKTOP = sp;
  return $this | 0;
 }
 if (($7 & 1) == 0) {
  $24 = $this + 1 | 0;
 } else {
  $24 = HEAP32[$this + 8 >> 2] | 0;
 }
 _memcpy($24 + $15 | 0, $__s | 0, $__n | 0) | 0;
 $25 = $15 + $__n | 0;
 if ((HEAP8[$this >> 0] & 1) == 0) {
  HEAP8[$this >> 0] = $25 << 1;
 } else {
  HEAP32[$this + 4 >> 2] = $25;
 }
 HEAP8[$24 + $25 >> 0] = 0;
 STACKTOP = sp;
 return $this | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $1 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $28 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) == 0) {
  STACKTOP = sp;
  return $this | 0;
 }
 $1 = HEAP8[$this >> 0] | 0;
 if (($1 & 1) == 0) {
  $15 = 10;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $15 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (($8 & 1) == 0) {
  $16 = ($8 & 255) >>> 1;
 } else {
  $16 = HEAP32[$this + 4 >> 2] | 0;
 }
 if (($15 - $16 | 0) >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $15, $__n - $15 + $16 | 0, $16, $16, 0, 0);
  $21 = HEAP8[$this >> 0] | 0;
 } else {
  $21 = $8;
 }
 if (($21 & 1) == 0) {
  $27 = $this + 1 | 0;
 } else {
  $27 = HEAP32[$this + 8 >> 2] | 0;
 }
 _memset($27 + $16 | 0, $__c | 0, $__n | 0) | 0;
 $28 = $16 + $__n | 0;
 if ((HEAP8[$this >> 0] & 1) == 0) {
  HEAP8[$this >> 0] = $28 << 1;
 } else {
  HEAP32[$this + 4 >> 2] = $28;
 }
 HEAP8[$27 + $28 >> 0] = 0;
 STACKTOP = sp;
 return $this | 0;
}
function __ZN16StrongClassifierD2Ev($this) {
 $this = $this | 0;
 var $$lcssa11 = 0, $$lcssa15 = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $25 = 0, $6 = 0, $7 = 0, $i$019 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 if (($1 | 0) == ($2 | 0)) {
  $$lcssa11 = $1;
  $$lcssa15 = $1;
  $$lcssa17 = $2;
 } else {
  $25 = $1;
  $6 = $2;
  $i$019 = 0;
  while (1) {
   $7 = HEAP32[$6 + ($i$019 << 2) >> 2] | 0;
   if (($7 | 0) == 0) {
    $14 = $25;
    $16 = $6;
   } else {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] & 255]($7);
    $14 = HEAP32[$0 >> 2] | 0;
    $16 = HEAP32[$this >> 2] | 0;
   }
   $i$019 = $i$019 + 1 | 0;
   $15 = $16;
   if (!($i$019 >>> 0 < $14 - $15 >> 2 >>> 0)) {
    $$lcssa11 = $14;
    $$lcssa15 = $16;
    $$lcssa17 = $15;
    break;
   } else {
    $25 = $14;
    $6 = $16;
   }
  }
 }
 if (($$lcssa15 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (($$lcssa11 | 0) != ($$lcssa15 | 0)) {
  HEAP32[$0 >> 2] = $$lcssa11 + (~(($$lcssa11 + -4 + (0 - $$lcssa17) | 0) >>> 2) << 2);
 }
 __ZdlPv($$lcssa15);
 STACKTOP = sp;
 return;
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEEC2ERKS3_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $$01$i = 0, $0 = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $__x + 4 | 0;
 $7 = (HEAP32[$2 >> 2] | 0) - (HEAP32[$__x >> 2] | 0) | 0;
 $8 = $7 >> 2;
 if (($8 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if ($8 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 }
 $11 = __Znwj($7) | 0;
 HEAP32[$0 >> 2] = $11;
 HEAP32[$this >> 2] = $11;
 HEAP32[$1 >> 2] = $11 + ($8 << 2);
 $13 = HEAP32[$__x >> 2] | 0;
 $14 = HEAP32[$2 >> 2] | 0;
 if (($13 | 0) == ($14 | 0)) {
  STACKTOP = sp;
  return;
 }
 $17 = ($14 + -4 + (0 - $13) | 0) >>> 2;
 $$01$i = $13;
 $19 = $11;
 while (1) {
  if (($19 | 0) != 0) {
   HEAPF32[$19 >> 2] = +HEAPF32[$$01$i >> 2];
  }
  $$01$i = $$01$i + 4 | 0;
  if (($$01$i | 0) == ($14 | 0)) {
   break;
  } else {
   $19 = $19 + 4 | 0;
  }
 }
 HEAP32[$0 >> 2] = $11 + ($17 + 1 << 2);
 STACKTOP = sp;
 return;
}
function __ZN10Classifier4saveEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var $2 = 0, $20 = 0, $25 = 0, sp = 0;
 sp = STACKTOP;
 _fwrite($this + 4 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 8 | 0, 4, 1, $fil | 0) | 0;
 $2 = $this + 24 | 0;
 if ((HEAP32[$2 >> 2] | 0) == 0) {
  _fputc(48, $fil | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  _fputc(49, $fil | 0) | 0;
  _fwrite((HEAP32[$2 >> 2] | 0) + 16 | 0, 8, 1, $fil | 0) | 0;
  _fwrite((HEAP32[$2 >> 2] | 0) + 8 | 0, 8, 1, $fil | 0) | 0;
  _fwrite((HEAP32[$2 >> 2] | 0) + 24 | 0, 4, 1, $fil | 0) | 0;
  _fwrite((HEAP32[$2 >> 2] | 0) + 40 | 0, 8, 1, $fil | 0) | 0;
  _fwrite(HEAP32[$2 >> 2] | 0, 4, 1, $fil | 0) | 0;
  _fwrite((HEAP32[$2 >> 2] | 0) + 64 | 0, 8, 1, $fil | 0) | 0;
  _fwrite((HEAP32[$2 >> 2] | 0) + 48 | 0, 4, 1, $fil | 0) | 0;
  _fwrite((HEAP32[$2 >> 2] | 0) + 52 | 0, 4, 1, $fil | 0) | 0;
  $20 = HEAP32[$2 >> 2] | 0;
  _fwrite(HEAP32[$20 + 60 >> 2] | 0, 4, HEAP32[$20 + 48 >> 2] | 0, $fil | 0) | 0;
  $25 = HEAP32[$2 >> 2] | 0;
  _fwrite(HEAP32[$25 + 56 >> 2] | 0, 8, HEAP32[$25 + 52 >> 2] | 0, $fil | 0) | 0;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this | 0;
 var $$pre12 = 0, $11 = 0, $14 = 0, $2 = 0, $22 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[$this + ($2 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp;
  return $this | 0;
 }
 HEAP8[$__s >> 0] = 0;
 HEAP32[$__s + 4 >> 2] = $this;
 if ((HEAP32[$this + ($2 + 16) >> 2] | 0) == 0) {
  $11 = HEAP32[$this + ($2 + 72) >> 2] | 0;
  if (($11 | 0) == 0) {
   $$pre12 = $2;
  } else {
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($11) | 0;
   $$pre12 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
  }
  HEAP8[$__s >> 0] = 1;
  $14 = HEAP32[$this + ($$pre12 + 24) >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 63]($14) | 0) == -1) {
   $22 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
   __ZNSt3__18ios_base5clearEj($this + $22 | 0, HEAP32[$this + ($22 + 16) >> 2] | 1);
  }
 }
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $this | 0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $$pre12 = 0, $11 = 0, $14 = 0, $2 = 0, $22 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[$this + ($2 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp;
  return $this | 0;
 }
 HEAP8[$__s >> 0] = 0;
 HEAP32[$__s + 4 >> 2] = $this;
 if ((HEAP32[$this + ($2 + 16) >> 2] | 0) == 0) {
  $11 = HEAP32[$this + ($2 + 72) >> 2] | 0;
  if (($11 | 0) == 0) {
   $$pre12 = $2;
  } else {
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11) | 0;
   $$pre12 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
  }
  HEAP8[$__s >> 0] = 1;
  $14 = HEAP32[$this + ($$pre12 + 24) >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 63]($14) | 0) == -1) {
   $22 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
   __ZNSt3__18ios_base5clearEj($this + $22 | 0, HEAP32[$this + ($22 + 16) >> 2] | 1);
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $this | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $28 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strlen($__s | 0) | 0;
 $1 = HEAP8[$this >> 0] | 0;
 if (($1 & 1) == 0) {
  $10 = $1;
  $8 = 10;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $10 = $4 & 255;
  $8 = ($4 & -2) + -1 | 0;
 }
 $11 = ($10 & 1) == 0;
 if ($8 >>> 0 < $0 >>> 0) {
  if ($11) {
   $28 = ($10 & 255) >>> 1;
  } else {
   $28 = HEAP32[$this + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $8, $0 - $8 | 0, $28, 0, $28, $0, $__s);
  STACKTOP = sp;
  return $this | 0;
 }
 if ($11) {
  $15 = $this + 1 | 0;
 } else {
  $15 = HEAP32[$this + 8 >> 2] | 0;
 }
 _memmove($15 | 0, $__s | 0, $0 | 0) | 0;
 HEAP8[$15 + $0 >> 0] = 0;
 if ((HEAP8[$this >> 0] & 1) == 0) {
  HEAP8[$this >> 0] = $0 << 1;
  STACKTOP = sp;
  return $this | 0;
 } else {
  HEAP32[$this + 4 >> 2] = $0;
  STACKTOP = sp;
  return $this | 0;
 }
 return 0;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $12 = 0, $18 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if (($this | 0) != (HEAP32[$info + 8 >> 2] | 0)) {
  $18 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] & 7]($18, $info, $adjustedPtr, $path_below);
  STACKTOP = sp;
  return;
 }
 $3 = $info + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) == 0) {
  HEAP32[$3 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 if (($4 | 0) != ($adjustedPtr | 0)) {
  $12 = $info + 36 | 0;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  HEAP32[$info + 24 >> 2] = 2;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $9 = $info + 24 | 0;
 if ((HEAP32[$9 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$9 >> 2] = $path_below;
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $14 = 0, $2 = 0, $3 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 $1 = $this + 12 | 0;
 $2 = $this + 16 | 0;
 $$01 = $__s;
 $__i$02 = 0;
 while (1) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$1 >> 2] = $3 + 1;
   $storemerge = HEAP8[$3 >> 0] | 0;
  } else {
   $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0;
   if (($11 | 0) == -1) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $storemerge = $11 & 255;
  }
  HEAP8[$$01 >> 0] = $storemerge;
  $14 = $__i$02 + 1 | 0;
  if (($14 | 0) < ($__n | 0)) {
   $$01 = $$01 + 1 | 0;
   $__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label | 0) == 8) {
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 return 0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 if (($0 & 1) == 0) {
  $7 = 1;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $7 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 if ($7 >>> 0 < $__n >>> 0) {
  if ($10) {
   $27 = ($9 & 255) >>> 1;
  } else {
   $27 = HEAP32[$this + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $7, $__n - $7 | 0, $27, 0, $27, $__n, $__s);
  STACKTOP = sp;
  return $this | 0;
 }
 if ($10) {
  $14 = $this + 4 | 0;
 } else {
  $14 = HEAP32[$this + 8 >> 2] | 0;
 }
 _wmemmove($14, $__s, $__n) | 0;
 HEAP32[$14 + ($__n << 2) >> 2] = 0;
 if ((HEAP8[$this >> 0] & 1) == 0) {
  HEAP8[$this >> 0] = $__n << 1;
  STACKTOP = sp;
  return $this | 0;
 } else {
  HEAP32[$this + 4 >> 2] = $__n;
  STACKTOP = sp;
  return $this | 0;
 }
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $13 = 0, $2 = 0, $3 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 $1 = $this + 12 | 0;
 $2 = $this + 16 | 0;
 $$01 = $__s;
 $__i$02 = 0;
 while (1) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$1 >> 2] = $3 + 4;
   $storemerge = HEAP32[$3 >> 2] | 0;
  } else {
   $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0;
   if (($11 | 0) == -1) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01 >> 2] = $storemerge;
  $13 = $__i$02 + 1 | 0;
  if (($13 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $$01 = $$01 + 4 | 0;
  $__i$02 = $13;
 }
 if ((label | 0) == 8) {
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 return 0;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : do {
  if (($__lo2 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;
   $$024 = $__lo1;
   while (1) {
    if (($$024 | 0) == ($__hi1 | 0)) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024 >> 0] | 0;
    $3 = HEAP8[$$015 >> 0] | 0;
    if ($2 << 24 >> 24 < $3 << 24 >> 24) {
     $$0 = -1;
     break L1;
    }
    if ($3 << 24 >> 24 < $2 << 24 >> 24) {
     $$0 = 1;
     break L1;
    }
    $6 = $$024 + 1 | 0;
    $$015 = $$015 + 1 | 0;
    if (($$015 | 0) == ($__hi2 | 0)) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$024 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 15]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $13 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf | 0, 1, $13 | 0, HEAP32[$4 >> 2] | 0) | 0) != ($13 | 0)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if (($10 | 0) == 2) {
   $$0 = -1;
   label = 5;
   break;
  } else if (($10 | 0) != 1) {
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) {
  $$0 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 15]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $13 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf | 0, 1, $13 | 0, HEAP32[$4 >> 2] | 0) | 0) != ($13 | 0)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if (($10 | 0) == 2) {
   $$0 = -1;
   label = 5;
   break;
  } else if (($10 | 0) != 1) {
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) {
  $$0 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNSt3__18ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 var $0 = 0, $13 = 0, $18 = 0, $3 = 0, $tmpcast$i$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$i$byval_copy = sp + 8 | 0;
 $0 = sp;
 $3 = (HEAP32[$this + 24 >> 2] | 0) == 0;
 if ($3) {
  HEAP32[$this + 16 >> 2] = $state | 1;
 } else {
  HEAP32[$this + 16 >> 2] = $state;
 }
 if ((($3 & 1 | $state) & HEAP32[$this + 20 >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $13 = ___cxa_allocate_exception(16) | 0;
 if ((HEAP8[2768] | 0) == 0) {
  if ((___cxa_guard_acquire(2768) | 0) != 0) {
   HEAP32[690] = 3464;
   ___cxa_atexit(45, 2760, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2768);
  }
 }
 $18 = $0;
 HEAP32[$18 >> 2] = 1;
 HEAP32[$18 + 4 >> 2] = 2760;
 HEAP32[$tmpcast$i$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$tmpcast$i$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($13, $tmpcast$i$byval_copy, 2816);
 HEAP32[$13 >> 2] = 2784;
 ___cxa_throw($13 | 0, 2864, 41);
}
function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0, $45 = 0, sp = 0;
 sp = STACKTOP;
 if (($s | 0) == 0) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s >> 0] = $wc;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s >> 0] = $wc >>> 6 | 192;
  HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 55296 | ($wc + -57344 | 0) >>> 0 < 8192) {
  HEAP8[$s >> 0] = $wc >>> 12 | 224;
  HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
  $$0 = 3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($wc + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s >> 0] = $wc >>> 18 | 240;
  HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
  $$0 = 4;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $45 = ___errno_location() | 0;
  HEAP32[$45 >> 2] = 84;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $2 = 0, $7 = 0, $9 = 0.0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $1 = ___errno_location() | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $7 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $7;
   ___cxa_guard_release(5048);
  }
 }
 $9 = +_strtold_l($__a, $__p2, HEAP32[1260] | 0);
 $10 = HEAP32[$1 >> 2] | 0;
 if (($10 | 0) == 0) {
  HEAP32[$1 >> 2] = $2;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 if (($10 | 0) != 34) {
  $$0 = $9;
  STACKTOP = sp;
  return +$$0;
 }
 HEAP32[$__err >> 2] = 4;
 $$0 = $9;
 STACKTOP = sp;
 return +$$0;
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $2 = 0, $7 = 0, $9 = 0.0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $1 = ___errno_location() | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $7 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $7;
   ___cxa_guard_release(5048);
  }
 }
 $9 = +_strtold_l($__a, $__p2, HEAP32[1260] | 0);
 $10 = HEAP32[$1 >> 2] | 0;
 if (($10 | 0) == 0) {
  HEAP32[$1 >> 2] = $2;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 if (($10 | 0) != 34) {
  $$0 = $9;
  STACKTOP = sp;
  return +$$0;
 }
 HEAP32[$__err >> 2] = 4;
 $$0 = $9;
 STACKTOP = sp;
 return +$$0;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1 : do {
  if (($__lo2 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;
   $$024 = $__lo1;
   while (1) {
    if (($$024 | 0) == ($__hi1 | 0)) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024 >> 2] | 0;
    $3 = HEAP32[$$015 >> 2] | 0;
    if (($2 | 0) < ($3 | 0)) {
     $$0 = -1;
     break L1;
    }
    if (($3 | 0) < ($2 | 0)) {
     $$0 = 1;
     break L1;
    }
    $6 = $$024 + 4 | 0;
    $$015 = $$015 + 4 | 0;
    if (($$015 | 0) == ($__hi2 | 0)) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$024 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $1 = 0, $16 = 0, $2 = 0, $3 = 0, $6 = 0, $__i$0$lcssa = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 $1 = $this + 24 | 0;
 $2 = $this + 28 | 0;
 $$02 = $__s;
 $__i$01 = 0;
 while (1) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   $6 = HEAP8[$$02 >> 0] | 0;
   HEAP32[$1 >> 2] = $3 + 1;
   HEAP8[$3 >> 0] = $6;
  } else {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAPU8[$$02 >> 0] | 0) | 0) == -1) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $16 = $__i$01 + 1 | 0;
  if (($16 | 0) < ($__n | 0)) {
   $$02 = $$02 + 1 | 0;
   $__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $1 = 0, $14 = 0, $2 = 0, $3 = 0, $6 = 0, $__i$0$lcssa = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (($__n | 0) <= 0) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 $1 = $this + 24 | 0;
 $2 = $this + 28 | 0;
 $$02 = $__s;
 $__i$01 = 0;
 while (1) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   $6 = HEAP32[$$02 >> 2] | 0;
   HEAP32[$1 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = $6;
  } else {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAP32[$$02 >> 2] | 0) | 0) == -1) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = $__i$01 + 1 | 0;
  if (($14 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $$02 = $$02 + 4 | 0;
  $__i$01 = $14;
 }
 if ((label | 0) == 8) {
  STACKTOP = sp;
  return $__i$0$lcssa | 0;
 }
 return 0;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $16 = 0, $21 = 0, $27 = 0, $30 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[$1 + ($4 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$1 + ($4 + 16) >> 2] | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$1 + ($4 + 4) >> 2] & 8192 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (__ZSt18uncaught_exceptionv() | 0) {
  STACKTOP = sp;
  return;
 }
 $16 = HEAP32[$0 >> 2] | 0;
 $21 = HEAP32[$16 + ((HEAP32[(HEAP32[$16 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 63]($21) | 0) == -1)) {
  STACKTOP = sp;
  return;
 }
 $27 = HEAP32[$0 >> 2] | 0;
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj($27 + $30 | 0, HEAP32[$27 + ($30 + 16) >> 2] | 1);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $16 = 0, $21 = 0, $27 = 0, $30 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0;
 if ((HEAP32[$1 + ($4 + 24) >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$1 + ($4 + 16) >> 2] | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$1 + ($4 + 4) >> 2] & 8192 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (__ZSt18uncaught_exceptionv() | 0) {
  STACKTOP = sp;
  return;
 }
 $16 = HEAP32[$0 >> 2] | 0;
 $21 = HEAP32[$16 + ((HEAP32[(HEAP32[$16 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 if (!((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 63]($21) | 0) == -1)) {
  STACKTOP = sp;
  return;
 }
 $27 = HEAP32[$0 >> 2] | 0;
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj($27 + $30 | 0, HEAP32[$27 + ($30 + 16) >> 2] | 1);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $2 = 0, $7 = 0, $9 = 0.0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $1 = ___errno_location() | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $7 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $7;
   ___cxa_guard_release(5048);
  }
 }
 $9 = +_strtold_l($__a, $__p2, HEAP32[1260] | 0);
 $10 = HEAP32[$1 >> 2] | 0;
 if (($10 | 0) == 0) {
  HEAP32[$1 >> 2] = $2;
 }
 if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 if (($10 | 0) == 34) {
  HEAP32[$__err >> 2] = 4;
 }
 $$0 = $9;
 STACKTOP = sp;
 return +$$0;
}
function __Z18copyRGBToGrayscalePhS_iii($dest, $RGBSource, $w, $h, $extra) {
 $dest = $dest | 0;
 $RGBSource = $RGBSource | 0;
 $w = $w | 0;
 $h = $h | 0;
 $extra = $extra | 0;
 var $1 = 0, $3 = 0, $4 = 0, $ptrd$03 = 0, $ptrs$02 = 0, $x$01 = 0, $y$04 = 0, sp = 0;
 sp = STACKTOP;
 if (($h | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $1 = $h + -1 | 0;
 $3 = ($extra + $w | 0) * 3 | 0;
 $4 = ($w | 0) > 0;
 $y$04 = 0;
 do {
  if ($4) {
   $ptrd$03 = $dest + (Math_imul($1 - $y$04 | 0, $w) | 0) | 0;
   $ptrs$02 = $RGBSource + (Math_imul($3, $y$04) | 0) | 0;
   $x$01 = 0;
   while (1) {
    HEAP8[$ptrd$03 >> 0] = (((HEAPU8[$ptrs$02 + 1 >> 0] | 0) + (HEAPU8[$ptrs$02 >> 0] | 0) + (HEAPU8[$ptrs$02 + 2 >> 0] | 0) | 0) >>> 0) / 3 | 0;
    $x$01 = $x$01 + 1 | 0;
    if (($x$01 | 0) == ($w | 0)) {
     break;
    } else {
     $ptrd$03 = $ptrd$03 + 1 | 0;
     $ptrs$02 = $ptrs$02 + 3 | 0;
    }
   }
  }
  $y$04 = $y$04 + 1 | 0;
 } while (($y$04 | 0) != ($h | 0));
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $13 = 0, $14 = 0, $4 = 0, $6 = 0, $__p$0$i$i = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[$__str >> 0] & 1) == 0) {
  HEAP32[$this + 0 >> 2] = HEAP32[$__str + 0 >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
  STACKTOP = sp;
  return;
 }
 $4 = HEAP32[$__str + 8 >> 2] | 0;
 $6 = HEAP32[$__str + 4 >> 2] | 0;
 if ($6 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ($6 >>> 0 < 11) {
  HEAP8[$this >> 0] = $6 << 1;
  $__p$0$i$i = $this + 1 | 0;
 } else {
  $13 = $6 + 16 & -16;
  $14 = __Znwj($13) | 0;
  HEAP32[$this + 8 >> 2] = $14;
  HEAP32[$this >> 2] = $13 | 1;
  HEAP32[$this + 4 >> 2] = $6;
  $__p$0$i$i = $14;
 }
 _memcpy($__p$0$i$i | 0, $4 | 0, $6 | 0) | 0;
 HEAP8[$__p$0$i$i + $6 >> 0] = 0;
 STACKTOP = sp;
 return;
}
function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $18 = 0.0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0, sp = 0;
 sp = STACKTOP;
 if (($n | 0) > 1023) {
  $1 = $x * 8.98846567431158e+307;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8.98846567431158e+307;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else {
  if (($n | 0) < -1022) {
   $8 = $x * 2.2250738585072014e-308;
   $9 = $n + 1022 | 0;
   if (($9 | 0) < -1022) {
    $12 = $n + 2044 | 0;
    $$0 = ($12 | 0) < -1022 ? -1022 : $12;
    $y$0 = $8 * 2.2250738585072014e-308;
   } else {
    $$0 = $9;
    $y$0 = $8;
   }
  } else {
   $$0 = $n;
   $y$0 = $x;
  }
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 $18 = $y$0 * +HEAPF64[tempDoublePtr >> 3];
 STACKTOP = sp;
 return +$18;
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 var $$idx1 = 0, $$idx1$val$field = 0, $$idx1$val$field2 = 0, $$idx1$val$index1 = 0, $1 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $$idx1 = $__vp + 4 | 0;
 $$idx1$val$field = HEAPU8[$$idx1 >> 0] | HEAPU8[$$idx1 + 1 >> 0] << 8 | HEAPU8[$$idx1 + 2 >> 0] << 16 | HEAPU8[$$idx1 + 3 >> 0] << 24;
 $$idx1$val$index1 = $$idx1 + 4 | 0;
 $$idx1$val$field2 = HEAPU8[$$idx1$val$index1 >> 0] | HEAPU8[$$idx1$val$index1 + 1 >> 0] << 8 | HEAPU8[$$idx1$val$index1 + 2 >> 0] << 16 | HEAPU8[$$idx1$val$index1 + 3 >> 0] << 24;
 $1 = (HEAP32[$__vp >> 2] | 0) + ($$idx1$val$field2 >> 1) | 0;
 if (($$idx1$val$field2 & 1 | 0) == 0) {
  $8 = $$idx1$val$field;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  STACKTOP = sp;
  return;
 } else {
  $8 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$idx1$val$field >> 2] | 0;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  STACKTOP = sp;
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $12 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$info + 8 >> 2] | 0) != ($this | 0)) {
  STACKTOP = sp;
  return;
 }
 $3 = $info + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) == 0) {
  HEAP32[$3 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 if (($4 | 0) != ($adjustedPtr | 0)) {
  $12 = $info + 36 | 0;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  HEAP32[$info + 24 >> 2] = 2;
  HEAP8[$info + 54 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $9 = $info + 24 | 0;
 if ((HEAP32[$9 >> 2] | 0) != 2) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$9 >> 2] = $path_below;
 STACKTOP = sp;
 return;
}
function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $3 = 0, $8 = 0, $9 = 0, $mem$0 = 0, sp = 0;
 sp = STACKTOP;
 do {
  if (($oldmem | 0) == 0) {
   $mem$0 = _malloc($bytes) | 0;
  } else {
   if ($bytes >>> 0 > 4294967231) {
    $3 = ___errno_location() | 0;
    HEAP32[$3 >> 2] = 12;
    $mem$0 = 0;
    break;
   }
   if ($bytes >>> 0 < 11) {
    $8 = 16;
   } else {
    $8 = $bytes + 11 & -8;
   }
   $9 = _try_realloc_chunk($oldmem + -8 | 0, $8) | 0;
   if (($9 | 0) != 0) {
    $mem$0 = $9 + 8 | 0;
    break;
   }
   $12 = _malloc($bytes) | 0;
   if (($12 | 0) == 0) {
    $mem$0 = 0;
   } else {
    $15 = HEAP32[$oldmem + -4 >> 2] | 0;
    $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
    _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $mem$0 | 0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 4208, 4240 | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 4056, 4064 | 0);
 STACKTOP = sp;
 return;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0, $11 = 0, $18 = 0, $20 = 0, $7 = 0, $__p$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i$i = sp;
 $0 = HEAP32[$this >> 2] | 0;
 if (!((HEAP32[$x >> 2] | 0) == -1)) {
  HEAP32[$__p$i$i >> 2] = $x;
  HEAP32[$__p$i$i + 4 >> 2] = 123;
  HEAP32[$__p$i$i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($x, $__p$i$i, 124);
 }
 $7 = (HEAP32[$x + 4 >> 2] | 0) + -1 | 0;
 $11 = HEAP32[$0 + 8 >> 2] | 0;
 if (!((HEAP32[$0 + 12 >> 2] | 0) - $11 >> 2 >>> 0 > $7 >>> 0)) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 }
 $18 = HEAP32[$11 + ($7 << 2) >> 2] | 0;
 if (($18 | 0) == 0) {
  $20 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw($20 | 0, 13864, 113);
 } else {
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}
function __ZNKSt3__112__do_message7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var $0 = 0, $1 = 0, $13 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strerror($ev | 0) | 0;
 $1 = _strlen($0 | 0) | 0;
 if ($1 >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ($1 >>> 0 < 11) {
  HEAP8[$agg$result >> 0] = $1 << 1;
  $__p$0$i$i$i = $agg$result + 1 | 0;
  _memcpy($__p$0$i$i$i | 0, $0 | 0, $1 | 0) | 0;
  $13 = $__p$0$i$i$i + $1 | 0;
  HEAP8[$13 >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  $8 = $1 + 16 & -16;
  $9 = __Znwj($8) | 0;
  HEAP32[$agg$result + 8 >> 2] = $9;
  HEAP32[$agg$result >> 2] = $8 | 1;
  HEAP32[$agg$result + 4 >> 2] = $1;
  $__p$0$i$i$i = $9;
  _memcpy($__p$0$i$i$i | 0, $0 | 0, $1 | 0) | 0;
  $13 = $__p$0$i$i$i + $1 | 0;
  HEAP8[$13 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}
function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 if (($4 | 0) == 2047) {
  $$0 = $x;
  STACKTOP = sp;
  return +$$0;
 } else if (($4 | 0) == 0) {
  if ($x != 0.0) {
   $7 = +_frexp($x * 18446744073709552000.0, $e);
   $$01 = $7;
   $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
  } else {
   $$01 = $x;
   $storemerge = 0;
  }
  HEAP32[$e >> 2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;
  return +$$0;
 } else {
  HEAP32[$e >> 2] = $4 + -1022;
  HEAP32[tempDoublePtr >> 2] = $0;
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
  $$0 = +HEAPF64[tempDoublePtr >> 3];
  STACKTOP = sp;
  return +$$0;
 }
 return 0.0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp;
 $0 = sp + 4 | 0;
 $1 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, 0, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $13 = 0, $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[$this + 44 >> 0] | 0) != 0) {
  $$0 = _fwrite($__s | 0, 4, $__n | 0, HEAP32[$this + 32 >> 2] | 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__n | 0) > 0) {
  $$012 = $__s;
  $__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 while (1) {
  if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAP32[$$012 >> 2] | 0) | 0) == -1) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = $__i$03 + 1 | 0;
  if (($13 | 0) < ($__n | 0)) {
   $$012 = $$012 + 4 | 0;
   $__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $14 = 0, $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[$this + 44 >> 0] | 0) != 0) {
  $$0 = _fwrite($__s | 0, 1, $__n | 0, HEAP32[$this + 32 >> 2] | 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($__n | 0) > 0) {
  $$012 = $__s;
  $__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 while (1) {
  if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAPU8[$$012 >> 0] | 0) | 0) == -1) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = $__i$03 + 1 | 0;
  if (($14 | 0) < ($__n | 0)) {
   $$012 = $$012 + 1 | 0;
   $__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function _strtold_l($s, $p, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $loc = $loc | 0;
 var $0 = 0, $1 = 0, $12 = 0, $16 = 0, $4 = 0.0, $f$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i$i = sp;
 dest = $f$i$i + 0 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f$i$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f$i$i + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f$i$i + 44 >> 2] = $s;
 HEAP32[$f$i$i + 76 >> 2] = -1;
 ___shlim($f$i$i, 0);
 $4 = +___floatscan($f$i$i, 2, 1);
 $12 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f$i$i + 108 >> 2] | 0) | 0;
 if (($p | 0) == 0) {
  STACKTOP = sp;
  return +$4;
 }
 if (($12 | 0) == 0) {
  $16 = $s;
 } else {
  $16 = $s + $12 | 0;
 }
 HEAP32[$p >> 2] = $16;
 STACKTOP = sp;
 return +$4;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm >> 1 << 1);
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to);
 STACKTOP = sp;
 return $1 | 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm);
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to >> 1 << 1);
 STACKTOP = sp;
 return $1 | 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm >> 2 << 2);
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to);
 STACKTOP = sp;
 return $1 | 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm);
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to >> 2 << 2);
 STACKTOP = sp;
 return $1 | 0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5528] | 0) != 0) {
  $8 = HEAP32[1380] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((___cxa_guard_acquire(5528) | 0) == 0) {
  $8 = HEAP32[1380] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((HEAP8[10584] | 0) == 0) {
  if ((___cxa_guard_acquire(10584) | 0) != 0) {
   _memset(10296, 0, 288) | 0;
   ___cxa_atexit(131, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(10584);
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10296, 10592) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10308 | 0, 10600) | 0;
 HEAP32[1380] = 10296;
 ___cxa_guard_release(5528);
 $8 = HEAP32[1380] | 0;
 STACKTOP = sp;
 return $8 | 0;
}
function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $ap2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap2 = sp;
 $0 = _malloc(240) | 0;
 do {
  if (($0 | 0) == 0) {
   $$0 = -1;
  } else {
   HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
   $2 = _vsnprintf($0, 240, $fmt, $ap2) | 0;
   if ($2 >>> 0 < 240) {
    $5 = _realloc($0, $2 + 1 | 0) | 0;
    HEAP32[$s >> 2] = ($5 | 0) != 0 ? $5 : $0;
    $$0 = $2;
    break;
   }
   _free($0);
   if (($2 | 0) < 0) {
    $$0 = -1;
   } else {
    $9 = $2 + 1 | 0;
    $10 = _malloc($9) | 0;
    HEAP32[$s >> 2] = $10;
    if (($10 | 0) == 0) {
     $$0 = -1;
    } else {
     $$0 = _vsnprintf($10, $9, $fmt, $ap) | 0;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 var $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5544] | 0) != 0) {
  $8 = HEAP32[1384] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((___cxa_guard_acquire(5544) | 0) == 0) {
  $8 = HEAP32[1384] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 if ((HEAP8[10256] | 0) == 0) {
  if ((___cxa_guard_acquire(10256) | 0) != 0) {
   _memset(9968, 0, 288) | 0;
   ___cxa_atexit(132, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(10256);
  }
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(9968, 10264) | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(9980 | 0, 10280) | 0;
 HEAP32[1384] = 9968;
 ___cxa_guard_release(5544);
 $8 = HEAP32[1384] | 0;
 STACKTOP = sp;
 return $8 | 0;
}
function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
 }
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (($15 & 20 | 0) == 0) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($15 & 4 | 0) == 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$f >> 2] = $15 | 32;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN19BoostedFaceDetectorC2EPKcbb($this, $filename, $probabilistic, $tree_classifier) {
 $this = $this | 0;
 $filename = $filename | 0;
 $probabilistic = $probabilistic | 0;
 $tree_classifier = $tree_classifier | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 $1 = $this + 8 | 0;
 $2 = $probabilistic & 1;
 HEAP32[$0 + 0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP8[$1 >> 0] = $2;
 $3 = _fopen($filename | 0, 120) | 0;
 if (($3 | 0) == 0) {
  HEAP8[$this >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  __ZN18CascadedClassifier4loadEP8_IO_FILE($0, $3);
  _fclose($3 | 0) | 0;
  HEAP8[$this >> 0] = 1;
  STACKTOP = sp;
  return;
 }
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return $10$0 | 0;
}
function __ZN11SimpleImage18convertToGrayscaleEv($this) {
 $this = $this | 0;
 var $0 = 0, $11 = 0, $12 = 0, $14 = 0, $3 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 if ((HEAP32[$0 >> 2] | 0) != 3) {
  STACKTOP = sp;
  return $this | 0;
 }
 $3 = HEAP32[$this >> 2] | 0;
 if (($3 | 0) < 0) {
  STACKTOP = sp;
  return $this | 0;
 }
 $6 = HEAP32[$this + 4 >> 2] | 0;
 if (($6 | 0) < 0) {
  STACKTOP = sp;
  return $this | 0;
 }
 $8 = Math_imul($6, $3) | 0;
 $11 = __Znaj(($8 | 0) > -1 ? $8 : -1) | 0;
 $12 = $this + 8 | 0;
 __Z18copyRGBToGrayscalePhS_iii($11, HEAP32[$12 >> 2] | 0, $3, $6, 0);
 $14 = HEAP32[$12 >> 2] | 0;
 if (($14 | 0) != 0) {
  __ZdaPv($14);
 }
 HEAP32[$12 >> 2] = $11;
 HEAP32[$0 >> 2] = 1;
 STACKTOP = sp;
 return $this | 0;
}
function __ZN19BoostedFaceDetectorD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 24 >> 2] | 0;
 if (($1 | 0) != 0) {
  $3 = $this + 28 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = $4 + (~((($4 + -24 + (0 - $1) | 0) >>> 0) / 24 | 0) * 24 | 0);
  }
  __ZdlPv($1);
 }
 $9 = $this + 12 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $12 = $this + 16 | 0;
 while (1) {
  $13 = HEAP32[$12 >> 2] | 0;
  if (($13 | 0) == ($10 | 0)) {
   break;
  }
  $15 = $13 + -16 | 0;
  HEAP32[$12 >> 2] = $15;
  __ZN16StrongClassifierD2Ev($15);
 }
 __ZdlPv(HEAP32[$9 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
  STACKTOP = sp;
  return $$01$lcssa | 0;
 } else {
  $$013 = $low;
  $$04 = $vec;
 }
 while (1) {
  $1 = HEAP32[$$013 >> 2] | 0;
  if ($1 >>> 0 < 128) {
   $2 = ___ctype_b_loc() | 0;
   $6 = HEAP16[(HEAP32[$2 >> 2] | 0) + ($1 << 1) >> 1] | 0;
  } else {
   $6 = 0;
  }
  HEAP16[$$04 >> 1] = $6;
  $$013 = $$013 + 4 | 0;
  if (($$013 | 0) == ($high | 0)) {
   $$01$lcssa = $high;
   break;
  } else {
   $$04 = $$04 + 2 | 0;
  }
 }
 STACKTOP = sp;
 return $$01$lcssa | 0;
}
function __ZNK11SimpleImage21getSqRotatedRegionSumEiiii($this, $x1, $y1, $w, $h) {
 $this = $this | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $1 = 0, $10 = 0, $16 = 0, $2 = 0, $22 = 0, $28 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0;
 $1 = (HEAP32[$this >> 2] | 0) + 2 | 0;
 $2 = $x1 + 2 | 0;
 $3 = $2 + $w | 0;
 $5 = $y1 + 1 | 0;
 $6 = $5 + $w | 0;
 $8 = $3 + $h + (Math_imul($1, $6) | 0) | 0;
 $10 = HEAP32[$this + 52 >> 2] | 0;
 $16 = $10 + ((Math_imul($1, $5 + $h | 0) | 0) + $2 << 2) | 0;
 $22 = $10 + ($2 + $h + (Math_imul($1, $5) | 0) << 2) | 0;
 $28 = $10 + ((Math_imul($1, $6 + $h | 0) | 0) + $3 << 2) | 0;
 return (HEAP32[$16 >> 2] | 0) + (HEAP32[$10 + ($8 << 2) >> 2] | 0) - (HEAP32[$22 >> 2] | 0) - (HEAP32[$28 >> 2] | 0) | 0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 L1 : do {
  if (($low | 0) == ($high | 0)) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while (1) {
    $3 = HEAP32[$$02 >> 2] | 0;
    if (!($3 >>> 0 < 128)) {
     $$0$lcssa = $$02;
     break L1;
    }
    $4 = ___ctype_b_loc() | 0;
    if ((HEAP16[(HEAP32[$4 >> 2] | 0) + ($3 << 1) >> 1] & $m) << 16 >> 16 == 0) {
     $$0$lcssa = $$02;
     break L1;
    }
    $$02 = $$02 + 4 | 0;
    if (($$02 | 0) == ($high | 0)) {
     $$0$lcssa = $high;
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0$lcssa | 0;
}
function __ZNK11SimpleImage19getRotatedRegionSumEiiii($this, $x1, $y1, $w, $h) {
 $this = $this | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $1 = 0, $10 = 0, $16 = 0, $2 = 0, $22 = 0, $28 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0;
 $1 = (HEAP32[$this >> 2] | 0) + 2 | 0;
 $2 = $x1 + 2 | 0;
 $3 = $2 + $w | 0;
 $5 = $y1 + 1 | 0;
 $6 = $5 + $w | 0;
 $8 = $3 + $h + (Math_imul($1, $6) | 0) | 0;
 $10 = HEAP32[$this + 40 >> 2] | 0;
 $16 = $10 + ((Math_imul($1, $5 + $h | 0) | 0) + $2 << 2) | 0;
 $22 = $10 + ($2 + $h + (Math_imul($1, $5) | 0) << 2) | 0;
 $28 = $10 + ((Math_imul($1, $6 + $h | 0) | 0) + $3 << 2) | 0;
 return (HEAP32[$16 >> 2] | 0) + (HEAP32[$10 + ($8 << 2) >> 2] | 0) - (HEAP32[$22 >> 2] | 0) - (HEAP32[$28 >> 2] | 0) | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $2 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) == 0;
 if ($2) {
  $8 = ($0 & 255) >>> 1;
 } else {
  $8 = HEAP32[$this + 4 >> 2] | 0;
 }
 if ($8 >>> 0 < $__n >>> 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n - $8 | 0, $__c) | 0;
  STACKTOP = sp;
  return;
 }
 if ($2) {
  HEAP8[$this + $__n + 1 >> 0] = 0;
  HEAP8[$this >> 0] = $__n << 1;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[(HEAP32[$this + 8 >> 2] | 0) + $__n >> 0] = 0;
  HEAP32[$this + 4 >> 2] = $__n;
  STACKTOP = sp;
  return;
 }
}
function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0, $7 = 0, $8 = 0, $f$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 HEAP32[$f$i >> 2] = 0;
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 HEAP32[$f$i + 44 >> 2] = $s;
 if (($s | 0) < 0) {
  HEAP32[$f$i + 8 >> 2] = -1;
 } else {
  HEAP32[$f$i + 8 >> 2] = $s + 2147483647;
 }
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $7 = ___intscan($f$i, $base, 1, 0, -2147483648) | 0;
 $8 = tempRet0;
 if (($p | 0) == 0) {
  tempRet0 = $8;
  STACKTOP = sp;
  return $7 | 0;
 }
 HEAP32[$p >> 2] = $s + ((HEAP32[$0 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) - (HEAP32[$f$i + 8 >> 2] | 0));
 tempRet0 = $8;
 STACKTOP = sp;
 return $7 | 0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
  STACKTOP = sp;
  return $$01$lcssa | 0;
 }
 $3 = (($high + -4 + (0 - $low) | 0) >>> 2) + 1 | 0;
 $$012 = $low;
 $$03 = $dest;
 while (1) {
  $4 = HEAP32[$$012 >> 2] | 0;
  HEAP8[$$03 >> 0] = $4 >>> 0 < 128 ? $4 & 255 : $dfault;
  $$012 = $$012 + 4 | 0;
  if (($$012 | 0) == ($high | 0)) {
   break;
  } else {
   $$03 = $$03 + 1 | 0;
  }
 }
 $$01$lcssa = $low + ($3 << 2) | 0;
 STACKTOP = sp;
 return $$01$lcssa | 0;
}
function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0, $7 = 0, $8 = 0, $f$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 HEAP32[$f$i >> 2] = 0;
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 HEAP32[$f$i + 44 >> 2] = $s;
 if (($s | 0) < 0) {
  HEAP32[$f$i + 8 >> 2] = -1;
 } else {
  HEAP32[$f$i + 8 >> 2] = $s + 2147483647;
 }
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $7 = ___intscan($f$i, $base, 1, -1, -1) | 0;
 $8 = tempRet0;
 if (($p | 0) == 0) {
  tempRet0 = $8;
  STACKTOP = sp;
  return $7 | 0;
 }
 HEAP32[$p >> 2] = $s + ((HEAP32[$0 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) - (HEAP32[$f$i + 8 >> 2] | 0));
 tempRet0 = $8;
 STACKTOP = sp;
 return $7 | 0;
}
function __ZN14HaarClassifier14getProbabilityERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $12 = 0, $15 = 0, $17 = 0, $3 = 0.0, $7 = 0.0, sp = 0;
 sp = STACKTOP;
 $3 = +FUNCTION_TABLE_diiiiid[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 7]($this, $img, $hog, $startX, $startY, $scale);
 $7 = +HEAPF32[$this + 40 >> 2];
 $12 = HEAP32[$this + 32 >> 2] | 0;
 $15 = ~~(($3 - $7) / (+HEAPF32[$this + 36 >> 2] - $7) * +($12 | 0));
 $17 = ($12 | 0) < ($15 | 0) ? $12 : $15;
 STACKTOP = sp;
 return +(+HEAPF32[(HEAP32[$this + 48 >> 2] | 0) + ((($17 | 0) > 0 ? $17 : 0) << 2) >> 2]);
}
function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $1 = 0, $3 = 0, $5 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$size = ($size | 0) == 0 ? 1 : $size;
 $1 = _malloc($$size) | 0;
 if (($1 | 0) != 0) {
  $$lcssa = $1;
  STACKTOP = sp;
  return $$lcssa | 0;
 }
 while (1) {
  $3 = __ZSt15get_new_handlerv() | 0;
  if (($3 | 0) == 0) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$3 & 3]();
  $5 = _malloc($$size) | 0;
  if (($5 | 0) != 0) {
   $$lcssa = $5;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  $7 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$7 >> 2] = 13408;
  ___cxa_throw($7 | 0, 13456, 106);
 } else if ((label | 0) == 5) {
  STACKTOP = sp;
  return $$lcssa | 0;
 }
 return 0;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 L1 : do {
  if (($low | 0) == ($high | 0)) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while (1) {
    $1 = HEAP32[$$02 >> 2] | 0;
    if ($1 >>> 0 < 128) {
     $2 = ___ctype_b_loc() | 0;
     if (!((HEAP16[(HEAP32[$2 >> 2] | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16 == 0)) {
      $$0$lcssa = $$02;
      break L1;
     }
    }
    $$02 = $$02 + 4 | 0;
    if (($$02 | 0) == ($high | 0)) {
     $$0$lcssa = $high;
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0$lcssa | 0;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this | 0;
 var $$pre = 0, $$pre1 = 0, $1 = 0, $i$01$i = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2808;
 $1 = HEAP32[$this + 40 >> 2] | 0;
 $$pre = $this + 32 | 0;
 $$pre1 = $this + 36 | 0;
 if (($1 | 0) != 0) {
  $i$01$i = $1;
  do {
   $i$01$i = $i$01$i + -1 | 0;
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[$$pre >> 2] | 0) + ($i$01$i << 2) >> 2] & 3](0, $this, HEAP32[(HEAP32[$$pre1 >> 2] | 0) + ($i$01$i << 2) >> 2] | 0);
  } while (($i$01$i | 0) != 0);
 }
 __ZNSt3__16localeD2Ev($this + 28 | 0);
 _free(HEAP32[$$pre >> 2] | 0);
 _free(HEAP32[$$pre1 >> 2] | 0);
 _free(HEAP32[$this + 48 >> 2] | 0);
 _free(HEAP32[$this + 60 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__16locale8__globalEv() {
 var $10 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5128] | 0) != 0) {
  $10 = HEAP32[1280] | 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 if ((___cxa_guard_acquire(5128) | 0) == 0) {
  $10 = HEAP32[1280] | 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 if ((HEAP8[5104] | 0) == 0) {
  if ((___cxa_guard_acquire(5104) | 0) != 0) {
   __ZNSt3__16locale5__impC2Ej(9496, 1);
   HEAP32[1272] = 9496;
   HEAP32[1274] = 5088;
   ___cxa_guard_release(5104);
  }
 }
 $9 = HEAP32[HEAP32[1274] >> 2] | 0;
 HEAP32[1278] = $9;
 __ZNSt3__114__shared_count12__add_sharedEv($9);
 HEAP32[1280] = 5112;
 ___cxa_guard_release(5128);
 $10 = HEAP32[1280] | 0;
 STACKTOP = sp;
 return $10 | 0;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}
function __ZN14HaarClassifierD0Ev($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 240;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 if (($1 | 0) != 0) {
  $3 = $this + 52 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = $4 + (~(($4 + -4 + (0 - $1) | 0) >>> 2) << 2);
  }
  __ZdlPv($1);
 }
 HEAP32[$this >> 2] = 568;
 $9 = $this + 24 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 | 0) == 0) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$10 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$9 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$9 >> 2] | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__sz >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__sz + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 HEAP8[$__p$0 + $__sz >> 0] = 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__sz >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ($__sz >>> 0 < 2) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__sz + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $8;
 }
 _wmemcpy($__p$0, $__s, $__sz) | 0;
 HEAP32[$__p$0 + ($__sz << 2) >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 _pthread_mutex_lock(2328) | 0;
 if ((HEAP32[$flag >> 2] | 0) == 1) {
  do {
   _pthread_cond_wait(2352, 2328) | 0;
  } while ((HEAP32[$flag >> 2] | 0) == 1);
 }
 if ((HEAP32[$flag >> 2] | 0) == 0) {
  HEAP32[$flag >> 2] = 1;
  _pthread_mutex_unlock(2328) | 0;
  FUNCTION_TABLE_vi[$func & 255]($arg);
  _pthread_mutex_lock(2328) | 0;
  HEAP32[$flag >> 2] = -1;
  _pthread_mutex_unlock(2328) | 0;
  _pthread_cond_broadcast(2352) | 0;
  STACKTOP = sp;
  return;
 } else {
  _pthread_mutex_unlock(2328) | 0;
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5224) | 0;
 $1 = $this + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 63]($0) | 0;
 $6 = $this + 44 | 0;
 HEAP32[$6 >> 2] = $5;
 $7 = HEAP32[$1 >> 2] | 0;
 $13 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 63]($7) | 0) & 1;
 HEAP8[$this + 53 >> 0] = $13;
 if ((HEAP32[$6 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(1880);
 } else {
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5216) | 0;
 $1 = $this + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 63]($0) | 0;
 $6 = $this + 44 | 0;
 HEAP32[$6 >> 2] = $5;
 $7 = HEAP32[$1 >> 2] | 0;
 $13 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 63]($7) | 0) & 1;
 HEAP8[$this + 53 >> 0] = $13;
 if ((HEAP32[$6 >> 2] | 0) > 8) {
  __ZNSt3__121__throw_runtime_errorEPKc(1880);
 } else {
  STACKTOP = sp;
  return;
 }
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
  STACKTOP = sp;
  return $$01$lcssa | 0;
 } else {
  $$013 = $low;
  $$04 = $dest;
 }
 while (1) {
  $1 = HEAP8[$$013 >> 0] | 0;
  HEAP8[$$04 >> 0] = $1 << 24 >> 24 > -1 ? $1 : $dfault;
  $$013 = $$013 + 1 | 0;
  if (($$013 | 0) == ($high | 0)) {
   $$01$lcssa = $high;
   break;
  } else {
   $$04 = $$04 + 1 | 0;
  }
 }
 STACKTOP = sp;
 return $$01$lcssa | 0;
}
function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($n | 0) == 0;
 if ($d - $s >> 2 >>> 0 < $n >>> 0) {
  if (!$5) {
   $$in = $n;
   do {
    $$in = $$in + -1 | 0;
    HEAP32[$d + ($$in << 2) >> 2] = HEAP32[$s + ($$in << 2) >> 2];
   } while (($$in | 0) != 0);
  }
 } else {
  if (!$5) {
   $$025 = $s;
   $$07 = $d;
   $$16 = $n;
   while (1) {
    $$16 = $$16 + -1 | 0;
    HEAP32[$$07 >> 2] = HEAP32[$$025 >> 2];
    if (($$16 | 0) == 0) {
     break;
    } else {
     $$025 = $$025 + 4 | 0;
     $$07 = $$07 + 4 | 0;
    }
   }
  }
 }
 STACKTOP = sp;
 return $d | 0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__n >>> 0 > 4294967279) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ($__n >>> 0 < 11) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__n + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $7;
 }
 _memset($__p$0 | 0, $__c | 0, $__n | 0) | 0;
 HEAP8[$__p$0 + $__n >> 0] = 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 if ($__n >>> 0 > 1073741807) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 }
 if ($__n >>> 0 < 2) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__n + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $8;
 }
 _wmemset($__p$0, $__c, $__n) | 0;
 HEAP32[$__p$0 + ($__n << 2) >> 2] = 0;
 STACKTOP = sp;
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$03 = 0, $1 = 0, $2 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low;
  STACKTOP = sp;
  return $$0$lcssa | 0;
 } else {
  $$03 = $low;
 }
 do {
  $1 = HEAP8[$$03 >> 0] | 0;
  if ($1 << 24 >> 24 > -1) {
   $2 = ___ctype_toupper_loc() | 0;
   $8 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255;
  } else {
   $8 = $1;
  }
  HEAP8[$$03 >> 0] = $8;
  $$03 = $$03 + 1 | 0;
 } while (($$03 | 0) != ($high | 0));
 $$0$lcssa = $high;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$03 = 0, $1 = 0, $2 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low;
  STACKTOP = sp;
  return $$0$lcssa | 0;
 } else {
  $$03 = $low;
 }
 do {
  $1 = HEAP8[$$03 >> 0] | 0;
  if ($1 << 24 >> 24 > -1) {
   $2 = ___ctype_tolower_loc() | 0;
   $8 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255;
  } else {
   $8 = $1;
  }
  HEAP8[$$03 >> 0] = $8;
  $$03 = $$03 + 1 | 0;
 } while (($$03 | 0) != ($high | 0));
 $$0$lcssa = $high;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $3 = 0, $4 = 0, $7 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, sp = 0;
 sp = STACKTOP;
 if (($__lo | 0) == ($__hi | 0)) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;
  return $__h$0$lcssa | 0;
 } else {
  $__h$02 = 0;
  $__p$01 = $__lo;
 }
 while (1) {
  $3 = (HEAP32[$__p$01 >> 2] | 0) + ($__h$02 << 4) | 0;
  $4 = $3 & -268435456;
  $7 = ($4 >>> 24 | $4) ^ $3;
  $__p$01 = $__p$01 + 4 | 0;
  if (($__p$01 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;
  }
 }
 STACKTOP = sp;
 return $__h$0$lcssa | 0;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $4 = 0, $5 = 0, $8 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, sp = 0;
 sp = STACKTOP;
 if (($__lo | 0) == ($__hi | 0)) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;
  return $__h$0$lcssa | 0;
 } else {
  $__h$02 = 0;
  $__p$01 = $__lo;
 }
 while (1) {
  $4 = (HEAP8[$__p$01 >> 0] | 0) + ($__h$02 << 4) | 0;
  $5 = $4 & -268435456;
  $8 = ($5 >>> 24 | $5) ^ $4;
  $__p$01 = $__p$01 + 1 | 0;
  if (($__p$01 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;
  }
 }
 STACKTOP = sp;
 return $__h$0$lcssa | 0;
}
function __ZN14HaarClassifierD1Ev($this) {
 $this = $this | 0;
 var $1 = 0, $10 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 240;
 $1 = HEAP32[$this + 48 >> 2] | 0;
 if (($1 | 0) != 0) {
  $3 = $this + 52 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) != ($1 | 0)) {
   HEAP32[$3 >> 2] = $4 + (~(($4 + -4 + (0 - $1) | 0) >>> 2) << 2);
  }
  __ZdlPv($1);
 }
 HEAP32[$this >> 2] = 568;
 $9 = $this + 24 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (($10 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$10 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$9 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$9 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low;
  STACKTOP = sp;
  return $$0$lcssa | 0;
 } else {
  $$02 = $low;
 }
 do {
  $1 = HEAP32[$$02 >> 2] | 0;
  if ($1 >>> 0 < 128) {
   $2 = ___ctype_toupper_loc() | 0;
   $6 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($1 << 2) >> 2] | 0;
  } else {
   $6 = $1;
  }
  HEAP32[$$02 >> 2] = $6;
  $$02 = $$02 + 4 | 0;
 } while (($$02 | 0) != ($high | 0));
 $$0$lcssa = $high;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$0$lcssa = $low;
  STACKTOP = sp;
  return $$0$lcssa | 0;
 } else {
  $$02 = $low;
 }
 do {
  $1 = HEAP32[$$02 >> 2] | 0;
  if ($1 >>> 0 < 128) {
   $2 = ___ctype_tolower_loc() | 0;
   $6 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($1 << 2) >> 2] | 0;
  } else {
   $6 = $1;
  }
  HEAP32[$$02 >> 2] = $6;
  $$02 = $$02 + 4 | 0;
 } while (($$02 | 0) != ($high | 0));
 $$0$lcssa = $high;
 STACKTOP = sp;
 return $$0$lcssa | 0;
}
function __ZN11SimpleImage12readFromFileEPKc8FileType($this, $filename, $file_type) {
 $this = $this | 0;
 $filename = $filename | 0;
 $file_type = $file_type | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 __ZN11SimpleImage10freeMemoryEv($this);
 $0 = $this + 8 | 0;
 HEAP32[$0 >> 2] = 0;
 $1 = $this + 12 | 0;
 HEAP32[$1 >> 2] = 1;
 if (($file_type | 0) != 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = __Z7readPGMPKcRiS1_b($filename, $this, $this + 4 | 0, 0) | 0;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$1 >> 2] = 1;
 $$0 = (($4 | 0) == 0) << 31 >> 31;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $10 = 0, $13 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 13632;
 if ((HEAP8[$msg >> 0] & 1) == 0) {
  $7 = $msg + 1 | 0;
 } else {
  $7 = HEAP32[$msg + 8 >> 2] | 0;
 }
 $8 = _strlen($7 | 0) | 0;
 $10 = __Znaj($8 + 13 | 0) | 0;
 HEAP32[$10 + 4 >> 2] = $8;
 HEAP32[$10 >> 2] = $8;
 $13 = $10 + 12 | 0;
 HEAP32[$this + 4 >> 2] = $13;
 HEAP32[$10 + 8 >> 2] = 0;
 _memcpy($13 | 0, $7 | 0, $8 + 1 | 0) | 0;
 STACKTOP = sp;
 return;
}
function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $k$0 = 0, $k$0$len = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $len + 256 | 0;
 $3 = _memchr($1, 0, $2) | 0;
 if (($3 | 0) == 0) {
  $k$0 = $2;
 } else {
  $k$0 = $3 - $1 | 0;
 }
 $k$0$len = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0;
 HEAP32[$f + 4 >> 2] = $1 + $k$0$len;
 $11 = $1 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 STACKTOP = sp;
 return $k$0$len | 0;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
  STACKTOP = sp;
  return $$01$lcssa | 0;
 } else {
  $$012 = $low;
  $$03 = $dest;
 }
 while (1) {
  HEAP32[$$03 >> 2] = HEAP8[$$012 >> 0] | 0;
  $$012 = $$012 + 1 | 0;
  if (($$012 | 0) == ($high | 0)) {
   $$01$lcssa = $high;
   break;
  } else {
   $$03 = $$03 + 4 | 0;
  }
 }
 STACKTOP = sp;
 return $$01$lcssa | 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $2 = _uselocale(HEAP32[$0 >> 2] | 0) | 0;
 $3 = _mbtowc(0, 0, 4) | 0;
 if (($2 | 0) != 0) {
  _uselocale($2 | 0) | 0;
 }
 if (($3 | 0) == 0) {
  $6 = HEAP32[$0 >> 2] | 0;
  if (($6 | 0) == 0) {
   $$0 = 1;
  } else {
   $8 = _uselocale($6 | 0) | 0;
   if (($8 | 0) == 0) {
    $$0 = 0;
   } else {
    _uselocale($8 | 0) | 0;
    $$0 = 0;
   }
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (($6 & 8 | 0) == 0) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, sp = 0;
 sp = STACKTOP;
 if (($low | 0) == ($high | 0)) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;
  $$03 = $dest;
  while (1) {
   HEAP8[$$03 >> 0] = HEAP8[$$012 >> 0] | 0;
   $$012 = $$012 + 1 | 0;
   if (($$012 | 0) == ($high | 0)) {
    $$01$lcssa = $high;
    break;
   } else {
    $$03 = $$03 + 1 | 0;
   }
  }
 }
 STACKTOP = sp;
 return $$01$lcssa | 0;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $0 = 0, $12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 3]($0, $this, $code);
 if ((HEAP32[$0 + 4 >> 2] | 0) != (HEAP32[$condition + 4 >> 2] | 0)) {
  $12 = 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 $12 = (HEAP32[$0 >> 2] | 0) == (HEAP32[$condition >> 2] | 0);
 STACKTOP = sp;
 return $12 | 0;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $6 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $6;
   ___cxa_guard_release(5048);
  }
 }
 if (($1 | 0) == (HEAP32[1260] | 0)) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 _freelocale(HEAP32[$0 >> 2] | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $6 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $6;
   ___cxa_guard_release(5048);
  }
 }
 if (($1 | 0) == (HEAP32[1260] | 0)) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 _freelocale(HEAP32[$0 >> 2] | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$this + 24 >> 2] = $sb;
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0 & 1;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 4098;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 6;
 $8 = $this + 28 | 0;
 dest = $this + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;
 return;
}
function __ZNK11SimpleImage14getSqRegionSumEiiii($this, $x1, $y1, $w, $h) {
 $this = $this | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $1 = 0, $10 = 0, $2 = 0, $5 = 0, $8 = 0;
 $1 = (HEAP32[$this >> 2] | 0) + 1 | 0;
 $2 = Math_imul($1, $y1) | 0;
 $5 = HEAP32[$this + 28 >> 2] | 0;
 $8 = $w + $x1 | 0;
 $10 = Math_imul($1, $h + $y1 | 0) | 0;
 return (HEAP32[$5 + ($10 + $8 << 2) >> 2] | 0) + (HEAP32[$5 + ($2 + $x1 << 2) >> 2] | 0) - (HEAP32[$5 + ($10 + $x1 << 2) >> 2] | 0) - (HEAP32[$5 + ($2 + $8 << 2) >> 2] | 0) | 0;
}
function __ZNK11SimpleImage12getRegionSumEiiii($this, $x1, $y1, $w, $h) {
 $this = $this | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $1 = 0, $10 = 0, $2 = 0, $5 = 0, $8 = 0;
 $1 = (HEAP32[$this >> 2] | 0) + 1 | 0;
 $2 = Math_imul($1, $y1) | 0;
 $5 = HEAP32[$this + 16 >> 2] | 0;
 $8 = $w + $x1 | 0;
 $10 = Math_imul($1, $h + $y1 | 0) | 0;
 return (HEAP32[$5 + ($10 + $8 << 2) >> 2] | 0) + (HEAP32[$5 + ($2 + $x1 << 2) >> 2] | 0) - (HEAP32[$5 + ($10 + $x1 << 2) >> 2] | 0) - (HEAP32[$5 + ($2 + $8 << 2) >> 2] | 0) | 0;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _vsnprintf($__s, $__n, $__format, $__va) | 0;
 if (($0 | 0) == 0) {
  STACKTOP = sp;
  return $1 | 0;
 }
 _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}
function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $4 = 0, $5 = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 31]($catchType, $excpType, $temp) | 0;
 $5 = $4 & 1;
 if (!$4) {
  STACKTOP = sp;
  return $5 | 0;
 }
 HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $5 | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $6 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $6;
   ___cxa_guard_release(5048);
  }
 }
 if (($1 | 0) == (HEAP32[1260] | 0)) {
  STACKTOP = sp;
  return;
 }
 _freelocale(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $6 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $6;
   ___cxa_guard_release(5048);
  }
 }
 if (($1 | 0) == (HEAP32[1260] | 0)) {
  STACKTOP = sp;
  return;
 }
 _freelocale(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 5240;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ((HEAP8[5048] | 0) == 0) {
  if ((___cxa_guard_acquire(5048) | 0) != 0) {
   $6 = _newlocale(2147483647, 5056, 0) | 0;
   HEAP32[1260] = $6;
   ___cxa_guard_release(5048);
  }
 }
 if (($1 | 0) == (HEAP32[1260] | 0)) {
  STACKTOP = sp;
  return;
 }
 _freelocale(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _vasprintf($__s, $__format, $__va) | 0;
 if (($0 | 0) == 0) {
  STACKTOP = sp;
  return $1 | 0;
 }
 _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}
function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $4 = 0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 dest = $f + 0 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$f + 32 >> 2] = 28;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $4 = _MUSL_vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $4 | 0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _vsscanf($__s, $__format, $__va) | 0;
 if (($0 | 0) == 0) {
  STACKTOP = sp;
  return $1 | 0;
 }
 _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}
function __ZN19HistogramClassifier8classifyERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $5 = 0.0, sp = 0;
 sp = STACKTOP;
 $5 = +(~~+FUNCTION_TABLE_diiiiid[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 7]($this, $img, $hog, $startX, $startY, $scale) | 0);
 STACKTOP = sp;
 return ($5 > +HEAPF32[$this + 8 >> 2] ? 1 : -1) | 0;
}
function __ZN23HOGRegressionClassifier4saveEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN10Classifier4saveEP8_IO_FILE($this, $fil);
 _fwrite($this + 28 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 32 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 36 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 40 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 44 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 48 | 0, 4, 1, $fil | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN14HaarClassifier8classifyERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $5 = 0.0, sp = 0;
 sp = STACKTOP;
 $5 = +(~~+FUNCTION_TABLE_diiiiid[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 7]($this, $img, $hog, $startX, $startY, $scale) | 0);
 STACKTOP = sp;
 return ($5 > +HEAPF32[$this + 8 >> 2] ? 1 : -1) | 0;
}
function __ZN13HOGClassifier8classifyERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $5 = 0.0, sp = 0;
 sp = STACKTOP;
 $5 = +(~~+FUNCTION_TABLE_diiiiid[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 7]($this, $img, $hog, $startX, $startY, $scale) | 0);
 STACKTOP = sp;
 return ($5 > +HEAPF32[$this + 8 >> 2] ? 1 : -1) | 0;
}
function __ZN19HistogramClassifier4saveEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN10Classifier4saveEP8_IO_FILE($this, $fil);
 _fwrite($this + 28 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 32 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 36 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 40 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 44 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 48 | 0, 4, 1, $fil | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN23HOGRegressionClassifier4loadEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN10Classifier4loadEP8_IO_FILE($this, $fil);
 _fread($this + 28 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 32 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 36 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 40 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 44 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 48 | 0, 4, 1, $fil | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $10 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5224) | 0;
 HEAP32[$this + 36 >> 2] = $3;
 $10 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $10;
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $10 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5216) | 0;
 HEAP32[$this + 36 >> 2] = $3;
 $10 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 HEAP8[$this + 44 >> 0] = $10;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5608] | 0) != 0) {
  STACKTOP = sp;
  return 5592;
 }
 if ((___cxa_guard_acquire(5608) | 0) == 0) {
  STACKTOP = sp;
  return 5592;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(5592, 5616, _wcslen(5616) | 0);
 ___cxa_atexit(133, 5592, ___dso_handle | 0) | 0;
 ___cxa_guard_release(5608);
 STACKTOP = sp;
 return 5592;
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5976] | 0) != 0) {
  STACKTOP = sp;
  return 5960;
 }
 if ((___cxa_guard_acquire(5976) | 0) == 0) {
  STACKTOP = sp;
  return 5960;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(5960, 5984, _wcslen(5984) | 0);
 ___cxa_atexit(133, 5960, ___dso_handle | 0) | 0;
 ___cxa_guard_release(5976);
 STACKTOP = sp;
 return 5960;
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5824] | 0) != 0) {
  STACKTOP = sp;
  return 5808;
 }
 if ((___cxa_guard_acquire(5824) | 0) == 0) {
  STACKTOP = sp;
  return 5808;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(5808, 5832, _wcslen(5832) | 0);
 ___cxa_atexit(133, 5808, ___dso_handle | 0) | 0;
 ___cxa_guard_release(5824);
 STACKTOP = sp;
 return 5808;
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5712] | 0) != 0) {
  STACKTOP = sp;
  return 5696;
 }
 if ((___cxa_guard_acquire(5712) | 0) == 0) {
  STACKTOP = sp;
  return 5696;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(5696, 5720, _wcslen(5720) | 0);
 ___cxa_atexit(133, 5696, ___dso_handle | 0) | 0;
 ___cxa_guard_release(5712);
 STACKTOP = sp;
 return 5696;
}
function __ZN19HistogramClassifier4loadEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN10Classifier4loadEP8_IO_FILE($this, $fil);
 _fread($this + 28 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 32 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 36 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 40 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 44 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 48 | 0, 4, 1, $fil | 0) | 0;
 STACKTOP = sp;
 return;
}
function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if ((HEAP32[$f + 8 >> 2] | 0) == 0) {
  if ((___toread($f) | 0) == 0) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) == 1) {
   $$0 = HEAPU8[$c >> 0] | 0;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}
function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$014 = 0, $$023 = 0, $$05 = 0, sp = 0;
 sp = STACKTOP;
 if (($n | 0) == 0) {
  STACKTOP = sp;
  return $d | 0;
 } else {
  $$014 = $n;
  $$023 = $s;
  $$05 = $d;
 }
 while (1) {
  $$014 = $$014 + -1 | 0;
  HEAP32[$$05 >> 2] = HEAP32[$$023 >> 2];
  if (($$014 | 0) == 0) {
   break;
  } else {
   $$023 = $$023 + 4 | 0;
   $$05 = $$05 + 4 | 0;
  }
 }
 STACKTOP = sp;
 return $d | 0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5936] | 0) != 0) {
  STACKTOP = sp;
  return 5920;
 }
 if ((___cxa_guard_acquire(5936) | 0) == 0) {
  STACKTOP = sp;
  return 5920;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(5920, 5944, 11);
 ___cxa_atexit(121, 5920, ___dso_handle | 0) | 0;
 ___cxa_guard_release(5936);
 STACKTOP = sp;
 return 5920;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5776] | 0) != 0) {
  STACKTOP = sp;
  return 5760;
 }
 if ((___cxa_guard_acquire(5776) | 0) == 0) {
  STACKTOP = sp;
  return 5760;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(5760, 5784, 20);
 ___cxa_atexit(121, 5760, ___dso_handle | 0) | 0;
 ___cxa_guard_release(5776);
 STACKTOP = sp;
 return 5760;
}
function __ZN23HOGRegressionClassifier8classifyERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $4 = 0, sp = 0;
 sp = STACKTOP;
 $4 = +FUNCTION_TABLE_diiiiid[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 7]($this, $img, $hog, $startX, $startY, $scale) > .5;
 STACKTOP = sp;
 return ($4 ? 1 : -1) | 0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5568] | 0) != 0) {
  STACKTOP = sp;
  return 5552;
 }
 if ((___cxa_guard_acquire(5568) | 0) == 0) {
  STACKTOP = sp;
  return 5552;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(5552, 5576, 8);
 ___cxa_atexit(121, 5552, ___dso_handle | 0) | 0;
 ___cxa_guard_release(5568);
 STACKTOP = sp;
 return 5552;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[5672] | 0) != 0) {
  STACKTOP = sp;
  return 5656;
 }
 if ((___cxa_guard_acquire(5672) | 0) == 0) {
  STACKTOP = sp;
  return 5656;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(5656, 5680, 8);
 ___cxa_atexit(121, 5656, ___dso_handle | 0) | 0;
 ___cxa_guard_release(5672);
 STACKTOP = sp;
 return 5656;
}
function __ZN23HOGRegressionClassifier8responseERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 var $4 = 0.0, sp = 0;
 sp = STACKTOP;
 $4 = +FUNCTION_TABLE_diiiiid[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 7]($this, $img, $hog, $startX, $startY, $scale) * 1.0e3;
 STACKTOP = sp;
 return +$4;
}
function __ZN23HOGRegressionClassifier5checkEii($this, $imgH, $imgW) {
 $this = $this | 0;
 $imgH = $imgH | 0;
 $imgW = $imgW | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 if (((HEAP32[$this + 36 >> 2] | 0) + (HEAP32[$this + 28 >> 2] | 0) | 0) < ($imgW | 0)) {
  if (((HEAP32[$this + 40 >> 2] | 0) + (HEAP32[$this + 32 >> 2] | 0) | 0) < ($imgH | 0)) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN13HOGClassifier5checkEii($this, $imgH, $imgW) {
 $this = $this | 0;
 $imgH = $imgH | 0;
 $imgW = $imgW | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 if (((HEAP32[$this + 36 >> 2] | 0) + (HEAP32[$this + 28 >> 2] | 0) | 0) < ($imgW + -1 | 0)) {
  if (((HEAP32[$this + 40 >> 2] | 0) + (HEAP32[$this + 32 >> 2] | 0) | 0) < ($imgH + -1 | 0)) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZSt9terminatev() {
 var $0 = 0, $17 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if (($0 | 0) != 0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if (($2 | 0) != 0) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0);
   }
  }
 }
 $17 = HEAP32[3258] | 0;
 HEAP32[3258] = $17 + 0;
 __ZSt11__terminatePFvvE($17);
}
function __ZN19HistogramClassifier5checkEii($this, $imgH, $imgW) {
 $this = $this | 0;
 $imgH = $imgH | 0;
 $imgW = $imgW | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 if (((HEAP32[$this + 44 >> 2] | 0) + (HEAP32[$this + 36 >> 2] | 0) | 0) < ($imgW | 0)) {
  if (((HEAP32[$this + 48 >> 2] | 0) + (HEAP32[$this + 40 >> 2] | 0) | 0) < ($imgH | 0)) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else {
  _memcpy(dest, src, num) | 0;
 }
 return dest | 0;
}
function __ZN14HaarClassifier5checkEii($this, $imgH, $imgW) {
 $this = $this | 0;
 $imgH = $imgH | 0;
 $imgW = $imgW | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 if (((HEAP32[$this + 76 >> 2] | 0) + (HEAP32[$this + 60 >> 2] | 0) | 0) < ($imgW | 0)) {
  if (((HEAP32[$this + 80 >> 2] | 0) + (HEAP32[$this + 64 >> 2] | 0) | 0) < ($imgH | 0)) {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}
function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $2 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$f + 104 >> 2] = $lim;
 $2 = HEAP32[$f + 8 >> 2] | 0;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $7 = $2 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $7;
 if (($lim | 0) != 0 & ($7 | 0) > ($lim | 0)) {
  HEAP32[$f + 100 >> 2] = $4 + $lim;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$f + 100 >> 2] = $2;
  STACKTOP = sp;
  return;
 }
}
function _emscripten_replace_memory(_HEAP8, _HEAP16, _HEAP32, _HEAPU8, _HEAPU16, _HEAPU32, _HEAPF32, _HEAPF64) {
 _HEAP8 = _HEAP8;
 _HEAP16 = _HEAP16;
 _HEAP32 = _HEAP32;
 _HEAPU8 = _HEAPU8;
 _HEAPU16 = _HEAPU16;
 _HEAPU32 = _HEAPU32;
 _HEAPF32 = _HEAPF32;
 _HEAPF64 = _HEAPF64;
 HEAP8 = _HEAP8;
 HEAP16 = _HEAP16;
 HEAP32 = _HEAP32;
 HEAPU8 = _HEAPU8;
 HEAPU16 = _HEAPU16;
 HEAPU32 = _HEAPU32;
 HEAPF32 = _HEAPF32;
 HEAPF64 = _HEAPF64;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[$__nm >> 0] & 1) == 0) {
  $7 = $__nm + 1 | 0;
 } else {
  $7 = HEAP32[$__nm + 8 >> 2] | 0;
 }
 $8 = _catopen($7 | 0, 1) | 0;
 STACKTOP = sp;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP8[$__nm >> 0] & 1) == 0) {
  $7 = $__nm + 1 | 0;
 } else {
  $7 = HEAP32[$__nm + 8 >> 2] | 0;
 }
 $8 = _catopen($7 | 0, 1) | 0;
 STACKTOP = sp;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($ev | 0) == 1) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 2720, 35);
  STACKTOP = sp;
  return;
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result, $this, $ev);
  STACKTOP = sp;
  return;
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = $this + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $6 + 4;
 $$0 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = $this + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $6 + 1;
 $$0 = HEAPU8[$6 >> 0] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN13HOGClassifier4saveEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN10Classifier4saveEP8_IO_FILE($this, $fil);
 _fwrite($this + 44 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 28 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 32 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 36 | 0, 4, 1, $fil | 0) | 0;
 _fwrite($this + 40 | 0, 4, 1, $fil | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 13632;
 $0 = _strlen($msg | 0) | 0;
 $2 = __Znaj($0 + 13 | 0) | 0;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $0;
 $6 = $2 + 12 | 0;
 HEAP32[$this + 4 >> 2] = $6;
 HEAP32[$2 + 8 >> 2] = 0;
 _memcpy($6 | 0, $msg | 0, $0 + 1 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN13HOGClassifier4loadEP8_IO_FILE($this, $fil) {
 $this = $this | 0;
 $fil = $fil | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN10Classifier4loadEP8_IO_FILE($this, $fil);
 _fread($this + 44 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 28 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 32 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 36 | 0, 4, 1, $fil | 0) | 0;
 _fread($this + 40 | 0, 4, 1, $fil | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $2 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 13608;
 $0 = _strlen($msg | 0) | 0;
 $2 = __Znaj($0 + 13 | 0) | 0;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $0;
 $6 = $2 + 12 | 0;
 HEAP32[$this + 4 >> 2] = $6;
 HEAP32[$2 + 8 >> 2] = 0;
 _memcpy($6 | 0, $msg | 0, $0 + 1 | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZN23HOGRegressionClassifierD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 $0 = $this + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$1 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 13632;
 $0 = $this + 4 | 0;
 $1 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + -1;
 if (($2 + -1 | 0) >= 0) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 __ZdlPv((HEAP32[$0 >> 2] | 0) + -12 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 13608;
 $0 = $this + 4 | 0;
 $1 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + -1;
 if (($2 + -1 | 0) >= 0) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 __ZdlPv((HEAP32[$0 >> 2] | 0) + -12 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 13608;
 $0 = $this + 4 | 0;
 $1 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + -1;
 if (($2 + -1 | 0) >= 0) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 __ZdlPv((HEAP32[$0 >> 2] | 0) + -12 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZN19HistogramClassifierD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 $0 = $this + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$1 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}
function __ZN13HOGClassifierD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 $0 = $this + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$1 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZN10ClassifierD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 $0 = $this + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  __ZdlPv($this);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$1 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $1 + -1;
 if (($1 | 0) != 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 255]($this);
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(688) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(864) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(1040) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(1216) | 0;
 STACKTOP = sp;
 return;
}
function __ZN12HOGExtractor9updateHOGER11SimpleImage($this, $image) {
 $this = $this | 0;
 $image = $image | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN12HOGExtractor10initializeEii($this, HEAP32[$image >> 2] | 0, HEAP32[$image + 4 >> 2] | 0);
 __ZN12HOGExtractor24createEdgeOrientationMapER11SimpleImage($this, $image);
 __ZN12HOGExtractor20updateIntegralImagesEv($this);
 STACKTOP = sp;
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $5 = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[$code + 4 >> 2] | 0) != ($this | 0)) {
  $5 = 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 $5 = (HEAP32[$code >> 2] | 0) == ($condition | 0);
 STACKTOP = sp;
 return $5 | 0;
}
function __ZN23HOGRegressionClassifierD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 $0 = $this + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$1 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 13632;
 $0 = $this + 4 | 0;
 $1 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + -1;
 if (($2 + -1 | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv((HEAP32[$0 >> 2] | 0) + -12 | 0);
 STACKTOP = sp;
 return;
}
function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $6 = 0, $l$ = 0, sp = 0;
 sp = STACKTOP;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $6 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $6 >>> 0 > $l >>> 0 ? $l : $6;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 STACKTOP = sp;
 return $l | 0;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 13608;
 $0 = $this + 4 | 0;
 $1 = (HEAP32[$0 >> 2] | 0) + -4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + -1;
 if (($2 + -1 | 0) >= 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv((HEAP32[$0 >> 2] | 0) + -12 | 0);
 STACKTOP = sp;
 return;
}
function __ZN19HistogramClassifierD1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 $0 = $this + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$1 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}
function __ZN13HOGClassifierD1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 $0 = $this + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$1 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if (($1 | 0) == 0) {
  $5 = 1;
 } else {
  $3 = _uselocale($1 | 0) | 0;
  if (($3 | 0) == 0) {
   $5 = 4;
  } else {
   _uselocale($3 | 0) | 0;
   $5 = 4;
  }
 }
 STACKTOP = sp;
 return $5 | 0;
}
function __ZN10ClassifierD1Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 568;
 $0 = $this + 24 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$1 + 60 >> 2] | 0);
 _free(HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0);
 _free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}
function _llvm_ctlz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[ctlz_i8 + (x >>> 24) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[ctlz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[ctlz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[ctlz_i8 + (x & 255) >> 0] | 0) + 24 | 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}
function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$012 = 0, $$03 = 0, sp = 0;
 sp = STACKTOP;
 if (($n | 0) != 0) {
  $$012 = $n;
  $$03 = $d;
  while (1) {
   $$012 = $$012 + -1 | 0;
   HEAP32[$$03 >> 2] = $c;
   if (($$012 | 0) == 0) {
    break;
   } else {
    $$03 = $$03 + 4 | 0;
   }
  }
 }
 STACKTOP = sp;
 return $d | 0;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $0 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if (!($c >>> 0 < 128)) {
  $6 = 0;
  STACKTOP = sp;
  return $6 | 0;
 }
 $0 = ___ctype_b_loc() | 0;
 $6 = (HEAP16[(HEAP32[$0 >> 2] | 0) + ($c << 1) >> 1] & $m) << 16 >> 16 != 0;
 STACKTOP = sp;
 return $6 | 0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if (!($c << 24 >> 24 > -1)) {
  $6 = $c;
  STACKTOP = sp;
  return $6 | 0;
 }
 $0 = ___ctype_tolower_loc() | 0;
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($c << 24 >> 24 << 2) >> 2] & 255;
 STACKTOP = sp;
 return $6 | 0;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 if (!($c << 24 >> 24 > -1)) {
  $6 = $c;
  STACKTOP = sp;
  return $6 | 0;
 }
 $0 = ___ctype_toupper_loc() | 0;
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + (($c & 255) << 2) >> 2] & 255;
 STACKTOP = sp;
 return $6 | 0;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[_stderr >> 2] | 0;
 _vfprintf($0 | 0, $format | 0, $list | 0) | 0;
 _fputc(10, $0 | 0) | 0;
 _abort();
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 if (!($c >>> 0 < 128)) {
  $4 = $c;
  STACKTOP = sp;
  return $4 | 0;
 }
 $0 = ___ctype_toupper_loc() | 0;
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($c << 2) >> 2] | 0;
 STACKTOP = sp;
 return $4 | 0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 if (!($c >>> 0 < 128)) {
  $4 = $c;
  STACKTOP = sp;
  return $4 | 0;
 }
 $0 = ___ctype_tolower_loc() | 0;
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($c << 2) >> 2] | 0;
 STACKTOP = sp;
 return $4 | 0;
}
function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, _wcslen($__s) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}
function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}
function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 FUNCTION_TABLE_viiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0);
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 5432, _wcslen(5432) | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 5400, _wcslen(5400) | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 5168;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if (($1 | 0) != 0) {
  if ((HEAP8[$this + 12 >> 0] | 0) != 0) {
   __ZdaPv($1);
  }
 }
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev($this + ($2 + 4) | 0);
 __ZdlPv($this + $2 | 0);
 STACKTOP = sp;
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev($this + ($2 + 4) | 0);
 __ZdlPv($this + $2 | 0);
 STACKTOP = sp;
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev($this + ($2 + 8) | 0);
 __ZdlPv($this + $2 | 0);
 STACKTOP = sp;
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_baseD2Ev($this + ($2 + 8) | 0);
 __ZdlPv($this + $2 | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 67109634;
 HEAP8[$agg$result + 1 >> 0] = 262147;
 HEAP8[$agg$result + 2 >> 0] = 1024;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 67109634;
 HEAP8[$agg$result + 1 >> 0] = 262147;
 HEAP8[$agg$result + 2 >> 0] = 1024;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 67109634;
 HEAP8[$agg$result + 1 >> 0] = 262147;
 HEAP8[$agg$result + 2 >> 0] = 1024;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 67109634;
 HEAP8[$agg$result + 1 >> 0] = 262147;
 HEAP8[$agg$result + 2 >> 0] = 1024;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 67109634;
 HEAP8[$agg$result + 1 >> 0] = 262147;
 HEAP8[$agg$result + 2 >> 0] = 1024;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 67109634;
 HEAP8[$agg$result + 1 >> 0] = 262147;
 HEAP8[$agg$result + 2 >> 0] = 1024;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 67109634;
 HEAP8[$agg$result + 1 >> 0] = 262147;
 HEAP8[$agg$result + 2 >> 0] = 1024;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 67109634;
 HEAP8[$agg$result + 1 >> 0] = 262147;
 HEAP8[$agg$result + 2 >> 0] = 1024;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((_pthread_once(13224, 3) | 0) == 0) {
  $3 = _pthread_getspecific(HEAP32[3304] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  _abort_message(13232, sp);
 }
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45);
 STACKTOP = sp;
 return;
}
function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result, $this + 16 | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result, $this + 12 | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 5424, 5);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 5392, 4);
 STACKTOP = sp;
 return;
}
function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($p);
 if ((_pthread_setspecific(HEAP32[3304] | 0, 0) | 0) == 0) {
  STACKTOP = sp;
  return;
 } else {
  _abort_message(13344, sp);
 }
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__16locale8__globalEv() | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$this >> 2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 STACKTOP = sp;
 return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 5168;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if (($1 | 0) != 0) {
  if ((HEAP8[$this + 12 >> 0] | 0) != 0) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;
 return;
}
function dynCall_viiiiiid(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = +a7;
 FUNCTION_TABLE_viiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, +a7);
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($this | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 255]($this);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $3 = 0;
 $3 = $end - $frm | 0;
 return ($3 >>> 0 < $mx >>> 0 ? $3 : $mx) | 0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[$this >> 0] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 if ((HEAP8[$this >> 0] & 1) == 0) {
  STACKTOP = sp;
  return;
 }
 __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 STACKTOP = sp;
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}
function __ZN10Classifier14getProbabilityERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 return 0.0;
}
function __ZN13HOGClassifier8responseERK11SimpleImageRK12HOGExtractoriif($this, $img, $hog, $startX, $startY, $scale) {
 $this = $this | 0;
 $img = $img | 0;
 $hog = $hog | 0;
 $startX = $startX | 0;
 $startY = $startY | 0;
 $scale = +$scale;
 return 0.0;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc($0, 2400);
 HEAP32[$0 >> 2] = 13688;
 ___cxa_throw($0 | 0, 13728, 108);
}
function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc($0, 5032);
 HEAP32[$0 >> 2] = 13688;
 ___cxa_throw($0 | 0, 13728, 108);
}
function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 5360;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 16 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 5320;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 12 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function dynCall_diiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return +FUNCTION_TABLE_diiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6);
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 STACKTOP = sp;
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 STACKTOP = sp;
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 STACKTOP = sp;
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 STACKTOP = sp;
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function __ZNSt3__16localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;
 return;
}
function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 if (($type | 0) == 0) {
  $3 = 0;
 } else {
  $3 = (___dynamic_cast($type, 13920, 14088, 0) | 0) != 0;
 }
 STACKTOP = sp;
 return $3 & 1 | 0;
}
function dynCall_viiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 FUNCTION_TABLE_viiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6);
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 HEAP32[$agg$result >> 2] = $ev;
 HEAP32[$agg$result + 4 >> 2] = $this;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((_pthread_key_create(13216, 134) | 0) == 0) {
  STACKTOP = sp;
  return;
 } else {
  _abort_message(13288, sp);
 }
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 5360;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 16 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 5320;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 12 | 0);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2488;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2424;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}
function _wcslen($s) {
 $s = $s | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while (1) {
  if ((HEAP32[$$0 >> 2] | 0) == 0) {
   break;
  } else {
   $$0 = $$0 + 4 | 0;
  }
 }
 STACKTOP = sp;
 return $$0 - $s >> 2 | 0;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__16localeC2ERKS0_($agg$result, $this + 28 | 0);
 STACKTOP = sp;
 return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function _strtoull_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strtoull($s, $p, $base) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2488;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2424;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}
function _strtoll_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strtoll($s, $p, $base) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 if (($s | 0) == 0) {
  $$0 = 0;
 } else {
  $$0 = _wcrtomb($s, $wc, 0) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var sp = 0;
 sp = STACKTOP;
 _catclose((($__c | 0) == -1 ? -1 : $__c << 1) | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var sp = 0;
 sp = STACKTOP;
 _catclose((($__c | 0) == -1 ? -1 : $__c << 1) | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2488;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2424;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 $2 = _mbrtowc(0, $s, $n, ($st | 0) != 0 ? $st : 13016) | 0;
 STACKTOP = sp;
 return $2 | 0;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2488;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2424;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__110__stdinbufIwE9__getcharEb($this, 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__110__stdinbufIcE9__getcharEb($this, 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt13runtime_errorC2EPKc($0, $msg);
 ___cxa_throw($0 | 0, 13768, 110);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__110__stdinbufIwE9__getcharEb($this, 1) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__110__stdinbufIcE9__getcharEb($this, 1) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __GLOBAL__I_a() {
 var sp = 0;
 sp = STACKTOP;
 HEAP32[184 >> 2] = 0;
 HEAP32[188 >> 2] = 0;
 HEAP32[192 >> 2] = 0;
 ___cxa_atexit(121, 184, ___dso_handle | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = ___string_read($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$this >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2488;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2424;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2488;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this >> 2] = 2424;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}
function b7(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 abort(7);
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function b13(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(13);
 return 0;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(13472, sp);
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[1284] | 0;
 HEAP32[1284] = $0 + 1;
 HEAP32[$this + 4 >> 2] = $0 + 1;
 return;
}
function b15(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(15);
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 return;
}
function _isxdigit($c) {
 $c = $c | 0;
 var $4 = 0;
 if (($c + -48 | 0) >>> 0 < 10) {
  $4 = 1;
 } else {
  $4 = (($c | 32) + -97 | 0) >>> 0 < 6;
 }
 return $4 & 1 | 0;
}
function __GLOBAL__I_a161() {
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 ___cxa_atexit(122, 1304, ___dso_handle | 0) | 0;
 STACKTOP = sp;
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 3](a1 | 0, a2 | 0, a3 | 0);
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 7 & -8;
 return ret | 0;
}
function _mbsinit($st) {
 $st = $st | 0;
 var $4 = 0;
 if (($st | 0) == 0) {
  $4 = 1;
 } else {
  $4 = (HEAP32[$st >> 2] | 0) == 0;
 }
 return $4 & 1 | 0;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(4) | 0;
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw($0 | 0, 13456, 106);
}
function _isxdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = _isxdigit($c) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function b3(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(3);
}
function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr >> 0] | 0) {
  curr = curr + 1 | 0;
 }
 return curr - ptr | 0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}
function _isspace($c) {
 $c = $c | 0;
 var $4 = 0;
 if (($c | 0) == 32) {
  $4 = 1;
 } else {
  $4 = ($c + -9 | 0) >>> 0 < 5;
 }
 return $4 & 1 | 0;
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function b9(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = +p6;
 abort(9);
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}
function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $0 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = +_scalbn($x, $n);
 STACKTOP = sp;
 return +$0;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function b0(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(0);
 return 0.0;
}
function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = +_frexp($x, $e);
 STACKTOP = sp;
 return +$0;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function b4(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(4);
 return 0;
}
function __Znaj($size) {
 $size = $size | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 $0 = __Znwj($size) | 0;
 STACKTOP = sp;
 return $0 | 0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 var sp = 0;
 sp = STACKTOP;
 if (($ptr | 0) != 0) {
  _free($ptr);
 }
 STACKTOP = sp;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
}
function b16(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(16);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function b11(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(11);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;
 return;
}
function b18(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(18);
 return 0;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0;
}
function b2(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(2);
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[3392] | 0;
 HEAP32[3392] = $0 + 0;
 return $0 | 0;
}
function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 var sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}
function b14(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(14);
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0);
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1;
}
function b19(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(19);
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}
function _isdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 13408;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 13792;
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this | 0;
 return 2704;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}
function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1);
 return 0;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this | 0;
 return;
}
function b10(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(10);
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 13424;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this | 0;
 return 13808;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(17);
 return 0;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this | 0;
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}
function b6(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(6);
}
function b8(p0) {
 p0 = p0 | 0;
 abort(8);
 return 0;
}
function getTempRet0() {
 return tempRet0 | 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b5(p0) {
 p0 = p0 | 0;
 abort(5);
}
function b12() {
 abort(12);
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_diiiiid = [b0,__ZN14HaarClassifier14getProbabilityERK11SimpleImageRK12HOGExtractoriif,__ZN14HaarClassifier8responseERK11SimpleImageRK12HOGExtractoriif,__ZN10Classifier14getProbabilityERK11SimpleImageRK12HOGExtractoriif,__ZN13HOGClassifier8responseERK11SimpleImageRK12HOGExtractoriif,__ZN19HistogramClassifier8responseERK11SimpleImageRK12HOGExtractoriif,__ZN23HOGRegressionClassifier14getProbabilityERK11SimpleImageRK12HOGExtractoriif,__ZN23HOGRegressionClassifier8responseERK11SimpleImageRK12HOGExtractoriif];
  var FUNCTION_TABLE_iiii = [b1,__ZN14HaarClassifier5checkEii,__ZN13HOGClassifier5checkEii,__ZN19HistogramClassifier5checkEii,__ZN23HOGRegressionClassifier5checkEii,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,_do_read
  ,b1,b1,b1];
  var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
  var FUNCTION_TABLE_viiiiiii = [b3,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_iiiiiid = [b4,__ZN14HaarClassifier8classifyERK11SimpleImageRK12HOGExtractoriif,__ZN13HOGClassifier8classifyERK11SimpleImageRK12HOGExtractoriif,__ZN19HistogramClassifier8classifyERK11SimpleImageRK12HOGExtractoriif,__ZN23HOGRegressionClassifier8classifyERK11SimpleImageRK12HOGExtractoriif,b4,b4,b4];
  var FUNCTION_TABLE_vi = [b5,__ZN14HaarClassifierD1Ev,__ZN14HaarClassifierD0Ev,__ZN13HOGClassifierD1Ev,__ZN13HOGClassifierD0Ev,__ZN19HistogramClassifierD1Ev,__ZN19HistogramClassifierD0Ev,__ZN23HOGRegressionClassifierD2Ev,__ZN23HOGRegressionClassifierD0Ev,__ZN10ClassifierD1Ev,__ZN10ClassifierD0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev
  ,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev
  ,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev
  ,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev
  ,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__112__do_nothingEPv,_free,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_vii = [b6,__ZN14HaarClassifier4saveEP8_IO_FILE,__ZN14HaarClassifier4loadEP8_IO_FILE,__ZN13HOGClassifier4saveEP8_IO_FILE,__ZN13HOGClassifier4loadEP8_IO_FILE,__ZN19HistogramClassifier4saveEP8_IO_FILE,__ZN19HistogramClassifier4loadEP8_IO_FILE,__ZN23HOGRegressionClassifier4saveEP8_IO_FILE,__ZN23HOGRegressionClassifier4loadEP8_IO_FILE,__ZN10Classifier4saveEP8_IO_FILE,__ZN10Classifier4loadEP8_IO_FILE,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv
  ,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viiiiiiiii = [b7,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b7];
  var FUNCTION_TABLE_ii = [b8,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv
  ,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv
  ,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv];
  var FUNCTION_TABLE_viiiiiid = [b9,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b9];
  var FUNCTION_TABLE_viii = [b10,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,b10];
  var FUNCTION_TABLE_viiiiid = [b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b11,b11,b11];
  var FUNCTION_TABLE_v = [b12,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
  var FUNCTION_TABLE_iiiiiiiii = [b13,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b13,b13,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_iiiii = [b14,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b14,b14];
  var FUNCTION_TABLE_viiiiiiii = [b15,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b15];
  var FUNCTION_TABLE_viiiiii = [b16,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
  var FUNCTION_TABLE_iii = [b17,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,b17];
  var FUNCTION_TABLE_iiiiii = [b18,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18];
  var FUNCTION_TABLE_viiii = [b19,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];

    return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _emscripten_replace_memory: _emscripten_replace_memory, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a161: __GLOBAL__I_a161, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_diiiiid: dynCall_diiiiid, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viii: dynCall_viii, dynCall_viiiiid: dynCall_viiiiid, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_diiiiid": invoke_diiiiid, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viii": invoke_viii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_exp": _exp, "_getchar": _getchar, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_pthread_key_create": _pthread_key_create, "_fread": _fread, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_guard_acquire": ___cxa_guard_acquire, "_atan2": _atan2, "_open": _open, "_vfprintf": _vfprintf, "_ungetc": _ungetc, "_catopen": _catopen, "___cxa_atexit": ___cxa_atexit, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_strftime_l": _strftime_l, "_fscanf": _fscanf, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_uselocale": _uselocale, "_catgets": _catgets, "_newlocale": _newlocale, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_freelocale": _freelocale, "__reallyNegative": __reallyNegative, "_close": _close, "_strftime": _strftime, "__arraySum": __arraySum, "__formatString": __formatString, "___ctype_tolower_loc": ___ctype_tolower_loc, "_fprintf": _fprintf, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_pread": _pread, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_mkport": _mkport, "_fclose": _fclose, "_sqrtf": _sqrtf, "_getc": _getc, "_write": _write, "__isLeapYear": __isLeapYear, "_fsync": _fsync, "___errno_location": ___errno_location, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "_copysign": _copysign, "_fgetc": _fgetc, "_fputc": _fputc, "__scanString": __scanString, "_sysconf": _sysconf, "__getFloat": __getFloat, "_copysignl": _copysignl, "_abort": _abort, "_catclose": _catclose, "_fwrite": _fwrite, "___cxa_throw": ___cxa_throw, "_pthread_mutex_lock": _pthread_mutex_lock, "_strerror": _strerror, "_fgets": _fgets, "_atexit": _atexit, "_sqrt": _sqrt, "_fopen": _fopen, "_time": _time, "_read": _read, "_fmodl": _fmodl, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
  var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a161 = Module["__GLOBAL__I_a161"] = asm["__GLOBAL__I_a161"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_diiiiid = Module["dynCall_diiiiid"] = asm["dynCall_diiiiid"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






